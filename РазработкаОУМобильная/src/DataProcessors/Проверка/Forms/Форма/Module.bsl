#Если  МобильноеПриложениеКлиент  тогда
&НаКлиенте
Процедура Сканировать(Команда)
	Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
		Сообщить("не поддерживает сканирование штрихкода");
		Возврат;
	КонецЕсли; 	
	ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
	СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Наведите камеру на штрихкод", ОбработчикСканирования, ОбработчикЗакрытия,ТипШтрихКода.Двухмерный);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	Перем СтрокаШтрихкода1, ИнформацияБирки;
	
	Если Результат Тогда
		СтрокаШтрихкода1 = СтрЗаменить( Штрихкод, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
Сообщить( "ОбработкаСканирования ["+СтрокаШтрихкода1+"]");

		Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			Объект.ДанныеБирки.Очистить();
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				НоваяСтрока = Объект.ДанныеБирки.Добавить();
				ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		ЗакрытьИнтерфейс = Истина;
	Иначе
		Текст = "Ошибка: " + Сообщение;
	КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	КонецЕсли;
	//Сообщить(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
	//Сообщить("Закрывается интерфейс сканирования");
КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ПрочитатьИзСтроки(Команда)
	Перем СтрокаШтрихкода1, ИнформацияБирки;
	
	Сообщение = "";
	
	Если ПрочитатьСтрокуЭтикетки( Объект.СтрокаШтрихКод, ИнформацияБирки) тогда
		Объект.ДанныеБирки.Очистить();
		Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
			НоваяСтрока = Объект.ДанныеБирки.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
&НаСервере
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
&НаСервере
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	
	Пока Не ПустаяСтрока( ПраваяЧасть) Цикл
		Массив.Добавить( СокрЛП( Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	КонецЦикла; 
	
	Массив.Добавить( СокрЛП( Стр));

	Возврат( Массив);
	
КонецФункции // МассивИзСтроки() 

//******************************************* Печать и чтение этикетки *******************************************************

&НаСервере
Функция ПолучитьИменаКолонокВерсииЭтикетки( Версия) Экспорт
	Имена = Новый Структура;

	Имена.Вставить("ПоСвойствам");
	Имена.Вставить("РабочийЦентр");
	Имена.Вставить("Номенклатура");
	Имена.Вставить("МаркаСплава");
	Имена.Вставить("ГруппаПродукции");
	Имена.Вставить("ХарактеристикаНоменклатуры");
	Имена.Вставить("СерияНоменклатуры");
	Имена.Вставить("Состояние");
	Имена.Вставить("Коэффициент");
	Имена.Вставить("Коэффициент1");
	Имена.Вставить("ЕдиницаИзмерения1");
	Имена.Вставить("ПаспортПартии");
	Имена.Вставить("Количество");
	Имена.Вставить("Количество1");
	Имена.Вставить("КоличествоМест");
	Имена.Вставить("Тара");
	Имена.Вставить("КоличествоТара");
	Имена.Вставить("Размер1");
	Имена.Вставить("Размер2");
	Имена.Вставить("Размер3");
	Имена.Вставить("Размер4");
	Имена.Вставить("Размер5");
	Имена.Вставить("ДополнительнаяИнформация");
	Имена.Вставить("Маркировка");
	Имена.Вставить("ОбъемПогонногоМетра");
	
	Если Версия >= "003" тогда
		Имена.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Возврат( Имена);
КонецФункции

&НаСервере
Функция ПолучитьТипыВерсииЭтикетки( Версия) Экспорт
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить( Тип("Число"),	"Число");
	СписокТипов.Добавить( Тип("Булево"),"Булево");
	СписокТипов.Добавить( Тип("Дата"),	"Дата");
	СписокТипов.Добавить( Тип("Строка"),"Строка");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеЦентры"),					"СправочникСсылка.РабочиеЦентры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МаркиСплавов"),					"СправочникСсылка.СК_МаркиСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПродукцияОЦМ"),					"СправочникСсылка.СК_ПродукцияОЦМ");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЗначенияСвойствОбъектов"),			"СправочникСсылка.ЗначенияСвойствОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТипыРазмеров"),					"СправочникСсылка.СК_ТипыРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.Номенклатура"),						"СправочникСсылка.Номенклатура");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство"),		"СправочникСсылка.УГМК_МаркаСплаваПроизводство");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ГруппыПродукции"),				"СправочникСсылка.СК_ГруппыПродукции");
	СписокТипов.Добавить( Тип("СправочникСсылка.ХарактеристикиНоменклатуры"),		"СправочникСсылка.ХарактеристикиНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ЗначенияРазмеров"),			"СправочникСсылка.УГМК_ЗначенияРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.СерииНоменклатуры"),				"СправочникСсылка.СерииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Состояния"),						"СправочникСсылка.СК_Состояния");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЕдиницыИзмерения"),					"СправочникСсылка.ЕдиницыИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),		"СправочникСсылка.КлассификаторЕдиницИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ТараТехнологическая"),			"СправочникСсылка.УГМК_ТараТехнологическая");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПартияСырья");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_Плавка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартии");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартииСТК");
	
	СписокТипов.Добавить( Тип("СправочникСсылка.ГрафикиРаботы"),					"СправочникСсылка.ГрафикиРаботы");
	СписокТипов.Добавить( Тип("СправочникСсылка.Должности"),						"СправочникСсылка.Должности");
	СписокТипов.Добавить( Тип("СправочникСсылка.ДолжностиОрганизаций"),				"СправочникСсылка.ДолжностиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ИнформационныеКарты"),				"СправочникСсылка.ИнформационныеКарты");
	СписокТипов.Добавить( Тип("СправочникСсылка.КатегорииОбъектов"),				"СправочникСсылка.КатегорииОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.Качество"),							"СправочникСсылка.Качество");
	СписокТипов.Добавить( Тип("СправочникСсылка.Контрагенты"),						"СправочникСсылка.Контрагенты");
	СписокТипов.Добавить( Тип("СправочникСсылка.НоменклатурныеГруппы"),				"СправочникСсылка.НоменклатурныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры"),"СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Организации"),						"СправочникСсылка.Организации");
	СписокТипов.Добавить( Тип("СправочникСсылка.Подразделения"),					"СправочникСсылка.Подразделения");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПодразделенияОрганизаций"),			"СправочникСсылка.ПодразделенияОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПоказателиАнализовНоменклатуры"),	"СправочникСсылка.ПоказателиАнализовНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Проекты"),							"СправочникСсылка.Проекты");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПрофессииРабочих"),					"СправочникСсылка.ПрофессииРабочих");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеМеста"),						"СправочникСсылка.РабочиеМеста");
	СписокТипов.Добавить( Тип("СправочникСсылка.Склады"),							"СправочникСсылка.Склады");
	СписокТипов.Добавить( Тип("СправочникСсылка.Смены"),							"СправочникСсылка.Смены");
	СписокТипов.Добавить( Тип("СправочникСсылка.СотрудникиОрганизаций"),			"СправочникСсылка.СотрудникиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СохраненныеНастройки"),				"СправочникСсылка.СохраненныеНастройки");
	СписокТипов.Добавить( Тип("СправочникСсылка.СпецификацииНоменклатуры"),			"СправочникСсылка.СпецификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СценарииПланирования"),				"СправочникСсылка.СценарииПланирования");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТарифныеРазряды"),					"СправочникСсылка.ТарифныеРазряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеКартыПроизводства"), "СправочникСсылка.ТехнологическиеКартыПроизводства");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеОперации"),			"СправочникСсылка.ТехнологическиеОперации");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТиповыеАнализыНоменклатуры"),		"СправочникСсылка.ТиповыеАнализыНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВариантыТехнологическихОпераций"),	"СправочникСсылка.УГМК_ВариантыТехнологическихОпераций");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций"),	"СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ФормыСечения"),					"СправочникСсылка.СК_ФормыСечения");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МетодыИзготовления"),			"СправочникСсылка.СК_МетодыИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТочностьИзготовления"),			"СправочникСсылка.СК_ТочностьИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_НДНаПродукцию"),					"СправочникСсылка.СК_НДНаПродукцию");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Мерность"),						"СправочникСсылка.СК_Мерность");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ОсобыеУсловия"),					"СправочникСсылка.СК_ОсобыеУсловия");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ВидыСплавов"),					"СправочникСсылка.СК_ВидыСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.tb_Производитель"),					"СправочникСсылка.tb_Производитель");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_СостоянияЗаказа"),				"СправочникСсылка.УГМК_СостоянияЗаказа");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Бригады"),						"СправочникСсылка.УГМК_Бригады");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Разряды"),						"СправочникСсылка.УГМК_Разряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТочкиМаршрута"),					"СправочникСсылка.ТочкиМаршрута");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПроизводственныеГруппы"),		"СправочникСсылка.СК_ПроизводственныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Комиссии"),					"СправочникСсылка.УГМК_Комиссии");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВидыБрака"),					"СправочникСсылка.УГМК_ВидыБрака");
	СписокТипов.Добавить( Тип("СправочникСсылка.ФизическиеЛица"),					"СправочникСсылка.ФизическиеЛица");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_АвтотранспортВнутренний"),		"СправочникСсылка.УГМК_АвтотранспортВнутренний");
	СписокТипов.Добавить( Тип("СправочникСсылка.Пользователи"),						"СправочникСсылка.Пользователи");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров"),	"СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ДиапазоныЗначений"),			"СправочникСсылка.УГМК_ДиапазоныЗначений");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МетодыПроведенияИсследований"),"СправочникСсылка.УГМК_МетодыПроведенияИсследований");
	
	СписокТипов.Добавить( Тип("ДокументСсылка.АктОтбораПробНоменклатуры"),			"ДокументСсылка.АктОтбораПробНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.ВнутреннийЗаказ"),					"ДокументСсылка.ВнутреннийЗаказ");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказНаПроизводство"),				"ДокументСсылка.ЗаказНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказПокупателя"),					"ДокументСсылка.ЗаказПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры"),	"ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаНаПроизводство"),	"ДокументСсылка.КорректировкаЗаказаНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаПокупателя"),		"ДокументСсылка.КорректировкаЗаказаПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.СертификацияНоменклатуры"),			"ДокументСсылка.СертификацияНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_НормыПроизводства"),				"ДокументСсылка.УГМК_НормыПроизводства");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ДокументФакт"),					"ДокументСсылка.УГМК_ДокументФакт");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"ДокументСсылка.УГМК_Регистратор");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Упаковка"),						"ДокументСсылка.УГМК_Упаковка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_РезультатАнализа"),				"ДокументСсылка.УГМК_РезультатАнализа");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ЗаявкаНаАнализ"),				"ДокументСсылка.УГМК_ЗаявкаНаАнализ");
		
	СписокТипов.Добавить( Тип("Неопределено"),	"Неопределено");
	
	Возврат( СписокТипов);
КонецФункции

&НаСервере
Функция ПолучитьИндексТипа( СписокТипов, Значение) Экспорт
	ТипЗначение = ТипЗнч( Значение);
	ЭлементС = СписокТипов.НайтиПоЗначению( ТипЗначение);
	Если ЭлементС = Неопределено тогда
		ИндексС = -1;
		Сообщить("ПолучитьИндексТипа: Неожиданный тип значения ["+Строка( ТипЗначение)+"]");
	иначе
		ИндексС = СписокТипов.Индекс( ЭлементС);
	КонецЕсли;
	
	Возврат( ИндексС);
КонецФункции

&НаСервере
Функция СконвертироватьЗначениеИзСтроки( СтрокаФайла, ТипЗначения)
	Если ЗначениеЗаполнено( СтрокаФайла) тогда
		Значение = XMLЗначение( ТипЗначения, СтрокаФайла);
	иначеЕсли ТипЗначения = Тип("Число") тогда
		Значение = 0;
	иначеЕсли ТипЗначения = Тип("Строка") тогда
		Значение = "";
	иначеЕсли ТипЗначения = Тип("Булево") тогда
		Значение = Ложь;
	иначеЕсли ТипЗначения = Тип("Дата") тогда
		Значение = '00010101';
	иначеЕсли ТипЗначения = Тип("Неопределено") тогда
		Значение = Неопределено;
	иначе
		ТипДляПриведения = Новый Массив;
		ТипДляПриведения.Добавить( ТипЗначения);
		Описание = Новый ОписаниеТипов( ТипДляПриведения);
		Значение = Описание.ПривестиЗначение( Неопределено);
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

&НаСервере
Функция ПолучитьСледующееЗначениеИзФайла( Файл, НомерСтроки, ТипЗначения) Экспорт
	Перем Значение;
	
	Значение = СконвертироватьЗначениеИзСтроки( Файл.ПолучитьСтроку( НомерСтроки), ТипЗначения);
	НомерСтроки = НомерСтроки + 1;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция ПолучитьСледующееЗначениеИзМассива( МассивИсточник, Индекс, ТипЗначения) Экспорт
	Перем Значение;
	//Сообщить("ПолучитьСледующееЗначениеИзМассива: ["+Строка( ТипЗначения)+"] "+МассивИсточник[ Индекс]);	
	Значение = СконвертироватьЗначениеИзСтроки( МассивИсточник[ Индекс], ТипЗначения);
	Индекс = Индекс + 1;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция ПолучитьТипПоИндексу( СписокТипов, Индекс) Экспорт
	Перем Значение;
	
	Если Индекс = -1 или Индекс = Неопределено тогда
		Значение = Тип("Неопределено");
	иначе
		ЭлементЗ = СписокТипов.Получить( Индекс);
		Значение = ЭлементЗ.Значение;
	КонецЕсли;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция УзлыРегистрации( Ссылка, ИмяТаблицы) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",Ссылка);
	Запр.Текст = "ВЫБРАТЬ
	             |	ХарактеристикиНоменклатурыИзменения.Узел,
	             |	ХарактеристикиНоменклатурыИзменения.НомерСообщения,
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка
	             |ИЗ
	             |	"+ИмяТаблицы+".Изменения КАК ХарактеристикиНоменклатурыИзменения
	             |ГДЕ
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка = &Ссылка
	             |	И ХарактеристикиНоменклатурыИзменения.Узел ССЫЛКА ПланОбмена.УГМК_ОперативныйУчетНСИ";
	Результат = Запр.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	Возврат( Результат);
КонецФункции
	
// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	[ИмяТаблицы]
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления) Экспорт
	Если ЗначениеЗаполнено( ЗначениеСсылка) и (не СсылкаСуществует( ЗначениеСсылка)) тогда
		Мета = Метаданные.НайтиПоТипу( ТипЗначения);
		ОбъектБП = Документы[ Мета.Имя].СоздатьДокумент();
		ОбъектБП.УстановитьСсылкуНового( ЗначениеСсылка);
		//ОбъектБП.УГМК_Временный = Истина;
		ОбъектБП.Дата = ЗначениеДата;
		ОбъектБП.Номер = ЗначениеНомер;
		ОбъектБП.ПредставлениеИсточника = ЗначениеДляПредставления;
		ОбъектБП.УИД_Источника = ЗначениеСсылка.УникальныйИдентификатор();
		ОбъектБП.СсылкаИсточника = ЗначениеСсылка;
		ОбъектБП.ОбменДанными.Загрузка = Истина;
		//ОбъектБП.ОбменДанными.Получатели.Очистить();
		ОбъектБП.Записать();
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "БизнесПроцесс."+Мета.Имя), ЗначениеСсылка);
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
КонецФункции

&НаСервере
Функция ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование) Экспорт
	Если ЗначениеЗаполнено( ЗначениеСсылка) и (не СсылкаСуществует( ЗначениеСсылка)) тогда
		ОбъектСпрВладелец = Справочники.СК_ТипыРазмеров.НайтиПоКоду( ЗначениеВладелецКод);
		Сообщить("ПолучитьСсылкуЗначенияРазмера ["+ОбъектСпрВладелец+"] "+Строка( ЗначениеВладелецКод));
		Если ЗначениеЗаполнено( ОбъектСпрВладелец) тогда
			ОбъектСпр = Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
			ОбъектСпр.УстановитьСсылкуНового( ЗначениеСсылка);
			ОбъектСпр.УГМК_Временный = Истина;
			ОбъектСпр.Код = ЗначениеКод;
			ОбъектСпр.Владелец = ОбъектСпрВладелец;
			ОбъектСпр.Наименование = ЗначениеНаименование;
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			ОбъектСпр.ОбменДанными.Получатели.Очистить();
			ОбъектСпр.Записать();
		иначе
			Сообщить("ПолучитьСсылкуЗначенияРазмера: Не найден владелец с кодом ["+ЗначениеВладелецКод+"]");
		КонецЕсли;
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "Справочник.УГМК_ЗначенияРазмеров"), ЗначениеСсылка);
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
КонецФункции

&НаСервере
Процедура ПроверитьПоляЗначенияРазмеров( НоваяСтрока) Экспорт
	Сообщить( "ПроверитьПоляЗначенияРазмеров: ["+Строка( НоваяСтрока.ХарактеристикаНоменклатуры.Владелец)+"]"+Строка( НоваяСтрока.ХарактеристикаНоменклатуры));
	Если ЗначениеЗаполнено( НоваяСтрока.ХарактеристикаНоменклатуры) и СсылкаСуществует( НоваяСтрока.ХарактеристикаНоменклатуры) и НоваяСтрока.ХарактеристикаНоменклатуры.УГМК_Временный тогда
		ОбъектСпр = НоваяСтрока.ХарактеристикаНоменклатуры.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств( ОбъектСпр, НоваяСтрока, "Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра");
		ОбъектСпр.Записать();
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( НоваяСтрока.ХарактеристикаНоменклатуры, "Справочник.УГМК_ЗначенияРазмеров"), НоваяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	Сообщить( "ПроверитьПоляЗначенияРазмеров--");
КонецПроцедуры

&НаСервере
Функция НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, ИмяПоля)
	Мета = Метаданные.НайтиПоТипу( ТипЗначения);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Код",ЗначениеКод);
	Запр.Текст = "ВЫБРАТЬ первые 1
	             |	Спр.Ссылка как Ссылка
	             |ИЗ
	             |	Справочник."+Мета.Имя+" КАК Спр
	             |ГДЕ
	             |	Спр."+ИмяПоля+" = &Код";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Значение = Результат.Ссылка;
	иначе
		Сообщить("НайтиЭлементСправочникаПоРеквизиту: Не найден элемент справочника ["+Мета.Имя+"] с ["+ИмяПоля+"] = ["+ЗначениеКод+"]");
		Значение = Справочники[ Мета.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

&НаСервере
//Функция ПолучитьУИДЭтикетки()
//	СтрУИД = "";
//	РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
//	Если ЗначениеЗаполнено( РабочееМесто) тогда
//		СтрУИД = РабочееМесто.Код;
//	иначе
//		ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
//		Если ЗначениеЗаполнено( ТекущийПользователь) тогда
//			СтрУИД = ТекущийПользователь.Код;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат( СтрУИД+XMLСтрока( ТекущаяДата()));
//КонецФункции

&НаСервере
Функция СообщениеКодирования( КолонкиСообщения, Данные)
	Пропускать = ",ПоСвойствам,ПаспортПартии,Тара,";
	
	СтрСообщения = "";
	Для каждого Имя из КолонкиСообщения цикл
		Если Найти( Пропускать, ","+Имя+",") = 0 тогда
			Значение = Данные[ Имя];
			Если ЗначениеЗаполнено( Значение) тогда
				СтрСообщения = СтрСообщения +СтрЗаменить( Строка( Значение), Символы.НПП, "")+"; ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( СтрСообщения);
КонецФункции

&НаСервере
Функция ПредставлениеМаркиСплава( МаркаСплава) Экспорт
	СтрПредставление = "";
	
	Попытка
		СтрПредставление = МаркаСплава.ПредставлениеОУ;
	исключение
		СтрПредставление = Строка( МаркаСплава);
	КонецПопытки;
	
	Если не ЗначениеЗаполнено( СтрПредставление) тогда
		СтрПредставление = Строка( МаркаСплава);
	КонецЕсли;
	
	Возврат( СтрПредставление);
КонецФункции

&НаСервере
//Функция ПолучитьКлассификаторыЕдИзм() Экспорт
//	ПараметрыЕдИзм = Новый Структура;
//	
//	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Штуки",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Штуки"));
//	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Килограмм",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Килограмм"));
//	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Грамм",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Грамм"));
//	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Тонна",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Тонна"));
//	
//	Возврат( ПараметрыЕдИзм)
//КонецФункции

&НаСервере
//Функция ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм) Экспорт
//	Если ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")) тогда
//		МассаНетто = ВыборкаСтрокТовары.Количество*ВыборкаСтрокТовары.ЕдиницаИзмерения.Вес;
//	Иначе 
//		Если ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
//			МассаНетто = ВыборкаСтрокТовары.Количество*1000;
//		иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
//			МассаНетто = ВыборкаСтрокТовары.Количество*0.001;
//		иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
//			МассаНетто = ВыборкаСтрокТовары.Количество;
//		иначе
//			МассаНетто = 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат( МассаНетто);
//КонецФункции 

&НаСервере
//Функция ПолучитьМассаБрутто( Организация, ВыборкаСтрокТовары, ПараметрыЕдИзм) Экспорт
//	
//	ПараметрыВ = Новый Структура("ГруппаПродукции,ЕдиницаИзмерения1,ЕдиницаИзмерения");
//	ЗаполнитьЗначенияСвойств( ПараметрыВ, ВыборкаСтрокТовары);
//		
//	МассаБрутто = 0;
//	ЕдиницаИзмерения1Весовая = УГМК_СлужебныеФункции.ЕдиницаИзмерения1Весовая( Организация, ПараметрыВ);
//	Если ЕдиницаИзмерения1Весовая тогда
//		Если ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения1) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения1) = Тип("СправочникСсылка.ЕдиницыИзмерения")) тогда
//			Если ЗначениеЗаполнено( ВыборкаСтрокТовары.Количество1) тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1*ВыборкаСтрокТовары.ЕдиницаИзмерения1.Вес;
//			иначе
//				МассаБрутто = ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм);
//			КонецЕсли;
//		иначеЕсли ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения1) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения1) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")) тогда 
//			Если ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1*1000;
//			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1*0.001;
//			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1;
//			иначе
//				МассаБрутто = 0;
//			КонецЕсли;
//		иначе
//			Если ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1*1000;
//			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1*0.001;
//			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
//				МассаБрутто = ВыборкаСтрокТовары.Количество1;
//			иначе
//				МассаБрутто = 0;
//			КонецЕсли;
//		КонецЕсли;
//	иначе
//		МассаБрутто = ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм); 
//	КонецЕсли;
//	
//	Возврат( МассаБрутто);
//КонецФункции 

&НаСервере
//Функция СформироватьСтруктуруЭтикетки( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени = "", ВерсияЭтикетки = "004") Экспорт
//	
//	ИменаКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
//	
//	Файл = Новый ТекстовыйДокумент;
//	Файл.ДобавитьСтроку( XMLСтрока( ВерсияЭтикетки));
//	
//	Если ВерсияЭтикетки <> "001" тогда
//		Файл.ДобавитьСтроку( ПолучитьУИДЭтикетки());
//	КонецЕсли;
//	
//	СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
//	
//	ПростыеТипы = Новый Массив;
//	ПростыеТипы.Добавить( Тип( "Число"));
//	ПростыеТипы.Добавить( Тип( "Строка"));
//	ПростыеТипы.Добавить( Тип( "Дата"));
//	ПростыеТипы.Добавить( Тип( "Булево"));
//	ПростыеТипы.Добавить( Тип( "Неопределено"));
//	
//	Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
//	Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
//	
//	СтруктураКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
//	
//	СтрИзмерения = "";
//	СтрРесурсы = ",Количество,Количество1,КоличествоМест,КоличествоТара,";

//	// Свернем данные кодирования, чтобы при чтении строки поиска были уникальны
//	ТаблицаКодирования = Новый ТаблицаЗначений;
//	Для каждого Колонка из СтруктураКолонок цикл
//		ИмяКолонки = Колонка.Ключ;
//		ТаблицаКодирования.Колонки.Добавить( ИмяКолонки);
//		
//		Если Найти( СтрРесурсы, ","+ИмяКолонки+",") = 0 тогда
//			СтрИзмерения = СтрИзмерения + "," + ИмяКолонки;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ДобавочныеКолонки = ",Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра,ДополнительнаяИнформация,";
//	Для каждого Строка из ДанныеБирки цикл
//		НоваяСтрока = ТаблицаКодирования.Добавить();
//		
//		Для каждого Колонка из СтруктураКолонок цикл
//			НоваяСтрока[ Колонка.Ключ] = Неопределено;
//			Если Найти( ДобавочныеКолонки, ","+Колонка.Ключ+",") = 0 тогда
//				НоваяСтрока[ Колонка.Ключ] = Строка[ ИменаКолонок[ Колонка.Ключ]];
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//	
//	ТаблицаКодирования.Свернуть( Сред( СтрИзмерения, 2), "Количество,Количество1,КоличествоМест,КоличествоТара");
//	
//	КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
//	КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
//	
//	КоличествоЭ = 0;
//	МестЭ = 0;
//	ПараметрыЕдИзм = УГМК_ОперативныйУчет.ПолучитьКлассификаторыЕдИзм();
//	МаркиСплава = Новый Массив;
//	МаркаСплаваСтр = "";
//	ПартияСтр = "";
//	ПартияМассив = Новый Массив; 
//	ТараСтр = "";
//	ТараМассив = Новый Массив;
//	Текст1 = "";
//	
//	// ТаблицаКодирования свернута, Имена колонок равны колонкам бирки
//	Для каждого Строка из ТаблицаКодирования цикл
//		ЗаполнитьЗначенияСвойств( СтруктураКолонок, Строка);
//		
//		ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
//		Если ЗначениеЗаполнено( ХарактеристикаНоменклатуры) тогда
//			ЗаполнитьЗначенияСвойств( СтруктураКолонок, ХарактеристикаНоменклатуры);
//		КонецЕсли;
//		
//		Если Строка.ПоСвойствам тогда
//			Текст1 = Текст1 + СообщениеКодирования( КлючПоСвойствам, СтруктураКолонок);
//		иначе
//			Текст1 = Текст1 + СообщениеКодирования( КлючНатуральный, СтруктураКолонок);
//		КонецЕсли;
//		
//		// Формирование текстовых полей этикетки
//		КоличествоЭ = КоличествоЭ + ПолучитьМассаБрутто( ОбъектОрганизация, СтруктураКолонок, ПараметрыЕдИзм);
//		МестЭ = МестЭ + СтруктураКолонок.КоличествоМест; 
//		
//		Если ЗначениеЗаполнено( СтруктураКолонок.МаркаСплава) и (МаркиСплава.Найти( СтруктураКолонок.МаркаСплава) = Неопределено) тогда
//			МаркиСплава.Добавить( СтруктураКолонок.МаркаСплава);
//			МаркаСплаваСтр = МаркаСплаваСтр+";"+ПредставлениеМаркиСплава( СтруктураКолонок.МаркаСплава);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено( СтруктураКолонок.ПаспортПартии) и (ПартияМассив.Найти( СтруктураКолонок.ПаспортПартии) = Неопределено) тогда
//			ПартияМассив.Добавить( СтруктураКолонок.ПаспортПартии);
//			ПартияСтр = ПартияСтр+";"+ПолучитьПредставлениеПартииЭтикетка( СтруктураКолонок.ПаспортПартии);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено( СтруктураКолонок.Тара) и (ТараМассив.Найти( СтруктураКолонок.Тара) = Неопределено) тогда
//			ТараМассив.Добавить( СтруктураКолонок.Тара);
//			ТараСтр = ТараСтр+";"+Строка( СтруктураКолонок.Тара);
//		КонецЕсли;
//		
//		Для каждого Колонка из СтруктураКолонок цикл
//			КолонкаИмя = Колонка.Ключ;
//			Значение = Колонка.Значение;
//			ТипЗначения = ТипЗнч( Значение);
//			
//			Если КолонкаИмя = "ПаспортПартии" тогда
//				Если Значение = Неопределено тогда
//					Файл.ДобавитьСтроку( "");
//					Файл.ДобавитьСтроку( "");
//					Файл.ДобавитьСтроку( "");
//					Файл.ДобавитьСтроку( "");
//					Файл.ДобавитьСтроку( "");
//				иначе
//					Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Дата));
//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Номер));
//					Файл.ДобавитьСтроку( XMLСтрока( Значение.ДляПредставления));
//					Файл.ДобавитьСтроку( XMLСтрока( Значение));
//				КонецЕсли;
//			иначе
//				Если ЗначениеЗаполнено( Значение) тогда
//					Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
//					ТипЗначения = ТипЗнч( Значение);
//					
//					Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
//						Файл.ДобавитьСтроку( XMLСтрока( Значение));
//					иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
//						Файл.ДобавитьСтроку( XMLСтрока( Значение.УГМК_Код));
//					иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
//						Файл.ДобавитьСтроку( XMLСтрока( Значение.Код));
//						Файл.ДобавитьСтроку( XMLСтрока( Значение.Владелец.Код));
//						Файл.ДобавитьСтроку( XMLСтрока( Значение.Наименование));
//						Файл.ДобавитьСтроку( XMLСтрока( Значение));
//					иначе
//						Файл.ДобавитьСтроку( XMLСтрока( Значение.Код));
//					КонецЕсли;
//				иначеЕсли ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
//					Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
//					Файл.ДобавитьСтроку( "");
//				иначе
//					Файл.ДобавитьСтроку( "");
//					Файл.ДобавитьСтроку( "");
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//	
//	ИмяФайлаФормированиеЭтикетки = УГМК_СлужебныеФункции.ПолучитьНастройку("ИмяФайлаФормированиеЭтикетки");
//	Если не ЗначениеЗаполнено( ИмяФайлаФормированиеЭтикетки) тогда
//		ИмяФайлаФормированиеЭтикетки = ПолучитьИмяВременногоФайла();
//	КонецЕсли;
//	
//	Файл.Записать( ИмяФайлаФормированиеЭтикетки, КодировкаТекста.ANSI);
//	
//	Данные = Новый ХранилищеЗначения( Новый ДвоичныеДанные( ИмяФайлаФормированиеЭтикетки), Новый СжатиеДанных( 9));
//	
//	СтрокаКода = СтрЗаменить( XMLСтрока( Данные), "AgFTS2/0iI3BTqDV67a9oKcN", "_");
//	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК+Символы.ПС, "")+Символы.ВК; 
//	
//	РезультатФ = Новый Структура("ТекстДляКодирования", СтрокаКода);
//	РезультатФ.Вставить("КоличествоСтр",Формат( КоличествоЭ, "ЧГ=0"));
//	РезультатФ.Вставить("МаркаСплаваСтр",Сред( МаркаСплаваСтр, 2));
//	
//	Если МестЭ > 1 тогда
//		РезультатФ.Вставить("Текст1", Формат( МестЭ, "ЧГ=0")+" мест; "+Текст1);
//	иначе	
//		РезультатФ.Вставить("Текст1", Текст1);
//	КонецЕсли;
//	
//	//РезультатФ.Вставить("Текст2","");
//	//РезультатФ.Вставить("Текст3","");
//	//РезультатФ.Вставить("Текст4","");
//	
//	ТараСтр = Сред( ТараСтр, 2);
//	ПартияСтр = Сред( ПартияСтр, 2);
//	Если ЗначениеЗаполнено( ТараСтр) и ЗначениеЗаполнено( ПартияСтр) тогда
//		РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+" ("+ТараСтр+")");
//	ИначеЕсли ЗначениеЗаполнено( ТараСтр) или ЗначениеЗаполнено( ПартияСтр) тогда
//		РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+ТараСтр);
//	КонецЕсли;
//	
//	Возврат( РезультатФ);
//КонецФункции

&НаСервере
Функция ПолучитьЗакодированнуюСсылку( ОбъектСсылка, Версия = "004") Экспорт
	СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
	Элемент = СписокТипов.НайтиПоЗначению( ТипЗнч( ОбъектСсылка));
	
	Если Элемент = Неопределено тогда
		Результат = Неопределено;
	иначе
		ПрефиксТипа = Формат( СписокТипов.Индекс( Элемент), "ЧЦ=3; ЧВН=; ЧГ=0");
		Результат = ПрефиксТипа+XMLСтрока( ОбъектСсылка)+Символы.ВК;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

&НаСервере
Функция ВосстановитьСсылкуИзШтрихкода( Знач СтрокаКода, Версия = "004") Экспорт
	Результат = Неопределено;
	
	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК, ""); 
	Если СтрДлина( СтрокаКода) = 39 тогда
		Попытка 
			ИндексТипа = Число( Лев( СтрокаКода, 3));
		исключение
			ИндексТипа = Неопределено;
		КонецПопытки;
		
		Если ИндексТипа <> Неопределено тогда
			СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
			Если СписокТипов.Количество() - 1 >= ИндексТипа тогда
				ЭлементТипа = СписокТипов[ ИндексТипа];
				Результат = XMLЗначение( ЭлементТипа.Значение, Сред( СтрокаКода, 4));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

&НаСервере
Функция ПрочитатьСтрокуЭтикетки( Знач ТекстДляКодирования, РезультатЧтенияБирки) Экспорт
	Перем ДанныеБирки;
	
	Если ТипЗнч( РезультатЧтенияБирки) <> Тип("Структура") тогда
		РезультатЧтенияБирки = Новый Структура;
	иначе
		РезультатЧтенияБирки.Очистить();
	КонецЕсли;
	
	Если Лев( ТекстДляКодирования, 1) = "_" тогда
		ТекстДляКодирования = "AgFTS2/0iI3BTqDV67a9oKcN"+Сред( ТекстДляКодирования, 2);
	КонецЕсли;
	
	Объект.СтрокаШтрихКод = ТекстДляКодирования;
	
	Попытка 
		Данные = XMLЗначение( Тип("ХранилищеЗначения"), ТекстДляКодирования);	
		ДанныеИзКода = Данные.Получить();
		
		БиркаСодержитХранилище = Истина;
	исключение
		БиркаСодержитХранилище = Ложь;
	КонецПопытки;
	
	БиркаСодержитХранилище = БиркаСодержитХранилище и ТипЗнч( ДанныеИзКода) = Тип("Строка");
	
	Если БиркаСодержитХранилище тогда
		Файл = МассивИзСтроки( ДанныеИзКода, Символы.ПС);
		
		//Сообщить( "0 "+Строка( ТипЗнч( Данные))+" "+Строка( Данные));
		//Сообщить( "1 "+Строка( ТипЗнч( ТекстДляКодирования))+" "+Строка( ТекстДляКодирования));
		//Сообщить( "2 "+Строка( ТипЗнч( ДанныеИзКода))+" "+Строка( ДанныеИзКода));
		//Сообщить( "3 "+Строка( ТипЗнч( Файл))+" "+Строка( Файл));
		//Сообщить( Строка( Файл.Количество()));
		
		ТекСтрока = 0;
		ВерсияЭтикетки = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
		
		Если ВерсияЭтикетки = "001" тогда
			СтрУИД = Лев( ТекстДляКодирования, 30);
		иначе
			СтрУИД = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
		КонецЕсли;
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", СтрУИД);
		
		СписокТипов = ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
		
		ПростыеТипы = Новый Массив;
		ПростыеТипы.Добавить( Тип( "Число"));
		ПростыеТипы.Добавить( Тип( "Строка"));
		ПростыеТипы.Добавить( Тип( "Дата"));
		ПростыеТипы.Добавить( Тип( "Булево"));
		ПростыеТипы.Добавить( Тип( "Неопределено"));
		
		Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
		Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
		
		СтруктураКолонок = ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
		
		ПоследнийИндекс = Файл.Количество()-1;
		
		ДанныеБирки = Новый Массив;
		Пока 1 = 1 цикл
			Если ТекСтрока >= ПоследнийИндекс тогда
				Прервать;
			КонецЕсли;
			
			Сообщить("++"+Строка( ТекСтрока));
		
			НоваяСтрока = Новый Структура;
				
			Для каждого Колонка из СтруктураКолонок цикл
				КолонкаИмя = Колонка.Ключ;
				
				Если КолонкаИмя = "ПаспортПартии" тогда
					ИндексТипа = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
					ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
					ЗначениеДата = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Дата"));
					ЗначениеНомер = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеДляПредставления = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеСсылка = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					
					Если ПростыеТипы.Найти( ТипЗначения) = Неопределено тогда
						Значение = ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления);
					иначе
						Значение = Неопределено;
					КонецЕсли;
				иначе
					ИндексТипа = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
					ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
					Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
						Значение = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
						ЗначениеУГМК_Код = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеУГМК_Код, "УГМК_Код");
					иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
						ЗначениеКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеВладелецКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеНаименование = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеСсылка = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
						
						Значение = ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование);
					иначе
						ЗначениеКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, "Код");
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Вставить( КолонкаИмя, Значение);
			КонецЦикла;
			
			Если ТипЗнч( НоваяСтрока.ХарактеристикаНоменклатуры) = Тип_ЗначенияРазмеров тогда
				//ПроверитьПоляЗначенияРазмеров( НоваяСтрока);
			КонецЕсли;
			
			ДанныеБирки.Добавить( НоваяСтрока);
			
		КонецЦикла;
		
		РезультатЧтенияБирки.Вставить("ДанныеБирки", ДанныеБирки);
	иначе
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
		РезультатЧтенияБирки.Вставить("ДанныеБирки", Новый Массив);
	КонецЕсли;

	Возврат( БиркаСодержитХранилище)
КонецФункции

&НаКлиенте
Процедура Очистить(Команда)
	Объект.СтрокаШтрихКод = "";
	Объект.ДанныеБирки.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ДанныеБиркиПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры


&НаКлиенте
Процедура ДанныеБиркиПриАктивизацииЯчейки(Элемент)
	
КонецПроцедуры

