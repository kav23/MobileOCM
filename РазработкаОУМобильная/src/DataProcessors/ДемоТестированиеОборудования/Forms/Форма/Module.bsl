
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сумма = 100;
	ТипЧека = 1;
	
	ВремТовар = Товары.Добавить();
	СтрокаТаблицыТоваров = Новый Структура();
	ВремТовар.Наименование = "Мука пшеничная (Продукт первой необходимости)";   
	ВремТовар.Количество   = 0.992;  
	ВремТовар.Цена         = 15;
	ВремТовар.Сумма        = 13.84;  
	ВремТовар.НомерСекции  = 1;   
	ВремТовар.СтавкаНДС    = 10;   
	
	ВремТовар = Товары.Добавить();
	СтрокаТаблицыТоваров = Новый Структура();
	ВремТовар.Наименование = "Томатный сок в бутылке 0.5 л";   
	ВремТовар.Количество   = 2;  
	ВремТовар.Цена         = 150;
	ВремТовар.Сумма        = 320;  
	ВремТовар.НомерСекции  = 2;   
	ВремТовар.СтавкаНДС    = 18;  
	
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = НСтр("ru = 'НАЛИЧНЫМИ'");
	ВремОплата.Сумма = 150;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = НСтр("ru = 'ПЛАТ.КАРТОЙ'");
	ВремОплата.Сумма = 200;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = НСтр("ru = 'КРЕДИТОМ'");
	ВремОплата.Сумма = 0;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = НСтр("ru = 'СЕРТИФИКАТОМ'");
	ВремОплата.Сумма = 0;
	
	СтрокиТекста = "Мой дядя самых честных правил,
		|Когда не в шутку занемог,
		|Он уважать себя заставил,
		|И лучше выдумать не мог;
		|Его пример другим наука:
		|Но, боже мой, какая скука
		|С больным сидеть и день, и ночь,
		|Не отходя ни шагу прочь!
		|Какое низкое коварство
		|Полуживого забавлять,
		|Ему подушки поправлять,
		|Печально подносить лекарство,
		|Вздыхать и думать про себя:
		|Когда же черт возьмет тебя!";
		
	ТипШтрихкода = "EAN13";
	ШтрихКод     = "2900001462105";
	
	ЭТСумма = 100;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвераУстройстваПечати(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеУстройстваПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвераУстройстваВвода(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеУстройствоВвода);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьВерсиюДрайвераПлатежнаяСистема(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеПлатежнаяСистема);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвера(ПодключаемоеОборудование)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьВерсиюДрайвера(УникальныйИдентификатор, ПодключаемоеОборудование, Неопределено, ВыходныеПараметры) Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.ВерсияДрайвера) Тогда
			ТекстСообщения = "Версия драйвера установленная:" + ВыходныеПараметры.ВерсияДрайвера + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.РевизияИнтерфейса) Тогда
			ТекстСообщения = ТекстСообщения + "Ревизия интерфейса драйвера:" + ВыходныеПараметры.РевизияИнтерфейса + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.ВерсияДрайвераВМакете) Тогда
			ТекстСообщения = ТекстСообщения + "Версия драйвера в макете:" + ВыходныеПараметры.ВерсияДрайвераВМакете + Символы.ПС;
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуГотовностиУстройства(Команда)
	
	ВыходныеПараметры = Неопределено;
	ОчиститьСообщения();
	
	Если МенеджерОборудованияКлиент.ВыполнитьПроверкуГотовностиУстройства(ОборудованиеУстройстваПечати, ВыходныеПараметры) Тогда
		Сообщить("Устройство доступно.");
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуГотовностиЭквайринга(Команда)
	
	ВыходныеПараметры = Неопределено;
	ОчиститьСообщения();
	
	Если МенеджерОборудованияКлиент.ВыполнитьПроверкуГотовностиУстройства(ОборудованиеПлатежнаяСистема, ВыходныеПараметры) Тогда
		Сообщить("Устройство доступно.");
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьЧек();
	
	// Таблица товаров
	ПозицииЧека = Новый Массив();
	
	Для Каждого ВремТовар Из Товары Цикл
		СтрокаПозицииЧека = Новый Структура();
		СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
		СтрокаПозицииЧека.Вставить("Наименование", ВремТовар.Наименование);   
		СтрокаПозицииЧека.Вставить("Количество"  , ВремТовар.Количество);   
		СтрокаПозицииЧека.Вставить("Цена"        , ВремТовар.Цена);   
		СтрокаПозицииЧека.Вставить("Сумма"       , ВремТовар.Сумма);   
		СтрокаПозицииЧека.Вставить("НомерСекции" , ВремТовар.НомерСекции);   
		СтрокаПозицииЧека.Вставить("СтавкаНДС"   , ВремТовар.СтавкаНДС);   
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	СтрокаПозицииЧека = Новый Структура();
	СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
	СтрокаПозицииЧека.Вставить("Текст", "Накопление по карте: Нет");
	ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = Новый Структура();
	СтрокаПозицииЧека.Вставить("ШтрихКод");
	СтрокаПозицииЧека.Вставить("ТипШтрихкода", ТипШтрихкода);
	СтрокаПозицииЧека.Вставить("ШтрихКод"    , ШтрихКод);
	ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Таблица оплат
	ТаблицаОплат = Новый Массив();
	ВремИндекс = 0;
	Для Каждого ВремОплата Из Оплата Цикл
		Если ВремОплата.Сумма > 0 Тогда
			СтрокаОплаты = Новый Структура("Тип, Сумма", ВремИндекс, ВремОплата.Сумма); 
			ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
		ВремИндекс = ВремИндекс + 1;
	КонецЦикла;
	
	// Общие параметры
	ОбщиеПараметры = Новый Структура();
	// Тип чека: 1-Продажа, 2-Возврат продажи, 3-Покупка, 4-Возврат покупки.
	ОбщиеПараметры.Вставить("ТипЧека"     , ТипЧека);
	ОбщиеПараметры.Вставить("ПозицииЧека" , ПозицииЧека);
	ОбщиеПараметры.Вставить("ТаблицаОплат", ТаблицаОплат);
	
	Возврат ОбщиеПараметры; 
	
КонецФункции

&НаКлиенте
Процедура ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	
	ОбщиеПараметры.Вставить("ОрганизацияНазвание" , "ООО ""Тестовая организация""");
	ОбщиеПараметры.Вставить("ОрганизацияИНН"      , "00000000001");
	ОбщиеПараметры.Вставить("ОрганизацияКПП"      , "00000000002");
	ОбщиеПараметры.Вставить("НомерКассы"          , "2334534");
	ОбщиеПараметры.Вставить("НомерЧека"           , "30");
	ОбщиеПараметры.Вставить("НомерСмены"          , "12");
	ОбщиеПараметры.Вставить("ТекстШапки"          , "ДОБРО ПОЖАЛОВАТЬ!");
	ОбщиеПараметры.Вставить("ТекстПодвала"        , "СПАСИБО ЗА ПОКУПКУ!");
	ОбщиеПараметры.Вставить("КассирДолжность"     , "АДМИНИСТРАТОР");
	ОбщиеПараметры.Вставить("КассирФИО"           , "Сидоров И.П.");
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ПечатьЧекаПродажи(Команда)
	
	ОчиститьСообщения();
	
	ВыходныеПараметры = Неопределено;
	
	ОбщиеПараметры = СформироватьЧек(); 
	
	ОбщиеПараметры.Вставить("ПодписьЕГАИС", ПодписьЕГАИС);
	
	// Параметры для товарного чека и слип-чека ЕГАИС.
	ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	
	Если МенеджерОборудованияКлиент.ВыполнитьПечатьЧека(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ОбщиеПараметры, ВыходныеПараметры) Тогда
		НомерЧека = ВыходныеПараметры.НомерЧека;
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ОтчетСГашением(Команда)
	
	ОчиститьСообщения();
	ТекстОтчета = "СУММА" + Символы.Таб + Строка(10.0);
	ВходныеПараметры = Новый Структура("ОтчетСГашением, ТекстОтчета", Истина, ТекстОтчета);
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьФискальныйОтчет(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ОтчетБезГашения(Команда)   
	
	ОчиститьСообщения();
	ТекстОтчета = "СУММА" + Символы.Таб + Строка(10.0);;
	ВходныеПараметры = Новый Структура("ОтчетСГашением, ТекстОтчета", Ложь, ТекстОтчета);
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьФискальныйОтчет(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ВнестиСумму(Команда)
	
	ОчиститьСообщения();
	ВходныеПараметры = Новый Структура("Внесение, Сумма", Истина, Сумма);
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВнесениеВыемку(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ИзъятьСумму(Команда)
	
	ОчиститьСообщения();
	ВходныеПараметры = Новый Структура("Внесение, Сумма", Ложь, Сумма);
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВнесениеВыемку(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ПечатьТекста(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура("СтрокиТекста", СтрокиТекста);
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ШиринаСтроки(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьШиринуСтрокиПечатающегоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, Неопределено, ВыходныеПараметры) Тогда
		Сообщить("ШиринаСтроки:" + ВыходныеПараметры.ШиринаСтроки);
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ДенежныйЯщик(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьОткрытиеДенежногоЯщика(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ПечатьЭтикеток(Команда)
	
	ОчиститьСообщения();
	
	ЭтикеткиДляПечати = Новый Массив();
	
	Для Каждого ВремТовар Из Товары Цикл
		Этикетка = Новый Структура();
		НадписьЦена = "ЦЕНА: %% Руб.";
		НадписьЦена =СтрЗаменить(НадписьЦена, "%%", Формат(ВремТовар.Цена, "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0"));
		Этикетка.Вставить("ТипШтрихкода", ТипШтрихкода);
		Этикетка.Вставить("Штрихкод"    , Штрихкод);
		Этикетка.Вставить("ШапкаЭтикетки" , "ООО ""Тестовая организация""" + Символы.ПС + ВремТовар.Наименование);
		Этикетка.Вставить("ПодвалЭтикетки", НадписьЦена);
		ЭтикеткиДляПечати.Добавить(Этикетка);
	КонецЦикла;
	
	ВходныеПараметры = Новый Структура("Этикетки", ЭтикеткиДляПечати);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьЭтикеток(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ВыполнитьВводДанных(УникальныйИдентификатор, ОборудованиеУстройствоВвода, ВыходныеПараметры) Тогда
		Если ВыходныеПараметры.Свойство("ДанныеВвода") Тогда
			ДанныеВвода = ВыходныеПараметры.ДанныеВвода;
			ВремТипШтрихкода = МенеджерОборудованияКлиент.ОпределитьТипШтрихкода(ДанныеВвода);
			Если ВремТипШтрихкода <> "" Тогда
				ДанныеВвода = ДанныеВвода + Символы.ПС + "Тип штрихкода:" + ВремТипШтрихкода;
			КонецЕсли;
			Сообщить(ДанныеВвода);
		КонецЕсли;
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Оплатить(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьОплатуПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить("ОТВЕТ:" + ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Отменить(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьОтменуПлатежаПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Вернуть(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьВозвратПлатежаПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_СверкаИтогов(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	Если Не МенеджерОборудованияКлиент.ВыполнитьСверкуИтоговПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли; 
	
КонецПроцедуры


