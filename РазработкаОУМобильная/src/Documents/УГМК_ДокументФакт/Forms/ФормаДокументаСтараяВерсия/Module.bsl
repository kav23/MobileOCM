//#Если  МобильноеПриложениеКлиент  тогда

//#КонецЕсли


&НаКлиенте
Процедура Сканировать(Команда)
	СтартСканировать();
КонецПроцедуры

&НаКлиенте
Процедура СтартСканировать()
	ЗаписатьПараметрыСеансаИдетСканирование(Истина);
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения", "");
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);

			
#Если  МобильноеПриложениеКлиент  тогда
	Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
		Сообщить("не поддерживает сканирование штрихкода");
		Возврат;
	КонецЕсли; 	
#КонецЕсли
	ПотоковеоСанирование = Истина;
	ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
#Если  МобильноеПриложениеКлиент  тогда
	СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Камеру на штрихкод", ОбработчикСканирования, ОбработчикЗакрытия,ТипШтрихКода.Двухмерный);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СтартСканироватьКлавиатура()
	ЗаписатьПараметрыСеансаИдетСканирование(Истина);
	ПараметрыПредупреждения = Новый Структура;
	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
	ПараметрыПредупреждения.Вставить("ТекстПредупреждения", "");
	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
	ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	Перем СтрокаШтрихкода1, ИнформацияБирки, ВыводитьПредупреждения;
	ВыводитьПредупреждения = Истина;
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Если ЗакрытьИнтерфейс Тогда
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	//КонецЕсли;
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Штрихкод);
	//Сообщить(Штрихкод);
	Если Результат Тогда
		СтрокаШтрихкода1 = СтрЗаменить( Штрихкод, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				Сигнал();
				//сообщить("1" + Строка(ТекущаяДата()));
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2" + Строка(ТекущаяДата()));
				
			КонецЕсли;	
			//сообщить("3" + Строка(ТекущаяДата()));
		Если ВыводитьПредупреждения Тогда	
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		КонецЕсли;
			//сообщить("4" + Строка(ТекущаяДата()));
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5" + Строка(ТекущаяДата()));
				СтруктураОтбора = ПолучитьИменаКолонокВерсииОтборВерсия();
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрокПоОтбору.Количество() = 0 Тогда
					НоваяСтрока = объект.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
					НоваяСтрока.Датаоперации = ТекущаяДата();
					НоваяСтрока.Представление = ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
					ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
					ТекстШапкиПредупреждения = "Добавлена";
					Сообщение = ТекстПредупреждения;
					Модифицированность = Истина;
					//сообщить("7" + Строка(ТекущаяДата()));
					
					//КонецЕсли;
				Иначе
					ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
					ТекстШапкиПредупреждения = "Строка есть";
					//сообщить("8" + Строка(ТекущаяДата()));
				КонецЕсли;
				//сообщить("9" + Строка(ТекущаяДата()));
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10" + Строка(ТекущаяДата()));
		КонецЕсли;
		
		ЗакрытьИнтерфейс = Истина;
		ОткрытьИнтерфейсПосле = Истина;
		//Сообщить( "Закрытиие сканирования ");
	Иначе
		Текст = "Ошибка: " + Сообщение;
		//сообщить("11" + Строка(ТекущаяДата()));
	КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12" + Строка(ТекущаяДата()));
		ОбновитьОтображениеИнформацииШапка();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13" + Строка(ТекущаяДата()));
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14" + Строка(ТекущаяДата()));
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			Если ВыводитьПредупреждения Тогда	
				#Если МобильноеПриложениеКлиент Тогда
					Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
				#КонецЕсли
			КонецЕсли;	
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("15" + Строка(ТекущаяДата()));
		КонецЕсли;	
		Если Не ПараметрыСеансаИдетСканирование() Тогда
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			//сообщить("16" + Строка(ТекущаяДата()));
			СтартСканировать();
			//сообщить("17" + Строка(ТекущаяДата()));
		КонецЕсли;	
		//сообщить("18" + Строка(ТекущаяДата()));
		
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
	КонецЕсли;
	//Предупреждение(ТекстПредупреждения,4,ТекстШапкиПредупреждения);
	//Сообщить(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканированияКлавиатура() Экспорт
	Перем СтрокаШтрихкода1, ИнформацияБирки;
	
	Сообщение = "";
	РезультатШК = "";
	РезультатШКВвод = "";
	//Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихКод, ИнформацияБирки) тогда
	//	Объект.ДанныеБирки.Очистить();
	//	Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
	//		НоваяСтрока = Объект.ДанныеБирки.Добавить();
	//		ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
	//	КонецЦикла;
	//КонецЕсли;
	//ВвестиСтроку(РезультатШКВвод,);
	//Если  Элементы.СтрокаШтрихКод.ТекстРедактирования <> ""  ИЛИ СтрокаШтрихКод <> "" Тогда
	//	//ШКДляОбработки = ШКСтатус;
	//	ОчиститьСтрокаШтрихКод();
	//	РезультатШК = РезультатШК + Элементы.СтрокаШтрихКод.ТекстРедактирования;
	//	Элементы.СтрокаШтрихКод.ОбновитьТекстРедактирования();
	//	
	//	//Сообщить("Текст: " + Элементы.СтрокаШтрихКод.ТекстРедактирования);
	//	//Сообщить("Данные: " + СтрокаШтрихКод);
	//	//ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
	//КонецЕсли;	
	
	//Если  Элементы.СтрокаШтрихКод.ТекстРедактирования <> ""  ИЛИ СтрокаШтрихКод <> "" Тогда
	//	//ШКДляОбработки = ШКСтатус;
	//	ОчиститьСтрокаШтрихКод();
	//	РезультатШК = РезультатШК + Элементы.СтрокаШтрихКод.ТекстРедактирования;
	//	Элементы.СтрокаШтрихКод.ОбновитьТекстРедактирования();
	//	
	//	//Сообщить("Текст: " + Элементы.СтрокаШтрихКод.ТекстРедактирования);
	//	//Сообщить("Данные: " + СтрокаШтрихКод);
	//	//ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
	//КонецЕсли;	
	Если РезультатШК = "" Тогда
		Возврат;
	КонецЕсли;	
	Попытка
		ТекущийРезультат = "";
		ТекущийРезультат = РезультатШК;
		РезультатШК = "";
		СтрокаШтрихкода1 = СтрЗаменить( ТекущийРезультат, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				Сигнал();
				//сообщить("1");
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2");
				
			КонецЕсли;	
			//сообщить("3");
			//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			//сообщить("4");
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5");
				СтруктураОтбора = ПолучитьИменаКолонокВерсииОтборВерсия();
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрокПоОтбору.Количество() = 0 Тогда
					НоваяСтрока = объект.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
					НоваяСтрока.Датаоперации = ТекущаяДата();
					НоваяСтрока.Представление = ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
					ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
					ТекстШапкиПредупреждения = "Добавлена";
					Модифицированность = Истина;
					//сообщить("7");
					
					//КонецЕсли;
				Иначе
					ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
					ТекстШапкиПредупреждения = "Строка есть";
					//сообщить("8");
				КонецЕсли;
				//сообщить("9");
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10");
		КонецЕсли;
		Результат = "";
	Исключение
		сообщить(ОписаниеОшибки());
		//сообщить("10.5");
		РезультатШК = ТекущийРезультат + РезультатШК;
	КонецПопытки;
	ЗакрытьИнтерфейс = Истина;
	ОткрытьИнтерфейсПосле = Истина;
	//Сообщить( "Закрытиие сканирования ");
	//Иначе
	//	Текст = "Ошибка: " + Сообщение;
		//сообщить("11");
	//КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12");
		ОбновитьОтображениеИнформацииШапка();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14");
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			//Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//ТекущийЭлемент = Элементы.Материалы;
			//сообщить("15");
		КонецЕсли;	
		Если Не ПараметрыСеансаИдетСканирование() Тогда
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			//сообщить("16");
			//СтрокаШтрихКод = "";
			//СтартСканироватьКлавиатура();
			//сообщить("17");
		КонецЕсли;	
		//сообщить("18");
		Если ОткрытьИнтерфейсПосле = Истина Тогда
			ТекущийЭлемент = Элементы.СтрокаШтрихКод;
			ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
			ЭтаФорма.Активизировать(); 
		КонецЕсли;	
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ПрочитатьИзСтроки(Команда)
	ОбработкаСканированияКлавиатура();
	СтрокаШтрихКод = "";
	ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
	ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
КонецПроцедуры




&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
		//Если Не ПараметрыСеансаИдетСканирование() Тогда
		//	ПараметрыПредупреждения = Новый Структура;
		//	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
		//	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
		//	ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
		//	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
		//	//сообщить("16" + Строка(ТекущаяДата()));
		//	СтартСканировать();
		//	//сообщить("17" + Строка(ТекущаяДата()));
		//КонецЕсли;	
		//ПараметрыПредупреждения = ПараметрыПредупреждения();
		//Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
		//	Если ПараметрыПредупреждения.ПредупреждениеГотово Тогда
		//		Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,4,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
		//		ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
		//		ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
		//	КонецЕсли
		//КонецЕсли;	
		//Если Не ПараметрыСеансаИдетСканирование() Тогда
		//	ПараметрыПредупреждения = Новый Структура;
		//	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
		//	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
		//	ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
		//	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
		//	СтартСканировать();
		//КонецЕсли;	
	//Сообщить("Закрывается интерфейс сканирования");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПредупреждения(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры


&НаСервере
Функция ПараметрыПредупреждения() Экспорт
	ПараметрыПредупреждения = ПараметрыСеанса.ПараметрыПредупреждения.Получить();
	Возврат ПараметрыПредупреждения;
КонецФункции
	
Процедура ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения) Экспорт
	ПараметрыПредупреждения = Новый ХранилищеЗначения(ПараметрыПредупреждения);
	ПараметрыСеанса.ПараметрыПредупреждения = ПараметрыПредупреждения;
КонецПроцедуры


&НаСервере
Процедура ОчиститьСтрокаШтрихКод() Экспорт
	СтрокаШтрихКод = "";
КонецПроцедуры


&НаСервере
Функция ПараметрыСеансаИдетСканирование() Экспорт
		ИдетСканирование = ПараметрыСеанса.ИдетСканирование;
		Возврат ИдетСканирование;

КонецФункции
	
Процедура ЗаписатьПараметрыСеансаИдетСканирование(Значение) Экспорт
		ПараметрыСеанса.ИдетСканирование = Значение;
КонецПроцедуры

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
&НаСервере
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
&НаСервере
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	
	Пока Не ПустаяСтрока( ПраваяЧасть) Цикл
		Массив.Добавить( СокрЛП( Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	КонецЦикла; 
	
	Массив.Добавить( СокрЛП( Стр));

	Возврат( Массив);
	
КонецФункции // МассивИзСтроки() 


//******************************************* Печать и чтение этикетки *******************************************************
&НаСервере
Функция ПолучитьИменаКолонокВерсииОтборВерсия() Экспорт
	Имена = Новый Структура;

	//Имена.Вставить("ПоСвойствам");
	//Имена.Вставить("РабочийЦентр");
	Имена.Вставить("Номенклатура");
	Имена.Вставить("МаркаСплава");
	Имена.Вставить("ГруппаПродукции");
	Имена.Вставить("ХарактеристикаНоменклатуры");
	//Имена.Вставить("СерияНоменклатуры");
	//Имена.Вставить("Состояние");
	Имена.Вставить("Коэффициент");
	Имена.Вставить("Коэффициент1");
	//Имена.Вставить("ЕдиницаИзмерения1");
	//Имена.Вставить("ПаспортПартии");
	Имена.Вставить("Количество");
	Имена.Вставить("Количество1");
	Имена.Вставить("КоличествоМест");
	Имена.Вставить("Тара");
	Имена.Вставить("КоличествоТара");
	//Имена.Вставить("Размер1");
	//Имена.Вставить("Размер2");
	//Имена.Вставить("Размер3");
	//Имена.Вставить("Размер4");
	//Имена.Вставить("Размер5");
	//Имена.Вставить("ДополнительнаяИнформация");
	//Имена.Вставить("Маркировка");
	//Имена.Вставить("ОбъемПогонногоМетра");
	
	//Если Версия >= "003" тогда
	//	Имена.Вставить("ЕдиницаИзмерения");
	//КонецЕсли;
	
	Возврат( Имена);
КонецФункции

&НаСервере
Функция ПолучитьИменаКолонокВерсииЭтикетки( Версия) Экспорт
	Имена = Новый Структура;

	Имена.Вставить("ПоСвойствам");
	Имена.Вставить("РабочийЦентр");
	Имена.Вставить("Номенклатура");
	Имена.Вставить("МаркаСплава");
	Имена.Вставить("ГруппаПродукции");
	Имена.Вставить("ХарактеристикаНоменклатуры");
	Имена.Вставить("СерияНоменклатуры");
	Имена.Вставить("Состояние");
	Имена.Вставить("Коэффициент");
	Имена.Вставить("Коэффициент1");
	Имена.Вставить("ЕдиницаИзмерения1");
	Имена.Вставить("ПаспортПартии");
	Имена.Вставить("Количество");
	Имена.Вставить("Количество1");
	Имена.Вставить("КоличествоМест");
	Имена.Вставить("Тара");
	Имена.Вставить("КоличествоТара");
	Имена.Вставить("Размер1");
	Имена.Вставить("Размер2");
	Имена.Вставить("Размер3");
	Имена.Вставить("Размер4");
	Имена.Вставить("Размер5");
	Имена.Вставить("ДополнительнаяИнформация");
	Имена.Вставить("Маркировка");
	Имена.Вставить("ОбъемПогонногоМетра");
	
	Если Версия >= "003" тогда
		Имена.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Возврат( Имена);
КонецФункции

&НаСервере
Функция ПолучитьТипыВерсииЭтикетки( Версия) Экспорт
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить( Тип("Число"),	"Число");
	СписокТипов.Добавить( Тип("Булево"),"Булево");
	СписокТипов.Добавить( Тип("Дата"),	"Дата");
	СписокТипов.Добавить( Тип("Строка"),"Строка");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеЦентры"),					"СправочникСсылка.РабочиеЦентры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МаркиСплавов"),					"СправочникСсылка.СК_МаркиСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПродукцияОЦМ"),					"СправочникСсылка.СК_ПродукцияОЦМ");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЗначенияСвойствОбъектов"),			"СправочникСсылка.ЗначенияСвойствОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТипыРазмеров"),					"СправочникСсылка.СК_ТипыРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.Номенклатура"),						"СправочникСсылка.Номенклатура");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство"),		"СправочникСсылка.УГМК_МаркаСплаваПроизводство");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ГруппыПродукции"),				"СправочникСсылка.СК_ГруппыПродукции");
	СписокТипов.Добавить( Тип("СправочникСсылка.ХарактеристикиНоменклатуры"),		"СправочникСсылка.ХарактеристикиНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ЗначенияРазмеров"),			"СправочникСсылка.УГМК_ЗначенияРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.СерииНоменклатуры"),				"СправочникСсылка.СерииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Состояния"),						"СправочникСсылка.СК_Состояния");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЕдиницыИзмерения"),					"СправочникСсылка.ЕдиницыИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),		"СправочникСсылка.КлассификаторЕдиницИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ТараТехнологическая"),			"СправочникСсылка.УГМК_ТараТехнологическая");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПартияСырья");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_Плавка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартии");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартииСТК");
	
	СписокТипов.Добавить( Тип("СправочникСсылка.ГрафикиРаботы"),					"СправочникСсылка.ГрафикиРаботы");
	СписокТипов.Добавить( Тип("СправочникСсылка.Должности"),						"СправочникСсылка.Должности");
	СписокТипов.Добавить( Тип("СправочникСсылка.ДолжностиОрганизаций"),				"СправочникСсылка.ДолжностиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ИнформационныеКарты"),				"СправочникСсылка.ИнформационныеКарты");
	СписокТипов.Добавить( Тип("СправочникСсылка.КатегорииОбъектов"),				"СправочникСсылка.КатегорииОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.Качество"),							"СправочникСсылка.Качество");
	СписокТипов.Добавить( Тип("СправочникСсылка.Контрагенты"),						"СправочникСсылка.Контрагенты");
	СписокТипов.Добавить( Тип("СправочникСсылка.НоменклатурныеГруппы"),				"СправочникСсылка.НоменклатурныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры"),"СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Организации"),						"СправочникСсылка.Организации");
	СписокТипов.Добавить( Тип("СправочникСсылка.Подразделения"),					"СправочникСсылка.Подразделения");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПодразделенияОрганизаций"),			"СправочникСсылка.ПодразделенияОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПоказателиАнализовНоменклатуры"),	"СправочникСсылка.ПоказателиАнализовНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Проекты"),							"СправочникСсылка.Проекты");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПрофессииРабочих"),					"СправочникСсылка.ПрофессииРабочих");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеМеста"),						"СправочникСсылка.РабочиеМеста");
	СписокТипов.Добавить( Тип("СправочникСсылка.Склады"),							"СправочникСсылка.Склады");
	СписокТипов.Добавить( Тип("СправочникСсылка.Смены"),							"СправочникСсылка.Смены");
	СписокТипов.Добавить( Тип("СправочникСсылка.СотрудникиОрганизаций"),			"СправочникСсылка.СотрудникиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СохраненныеНастройки"),				"СправочникСсылка.СохраненныеНастройки");
	СписокТипов.Добавить( Тип("СправочникСсылка.СпецификацииНоменклатуры"),			"СправочникСсылка.СпецификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СценарииПланирования"),				"СправочникСсылка.СценарииПланирования");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТарифныеРазряды"),					"СправочникСсылка.ТарифныеРазряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеКартыПроизводства"), "СправочникСсылка.ТехнологическиеКартыПроизводства");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеОперации"),			"СправочникСсылка.ТехнологическиеОперации");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТиповыеАнализыНоменклатуры"),		"СправочникСсылка.ТиповыеАнализыНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВариантыТехнологическихОпераций"),	"СправочникСсылка.УГМК_ВариантыТехнологическихОпераций");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций"),	"СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ФормыСечения"),					"СправочникСсылка.СК_ФормыСечения");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МетодыИзготовления"),			"СправочникСсылка.СК_МетодыИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТочностьИзготовления"),			"СправочникСсылка.СК_ТочностьИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_НДНаПродукцию"),					"СправочникСсылка.СК_НДНаПродукцию");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Мерность"),						"СправочникСсылка.СК_Мерность");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ОсобыеУсловия"),					"СправочникСсылка.СК_ОсобыеУсловия");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ВидыСплавов"),					"СправочникСсылка.СК_ВидыСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.tb_Производитель"),					"СправочникСсылка.tb_Производитель");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_СостоянияЗаказа"),				"СправочникСсылка.УГМК_СостоянияЗаказа");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Бригады"),						"СправочникСсылка.УГМК_Бригады");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Разряды"),						"СправочникСсылка.УГМК_Разряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТочкиМаршрута"),					"СправочникСсылка.ТочкиМаршрута");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПроизводственныеГруппы"),		"СправочникСсылка.СК_ПроизводственныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Комиссии"),					"СправочникСсылка.УГМК_Комиссии");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВидыБрака"),					"СправочникСсылка.УГМК_ВидыБрака");
	СписокТипов.Добавить( Тип("СправочникСсылка.ФизическиеЛица"),					"СправочникСсылка.ФизическиеЛица");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_АвтотранспортВнутренний"),		"СправочникСсылка.УГМК_АвтотранспортВнутренний");
	СписокТипов.Добавить( Тип("СправочникСсылка.Пользователи"),						"СправочникСсылка.Пользователи");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров"),	"СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ДиапазоныЗначений"),			"СправочникСсылка.УГМК_ДиапазоныЗначений");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МетодыПроведенияИсследований"),"СправочникСсылка.УГМК_МетодыПроведенияИсследований");
	
	СписокТипов.Добавить( Тип("ДокументСсылка.АктОтбораПробНоменклатуры"),			"ДокументСсылка.АктОтбораПробНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.ВнутреннийЗаказ"),					"ДокументСсылка.ВнутреннийЗаказ");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказНаПроизводство"),				"ДокументСсылка.ЗаказНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказПокупателя"),					"ДокументСсылка.ЗаказПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры"),	"ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаНаПроизводство"),	"ДокументСсылка.КорректировкаЗаказаНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаПокупателя"),		"ДокументСсылка.КорректировкаЗаказаПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.СертификацияНоменклатуры"),			"ДокументСсылка.СертификацияНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_НормыПроизводства"),				"ДокументСсылка.УГМК_НормыПроизводства");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ДокументФакт"),					"ДокументСсылка.УГМК_ДокументФакт");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"ДокументСсылка.УГМК_Регистратор");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Упаковка"),						"ДокументСсылка.УГМК_Упаковка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_РезультатАнализа"),				"ДокументСсылка.УГМК_РезультатАнализа");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ЗаявкаНаАнализ"),				"ДокументСсылка.УГМК_ЗаявкаНаАнализ");
		
	СписокТипов.Добавить( Тип("Неопределено"),	"Неопределено");
	
	Возврат( СписокТипов);
КонецФункции

&НаСервере
Функция ПолучитьИндексТипа( СписокТипов, Значение) Экспорт
	ТипЗначение = ТипЗнч( Значение);
	ЭлементС = СписокТипов.НайтиПоЗначению( ТипЗначение);
	Если ЭлементС = Неопределено тогда
		ИндексС = -1;
		Сообщить("ПолучитьИндексТипа: Неожиданный тип значения ["+Строка( ТипЗначение)+"]");
	иначе
		ИндексС = СписокТипов.Индекс( ЭлементС);
	КонецЕсли;
	
	Возврат( ИндексС);
КонецФункции

&НаСервере
Функция СконвертироватьЗначениеИзСтроки( СтрокаФайла, ТипЗначения)
	Если ЗначениеЗаполнено( СтрокаФайла) тогда
		Значение = XMLЗначение( ТипЗначения, СтрокаФайла);
	иначеЕсли ТипЗначения = Тип("Число") тогда
		Значение = 0;
	иначеЕсли ТипЗначения = Тип("Строка") тогда
		Значение = "";
	иначеЕсли ТипЗначения = Тип("Булево") тогда
		Значение = Ложь;
	иначеЕсли ТипЗначения = Тип("Дата") тогда
		Значение = '00010101';
	иначеЕсли ТипЗначения = Тип("Неопределено") тогда
		Значение = Неопределено;
	иначе
		ТипДляПриведения = Новый Массив;
		ТипДляПриведения.Добавить( ТипЗначения);
		Описание = Новый ОписаниеТипов( ТипДляПриведения);
		Значение = Описание.ПривестиЗначение( Неопределено);
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

&НаСервере
Функция ПолучитьСледующееЗначениеИзФайла( Файл, НомерСтроки, ТипЗначения) Экспорт
	Перем Значение;
	
	Значение = СконвертироватьЗначениеИзСтроки( Файл.ПолучитьСтроку( НомерСтроки), ТипЗначения);
	НомерСтроки = НомерСтроки + 1;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция ПолучитьСледующееЗначениеИзМассива( МассивИсточник, Индекс, ТипЗначения) Экспорт
	Перем Значение;
	//Сообщить("ПолучитьСледующееЗначениеИзМассива: ["+Строка( ТипЗначения)+"] "+МассивИсточник[ Индекс]);	
	Значение = СконвертироватьЗначениеИзСтроки( МассивИсточник[ Индекс], ТипЗначения);
	Индекс = Индекс + 1;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция ПолучитьТипПоИндексу( СписокТипов, Индекс) Экспорт
	Перем Значение;
	
	Если Индекс = -1 или Индекс = Неопределено тогда
		Значение = Тип("Неопределено");
	иначе
		ЭлементЗ = СписокТипов.Получить( Индекс);
		Значение = ЭлементЗ.Значение;
	КонецЕсли;
	
	Возврат( Значение)
КонецФункции

&НаСервере
Функция УзлыРегистрации( Ссылка, ИмяТаблицы) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",Ссылка);
	Запр.Текст = "ВЫБРАТЬ
	             |	ХарактеристикиНоменклатурыИзменения.Узел,
	             |	ХарактеристикиНоменклатурыИзменения.НомерСообщения,
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка
	             |ИЗ
	             |	"+ИмяТаблицы+".Изменения КАК ХарактеристикиНоменклатурыИзменения
	             |ГДЕ
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка = &Ссылка
	             |	И ХарактеристикиНоменклатурыИзменения.Узел ССЫЛКА ПланОбмена.УГМК_ОперативныйУчетНСИ";
	Результат = Запр.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	Возврат( Результат);
КонецФункции
	
// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	[ИмяТаблицы]
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления) Экспорт
	Если ЗначениеЗаполнено( ЗначениеСсылка) и (не СсылкаСуществует( ЗначениеСсылка)) тогда
		Мета = Метаданные.НайтиПоТипу( ТипЗначения);
		ОбъектБП = Документы[ Мета.Имя].СоздатьДокумент();
		ОбъектБП.УстановитьСсылкуНового( ЗначениеСсылка);
		//ОбъектБП.УГМК_Временный = Истина;
		ОбъектБП.Дата = ЗначениеДата;
		ОбъектБП.Номер = ЗначениеНомер;
		ОбъектБП.ПредставлениеИсточника = ЗначениеДляПредставления;
		ОбъектБП.УИД_Источника = ЗначениеСсылка.УникальныйИдентификатор();
		ОбъектБП.СсылкаИсточника = ЗначениеСсылка;
		ОбъектБП.ОбменДанными.Загрузка = Истина;
		//ОбъектБП.ОбменДанными.Получатели.Очистить();
		ОбъектБП.Записать();
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "БизнесПроцесс."+Мета.Имя), ЗначениеСсылка);
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
КонецФункции

&НаСервере
Функция ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование) Экспорт
	Если ЗначениеЗаполнено( ЗначениеСсылка) и (не СсылкаСуществует( ЗначениеСсылка)) тогда
		ОбъектСпрВладелец = Справочники.СК_ТипыРазмеров.НайтиПоКоду( ЗначениеВладелецКод);
		//Сообщить("ПолучитьСсылкуЗначенияРазмера ["+ОбъектСпрВладелец+"] "+Строка( ЗначениеВладелецКод));
		Если ЗначениеЗаполнено( ОбъектСпрВладелец) тогда
			ОбъектСпр = Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
			ОбъектСпр.УстановитьСсылкуНового( ЗначениеСсылка);
			ОбъектСпр.УГМК_Временный = Истина;
			ОбъектСпр.Код = ЗначениеКод;
			ОбъектСпр.Владелец = ОбъектСпрВладелец;
			ОбъектСпр.Наименование = ЗначениеНаименование;
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			ОбъектСпр.ОбменДанными.Получатели.Очистить();
			ОбъектСпр.Записать();
		иначе
			//Сообщить("ПолучитьСсылкуЗначенияРазмера: Не найден владелец с кодом ["+ЗначениеВладелецКод+"]");
		КонецЕсли;
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "Справочник.УГМК_ЗначенияРазмеров"), ЗначениеСсылка);
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
КонецФункции

&НаСервере
Процедура ПроверитьПоляЗначенияРазмеров( НоваяСтрока) Экспорт
	Сообщить( "ПроверитьПоляЗначенияРазмеров: ["+Строка( НоваяСтрока.ХарактеристикаНоменклатуры.Владелец)+"]"+Строка( НоваяСтрока.ХарактеристикаНоменклатуры));
	Если ЗначениеЗаполнено( НоваяСтрока.ХарактеристикаНоменклатуры) и СсылкаСуществует( НоваяСтрока.ХарактеристикаНоменклатуры) и НоваяСтрока.ХарактеристикаНоменклатуры.УГМК_Временный тогда
		ОбъектСпр = НоваяСтрока.ХарактеристикаНоменклатуры.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств( ОбъектСпр, НоваяСтрока, "Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра");
		ОбъектСпр.Записать();
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( НоваяСтрока.ХарактеристикаНоменклатуры, "Справочник.УГМК_ЗначенияРазмеров"), НоваяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	Сообщить( "ПроверитьПоляЗначенияРазмеров--");
КонецПроцедуры

&НаСервере
Функция НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, ИмяПоля)
	Мета = Метаданные.НайтиПоТипу( ТипЗначения);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Код",ЗначениеКод);
	Запр.Текст = "ВЫБРАТЬ первые 1
	             |	Спр.Ссылка как Ссылка
	             |ИЗ
	             |	Справочник."+Мета.Имя+" КАК Спр
	             |ГДЕ
	             |	Спр."+ИмяПоля+" = &Код";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Значение = Результат.Ссылка;
	иначе
		//Сообщить("НайтиЭлементСправочникаПоРеквизиту: Не найден элемент справочника ["+Мета.Имя+"] с ["+ИмяПоля+"] = ["+ЗначениеКод+"]");
		Значение = Справочники[ Мета.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

&НаСервере
Функция ПолучитьЗакодированнуюСсылку( ОбъектСсылка, Версия = "004") Экспорт
	СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
	Элемент = СписокТипов.НайтиПоЗначению( ТипЗнч( ОбъектСсылка));
	
	Если Элемент = Неопределено тогда
		Результат = Неопределено;
	иначе
		ПрефиксТипа = Формат( СписокТипов.Индекс( Элемент), "ЧЦ=3; ЧВН=; ЧГ=0");
		Результат = ПрефиксТипа+XMLСтрока( ОбъектСсылка)+Символы.ВК;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

&НаСервере
Функция ВосстановитьСсылкуИзШтрихкода( Знач СтрокаКода, Версия = "004") Экспорт
	Результат = Неопределено;
	
	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК, ""); 
	Если СтрДлина( СтрокаКода) = 39 тогда
		Попытка 
			ИндексТипа = Число( Лев( СтрокаКода, 3));
		исключение
			ИндексТипа = Неопределено;
		КонецПопытки;
		
		Если ИндексТипа <> Неопределено тогда
			СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
			Если СписокТипов.Количество() - 1 >= ИндексТипа тогда
				ЭлементТипа = СписокТипов[ ИндексТипа];
				Результат = XMLЗначение( ЭлементТипа.Значение, Сред( СтрокаКода, 4));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

&НаСервере
Функция ПрочитатьСтрокуЭтикетки( Знач ТекстДляКодирования, РезультатЧтенияБирки) Экспорт
	Перем ДанныеБирки;
	
	Если ТипЗнч( РезультатЧтенияБирки) <> Тип("Структура") тогда
		РезультатЧтенияБирки = Новый Структура;
	иначе
		РезультатЧтенияБирки.Очистить();
	КонецЕсли;
	Если Лев( ТекстДляКодирования, 1) = "_" тогда
		ТекстДляКодирования = "AgFTS2/0iI3BTqDV67a9oKcN"+Сред( ТекстДляКодирования, 2);
	КонецЕсли;
	
	СтрокаШтрихКод = ТекстДляКодирования;
	//Сообщить("+++" + СтрокаШтрихКод);
	//Объект.СтрокаШтрихКод = ТекстДляКодирования;
	
	Попытка 
		Данные = XMLЗначение( Тип("ХранилищеЗначения"), ТекстДляКодирования);	
		ДанныеИзКода = Данные.Получить();
		
		БиркаСодержитХранилище = Истина;
	//Сообщить("+++БиркаСодержитХранилище");
	исключение
		БиркаСодержитХранилище = Ложь;
	//Сообщить("+++БиркаНЕСодержитХранилище");
	КонецПопытки;
	

	БиркаСодержитХранилище = БиркаСодержитХранилище и ТипЗнч( ДанныеИзКода) = Тип("Строка");
	//Сообщить(СТрока(ТипЗнч( ДанныеИзКода)));
	
	Если БиркаСодержитХранилище тогда
		Файл = МассивИзСтроки( ДанныеИзКода, Символы.ПС);
		
		//Сообщить( "+0 "+Строка( ТипЗнч( Данные))+" "+Строка( Данные));
		//Сообщить( "+1 "+Строка( ТипЗнч( ТекстДляКодирования))+" "+Строка( ТекстДляКодирования));
		//Сообщить( "+2 "+Строка( ТипЗнч( ДанныеИзКода))+" "+Строка( ДанныеИзКода));
		//Сообщить( "+3 "+Строка( ТипЗнч( Файл))+" "+Строка( Файл));
		//Сообщить( Строка( Файл.Количество()));
		
ТекСтрока = 0;
		ВерсияЭтикетки = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
		
		Если ВерсияЭтикетки = "001" тогда
			СтрУИД = Лев( ТекстДляКодирования, 30);
		иначе
			СтрУИД = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
		КонецЕсли;
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", СтрУИД);
		
		СписокТипов = ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
		
		ПростыеТипы = Новый Массив;
		ПростыеТипы.Добавить( Тип( "Число"));
		ПростыеТипы.Добавить( Тип( "Строка"));
		ПростыеТипы.Добавить( Тип( "Дата"));
		ПростыеТипы.Добавить( Тип( "Булево"));
		ПростыеТипы.Добавить( Тип( "Неопределено"));
		
		Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
		Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
		
		СтруктураКолонок = ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
		
		ПоследнийИндекс = Файл.Количество()-1;
		
		ДанныеБирки = Новый Массив;
		Пока 1 = 1 цикл
			Если ТекСтрока >= ПоследнийИндекс тогда
				Прервать;
			КонецЕсли;
			
			//Сообщить("++"+Строка( ТекСтрока));
		
			НоваяСтрока = Новый Структура;
				
			Для каждого Колонка из СтруктураКолонок цикл
				КолонкаИмя = Колонка.Ключ;
				
				Если КолонкаИмя = "ПаспортПартии" тогда
					ИндексТипа = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
					ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
					ЗначениеДата = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Дата"));
					ЗначениеНомер = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеДляПредставления = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеСсылка = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					
					Если ПростыеТипы.Найти( ТипЗначения) = Неопределено тогда
						Значение = ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления);
					иначе
						Значение = Неопределено;
					КонецЕсли;
				иначе
					ИндексТипа = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
					ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
					Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
						Значение = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
						ЗначениеУГМК_Код = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					//	Значение = Неопределено;
					//Продолжить;
					Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеУГМК_Код, "УГМК_Код");
					иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
						ЗначениеКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеВладелецКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеНаименование = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
						ЗначениеСсылка = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					//Значение = Неопределено;
					//Продолжить;
						
						Значение = ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование);
					иначе
						ЗначениеКод = ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					//	Значение = Неопределено;
					//Продолжить;
					Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, "Код");
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Вставить( КолонкаИмя, Значение);
			КонецЦикла;
			
			//Если ТипЗнч( НоваяСтрока.ХарактеристикаНоменклатуры) = Тип_ЗначенияРазмеров тогда
			//	//ПроверитьПоляЗначенияРазмеров( НоваяСтрока);
			//КонецЕсли;
			
			ДанныеБирки.Добавить( НоваяСтрока);
			//Сообщить("++2");
			//ДанныеБирки = Неопределено;
			//Данные = Неопределено;
			//ДанныеИзКода = Неопределено;
			//Файл = Неопределено;
			//СписокТипов = Неопределено;
			//Тип_ХарактеристикиНоменклатуры = Неопределено;
			//Тип_ЗначенияРазмеров = Неопределено;
			//СтруктураКолонок = Неопределено;
			//НоваяСтрока = Неопределено;
			//Колонка = Неопределено;
			//ТипЗначения = Неопределено;
			//ЗначениеСсылка = Неопределено;
			//Значение = Неопределено;
			//ПростыеТипы = Неопределено;
			
		КонецЦикла;
			//Сообщить("++3");
		
		РезультатЧтенияБирки.Вставить("ДанныеБирки", ДанныеБирки);
		//РезультатЧтенияБирки.Вставить("ДанныеБирки", "Структура");
	иначе
			//Сообщить("++4");
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
		РезультатЧтенияБирки.Вставить("ДанныеБирки", Новый Массив);
	КонецЕсли;
			//Сообщить("++5");
	Возврат ( БиркаСодержитХранилище)
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьОтображениеИнформации();
	ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
	СканированиеКомпонентой1С = Константы.СканированиеКомпонентой1С.Получить();
	Элементы.Сканировать.Видимость = СканированиеКомпонентой1С;
	//Элементы.СтрокаШтрихКод.Видимость = НЕ СканированиеКомпонентой1С;
	//Элементы.СтрокаШтрихКод.Доступность = НЕ СканированиеКомпонентой1С;
	

	//ТаблицаМатериалы.Загрузить(Объект.Материалы.Выгрузить());
	//Для каждого Строка Из ТаблицаМатериалы Цикл
	//	Строка.Представление = ПредставлениеСтрокиСервер(Строка);
	//КонецЦикла;
КонецПроцедуры

Процедура ОбновитьОтображениеИнформацииШапка()
	ЭтаФорма.Заголовок = "Итого(количество): " + Строка(Объект.Материалы.Итог("Количество"));
	//Элементы.ИнформацияПоДокументу.Заголовок = Строка("Опись металла № " + Строка(Объект.Номер) + " от " + Строка(Объект.Дата));
КонецПроцедуры	

Процедура ОбновитьОтображениеИнформации()
	Для каждого Строка Из Объект.Материалы Цикл
		Строка.Представление = ПредставлениеСтрокиСервер(Строка);
		Если ЗначениеЗаполнено(Строка.Тара) Тогда 
			Строка.ТараНаименование = Строка.Тара.Наименование;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Строка.МаркаСплава) Тогда 
			Строка.МаркаСплаваНаименование = Строка.МаркаСплава.Наименование;
		КонецЕсли;	
	КонецЦикла;
	ОбновитьОтображениеИнформацииШапка();
	//Элементы.ИнформацияПоДокументу.Заголовок = Строка("Опись металла № " + Строка(Объект.Номер) + " от " + Строка(Объект.Дата));
КонецПроцедуры	


&НаКлиенте
Процедура ТаблицаМатериалыПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаМатериалы.ТекущаяСтрока;
	//сообщить( "Номер строки : " + Строка(ТекущаяСтрока));
	Если ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = Элементы.ТаблицаМатериалы.ДанныеСтроки(ТекущаяСтрока);
		Элементы.ИнформацияПоСтроке.Заголовок = ПредставлениеСтрокиКлиент(ДанныеСтроки);
		//Строка(ДанныеСтроки.МаркаСплава) + " ; "
		//										+ Строка(ДанныеСтроки.ГруппаПродукции) + " ; "
		//										+ Строка(ДанныеСтроки.ХарактеристикаНоменклатуры) + " ; "
		//										+ Строка(ДанныеСтроки.СерияНоменклатуры) + " ; "
		//										+ Строка(ДанныеСтроки.Коэффициент) + " ; "
		//										+ Строка(ДанныеСтроки.Количество) + " ; "
		//										+ Строка(ДанныеСтроки.Количество1) + " ; "
		//										+ Строка(ДанныеСтроки.КоличествоМест) + " ; "
		//										+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
		//										+ Строка(ДанныеСтроки.Маркировка) ;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМатериалыПередНачаломИзменения(Элемент, Отказ)
	Отказ =Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМатериалыПриИзменении(Элемент)
	ДанныеСтрокиЗапись = Элемент.ДанныеСтроки(Элемент.ТекущаяСтрока);
	ДанныеСтрокиЗапись.Представление = ПредставлениеСтрокиКлиентКратко(ДанныеСтрокиЗапись);
КонецПроцедуры

&НаСервере
Функция ПредставлениеСтрокиСервер(ДанныеСтрокиЗапись)
	СтрокаПредставление = "";
	Если ДанныеСтрокиЗапись.ПоСвойствам Тогда 
		 //Строка(ДанныеСтрокиЗапись.МаркаСплава) + " ; " + 
							СтрокаПредставление = Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Маркировка);
		
	Иначе	
							СтрокаПредставление = Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Номенклатура) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Маркировка);
		
	КонецЕсли;	
	Возврат СтрокаПредставление;
КонецФункции


&НаКлиенте
Функция ПредставлениеСтрокиКлиент(ДанныеСтрокиЗапись)
	СтрокаПредставление = "";
	Если ДанныеСтрокиЗапись.ПоСвойствам Тогда 
		 //Строка(ДанныеСтрокиЗапись.МаркаСплава) + " ; " + 
							СтрокаПредставление = Строка(ДанныеСтрокиЗапись.МаркаСплава) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Маркировка);
		
	Иначе	
							СтрокаПредставление = Строка(ДанныеСтрокиЗапись.Номенклатура) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Маркировка);
	
	КонецЕсли;	
	Возврат СтрокаПредставление;
КонецФункции

&НаКлиенте
Функция ПредставлениеСтрокиПредупреждение(ДанныеСтрокиЗапись)
	СтрокаПредставление = "";
	Если ДанныеСтрокиЗапись.ПоСвойствам Тогда 
		 //Строка(ДанныеСтрокиЗапись.МаркаСплава) + " ; " + 
СтрокаПредставление = "Марка сплава:     " + Строка(ДанныеСтрокиЗапись.МаркаСплава) + "
			|Группа продукции: " + Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + "
			|Тара:             " + Строка(ДанныеСтрокиЗапись.Тара) + "
			|Характеристика:   " + Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + "
			|Серия:            " + Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + "
			|Маркировка:       " + Строка(ДанныеСтрокиЗапись.Маркировка) + "
			|Коэффициент:      " + Строка(ДанныеСтрокиЗапись.Коэффициент) + "
			|Количество:       " + Строка(ДанныеСтрокиЗапись.Количество) + "
			|Кол-во (доп.):    " + Строка(ДанныеСтрокиЗапись.Количество1) + "
			|Мест:             " + Строка(ДанныеСтрокиЗапись.КоличествоМест) + "
			|Кол-во (тара):    " + Строка(ДанныеСтрокиЗапись.КоличествоТара);
		
	Иначе	
СтрокаПредставление = "Номенклатура:     " + Строка(ДанныеСтрокиЗапись.Номенклатура) + "
			|Тара:             " + Строка(ДанныеСтрокиЗапись.Тара) + "
			|Характеристика:   " + Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + "
			|Серия:            " + Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + "
			|Маркировка:       " + Строка(ДанныеСтрокиЗапись.Маркировка) + "
			|Коэффициент:      " + Строка(ДанныеСтрокиЗапись.Коэффициент) + "
			|Количество:       " + Строка(ДанныеСтрокиЗапись.Количество) + "
			|Кол-во (доп.):    " + Строка(ДанныеСтрокиЗапись.Количество1) + "
			|Мест:             " + Строка(ДанныеСтрокиЗапись.КоличествоМест) + "
			|Кол-во (тара):    " + Строка(ДанныеСтрокиЗапись.КоличествоТара);
	КонецЕсли;	
	Возврат СтрокаПредставление;
КонецФункции


&НаКлиенте
Функция ПредставлениеСтрокиКлиентКратко(ДанныеСтрокиЗапись)
	СтрокаПредставление = "";
	Если ДанныеСтрокиЗапись.ПоСвойствам Тогда 
		 //Строка(ДанныеСтрокиЗапись.МаркаСплава) + " ; " + 
					СтрокаПредставление = Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; ";
												//+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Маркировка);
		
	Иначе	
							СтрокаПредставление = Строка(ДанныеСтрокиЗапись.ГруппаПродукции) + " ; "
												+ Строка(ДанныеСтрокиЗапись.Номенклатура) + " ; "
												+ Строка(ДанныеСтрокиЗапись.ХарактеристикаНоменклатуры) + " ; "
												+ Строка(ДанныеСтрокиЗапись.СерияНоменклатуры) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Коэффициент) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Количество1) + " ; "
												+ Строка(ДанныеСтрокиЗапись.КоличествоМест) + " ; ";
												//+ Строка(ДанныеСтрокиЗапись.Тара) + " ; "
												//+ Строка(ДанныеСтрокиЗапись.Маркировка);
	
	КонецЕсли;	
	Возврат СтрокаПредставление;
КонецФункции


&НаСервере
Функция ПроверкаПовторноеСканирование(ТаблицаМатериалы, Структура)
	//ТаблицаЗначений = ТаблицаМатериалы.Выгрузить();
	////Структура = Новый Структура;
	////Для Каждого ЭлементПоиска Из Структура Цикл
	////	Если ТаблицаЗначений.Колонки.Найти(ЭлементПоиска.Ключ) = Неопределено Тогда
	////		 ТаблицаЗначений.Колонки.Добавить(ЭлементПоиска.Ключ);
	////	КонецЕсли;	
	////КонецЦикла;	
	//МассивНайденныхСтрок = ТаблицаЗначений.НайтиСтроки(Структура);
	//Если МассивНайденныхСтрок.Количество() > 0 Тогда
	//	Возврат Истина;
	//Иначе 
	//	Возврат Ложь;
	//КонецЕсли;
	возврат ложь;
КонецФункции	

&НаКлиенте
Процедура СохранитьДокумент(Команда)
	СохранитьДокументОбъект("Материалы");
	ЭтаФорма.Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура СохранитьДокументОбъект(ИмяТабличнойЧасти)
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Материалы.Загрузить(Объект.Материалы.Выгрузить());
		//Для Каждого СтрокаМатериалы Из ТаблицаМатериалы Цикл
		//	НоваяСтрока = ДокументОбъект.Материалы.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
		//КонецЦикла;		
		ДокументОбъект.Записать();
	КонецЕсли;	
КонецПроцедуры	


&НаКлиенте
Процедура ЗакрытьДокумент(Команда)
	Ответ = Вопрос("Сохаринть документ?",РежимДиалогаВопрос.ДаНетОтмена,10,КодВозвратаДиалога.Отмена,"");
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьДокументОбъект("Материалы");
		ЭтаФорма.Закрыть();
		ЭтаФорма.Модифицированность = Ложь;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Закрыть();
		ЭтаФорма.Модифицированность = Ложь;
	Иначе
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьДокумент(Команда)
	ОтправитьДокументСервер();	
КонецПроцедуры


&НаСервере
Процедура ОтправитьДокументСервер()
	Обмен.ОтправитьДокумент(Объект.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		//ДанныеСтрокиЗапись = Элемент.ДанныеСтроки(Элемент.ТекущаяСтрока);
		//ДанныеСтрокиЗапись.Представление = ПредставлениеСтрокиКлиентКратко(ДанныеСтрокиЗапись);
		//ДанныеСтрокиЗапись.ТараНаименование = ДанныеСтрокиЗапись.Тара.Наименование;
		//ДанныеСтрокиЗапись.МаркаСплаваНаименование = ДанныеСтрокиЗапись.МаркаСплава.Наименование;
		ОбновитьОтображениеИнформацииШапка();
		ОбновитьОтображениеИнформации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередНачаломИзменения(Элемент, Отказ)
	Отказ =Истина;
КонецПроцедуры


&НаКлиенте
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.ДанныеСтроки(Элемент.ТекущаяСтрока));
	КонецЕсли;
	ОбновитьОтображениеИнформацииШапка();
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура КопироватьСтроку(Команда)
	
КонецПроцедуры


&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ИмяТабличнойЧасти = "Материалы" Тогда
	ТекущийОбъект.Материалы.Загрузить(Объект.Материалы.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьОтображениеИнформации();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтекстноеМеню(Команда)
	ФормаМеню = ПолучитьФорму("ОбщаяФорма.ФормаМеню");
	// Вставить содержимое обработчика.
	ФормаМеню.ОткрытьМодально();
	ПараметрМенюДействие = ФормаМеню.Действие;
	Отбор = Новый ОтборКомпоновкиДанных;
	
	Если ПараметрМенюДействие = 0 Тогда
		//Сортировка по таре	
		Объект.Материалы.Сортировать("ТараНаименование");
		Элементы.Материалы.Обновить();
	ИначеЕсли ПараметрМенюДействие = 1 Тогда
		//Сортировка по марке сплава	
		Объект.Материалы.Сортировать("МаркаСплаваНаименование");
		Элементы.Материалы.Обновить();
	ИначеЕсли ПараметрМенюДействие = 2 Тогда
		//Сортировка по группе продукции
		Объект.Материалы.Сортировать("ГруппаПродукции");
		Элементы.Материалы.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СортироватьСервер(ИмяКолонки)
	
	КомандаСортировки = Команды.Найти("СортировкаПоКолонке");
	//КомандаСортировки.Действие = ;
	//КомандаСортировки.
	
	
	ТаблицаМатериалы = ДанныеФормыВЗначение(Объект.Материалы,Тип("ТаблицаЗначений"));
	ТаблицаМатериалы.Сортировать(ИмяКолонки);
	ЗначениеВДанныеФормы(ТаблицаМатериалы,Объект.Материалы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	КодОтвета = Вопрос("Удалить строку?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет);
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	ДанныеСтроки = Элементы.Материалы.ДанныеСтроки(Элементы.Материалы.ТекущаяСтрока);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
	ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
	ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
	ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
	ФормаРедактированияСтроки.ОткрытьМодально();
	Если ФормаРедактированияСтроки.ИзменитьКоличество Тогда
		ЭлементМатериалы = Элементы.Материалы;
		ДанныеСтрокиЗапись = ЭлементМатериалы.ДанныеСтроки(ЭлементМатериалы.ТекущаяСтрока);
		Если ДанныеСтрокиЗапись.Количество <> ФормаРедактированияСтроки.Количество Тогда
			ДанныеСтрокиЗапись.Количество = ФормаРедактированияСтроки.Количество;
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность = Истина Тогда
		КодОтвета = Вопрос("Сохранить документ перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Да);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Записать();
			СтандартнаяОбработка = Ложь;
		ИначеЕсли КодОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		Иначе 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ СканированиеКомпонентой1С Тогда 
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
		//ПодключитьОбработчикОжидания("ОбработкаСканированияКлавиатура",2, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	Если СканированиеКомпонентой1С Тогда
		СтартСканировать();
	Иначе	
		ИдетПроцессСканирования = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование",Истина);
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	Перем СтрокаШтрихкода1, ИнформацияБирки;
	
	Сообщение = "";
	РезультатШК = ПолученныйШтрихкод;
	РезультатШКВвод = "";
	Если РезультатШК = "" Тогда
		Возврат;
	КонецЕсли;	
	Попытка
		ТекущийРезультат = "";
		ТекущийРезультат = РезультатШК;
		РезультатШК = "";
		СтрокаШтрихкода1 = СтрЗаменить( ТекущийРезультат, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				Сигнал();
				//сообщить("1");
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2");
				
			КонецЕсли;	
			//сообщить("3");
			//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			//сообщить("4");
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5");
				СтруктураОтбора = ПолучитьИменаКолонокВерсииОтборВерсия();
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрокПоОтбору.Количество() = 0 Тогда
					НоваяСтрока = объект.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
					НоваяСтрока.Датаоперации = ТекущаяДата();
					НоваяСтрока.Представление = ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
					ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
					ТекстШапкиПредупреждения = "Добавлена";
					Модифицированность = Истина;
					//сообщить("7");
					
					//КонецЕсли;
				Иначе
					ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
					ТекстШапкиПредупреждения = "Строка есть";
					//сообщить("8");
				КонецЕсли;
				//сообщить("9");
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10");
		КонецЕсли;
		Результат = "";
	Исключение
		сообщить(ОписаниеОшибки());
		//сообщить("10.5");
		РезультатШК = ТекущийРезультат + РезультатШК;
	КонецПопытки;
	ЗакрытьИнтерфейс = Истина;
	ОткрытьИнтерфейсПосле = Истина;
	//Сообщить( "Закрытиие сканирования ");
	//Иначе
	//	Текст = "Ошибка: " + Сообщение;
		//сообщить("11");
	//КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12");
		ОбновитьОтображениеИнформацииШапка();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14");
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			//Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//ТекущийЭлемент = Элементы.Материалы;
			//сообщить("15");
		КонецЕсли;	
		Если Не ПараметрыСеансаИдетСканирование() Тогда
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			//сообщить("16");
			//СтрокаШтрихКод = "";
			//СтартСканироватьКлавиатура();
			//сообщить("17");
		КонецЕсли;	
		//сообщить("18");
		Если ОткрытьИнтерфейсПосле = Истина Тогда
			СканированиеШтрихкода(Неопределено); 
		КонецЕсли;	
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	КонецЕсли;
	
КонецПроцедуры


