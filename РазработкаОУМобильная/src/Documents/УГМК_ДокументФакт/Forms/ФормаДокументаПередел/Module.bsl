&НаКлиенте
Перем ДобавлятьДубльСтроки, ТекущийШаг; 

&НаКлиенте
Процедура ПолученоГруппаПродукцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.ПолученоГруппаПродукции;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", ГруппаПродукции);
		ОткрытьФорму("Справочник.СК_ГруппыПродукции.Форма.ФормаВыбора",ПараметрыВ,ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КоличествоВес(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолучитьСВесов(Команда)
	АдресВесов = "";
	Если ВвестиСтроку(АдресВесов, "Введите адрес весов") Тогда
		КоличествоВес = УГМК_МобильныйСервер.КоличествоПолучитьСВесовНаСервере(АдресВесов);  
		Если ЗначениеЗаполнено(КоличествоВес) Тогда 
			Если ТекущийШаг = 3 Тогда
				Количество = КоличествоВес;
				КоличествоПриИзменении(Неопределено);
			ИначеЕсли ТекущийШаг = 5 Тогда
				КоличествоПолучено = КоличествоВес;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция КоличествоПолучитьСВесовНаСервере(АдресВесов)
	КоличествоВес = Неопределено;
	Если ЗначениеЗаполнено(АдресВесов) Тогда 
		ДанныеБирка = Неопределено;
		АдресВебСервиса = Константы.АдресВебСервиса.Получить();
		ПарольПользователя = Константы.ПарольПользователя.Получить();
		ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
		ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
		ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
		ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
		ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("GetWeight"); 
		ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
		ВСПрокси.Пользователь = "update1c"; 
		ВСПрокси.Пароль = "St7658"; 
		ДанныеВесов = ВСПрокси.GetWeight(АдресВесов);
		Если ДанныеВесов <> Неопределено Тогда
			СтруктураРезультата = Десериализовать(ДанныеВесов.Получить());
			Если СтруктураРезультата.ДанныеПолучены Тогда
				КоличествоВес = СтруктураРезультата.Вес;
			Иначе
				Сообщить(СтруктураРезультата.ОшибкаСообщение);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Возврат КоличествоВес;
КонецФункции
 
&НаКлиенте
Процедура НечитаемаяБирка(Команда)
	ПолученныйШтрихкод = НечитаемаяБиркаСервер();	
	Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование",Истина);
		ДополнительныеПараметры.Вставить("СканированиеУведомлением",Истина);
		ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НечитаемаяБиркаСервер()
	ДанныеБирка = Неопределено;
	АдресВебСервиса = Константы.АдресВебСервиса.Получить();
	ПарольПользователя = Константы.ПарольПользователя.Получить();
	ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
	ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
	ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
	ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
	ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("HashPassword"); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
	ВСПрокси.Пользователь = "update1c"; 
	ВСПрокси.Пароль = "St7658"; 
	ДанныеБирка = ВСПрокси.GetBirka(ТекИД);
	Если ДанныеБирка = Неопределено Тогда
		ПолученныйШтрихкод = "";
	Иначе	
		ПолученныйШтрихкод = ДанныеБирка.Получить();
	КонецЕсли;	
	Возврат ПолученныйШтрихкод;
КонецФункции



&НаКлиенте
Процедура ДобавитьОтвес(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура УдалитьОтвес(Команда)
	Если Элементы.Материалы.ТекущаяСтрока <> Неопределено Тогда
		ИдентификаторТекущейСтроки = Элементы.Материалы.ТекущаяСтрока;	
		ТекущаяСтрокаМатериалы = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		НомерТекущейСтроки = ТекущаяСтрокаМатериалы.НомерСтроки;
		Объект.Материалы.Удалить(ТекущаяСтрокаМатериалы);	
		Если Объект.Материалы.Количество() = 0 Тогда
			РежимВводаНовогоОтвеса = Истина;
		Иначе
			РежимВводаНовогоОтвеса = Ложь;
			Если НомерТекущейСтроки = Объект.Материалы.Количество() + 1 Тогда
				НомерТекущейСтроки = НомерТекущейСтроки - 1
			КонецЕсли;	
			ОпределитьТекущуюСтроку(НомерТекущейСтроки);			
		КонецЕсли;	
		ОбновитьОтображениеИнформацииШагВзяли();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущуюСтроку(НомерТекущейСтроки,ТабЧасть = "Материалы",ИмяКолонки = "НомерСтроки")
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(ИмяКолонки, НомерТекущейСтроки);
	МассивСтрок = Объект[ТабЧасть].НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		ИдентификаторТекущейСтроки = МассивСтрок[0].ПолучитьИдентификатор();
		Элементы[ТабЧасть].ТекущаяСтрока = ИдентификаторТекущейСтроки;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтраницуШагВзяли(НомерТекущейСтроки)
	ОпределитьТекущуюСтроку(НомерТекущейСтроки);			
	ДанныеТекущейСтроки = Объект.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект , ДанныеТекущейСтроки);
	ОбновитьОтображениеИнформацииШагВзяли();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийШаг(Команда)
	//Исполнители
	Если ТекущийШаг = 1 Тогда
		Ответ = Вопрос("Сохранить документ при закрытии?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
			Закрыть();
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			Закрыть();
		КонецЕсли;	
	ИначеЕсли ТекущийШаг = 2 Тогда
		ТекущийШаг = ТекущийШаг - 1;
		//ЧТО ВЗЯТО В ОБРАБОТКУ	
	ИначеЕсли ТекущийШаг = 3 Тогда
		ПредыдущийШаг = Истина;
		Если Элементы.Материалы.ТекущаяСтрока <> Неопределено Тогда
			
			ДанныеТекущейСтроки = Объект.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
			Если ДанныеТекущейСтроки.НомерСтроки > 1 Тогда
				НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки - 1;
				ОбновитьСтраницуШагВзяли(НомерТекущейСтроки);
				ПредыдущийШаг = Ложь;
			КонецЕсли;	
		КонецЕсли;	
		Если ПредыдущийШаг Тогда
			
			ТекущийШаг = ТекущийШаг - 1;
		КонецЕсли;
		//ЧТО ПОЛУЧЕНО ИЗ ОБРАБОТКИ	
	ИначеЕсли ТекущийШаг = 4 Тогда 
		ПредыдущийШаг = Истина;
		//Если НомерТекущейСтрокиПолучено > 1 Тогда
		//	ПредыдущийШаг = Ложь;
		//КонецЕсли;
		Если Элементы.Продукция.ТекущаяСтрока = Неопределено Тогда
			ПредыдущийШаг = Истина;
		Иначе	
			ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
			Если ДанныеТекущейСтроки.НомерСтроки > 1 ИЛИ ВводНовогоПолучено И ДанныеТекущейСтроки.НомерСтроки = 1 Тогда
				Если ВводНовогоПолучено Тогда
					НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки;
				Иначе
					НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки - 1;
				КонецЕсли;
				ОбновитьСтраницуШагПолучено(НомерТекущейСтроки);
				ВводНовогоПолучено = Ложь;
				ПредыдущийШаг = Ложь;
			Иначе
				ПредыдущийШаг = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ПредыдущийШаг Тогда
			ТекущийШаг = ТекущийШаг - 1;
			НомерТекущейСтроки = Объект.Материалы.Количество();
			ОбновитьСтраницуШагВзяли(НомерТекущейСтроки);
			УправлениеВидимостьюВзялиОтвесы();
			
		КонецЕсли;	
		// СКОЛЬКО ПОЛУЧЕНО И ИСПОЛЬЗОВАНО		
	ИначеЕсли ТекущийШаг = 5 Тогда 
		ТекущийШаг = ТекущийШаг - 1;
		НомерТекущейСтроки = Объект.Продукция.Количество();
		ОбновитьСтраницуШагПолучено(НомерТекущейСтроки);
		ВводНовогоПолучено = Ложь;
		// ПОДТВЕРЖДЕНИЕ	
	ИначеЕсли ТекущийШаг = 6 Тогда 
		ТекущийШаг = ТекущийШаг - 1;
		ОпределитьТекущуюСтроку(2, "Продукция", "Группа");
		ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
		Если Элементы.Продукция.ТекущаяСтрока <> Неопределено Тогда
			ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
			Объект.Продукция.Удалить(Объект.Продукция.Индекс(ДанныеТекущейСтроки));
		КонецЕсли;
		// ПЕЧАТЬ БИРОК	
	ИначеЕсли ТекущийШаг = 8 Тогда 
		ТекущийШаг = ТекущийШаг - 2;
	КонецЕсли;
	УправлениеВидимостью();
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СледующийШаг(Команда)
	
	//Рабочий центр 	
	Если ТекущийШаг = 1 Тогда
		ТекущийШаг = ТекущийШаг + 1;
		
	//Исполнители
	ИначеЕсли ТекущийШаг = 2 Тогда
		ТекущийШаг = ТекущийШаг + 1;
		Если Объект.Материалы.Количество() > 0 Тогда
			РежимВводаНовогоОтвеса = Ложь;
			НомерТекущейСтроки = 1;
			ОбновитьСтраницуШагВзяли(НомерТекущейСтроки);
			УправлениеВидимостьюВзялиОтвесы();
		КонецЕсли;	
	//ЧТО ВЗЯТО В ОБРАБОТКУ	
	ИначеЕсли ТекущийШаг = 3 Тогда
		СледующийШаг = Истина;
		ДанныеТекущейСтроки = Объект.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
		Если ДанныеТекущейСтроки.НомерСтроки <> Объект.Материалы.Количество() Тогда
			НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки + 1;
			ОбновитьСтраницуШагВзяли(НомерТекущейСтроки);
			СледующийШаг = Ложь;
			УправлениеВидимостьюВзялиОтвесы();
		КонецЕсли;
		Если СледующийШаг Тогда
			ТекущийШаг = ТекущийШаг + 1;
			Если Объект.Продукция.Количество() > 0 Тогда
				ОпределитьТекущуюСтроку(2, "Продукция", "Группа");
				ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
				Если Элементы.Продукция.ТекущаяСтрока <> Неопределено Тогда
					ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
					Объект.Продукция.Удалить(Объект.Продукция.Индекс(ДанныеТекущейСтроки));
				КонецЕсли;
				НомерТекущейСтроки = 1;
				ОбновитьСтраницуШагПолучено(НомерТекущейСтроки);
				ВводНовогоПолучено = Ложь;
			Иначе
				ВариантПартии = 1;
				Если Объект.Материалы.Количество() >= 1 Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("НомерСтроки", 1);
					МассивСтрок = Объект.Материалы.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						ЗаполнитьЗначенияСвойств(ЭтотОбъект , МассивСтрок[0]);
						//ЗаполнитьЗначенияСвойствСервер(ЭтотОбъект ,МассивСтрок[0].ХарактеристикаНоменклатуры,
						//"Размер1, Размер2, Размер3, Размер4, Размер5");
					КонецЕсли;	
				КонецЕсли;	
				НомерТекущейСтроки = 0;
				Если Объект.Продукция.Количество() > 0 Тогда
					НомерТекущейСтроки = 1;
				КонецЕсли;	
				ОбновитьСвойстваПолучено(НомерТекущейСтроки);
				ОбновитьВидимостьРазмеры("Получено");
				ОбновитьПредставлениеПартии();
				ВводНовогоПолучено = Истина;
				ОбновитьНадписьПолученоОтвес(1, 1);
			КонецЕсли;
		КонецЕсли;
		
	//ЧТО ПОЛУЧЕНО ИЗ ОБРАБОТКИ	
	ИначеЕсли ТекущийШаг = 4 Тогда 
		СледующийШаг = Истина;
		Если ВводНовогоПолучено Тогда
			СледующийШаг = Истина;
		Иначе
			ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
			Если ДанныеТекущейСтроки.НомерСтроки >=1 И ДанныеТекущейСтроки.НомерСтроки < Объект.Продукция.Количество() Тогда
				НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки + 1;
				ОбновитьСтраницуШагПолучено(НомерТекущейСтроки);
				ВводНовогоПолучено = Ложь;
				СледующийШаг = Ложь;
			Иначе
				СледующийШаг = Истина;
			КонецЕсли;		
		КонецЕсли;		
		Если СледующийШаг Тогда
			ТекущийШаг = ТекущийШаг + 1;
			КоличествоВзялиИтого = Объект.Материалы.Итог("Количество");
			Элементы.КоличествоИспользованоНачальныйВес.Заголовок = Строка(КоличествоВзялиИтого);
			КоличествоПолучено = КоличествоВзялиИтого;
			КоличествоИспользовано = КоличествоВзялиИтого;
			ПересчитатьОстатокИОтходы();
		КонецЕсли;		
	// СКОЛЬКО ПОЛУЧЕНО И ИСПОЛЬЗОВАНО		
	ИначеЕсли ТекущийШаг = 5 Тогда 
		ВариантПартии = 1;
		ТекущийШаг = ТекущийШаг + 1;
			СтруктураДанных = СтруктураОсновныхДанных_Сервер();
			ЗаполнитьЗначенияСвойств( СтруктураДанных, ЭтаФорма);
			ТекущийТипРазмеров = ПолучитьТипРазмераПоГруппеПродукции(ГруппаПродукции);
			//ТекущийТипРазмеров = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипХарактеристики( СтруктураДанных, Организация);
			ПараметрыРазмеров = Новый Структура();
			ПараметрыРазмеров.Вставить("ГруппаПродукции", ГруппаПродукции);
			ПараметрыРазмеров.Вставить("Организация", Организация); 
			//ПараметрыРазмеров.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
			ПараметрыРазмеров.Вставить("Размер1", Размер1);
			ПараметрыРазмеров.Вставить("Размер2", Размер2);
			ПараметрыРазмеров.Вставить("Размер3", Размер3);
			ПараметрыРазмеров.Вставить("Размер4", Размер4);
			ПараметрыРазмеров.Вставить("Размер5", Размер5);
			ПараметрыРазмеров.Вставить("ТекущийТипРазмеров", ТекущийТипРазмеров);
			ХарактеристикаНоменклатуры = УГМК_ОперативныйУчетВызовСервера.ОбновитьХарактеристику(ПараметрыРазмеров);
		Если ВводНовогоПолучено Тогда
			НоваяСтрока = Объект.Продукция.Добавить();
		Иначе
			ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
		КонецЕсли;
			Если ВариантПартии = 0 Тогда
				НоваяСтрока.ПаспортПартииПродукции = ПаспортПартии;	
			КонецЕсли;
			НоваяСтрока.ВариантПартии = ВариантПартии;
			НоваяСтрока.ПоСвойствамПродукции = Истина;
			НоваяСтрока.ГруппаПродукцииПродукции = ГруппаПродукции;
			НоваяСтрока.МаркаСплаваПродукции = МаркаСплава;
			НоваяСтрока.СостояниеПродукции = Состояние;
			НоваяСтрока.ХарактеристикаПродукции = ХарактеристикаНоменклатуры;
			НоваяСтрока.КоличествоПродукции = КоличествоПолучено; 
		СохранитьДокументПередел();
		ОбновитьОтображениеИнформацииШагПодтверждение();
		
	// ПОДТВЕРЖДЕНИЕ	
ИначеЕсли ТекущийШаг = 6 Тогда
	ОтправитьДокументСервер();
	//СохранитьДокументПередел();
	ТекущийШаг = ТекущийШаг + 2;
		
	// ПЕЧАТЬ БИРОК	
	ИначеЕсли ТекущийШаг = 8 Тогда 
		//ТекущийШаг = ТекущийШаг + 1;
		Закрыть();	
	КонецЕсли;	
	УправлениеВидимостью();
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Функция  СписокГруппШагов()
	СписокШагов = Новый СписокЗначений;
	СписокШагов.Вставить(0,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагСтарт",			"Старт"));
	СписокШагов.Вставить(1,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагРабочийЦентр",	"Рабочий центр"));
	СписокШагов.Вставить(2,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагИсполнители",		"Исполнители"));
	СписокШагов.Вставить(3,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагЧтоВзяли",		"ЧТО ВЗЯТО В ОБРАБОТКУ"));
	СписокШагов.Вставить(4,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагПолучено",		"ЧТО ПОЛУЧЕНО ИЗ ОБРАБОТКИ"));
	СписокШагов.Вставить(5,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагИспользовано",	"СКОЛЬКО ПОЛУЧЕНО И ИСПОЛЬЗОВАНО"));
	СписокШагов.Вставить(6,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагПодтверждение",	"ПОДТВЕРЖДЕНИЕ"));
	СписокШагов.Вставить(7,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагПодтверждениеТехОперации",			"ПОДТВЕРЖДЕНИЕ ТЕХ ОПЕРАЦИИ"));
	СписокШагов.Вставить(8,Новый Структура("ИмяГруппы,ЗаголовокФормы",	"ГруппаШагПечатьБирок",		"ПЕЧАТЬ БИРОК"));
	//СтруктураШага = Новый Структура("ИмяГруппы,ЗаголовокФормы","ГруппаШагСтарт","Старт");
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагСтарт");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"Старт");
	
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагРабочийЦентр");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"Рабочий центр");
	//СписокШагов.Вставить(1,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагИсполнители");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"Исполнители");
	//СписокШагов.Вставить(2,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагЧтоВзяли");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"ЧТО ВЗЯТО В ОБРАБОТКУ");
	//СписокШагов.Вставить(3,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагПолучено");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"ЧТО ПОЛУЧЕНО ИЗ ОБРАБОТКИ");
	//СписокШагов.Вставить(4,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагИспользовано");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"СКОЛЬКО ПОЛУЧЕНО И ИСПОЛЬЗОВАНО");
	//СписокШагов.Вставить(5,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагПодтверждение");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"ПОДТВЕРЖДЕНИЕ");
	//СписокШагов.Вставить(6,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагПодтверждениеТехОперации");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"ПОДТВЕРЖДЕНИЕ ТЕХ ОПЕРАЦИИ");
	//СписокШагов.Вставить(7,СтруктураШага);
	//СтруктураШага = Новый Структура;
	//СтруктураШага.Вставить("ИмяГруппы",		"ГруппаШагПечатьБирок");
	//СтруктураШага.Вставить("ЗаголовокФормы",	"ПЕЧАТЬ БИРОК");
	//СписокШагов.Вставить(8,СтруктураШага);
	Возврат СписокШагов;
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостью()
	СписокГруппШагов = СписокГруппШагов();
	Для Каждого Группа Из СписокГруппШагов Цикл;
		Если СписокГруппШагов.Индекс(Группа) = ТекущийШаг Тогда
			Элементы[Группа.Значение.ИмяГруппы].Видимость = Истина;
			ЭтаФорма.Заголовок = Группа.Значение.ЗаголовокФормы;
		Иначе
			Элементы[Группа.Значение.ИмяГруппы].Видимость = Ложь;
		КонецЕсли;	
	КонецЦикла;
	Если ТекущийШаг > 5 Тогда
		Элементы.КнопкаОтправитьДокумент.Видимость = Истина;
	Иначе
		Элементы.КнопкаОтправитьДокумент.Видимость = Ложь;
	КонецЕсли;	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюВзялиОтвесы()
	Если Объект.Материалы.Количество() = 0 Тогда
		Элементы.ГруппаУдалитьОтвесВзяли.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУдалитьОтвесВзяли.Видимость = Истина;
	КонецЕсли;	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваПолучено(НомерТекущейСтроки = 1)
	Элементы.КнопкаПолученоГруппаПродукции.Заголовок = ВРег(?(ЗначениеЗаполнено(ГруппаПродукции.Наименование),ГруппаПродукции.Наименование,"<Пусто>"));
	Элементы.КнопкаПолученоМаркаСплава.Заголовок = ВРег(?(ЗначениеЗаполнено(МаркаСплава),МаркаСплава.Наименование, "<Пусто>"));
	Если ЗначениеЗаполнено(ЭтотОбъект.ХарактеристикаНоменклатуры) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект ,ЭтотОбъект.ХарактеристикаНоменклатуры,
	"Размер1, Размер2, Размер3, Размер4, Размер5");
	КонецЕсли;	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//сообщить(ИмяСобытия);
	Если ИмяСобытия = "ИзменилосьКоличествоСтроки" Тогда
	ИначеЕсли ИмяСобытия = "ВыбратьПартию" Тогда
	ИначеЕсли ИмяСобытия = "ИсполнителиПоНаряду" Тогда
		МассивИсполнителей = Параметр;
		Если Исполнители.Количество() = 0 Тогда
			Для каждого Исполнитель Из МассивИсполнителей Цикл
				НовыаяСтрока = Исполнители.Добавить();
				НовыаяСтрока.Исполнитель= Исполнитель;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилосьКоличествоСтрокиОтходы" Тогда
	ИначеЕсли ИмяСобытия = "ПродолжитьСканирование" Тогда
		//Сообщить("ПродолжитьСканирование");
		СканированиеШтрихкода(Неопределено)	
	ИначеЕсли ИмяСобытия = "УведомлениеШК" Тогда
		//сообщить(Параметр);
		ПолученныйШтрихкод = Параметр;
		Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
			Если (ТекущийШаг = 3 ИЛИ ТекущийШаг = 5) И Лев(ПолученныйШтрихкод,3) = "10." Тогда
				КоличествоВес = УГМК_МобильныйСервер.КоличествоПолучитьСВесовНаСервере(СокрЛП(ПолученныйШтрихкод));
				Если ЗначениеЗаполнено(КоличествоВес) Тогда 
					Если ТекущийШаг = 3 Тогда
						Количество = КоличествоВес;
						КоличествоПриИзменении(Неопределено);
					ИначеЕсли ТекущийШаг = 5 Тогда
						КоличествоПолучено = КоличествоВес;
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТекущийШаг = 8 Тогда
				 ИмяПринтера = ПолученныйШтрихкод;
			Иначе	
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
				ДополнительныеПараметры.Вставить("ПотоковоеСканирование",Истина);
				ДополнительныеПараметры.Вставить("СканированиеУведомлением",Истина);
				ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		//#Если МобильноеПриложениеКлиент Тогда
		//	ДоставляемыеУведомления.ОтменитьЛокальныеУведомления();
		//#КонецЕсли
	КонецЕсли;	
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ СканированиеКомпонентой1С Тогда 
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаШтрихКод;
	КонецЕсли;	
	ТекущийШаг = 1;
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	Если СканированиеКомпонентой1С Тогда
		СтартСканировать();
	Иначе	
		ИдетПроцессСканирования = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование",Истина);
		ДополнительныеПараметры.Вставить("СканированиеУведомлением",Ложь);
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтартСканировать()
	ЗаписатьПараметрыСеансаИдетСканирование(Истина);
	ПараметрыПредупреждения = Новый Структура;
	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
	ПараметрыПредупреждения.Вставить("ТекстПредупреждения", "");
	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
	УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
	#Если  МобильноеПриложениеКлиент  тогда
		Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
			Сообщить("не поддерживает сканирование штрихкода");
			Возврат;
		КонецЕсли; 	
	#КонецЕсли
	ПотоковеоСанирование = Истина;
	ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
	#Если  МобильноеПриложениеКлиент  тогда
		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Камеру на штрихкод", ОбработчикСканирования, ОбработчикЗакрытия,ТипШтрихКода.Двухмерный);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
		//Если Не ПараметрыСеансаИдетСканирование() Тогда
		//	ПараметрыПредупреждения = Новый Структура;
		//	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
		//	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
		//	ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
		//	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
		//	//сообщить("16" + Строка(ТекущаяДата()));
		//	СтартСканировать();
		//	//сообщить("17" + Строка(ТекущаяДата()));
		//КонецЕсли;	
		//ПараметрыПредупреждения = ПараметрыПредупреждения();
		//Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
		//	Если ПараметрыПредупреждения.ПредупреждениеГотово Тогда
		//		Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,4,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
		//		ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
		//		ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
		//	КонецЕсли
		//КонецЕсли;	
		//Если Не ПараметрыСеансаИдетСканирование() Тогда
		//	ПараметрыПредупреждения = Новый Структура;
		//	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
		//	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
		//	ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
		//	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
		//	СтартСканировать();
		//КонецЕсли;	
	//Сообщить("Закрывается интерфейс сканирования");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	Перем СтрокаШтрихкода1, ИнформацияБирки, ВыводитьПредупреждения;
	ВыводитьПредупреждения = Ложь;
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Если ЗакрытьИнтерфейс Тогда
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	//КонецЕсли;
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Штрихкод);
	//Сообщить(Штрихкод);
	Если Результат Тогда
		СсылкаИзКода = УГМК_ОперативныйУчет.ВосстановитьСсылкуИзШтрихкода( Штрихкод);
		Если СсылкаИзКода <> Неопределено тогда
			ТипСодержимого = 1;
			ТипСсылки = ТипЗнч( СсылкаИзКода);
			Если ТипСсылки = Тип("СправочникСсылка.УГМК_Весы") тогда
				//получим вес
				КоличествоВес = УГМК_МобильныйСервер.КоличествоПолучитьСВесовНаСервере(СокрЛП(Штрихкод));
				Если ЗначениеЗаполнено(КоличествоВес) Тогда 
					Если ТекущийШаг = 3 Тогда
						Количество = КоличествоВес;
						КоличествоПриИзменении(Неопределено);
					ИначеЕсли ТекущийШаг = 5 Тогда
						КоличествоПолучено = КоличествоВес;
					КонецЕсли;
					Возврат;
				КонецЕсли;	
				//****
			КонецЕсли;
		КонецЕсли;
		СтрокаШтрихкода1 = СтрЗаменить( Штрихкод, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если УГМК_ОперативныйУчет.ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
		//Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				Сигнал();
				//сообщить("1" + Строка(ТекущаяДата()));
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2" + Строка(ТекущаяДата()));
				
			КонецЕсли;	
			//сообщить("3" + Строка(ТекущаяДата()));
		Если ВыводитьПредупреждения Тогда	
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		КонецЕсли;
			//сообщить("4" + Строка(ТекущаяДата()));
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5" + Строка(ТекущаяДата()));
				ДобавитьНовуюСтроку = Истина;
				Если ДобавлятьДубльСтроки Тогда
					ДобавитьНовуюСтроку = Истина;
				Иначе
					СтруктураОтбора = УГМК_МобильныеУстройства.ПолучитьИменаКолонокВерсииОтборВерсия();
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
					Если СтруктураОтбора.Количество1 = 0 Тогда
						СтруктураОтбора.Количество1 = СтруктураОтбора.Количество;
					КонецЕсли;	
					МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
					ДобавитьНовуюСтроку = МассивСтрокПоОтбору.Количество() = 0;
				КонецЕсли;
				Если ДобавитьНовуюСтроку Тогда
					НоваяСтрока = объект.Материалы.Добавить();
					Если Строка.Количество1 = 0 Тогда
						Строка.Количество1 = Строка.Количество; 						
					КонецЕсли;	
					ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
					НоваяСтрока.КоличествоУчетное = Строка.Количество;
					НоваяСтрока.Датаоперации = ТекущаяДата();
					НоваяСтрока.Представление = УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
					ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
					//ТекстШапкиПредупреждения = "Добавлена";
					//Сообщение = ТекстПредупреждения;
					Модифицированность = Истина;
					РежимВводаНовогоОтвеса = Ложь;
					//сообщить("7" + Строка(ТекущаяДата()));
					//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество)));
					Если НоваяСтрока.Количество1 > НоваяСтрока.Количество Тогда
						КоличествоПредставление = НоваяСтрока.Количество1;
						//КоличествоПредставление = НоваяСтрока.Количество1 + НоваяСтрока.КоличествоТара;
					Иначе
						КоличествоПредставление = НоваяСтрока.Количество;
						//КоличествоПредставление = НоваяСтрока.Количество + НоваяСтрока.КоличествоТара;
					КонецЕсли;
					НоваяСтрока.КоличествоПредставление = Формат(КоличествоПредставление,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(КоличествоПредставление)));
					Количество = Строка.Количество1;  
					
					//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество + НоваяСтрока.КоличествоТара,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество + НоваяСтрока.КоличествоТара)));
					
					//КонецЕсли;
				Иначе
					ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
					//ТекстШапкиПредупреждения = "Строка есть";
					//сообщить("8" + Строка(ТекущаяДата()));
				КонецЕсли;
				//сообщить("9" + Строка(ТекущаяДата()));
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10" + Строка(ТекущаяДата()));
		КонецЕсли;
		
		ЗакрытьИнтерфейс = Истина;
		ОткрытьИнтерфейсПосле = Истина;
		//Сообщить( "Закрытиие сканирования ");
	Иначе
		Текст = "Ошибка: " + Сообщение;
		//сообщить("11" + Строка(ТекущаяДата()));
	КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12" + Строка(ТекущаяДата()));
		ОбновитьОтображениеИнформацииШагВзяли();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13" + Строка(ТекущаяДата()));
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14" + Строка(ТекущаяДата()));
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = УГМК_МобильныеУстройства.ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			Если ВыводитьПредупреждения Тогда	
				#Если МобильноеПриложениеКлиент Тогда
					Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
				#КонецЕсли
			КонецЕсли;	
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("15" + Строка(ТекущаяДата()));
		КонецЕсли;	
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		Если Не ПараметрыСеансаИдетСканирование() Тогда
			
			ИзменитьСтроку(Неопределено, Истина, );

			//ДанныеСтроки = Элементы.Материалы.ДанныеСтроки(Элементы.Материалы.ТекущаяСтрока);
			//ПараметрыФормы = Новый Структура;
			//ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
			//ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
			//ПараметрыФормы.Вставить("ПродолжитьСКанирование",Истина);
			//ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
			//
			//ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
			//ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
			//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
			//ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество; 
			//ФормаРедактированияСтроки.Открыть();
			//ПараметрыПредупреждения = Новый Структура;
			//ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			//ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			//ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
			//ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			////сообщить("16" + Строка(ТекущаяДата()));
			//СтартСканировать();
			////сообщить("17" + Строка(ТекущаяДата()));
		КонецЕсли;	
		//сообщить("18" + Строка(ТекущаяДата()));
		
	КонецЕсли;
	//Предупреждение(ТекстПредупреждения,4,ТекстШапкиПредупреждения);
	//Сообщить(Текст);
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокаШтрихКод() Экспорт
	СтрокаШтрихКод = "";
КонецПроцедуры


&НаСервере
Функция ПараметрыСеансаИдетСканирование() Экспорт
		ИдетСканирование = ПараметрыСеанса.ИдетСканирование;
		Возврат ИдетСканирование;

КонецФункции

Процедура ОбновитьОтображениеИнформацииШагВзяли()
	
	Если Объект.Материалы.Количество() = 0 ИЛИ РежимВводаНовогоОтвеса Тогда
		ПредставлениеСтроки = "<P><FONT size=4 face=Verdana> SCAN NOW </FONT></P>";
		Элементы.ГруппаКоличество.Видимость = Ложь;
	Иначе
		//ОбъектДокумент = РеквизитФормыВЗначение("Объект");
		МатериалыТЧ = объект.Материалы;
		Если Элементы.Материалы.ТекущаяСтрока = Неопределено И МатериалыТЧ.Количество() > 0 Тогда
			ДанныеТекущейСтроки = МатериалыТЧ.НайтиПоИдентификатору(0);
		Иначе
			ДанныеТекущейСтроки = МатериалыТЧ.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
		КонецЕсли;	
		ПредставлениеСтроки = УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиКлиентHTML(ДанныеТекущейСтроки);
		ПредставлениеСтроки = "<P><FONT size=5 face=Verdana> Отвес № " + Строка(ДанныеТекущейСтроки.НомерСтроки) + " из " + Строка(МатериалыТЧ.Количество()) + " " + ПредставлениеСтроки;
		Элементы.ГруппаКоличество.Видимость = Истина;
	КонецЕсли;
		
		ОбщиеДанные = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18378""></HEAD>
		|<BODY>"
			+ ПредставлениеСтроки + 
		"</BODY></HTML>";
			
	//Если ВидОперации = Справочники.УГМК_СостоянияЗаказа.ОписьМеталла Тогда
	//	ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество1"));
	//	//ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество") + ОбъектДокумент.Материалы.Итог("КоличествоТара"));
	//Иначе	
	//	ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество"));
	//КонецЕсли;	
	//// + Сред(Объект.Номер,8) + " | ∑=" + Строка(Объект.Материалы.Итог("Количество"));
	////ЭтаФорма.Заголовок = "№ " + Сред(Объект.Номер,8) + " | ∑=" + Строка(Объект.Материалы.Итог("Количество"));
	////Элементы.ИнформацияПоДокументу.Заголовок = Строка("Опись металла № " + Строка(Объект.Номер) + " от " + Строка(Объект.Дата));
КонецПроцедуры	


Процедура ОбновитьОтображениеИнформацииШагПодтверждение()
	
	//Если Объект.Материалы.Количество() = 0 ИЛИ РежимВводаНовогоОтвеса Тогда
	//	ПредставлениеСтроки = "<P><FONT size=4 face=Verdana> SCAN NOW </FONT></P>";
	//	Элементы.ГруппаКоличество.Видимость = Ложь;
	//Иначе
	//	//ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	//	МатериалыТЧ = объект.Материалы;
	//	ДанныеТекущейСтроки = МатериалыТЧ.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	//	ПредставлениеСтроки = УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиКлиентHTMLПодтверждение(ДанныеТекущейСтроки);
	//	ПредставлениеСтроки = "<P><FONT size=5 face=Verdana> Отвес № " + Строка(ДанныеТекущейСтроки.НомерСтроки) + " ИЗ " + Строка(МатериалыТЧ.Количество()) + " " + ПредставлениеСтроки;
	//	Элементы.ГруппаКоличество.Видимость = Истина;
	//КонецЕсли;
	    ПредставлениеСтроки = "";
		size = "size=4";
	Для Каждого СтрокаМатериалы из Объект.Материалы Цикл
		ПредставлениеСтроки = ПредставлениеСтроки + "<TR><TD> <P align=left> " + 
		УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиКлиентHTMLПодтверждение(СтрокаМатериалы, Ложь, size) +
		"</P></TD>";
		ПредставлениеСтроки = ПредставлениеСтроки + "<TD> <P align=right> <FONT " + size + " face=Verdana>" + Строка(СтрокаМатериалы.Количество) +
		"</P></TD></TR>";
	КонецЦикла;	
		ПредставлениеТаблицы = "<P> <FONT color=#339966> ВЗЯТО </FONT></P><TABLE><TBODY>" + ПредставлениеСтроки + "</TBODY></TABLE>";
	    ПредставлениеСтроки = "";
	Для Каждого СтрокаПродукции из Объект.Продукция Цикл
		ПредставлениеСтроки = ПредставлениеСтроки + "<TR><TD> <P align=left> " + 
		УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиКлиентHTMLПодтверждение(СтрокаПродукции, Истина, size) +
		"</P></TD>";
		ПредставлениеСтроки = ПредставлениеСтроки + "<TD> <P align=right> <FONT " + size + " face=Verdana>" + Строка(СтрокаПродукции.КоличествоПродукции) +
		"</P></TD></TR>";
	КонецЦикла;	
		ПредставлениеТаблицы = ПредставлениеТаблицы + "<P> <FONT color=#339966> ПОЛУЧЕНО </FONT></P><TABLE><TBODY>" + ПредставлениеСтроки + "</TBODY></TABLE>";
		ПредставлениеСтроки = "<b><TR><TD> <P align=left> "+"<P><FONT " + size + " face=Verdana> Остаток: " + Строка(КоличествоОстаток) + " </FONT></P>" +
		"<TD> <P align=left> <FONT " + size + " face=Verdana>Отход: " + Строка(КоличествоОтход) +
		"</P></TD></TR>";
		//ПредставлениеСтроки = ПредставлениеСтроки + "<TR><TD> <P align=left> "+"<P><FONT " + size + " face=Verdana> Отход </FONT></P>" +
		//"<TD> <P align=right> <FONT " + size + " face=Verdana>" + Строка(КоличествоОтход) +
		//"</P></TD></TR>";


		ПредставлениеТаблицы = ПредставлениеТаблицы + "<TABLE><TBODY>" + ПредставлениеСтроки + "</TBODY></TABLE>";
		ОбщиеДанныеПодтверждение = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18378""></HEAD>
		|<BODY>"
			+ ПредставлениеТаблицы + 
		"</BODY></HTML>";
			
			
		СтруктураПодтверждения = ПолучитьОписаниеПеределаФорматированное(ПолучитьДанныеДляОписания(Объект));	
		ОбщиеДанныеПодтверждение = СтруктураПодтверждения.ТекстHTML; 	
	//Если ВидОперации = Справочники.УГМК_СостоянияЗаказа.ОписьМеталла Тогда
	//	ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество1"));
	//	//ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество") + ОбъектДокумент.Материалы.Итог("КоличествоТара"));
	//Иначе	
	//	ЭтаФорма.Заголовок = "№ " + Сред(ОбъектДокумент.Номер,8) + " | ∑=" + Строка(ОбъектДокумент.Материалы.Итог("Количество"));
	//КонецЕсли;	
	//// + Сред(Объект.Номер,8) + " | ∑=" + Строка(Объект.Материалы.Итог("Количество"));
	////ЭтаФорма.Заголовок = "№ " + Сред(Объект.Номер,8) + " | ∑=" + Строка(Объект.Материалы.Итог("Количество"));
	////Элементы.ИнформацияПоДокументу.Заголовок = Строка("Опись металла № " + Строка(Объект.Номер) + " от " + Строка(Объект.Дата));
КонецПроцедуры	


Процедура ЗаписатьПараметрыСеансаИдетСканирование(Значение) Экспорт
		ПараметрыСеанса.ИдетСканирование = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	Перем СтрокаШтрихкода1, ИнформацияБирки;
	
	
	
	Сообщение = "";
	РезультатШК = ПолученныйШтрихкод;
	РезультатШКВвод = "";
	Если РезультатШК = "" Тогда
		Возврат;
	КонецЕсли;	
	Попытка
		
		
		СсылкаИзКода = УГМК_ОперативныйУчет.ВосстановитьСсылкуИзШтрихкода( ПолученныйШтрихкод);
		Если СсылкаИзКода <> Неопределено тогда
			ТипСодержимого = 1;
			ТипСсылки = ТипЗнч( СсылкаИзКода);
			Если ТипСсылки = Тип("СправочникСсылка.УГМК_Весы") тогда
				//получим вес
				КоличествоВес = УГМК_МобильныйСервер.КоличествоПолучитьСВесовНаСервере(СокрЛП(ПолученныйШтрихкод));
				Если ЗначениеЗаполнено(КоличествоВес) Тогда 
					Если ТекущийШаг = 3 Тогда
						Количество = КоличествоВес;
						КоличествоПриИзменении(Неопределено);
					ИначеЕсли ТекущийШаг = 5 Тогда
						КоличествоПолучено = КоличествоВес;
					КонецЕсли;
					Возврат;
				КонецЕсли;	
				//****
			КонецЕсли;
		КонецЕсли;
		
		
		ТекущийРезультат = "";
		ТекущийРезультат = РезультатШК;
		РезультатШК = "";
		СтрокаШтрихкода1 = СтрЗаменить( ТекущийРезультат, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если УГМК_ОперативныйУчет.ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
		//Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				//				Ждем 8.3.9
				//#Если  МобильноеПриложениеКлиент  тогда
				//	Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
				//		Сообщить("не поддерживает сканирование штрихкода");
				//		Возврат;
				//	КонецЕсли; 	
				//	СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(,Истина);
				//#КонецЕсли
				Сигнал();
				//сообщить("1");
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2");
				
			КонецЕсли;	
			//сообщить("3");
			//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			//сообщить("4");
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5");
				ДобавитьНовуюСтроку = Истина;
				Если ДобавлятьДубльСтроки Тогда
					ДобавитьНовуюСтроку = Истина;
				Иначе
					СтруктураОтбора = УГМК_МобильныеУстройства.ПолучитьИменаКолонокВерсииОтборВерсия();
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
					Если СтруктураОтбора.Количество1 = 0 Тогда
						СтруктураОтбора.Количество1 = СтруктураОтбора.Количество;
					КонецЕсли;	
					МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
					ДобавитьНовуюСтроку = МассивСтрокПоОтбору.Количество() = 0;
				КонецЕсли;
				Если ДобавитьНовуюСтроку Тогда
					НоваяСтрока = объект.Материалы.Добавить();
					Если Строка.Количество1 = 0 Тогда
						Строка.Количество1 = Строка.Количество; 						
					КонецЕсли;	
					ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
					НоваяСтрока.Группа = МаксимальныйНомерСтроки() + 1;
					НоваяСтрока.КоличествоУчетное = Строка.Количество;
					НоваяСтрока.Датаоперации = ТекущаяДата();
					НоваяСтрока.Представление = УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
					ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
					//Сообщить(ИдентификаторТекущейСтроки);
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					//Сообщить("Тек строка "+ Строка(Элементы.Материалы.ТекущаяСтрока));
					//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
					ТекстШапкиПредупреждения = "Добавлена";
					Модифицированность = Истина;
					РежимВводаНовогоОтвеса = Ложь;
					//сообщить("7");
					//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество)));
					Если НоваяСтрока.Количество1 > НоваяСтрока.Количество Тогда
						КоличествоПредставление = НоваяСтрока.Количество1;
						//КоличествоПредставление = НоваяСтрока.Количество1 + НоваяСтрока.КоличествоТара;
					Иначе
						КоличествоПредставление = НоваяСтрока.Количество;
						//КоличествоПредставление = НоваяСтрока.Количество + НоваяСтрока.КоличествоТара;
					КонецЕсли;
					НоваяСтрока.КоличествоПредставление = Формат(КоличествоПредставление,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(КоличествоПредставление)));
					Количество = Строка.Количество1;  

					//КонецЕсли;
				Иначе
					ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
					Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
					ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
					|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
					ТекстШапкиПредупреждения = "Строка есть";
					//сообщить("8");
				КонецЕсли;
				//сообщить("9");
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10");
		КонецЕсли;
		Результат = "";
	Исключение
		сообщить(ОписаниеОшибки());
		//сообщить("10.5");
		РезультатШК = ТекущийРезультат + РезультатШК;
	КонецПопытки;
	ЗакрытьИнтерфейс = Истина;
	ОткрытьИнтерфейсПосле = Истина;
	//Сообщить( "Закрытиие сканирования ");
	//Иначе
	//	Текст = "Ошибка: " + Сообщение;
		//сообщить("11");
	//КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12");
		ОбновитьОтображениеИнформацииШагВзяли();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14");
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = УГМК_МобильныеУстройства.ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			//Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//ТекущийЭлемент = Элементы.Материалы;
			//сообщить("15");
		КонецЕсли;	
		Если Не ПараметрыСеансаИдетСканирование() Тогда
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
			//сообщить("16");
			//СтрокаШтрихКод = "";
			//СтартСканироватьКлавиатура();
			//сообщить("17");
		КонецЕсли;	
		//сообщить("18");
		РедактироватьКоличество = Ложь;
		Если ОткрытьИнтерфейсПосле = Истина Тогда
			Если РедактироватьКоличество Тогда
				ИзменитьСтроку(Неопределено, Истина, Параметры.СканированиеУведомлением);
			КонецЕсли;	
			
			//ДанныеСтроки = Элементы.Материалы.ДанныеСтроки(Элементы.Материалы.ТекущаяСтрока);
			//ПараметрыФормы = Новый Структура;
			//ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
			//ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
			//ПараметрыФормы.Вставить("ПродолжитьСКанирование",Истина);
			//ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
			//ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
			//ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
			//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
			//ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество; 
			//ФормаРедактированияСтроки.Открыть();
			//СканированиеШтрихкода(Неопределено); 
		КонецЕсли;	
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйНомерСтроки()
	
	МаксимальныйНомерСтроки = 0;
	ТаблицаНомераСтрок = РеквизитФормыВЗначение("Объект.Материалы").Выгрузить(,"Группа");	
	//ТаблицаНомераСтрок = Объект.Материалы.Выгрузить(,"Группа");
	Если ТаблицаНомераСтрок.Количество() > 0 Тогда
		ТаблицаНомераСтрок.Сортировать("Группа Убыв");
		МаксимальныйНомерСтроки = ТаблицаНомераСтрок[0].Группа;
	КонецЕсли;	
	Возврат МаксимальныйНомерСтроки;
	
КонецФункции	

&НаКлиенте
Процедура ИзменитьСтроку(Команда, ПродолжитьСкнирование = Ложь, СканированиеУведомлением = Ложь)
	Если НЕ Команда = "СтандартноеРедактирование" Тогда
		РедактироватьКоличествоПослеСканирования = УГМК_МобильныеУстройства.ПолучитьКонстанту("РедактироватьКоличествоПослеСканирования");
		Если НЕ РедактироватьКоличествоПослеСканирования Тогда
			Если ПродолжитьСкнирование И (НЕ СканированиеУведомлением) Тогда
				СканированиеШтрихкода(Неопределено)	
			КонецЕсли;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	#Если МобильноеПриложениеКлиент Тогда
    Параметр = "Уведомление";
 	#КонецЕсли
	//Сообщить("Тек строка "+ Строка(Элементы.Материалы.ТекущаяСтрока));
	//ДанныеСтроки = Объект.Материалы.Получить(Элементы.Материалы.ТекущаяСтрока);
	Возврат;
	ДанныеСтроки = Объект.Материалы.Получить(Элементы.Материалы.ТекущиеДанные.номерстроки - 1);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	Если ДанныеСтроки.Отходы Тогда
		ПараметрыФормы = Новый Структура;
		//Сообщить("Строка 1.1");
		ПараметрыФормы.Вставить("РаспечататьЭтикетку",ДанныеСтроки.РаспечататьЭтикетку);
		ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
		ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
		ПараметрыФормы.Вставить("ПродолжитьСКанирование",ПродолжитьСкнирование);
		ПараметрыФормы.Вставить("ВидОперации",ВидОперации);
		ПараметрыФормы.Вставить("СканированиеУведомлением",СканированиеУведомлением);
		ПараметрыФормы.Вставить("Коэффициент1",ДанныеСтроки.Коэффициент1);
		ПараметрыФормы.Вставить("Тара",ДанныеСтроки.Тара);
		ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество1);
		ПараметрыФормы.Вставить("НоваяСтрока",Ложь);
		
		
		ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтрокиОтходы",ПараметрыФормы);
		ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
		ФормаРедактированияСтроки.Представление = Сред(ФормаРедактированияСтроки.Представление,Найти(ФормаРедактированияСтроки.Представление,";")+1);
		ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
		Если ФормаРедактированияСтроки.Группа = 0 Тогда
			ФормаРедактированияСтроки.Группа = МаксимальныйНомерСтроки() + 1;
		КонецЕсли;
		//Если ДанныеСтроки.Коэффициент1 > 0 Тогда
		//	ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество1; 
		//Иначе	
		//	ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
		//КонецЕсли;	
		//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
		ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество1; 
		ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество1; 
		ФормаРедактированияСтроки.Открыть();
		
	Иначе
		ПараметрыФормы = Новый Структура;
		//Сообщить("Строка 1.1");
		ПараметрыФормы.Вставить("РаспечататьЭтикетку",ДанныеСтроки.РаспечататьЭтикетку);
		ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
		ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
		ПараметрыФормы.Вставить("ПродолжитьСКанирование",ПродолжитьСкнирование);
		ПараметрыФормы.Вставить("ВидОперации",ВидОперации);
		ПараметрыФормы.Вставить("СканированиеУведомлением",СканированиеУведомлением);
		ПараметрыФормы.Вставить("Коэффициент1",ДанныеСтроки.Коэффициент1);
		ПараметрыФормы.Вставить("Тара",ДанныеСтроки.Тара);
		ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество1);
		
		ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
		ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
		ФормаРедактированияСтроки.Представление = Сред(ФормаРедактированияСтроки.Представление,Найти(ФормаРедактированияСтроки.Представление,";")+1);
		ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
		ФормаРедактированияСтроки.СканированиеУведомлением = СканированиеУведомлением;
		Если ФормаРедактированияСтроки.Группа = 0 Тогда
			ФормаРедактированияСтроки.Группа = МаксимальныйНомерСтроки() + 1;
		КонецЕсли;
		//Если ДанныеСтроки.Коэффициент1 > 0 Тогда
		//	ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество1; 
		//Иначе	
		//	ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
		//КонецЕсли;	
		//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
		ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество1; 
		ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество1; 
		ФормаРедактированияСтроки.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Организация = Константы.Организация.Получить();
	Организация = Константы.Организация.Получить();
	СканированиеКомпонентой1С = Константы.СканированиеКомпонентой1С.Получить();
	Элементы.ГруппаСканирование1С.Видимость = СканированиеКомпонентой1С;
	ОбновитьОтображениеИнформацииШагВзяли();
	СтруктураПараметров = Новый Структура;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.Вставить("Пользователь", ТекущийПользователь);
	СтруктураПараметров.Вставить("Организация", Организация);
	Если Исполнители.Количество() = 0 Тогда
		ДанныеСотрудники = ПараметрыСеанса.ТекущиеИсполнители;
		Если ДанныеСотрудники <> Неопределено Тогда
			ХранилищеДанных = ДанныеСотрудники.Получить();
			Если ХранилищеДанных  <> Неопределено Тогда
				МассивИсполнителей = Десериализовать(ХранилищеДанных);
		Исполнители.Очистить();
		Для каждого Исполнитель Из МассивИсполнителей Цикл
			НовыаяСтрока = Исполнители.Добавить();
			НовыаяСтрока.Исполнитель= Исполнитель;
		КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	РежимВводаНовогоОтвеса = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазмерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВ = Новый Структура;
	ИмяПоля = СтрЗаменить(Элемент.Имя,"НачалоВыбора_Доп","");
	ПараметрыВ.Вставить("Заголовок", Элементы["Кнопка" + ИмяПоля + "Выбрать"].Заголовок);
	Результат = Неопределено;

	ОткрытьФорму("Обработка.УГМК_ВводЧисла.Форма.ФормаМобильная", ПараметрыВ, ЭтаФорма,,,, Новый ОписаниеОповещения("РазмерНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ИмяПоля, Элемент", ИмяПоля, Элемент)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура РазмерНачалоВыбораЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	ИмяПоля = ДополнительныеПараметры.ИмяПоля;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Результат = Результат1;
	Если Результат <> Неопределено тогда
		НовоеЗначение = Результат.Значение;
		ИмяРеквизита = 	СтрЗаменить(ИмяПоля,"Получено","");
		Если ЭтаФорма[ИмяРеквизита] <> НовоеЗначение Тогда
			ЭтаФорма[ИмяРеквизита] = НовоеЗначение;
			Если Найти(Элемент.Имя, "Получено") = 0 Тогда
				СтрокаМодифицирована = Истина;
			КонецЕсли;	
			ПересчетПоФормулеВидовРазмеров(ИмяРеквизита);
			//ПересчитатьРасчетныйВес();
		КонецЕсли;
		//ОбновитьДоступностьСтраницаРезультат();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчетПоФормулеВидовРазмеров(ТекРазмер)
	ПересчетПоФормулеВидовРазмераНаСервере(ТекРазмер);
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьТипРазмераПоГруппеПродукции(ГруппаПродукции)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СК_ТипыРазмеров.Ссылка
		|ИЗ
		|	Справочник.СК_ТипыРазмеров КАК СК_ТипыРазмеров
		|ГДЕ
		|	НЕ СК_ТипыРазмеров.ПометкаУдаления
		|	И СК_ТипыРазмеров.ГруппаПродукции = &ГруппаПродукции";
	Запрос.УстановитьПараметр("ГруппаПродукции", ГруппаПродукции);	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаЗапроса = Результат.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ПересчетПоФормулеВидовРазмераНаСервере(ТекРазмер)
	ПараметрыРазмеров = Новый Структура("Размер1,Размер2,Размер3,Размер4,Размер5",Размер1, Размер2, Размер3, Размер4, Размер5);
	ТекТипРазмера=ПолучитьТипРазмераПоГруппеПродукции( ГруппаПродукции);
	
	ЕстьФормулаПересчета=Ложь;
	Для каждого ТекФ из ТекТипРазмера.ВидыРазмеров Цикл
		Если СокрЛП(ТекФ.ФормулаРасчета)<>"" Тогда
			ЕстьФормулаПересчета=Истина;
		Конецесли;
	КонецЦикла;
	Если не ЕстьФормулаПересчета Тогда
		возврат;
	КонецЕсли;
	
	СтруктураЗначений=Новый Структура;
	тз = ТекТипРазмера.ВидыРазмеров.Выгрузить();
	тз.Колонки.Добавить("Значение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 3));
	Для НомерРазмера = 1 По 5 Цикл
		ИмяРазмера="Размер" + Строка(НомерРазмера);
		СтрокаТЗ = тз.Найти(НомерРазмера, "ПорядковыйНомерРазмера");
		Если СтрокаТЗ <> Неопределено тогда
			СтрокаТЗ.Значение=ПараметрыРазмеров[ИмяРазмера];
			СтруктураЗначений.Вставить(СтрокаТЗ.ВидРазмера,ПараметрыРазмеров[ИмяРазмера]);
		КонецЕсли;
	КонецЦикла;
	Для каждого стр из тз цикл
		Если ТекРазмер="Размер"+СокрЛП(стр.ПорядковыйНомерРазмера) Тогда
			продолжить;
		КонецЕсли;
		Если СокрЛП(стр.ФормулаРасчета)<>"" Тогда
			ЭтаФорма["Размер"+СокрЛП(стр.ПорядковыйНомерРазмера)]=УГМК_МобильныеУстройства.РассчитатьПоФормуле(СтруктураЗначений,СокрЛП(стр.ФормулаРасчета));
			СтруктураЗначений[СокрЛП(стр.ВидРазмера)]=ЭтаФорма["Размер"+СокрЛП(стр.ПорядковыйНомерРазмера)];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	РассчитатьКоличество_Сервер();
		
	СтрокаМодифицирована = Истина;
	//ОбновитьДоступностьСтраницаРезультат();
КонецПроцедуры

//&НаКлиенте
//Процедура ПересчитатьРасчетныйВес()
//	Если Элементы.КнопкаКоличествоРассчитать.Видимость=Истина Тогда
//		РассчитатьКоличество_Сервер();
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличество_Сервер()
	//ПринятьИзмененияСтроки_Сервер( Элементы.СписокРезультатПередела.ТекущаяСтрока);
	СтруктураДанных = УГМК_МобильныеУстройства.СтруктураОсновныхДанных_Сервер();
	ЗаполнитьЗначенияСвойств( СтруктураДанных, ЭтаФорма);
	РезультатТипХарактеристики = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипХарактеристики( СтруктураДанных, Организация);
	
	//Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		//Данные = УГМК_СлужебныеФункции.ПолучитьСтруктуруСвойствОбъекта( ХарактеристикаНоменклатуры);
		Данные = Новый Структура;
		Для Номер = 1 по 5 Цикл
			Имя="КнопкаПолученоРазмер" + Строка(Номер) + "Выбрать";
			ВидимостьЭлемента=Элементы["ГруппаПолученоРазмер" + Строка(Номер)].Видимость;
			Если ВидимостьЭлемента Тогда
				попытка
					Данные.Вставить(Элементы[Имя].Заголовок,ЭтаФорма["Размер" + Строка(Номер)]);
				исключение конецпопытки;
			КонецЕсли;
		КонецЦикла;
		
		//Владелец = ХарактеристикаНоменклатуры.Владелец;
		Владелец = РезультатТипХарактеристики.ВладелецОбразцаТипов;
		МаркаСплаваРег=МаркаСплава;
		Если ТипЗнч(МаркаСплаваРег)=Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") Тогда
			МаркаСплаваРег=МаркаСплаваРег.МаркаСплава;
		КонецЕсли;
		Количество=УГМК_СлужебныеФункции.РассчитатьВес( Владелец.ФормулаРасчетаВеса, Данные, МаркаСплаваРег.УдельныйВес)*?(КоличествоМест=0,1,КоличествоМест);
		
		//ОбъемПогонногоМетра=ХарактеристикаНоменклатуры.ОбъемПогонногоМетра;
		//Если ОбъемПогонногоМетра=0 Тогда
		//	ХарактеристикаОбъект=ХарактеристикаНоменклатуры.ПолучитьОбъект();
		//	ХарактеристикаОбъект.ОбъемПогонногоМетра=УГМК_СлужебныеФункции.РассчитатьВес(Владелец.ФормулаРасчетаВеса, Данные, 1);
		//	ХарактеристикаОбъект.Записать();
		//КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолученоПриИзменении(Элемент)
	ОбновитьСвойстваПолучено();
КонецПроцедуры

&НаКлиенте
Процедура ПолученоМаркаСплаваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.РедактированиеСтрокиМаркаСплава;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", МаркаСплава);
		ОткрытьФорму("Справочник.УГМК_МаркаСплаваПроизводство.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура ТипРазмераВыбрать(Команда)
//	ТекТип=ТекущийТипРазмеров;
//	ПозТекТип=СписокТипыРазмеров.Индекс(СписокТипыРазмеров.НайтиПоЗначению(ТекущийТипРазмеров));	
//	Если СписокТипыРазмеров.Количество()<ПозТекТип+2 Тогда
//		ТекТип=СписокТипыРазмеров[0].Значение;
//	Иначе
//		ТекТип=СписокТипыРазмеров[ПозТекТип+1].Значение;
//	КонецЕсли;
//	ТекущийТипРазмеров=ТекТип;
//	//ТекущийТипРазмеровНачальный=ТекущийТипРазмеров;
//	ИзменитьВидыРазмеровНаСервере(ТекТип,"");
//	СтрокаМодифицирована = Истина;
//	ОбновитьДоступностьСтраницаРезультат();
//КонецПроцедуры

&НаКлиенте
Функция СтруктураОсновныхДанных()
	ТекущиеДанные = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ПоСвойствам,ГруппаПродукции,МаркаСплава,Состояние,ДополнениеИмени,Дополнительно");
	Возврат ТекущиеДанные;	
КонецФункции

&НаСервере
Функция СтруктураОсновныхДанных_Сервер()
	ТекущиеДанные = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ПоСвойствам,ГруппаПродукции,МаркаСплава,Состояние,ДополнениеИмени,Дополнительно");
	Возврат ТекущиеДанные;	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьРазмеры(Префикс = "")
		
	СтруктураДанных = СтруктураОсновныхДанных_Сервер();
	ЗаполнитьЗначенияСвойств( СтруктураДанных, ЭтаФорма);
	СтруктураДанных.ПоСвойствам = Истина;
	РезультатТипХарактеристики = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипХарактеристики( СтруктураДанных, Организация);
	
	//Если ЗначениеЗаполнено( ГруппаПродукции) тогда
	//	ИмяГруппа = Строка( ГруппаПродукции);
	//	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Заготовка", "Заг.");
	//	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Цилиндрический", "Цил.");
	//	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Черновое", "Черн.");
	//	Элементы.КнопкаГруппаПродукцииВыбрать.Заголовок = ИмяГруппа;
	//иначе
	//	Элементы.КнопкаГруппаПродукцииВыбрать.Заголовок = "<.Группа.>";
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( Состояние) тогда
	//	ИмяСостояние = Строка( Состояние);
	//	Если ЗначениеЗаполнено( Состояние.СостояниеСокрНаим) тогда
	//		ИмяСостояние = ИмяСостояние + " ("+СокрЛП( Состояние.СостояниеСокрНаим)+")";
	//	КонецЕсли;
	//	
	//	Элементы.КнопкаСостояниеВыбрать.Заголовок = Строка( ИмяСостояние);
	//иначе
	//	Элементы.КнопкаСостояниеВыбрать.Заголовок = "<.Состояние.>";
	//КонецЕсли;
 	
	//Элементы.ГруппаТипРазмера.Видимость=Ложь;
	//ТекущийТипРазмеров="";
	//Если ГруппаПродукции=УГМК_СлужебныеФункции.ПолучитьНастройку("ГруппаПродукции_ТрубнаяЗаготовка") Тогда
		////УГМК_ОперативныйУчет.ПолучитьДоступныеТипыРазмеров(ГруппаПродукции);
		//СписокТипыРазмеров.Очистить();
		//СписокТипыРазмеров=ПолучитьДоступныеТипыРазмеров(ГруппаПродукции);
		//Если Элементы.ГруппаСписокРезультатов.Видимость Тогда
		//	Если СписокТипыРазмеров.Количество()>1 Тогда
		//		Элементы.ГруппаТипРазмера.Видимость=Истина;
		//	Иначе
		//		Элементы.ГруппаТипРазмера.Видимость=Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(ТекущийТипРазмеров) Тогда
		//	Если СписокТипыРазмеров.НайтиПоЗначению(ТекущийТипРазмеров)<>Неопределено Тогда
		//		//ТекТип=ТекущийТипРазмеровНачальный;
		//		ТекТип=ТекущийТипРазмеров;
		//		//ТекущийТипРазмеров=ТекущийТипРазмеровНачальный;
		//		ИзменитьВидыРазмеровНаСервере(ТекТип,Префикс);
		//	Иначе
		//		ТекТип=СписокТипыРазмеров[0].Значение;
		//		ТекущийТипРазмеров=ТекТип;
		//		ИзменитьВидыРазмеровНаСервере(ТекТип,Префикс);
		//	КонецЕсли;
		//Иначе
		//	ТекТип=СписокТипыРазмеров[0].Значение;
		//	ТекущийТипРазмеров=ТекТип;
		//	ИзменитьВидыРазмеровНаСервере(ТекТип,Префикс);
		//КонецЕсли;
	//Иначе
		Если РезультатТипХарактеристики.МетаИмя = "УГМК_ЗначенияРазмеров" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СК_ТипыРазмеровВидыРазмеров.ПорядковыйНомерРазмера КАК Номер,
			               |	СК_ТипыРазмеровВидыРазмеров.ВидРазмера КАК Заголовок
			               |ИЗ
			               |	Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК СК_ТипыРазмеровВидыРазмеров
			               |ГДЕ
			               |	СК_ТипыРазмеровВидыРазмеров.Ссылка = &ВладелецОбразцаТипов
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Номер";
			Запрос.УстановитьПараметр("ВладелецОбразцаТипов",РезультатТипХарактеристики.ВладелецОбразцаТипов);					   
			РезультатЗапроса = Запрос.Выполнить();
			//Если РезультатЗапроса.Пустой() Тогда
			//	Возврат;
			//КонецЕсли;
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Для Номер = 1 по 5 Цикл
				ВидимостьЭлемента=ВыборкаЗапроса.НайтиСледующий(Номер,"Номер");
				
				Если Префикс = "" ИЛИ Префикс = "Получено" Тогда
					ЭлементРазмер=Элементы["Группа" + Префикс + "Размер" + Строка(Номер)];
					Если ВидимостьЭлемента Тогда
						Элементы["Кнопка" + Префикс + "Размер" + Строка(Номер) + "Выбрать"].Заголовок = ВыборкаЗапроса.Заголовок;
					КонецЕсли;
				Иначе
					ЭлементРазмер=Элементы[Префикс + "Размер" + Строка(Номер)];
					Если ВидимостьЭлемента Тогда
						ЭлементРазмер.Заголовок = ВыборкаЗапроса.Заголовок;
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлементРазмер.Видимость<>ВидимостьЭлемента Тогда
					ЭлементРазмер.Видимость = ВидимостьЭлемента;
				КонецЕсли;
				
				Если ВидимостьЭлемента = Ложь Тогда
					ЭтаФорма["Размер"+Строка(Номер)]=0;
				КонецЕсли;
				
			КонецЦикла; 
			//Пока ВыборкаЗапроса.Следующий() Цикл
			//	Если Префикс = "" ИЛИ Префикс = "РедактированиеСтроки" Тогда
			//		ЭлементРазмер=Элементы["Группа" + Префикс + "Размер" + Строка(ВыборкаЗапроса.Номер)];
			//		Если Не ЭлементРазмер.Видимость Тогда
			//			ЭлементРазмер.Видимость = Истина;
			//		КонецЕсли;
			//		Элементы["Кнопка" + Префикс + "Размер" + Строка(ВыборкаЗапроса.Номер) + "Выбрать"].Заголовок = ВыборкаЗапроса.Заголовок;
			//	Иначе
			//		ЭлементРазмер=Элементы[Префикс + "Размер" + Строка(ВыборкаЗапроса.Номер)];
			//		ЭлементРазмер.Заголовок = ВыборкаЗапроса.Заголовок;
			//		Если Не ЭлементРазмер.Видимость Тогда
			//			ЭлементРазмер.Видимость = Истина;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
		Иначе
			Для Номер = 1 по 5 Цикл
				Если Префикс = "" ИЛИ Префикс = "РедактированиеСтроки" Тогда 
					Элементы["Группа" + Префикс + "Размер" + Строка(Номер)].Видимость = Ложь;
				Иначе
					Элементы[Префикс + "Размер" + Строка(Номер)].Видимость = Ложь;
				КонецЕсли;
				ЭтаФорма["Размер"+Строка(Номер)]=0;
			КонецЦикла;	
		КонецЕсли;	
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьРазмер1(Команда)
	 РазмерНачалоВыбора(Элементы.ПолученоРазмер1,,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьРазмер2(Команда)
	 РазмерНачалоВыбора(Элементы.ПолученоРазмер2,,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьРазмер3(Команда)
	 РазмерНачалоВыбора(Элементы.ПолученоРазмер3,,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьРазмер4(Команда)
	 РазмерНачалоВыбора(Элементы.ПолученоРазмер4,,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьРазмер5(Команда)
	 РазмерНачалоВыбора(Элементы.ПолученоРазмер5,,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПартииПриИзменении(Элемент)
	Если ВариантПартии = 0 Тогда
	ИначеЕсли ВариантПартии = 1 Тогда	
	ИначеЕсли ВариантПартии = 2 Тогда	
		ФормаРегистратораПартии =ПолучитьФорму("Документ.УГМК_Регистратор.Форма.ФормаВыбора",,ЭтаФорма);
		ФормаРегистратораПартии.Открыть();
	КонецЕсли;	
	ОбновитьПредставлениеПартии();
	КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьПредставлениеПартии()
	Элементы.ПредставлениеПартии.Заголовок = "Партия " + УГМК_МобильныеУстройства.ПредставлениеПартии(ПаспортПартии) + ?(ВариантПартии = 1,"(нов)","");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ПаспортПартии = ВыбранноеЗначение;	
	ОбновитьПредставлениеПартии();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтвесВзято(Команда)
	//РежимВводаНовогоОтвеса = Истина;
	//ОбновитьОтображениеИнформацииШагВзяли();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	ТекущаяСтрокаМатериалы = Объект.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	ТекущаяСтрокаМатериалы.Количество = Количество;
КонецПроцедуры

&НаКлиенте
Процедура ПолученоПриИзмененииГруппаПродукции(Элемент)
	ОбновитьСвойстваПолучено();
	ОбновитьВидимостьРазмеры("Получено");
	ОбновитьПредставлениеПартии();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолученоПриИзменении(Элемент)
	ПроверкаДанныхКоличествоПолученоИспользовано();
	ПересчитатьОстатокИОтходы();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОстатокИОтходы()
	КоличествоОстаток = КоличествоВзялиИтого - КоличествоИспользовано;
	КоличествоОтход = КоличествоИспользовано - КоличествоПолучено;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанныхКоличествоПолученоИспользовано()
	Если КоличествоВзялиИтого < КоличествоПолучено Тогда
		Сообщить("Получено больше, чем взято");
		КоличествоПолучено = КоличествоВзялиИтого;
	КонецЕсли;
	Если КоличествоИспользовано < КоличествоПолучено Тогда
		Сообщить("Получено больше, чем использовано");
		КоличествоИспользовано = КоличествоПолучено;
	КонецЕсли;
	Если КоличествоВзялиИтого < КоличествоИспользовано Тогда
		Сообщить("Исопльзовано больше, чем взято");
		КоличествоИспользовано = КоличествоВзялиИтого;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИспользованоПриИзменении(Элемент)
	ПроверкаДанныхКоличествоПолученоИспользовано();
	ПересчитатьОстатокИОтходы();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИспользованоНачальныйВес(Команда)
	КоличествоИспользовано = КоличествоВзялиИтого;
	ПроверкаДанныхКоличествоПолученоИспользовано();
	ПересчитатьОстатокИОтходы();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокумент(Команда)
	Отказ = Ложь;
	Если Модифицированность = Истина Тогда
		КодОтвета = Вопрос("Документ изменен, сохранить документ перед отправкой?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Да);
		Если КодОтвета = КодВозвратаДиалога.Да ИЛИ КодОтвета = КодВозвратаДиалога.Таймаут Тогда
			Записать();
		ИначеЕсли КодОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	КодОтвета = Вопрос("Отправить документ в центральную базу?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет);
	Если КодОтвета = КодВозвратаДиалога.Нет  ИЛИ КодОтвета = КодВозвратаДиалога.Таймаут Тогда
		Отказ = Истина;
	КонецЕсли;	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	ОтправитьДокументСервер();
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОтправитьДокументСервер()
	ДокументОтправлен = Обмен.ОтправитьДокумент(Объект.Ссылка);	
	Если ДокументОтправлен Тогда
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		//ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДокументПередел()
	Объект.ВидОперации = Справочники.УГМК_СостоянияЗаказа.Передел;
	Объект.Исполнители.Очистить();
	Для Каждого СтрокаИсполнитель Из Исполнители Цикл
		НоваяСтрока = Объект.Исполнители.Добавить();
		НоваяСтрока.Сотрудник = СтрокаИсполнитель.Исполнитель;
	КонецЦикла;
	МатериалыК = Метаданные.Документы.УГМК_ДокументФакт.ТабличныеЧасти.Материалы.Реквизиты;
	ПродукцияК = Метаданные.Документы.УГМК_ДокументФакт.ТабличныеЧасти.Продукция.Реквизиты;
	
	ИменаП = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( "Продукции");
	ИменаМ = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени();

	СтрокаМ = Объект.Материалы[ 0];
	СтрокаП = Объект.Продукция[ 0];
	Если Объект.Материалы.Итог("Количество") <> КоличествоИспользовано тогда
		УГМК_ОперативныйУчет.СкопироватьДанныеТабличныхЧастей( Объект.Продукция, 
			Объект.Материалы, 
			ИменаП, 
			ИменаМ,
			ПродукцияК,
			МатериалыК, 1);
		НоваяСтрокаП = Объект.Продукция[ Объект.Продукция.Количество()-1];
		НоваяСтрокаП.Количество1Продукции = СтрокаП.Количество1Продукции*(Объект.Материалы.Итог("Количество") - КоличествоИспользовано)/НоваяСтрокаП.КоличествоПродукции;
		НоваяСтрокаП.КоличествоПродукции = Объект.Материалы.Итог("Количество") - КоличествоИспользовано;
		//НоваяСтрокаП.КоличествоМестПродукции = ОбъектВзято.Материалы.Итог("КоличествоМест") - СтрокаП.КоличествоМестПродукцииИспользовано;
		НоваяСтрокаП.Группа = 2;
		//НоваяСтрокаП.КлючСвязиПродукции = 100+СтрокаМ.КлючСвязи;
		НоваяСтрокаП.ВариантПартии = 1;
	КонецЕсли;
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура РежимРабочегоЦентраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.РежимРабочегоЦентра;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", Объект.РежимРабочегоЦентра);
		ОткрытьФорму("Справочник.УГМК_РежимыРаботыРабочихЦентров.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	//СтандартнаяОбработка = Ложь;
	//ПараметрыВ = Новый Структура;
	//ПараметрыВ.Вставить("РабочийЦентр", Объект.РабочийЦентр);
	//ПараметрыВ.Вставить("РежимРаботыРабочихЦентров", Объект.РежимРабочегоЦентра);
	//ПараметрыВ.Вставить("Оснастка1", ЭтаФорма.Оснастка1);
	//ПараметрыВ.Вставить("Оснастка2", ЭтаФорма.Оснастка2);
	//ПараметрыВ.Вставить("Оснастка3", ЭтаФорма.Оснастка3);
	//ПараметрыВ.Вставить("ВыбиратьРежим", Истина);
	////ПараметрыВ.Вставить("ПотоковыйВвод", ЭтаФорма.ТекущийЭлемент = Элементы.ИзменитьОборудование);

	//Результат = ОткрытьФормуМодально("Справочник.УГМК_ТехнологическаяОснастка.Форма.ФормаВыборНескольких", ПараметрыВ);
	//Если Результат <> Неопределено тогда
	//	Если Объект.РабочийЦентр <> Результат.РабочийЦентр тогда
	//		Объект.РабочийЦентр = Результат.РабочийЦентр;
	//	КонецЕсли;
	//	Объект.РежимРабочегоЦентра = Результат.РежимРабочегоЦентра;  
	//	ЗаполнитьЗначенияСвойств( ЭтаФорма, Результат, "Оснастка1,Оснастка2,Оснастка3");
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РабочийЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.РабочийЦентр;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", Объект.РабочийЦентр);
		ОткрытьФорму("Справочник.РабочиеЦентры.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРабочийЦентр()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочиеЦентры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.РабочиеЦентры КАК РабочиеЦентры
	               |ГДЕ
	               |	НЕ РабочиеЦентры.ПометкаУдаления
	               |	И НЕ РабочиеЦентры.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаРЦ = РезультатЗапроса.Выгрузить();
	СписокРЦ = Новый СписокЗначений;
	СписокРЦ.ЗагрузитьЗначения(ТаблицаРЦ.ВыгрузитьКолонку("Ссылка"));
	Возврат СписокРЦ;
	
КонецФункции	

&НаКлиенте
Процедура Оснастка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.Оснастка1;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", Объект.Оснастка1);
		ОткрытьФорму("Справочник.УГМК_ТехнологическаяОснастка.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Оснастка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.Оснастка2;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", Объект.Оснастка2);
		ОткрытьФорму("Справочник.УГМК_ТехнологическаяОснастка.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Оснастка3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = Элементы.Оснастка3;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ТекущаяСтрока", Объект.Оснастка3);
		ОткрытьФорму("Справочник.УГМК_ТехнологическаяОснастка.Форма.ФормаВыбора", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ДобавитьДанныеТаблицы( ТекстHTML, Таблица, ТаблицаЗаголовок, ЗаголовокДополнение, ВыводитьИтог)
	
	ТекстHTML = ТекстHTML +"
	|<p><font color=#536ac2>"+ТаблицаЗаголовок;
	
	Если ВыводитьИтог тогда
		ТекстHTML = ТекстHTML +" "+Таблица.Итог("Количество");
	КонецЕсли;
	
	ТекстHTML = ТекстHTML +"
	|</font>";
	
	Если ЗначениеЗаполнено( ЗаголовокДополнение) тогда
		ТекстHTML = ТекстHTML+" "+ЗаголовокДополнение;
	КонецЕсли;
	
	ТекстHTML = ТекстHTML +"
	|</p>";
	
	Для каждого Строка из Таблица цикл
		ТекстHTML = ТекстHTML +"
		|<p>"+Строка.ПредставлениеСтроки+"</p>";
	КонецЦикла;
	
	ТекстHTML = ТекстHTML +"<p></p>";	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеределаФорматированное( ДанныеВывода)
	Результат = Новый Структура("ТекстHTML,Вложения");
	
	ТекстHTML = "<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN""><html><head><meta content=""text/html; charset=utf-8"" http-equiv=""Content-Type""></meta>
	|</head><body><FONT size=5>";
	Если ЗначениеЗаполнено( ДанныеВывода.ЗарегистрированыОшибки) тогда
		ТекстHTML = ТекстHTML +"
		|<p><font color=#ff0000>"+ДанныеВывода.ЗарегистрированыОшибки+"</font></p>
		|<p></p>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML +"
	|<p>№ "+ДанныеВывода.Номер+" от "+ДанныеВывода.Дата+" "+ДанныеВывода.Смена+"</p>
	|<p>"+ДанныеВывода.РабочийЦентр;
	Если ЗначениеЗаполнено( ДанныеВывода.РежимРабочегоЦентра) тогда
		ТекстHTML = ТекстHTML +" "+ДанныеВывода.РежимРабочегоЦентра;
	КонецЕсли;
	Если ЗначениеЗаполнено( ДанныеВывода.Оснастка1) тогда
		ТекстHTML = ТекстHTML +" "+ДанныеВывода.Оснастка1;
	КонецЕсли;
	Если ЗначениеЗаполнено( ДанныеВывода.Оснастка2) тогда
		ТекстHTML = ТекстHTML +" "+ДанныеВывода.Оснастка2;
	КонецЕсли;
	Если ЗначениеЗаполнено( ДанныеВывода.Оснастка3) тогда
		ТекстHTML = ТекстHTML +" "+ДанныеВывода.Оснастка3;
	КонецЕсли;
	ТекстHTML = ТекстHTML +"</p>";
	
	ТекстHTML = ТекстHTML +"
	|<p>Ответственный "+ДанныеВывода.Ответственный+"</p>";
	
	Если ЗначениеЗаполнено( ДанныеВывода.Перемещение) тогда
		ТекстHTML = ТекстHTML +"
		|<p>"+ДанныеВывода.Перемещение+"</p>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ДанныеВывода.Дополнительно) тогда
		ТекстHTML = ТекстHTML +"
		|<p>"+ДанныеВывода.Дополнительно+"</p>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML +"
	|<p></p>";
	
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Получено, "Получено", ДанныеВывода.ПолученоДополнительно, Истина);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Взято, "Взято", ДанныеВывода.ВзятоДополнительно, Истина);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Использовано, "Использовано", "", Истина);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Остаток, "Остаток","",Истина);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Отход, "Отход","",Истина);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Исполнители, "Исполнители", "", Ложь);
	ДобавитьДанныеТаблицы( ТекстHTML, ДанныеВывода.Операции, "Операции", "", Ложь);
	
	ТекстHTML = ТекстHTML +"
	|</FONT></body></html>";
	
	Результат.ТекстHTML = ТекстHTML;
	Результат.Вложения = Новый Структура;
	Возврат( Результат);
КонецФункции


&НаСервере
Функция ПолучитьПредставлениеОшибокОперацийОперативногоУчета( )
	//ПолучитьОшибки = Новый Массив;
	//ПолучитьОшибки.Добавить( СозданДокументПередел.Ссылка);
	//ОшибкиСоответствие = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеОшибокОперацийОперативногоУчета( ПолучитьОшибки);
	Объект.ВидОперации = Справочники.УГМК_СостоянияЗаказа.Передел;
	Записать();
	ОшибкиСоответствие = Обмен.ПолучитьПредставлениеОшибокОперацийОперативногоУчета(Объект.Ссылка);
	Возврат( ОшибкиСоответствие);
КонецФункции


&НаСервере
Функция ПолучитьДанныеДляОписания( СозданДокументПередел)
	ДанныеВывода = Новый Структура;
	
	ШаблонТаблицы = Новый ТаблицаЗначений;
	ШаблонТаблицы.Колонки.Добавить("ПредставлениеСтроки",Новый ОписаниеТипов("Строка"));
	ШаблонТаблицы.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	
	ДанныеВывода.Вставить("Номер");
	ДанныеВывода.Вставить("Дата");
	ДанныеВывода.Вставить("Смена");
	ДанныеВывода.Вставить("РабочийЦентр");
	ДанныеВывода.Вставить("РежимРабочегоЦентра");
	ДанныеВывода.Вставить("Оснастка1");
	ДанныеВывода.Вставить("Оснастка2");
	ДанныеВывода.Вставить("Оснастка3");
	ДанныеВывода.Вставить("Ответственный");
	ДанныеВывода.Вставить("Дополнительно");
	
	ЗаполнитьЗначенияСвойств( ДанныеВывода, СозданДокументПередел);
	
	//ПолучитьОшибки = Новый Массив;
	//ПолучитьОшибки.Добавить( СозданДокументПередел.Ссылка);
	//ОшибкиСоответствие = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеОшибокОперацийОперативногоУчета( ПолучитьОшибки);
	
	ОшибкиСоответствие = ПолучитьПредставлениеОшибокОперацийОперативногоУчета();
	
	ЗарегистрированыОшибки = "";
	Если ОшибкиСоответствие <> Ложь Тогда
		Для каждого ЭлементС из ОшибкиСоответствие цикл
			Если ЗначениеЗаполнено( ЭлементС.Значение) тогда
				ЗарегистрированыОшибки = ЗарегистрированыОшибки + ЭлементС.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеВывода.Вставить("ЗарегистрированыОшибки", ЗарегистрированыОшибки);
	
	ДанныеВывода.Вставить("Перемещение","Перемещение с Участок1 на Участок 2");

	ДанныеВывода.Вставить("Получено",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Взято",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Использовано",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Остаток",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Отход",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Исполнители",ШаблонТаблицы.Скопировать());
	ДанныеВывода.Вставить("Операции",ШаблонТаблицы.Скопировать());
	
	ИменаМ = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("");
	ИменаП = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("Продукции");
	
	ПолученоДополнительно = "";
	Для Каждого СтрокаП из СозданДокументПередел.Продукция цикл
		Если СтрокаП.Группа <= 1 тогда
			ДобавитьКТаблице = ДанныеВывода.Получено;
		иначе
			ДобавитьКТаблице = ДанныеВывода.Остаток;
		КонецЕсли;
		НоваяСтрока = ДобавитьКТаблице.Добавить();
		НоваяСтрока.ПредставлениеСтроки = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеПодробно( СтрокаП, ИменаП);
		НоваяСтрока.ПредставлениеСтроки = НоваяСтрока.ПредставлениеСтроки + " Кол-во: "+СтрокаП.КоличествоПродукции;
		НоваяСтрока.Количество = СтрокаП.КоличествоПродукции;
	КонецЦикла;
	ДанныеВывода.Вставить("ПолученоДополнительно",ПолученоДополнительно);
	
	ВерсияДвижений = 0;
	
	ВзятоДополнительно = "";
	Для Каждого СтрокаМ из СозданДокументПередел.Материалы цикл
		НоваяСтрокаМ = ДанныеВывода.Взято.Добавить();
		НоваяСтрокаМ.ПредставлениеСтроки = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеПодробно( СтрокаМ, ИменаМ);
		НоваяСтрокаМ.ПредставлениеСтроки = НоваяСтрокаМ.ПредставлениеСтроки + " Кол-во: "+СтрокаМ.Количество;
		НоваяСтрокаМ.Количество = СтрокаМ.Количество;
		// ВерсияДвижений = 0 документ сквозной партии
		// ВерсияДвижений = 1 Использовано и Продукция расписаны построчно
		// ВерсияДвижений = 2 Продукция поделена на Остаток и Результат
		//Если (СозданДокументПередел.ВерсияДвижений <= 1) и СтрокаМ.Группа <= 1 тогда
		Если (ВерсияДвижений <= 1) и СтрокаМ.Группа <= 1 тогда
			НоваяСтрокаИ = ДанныеВывода.Использовано.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрокаИ, НоваяСтрокаМ); 
		КонецЕсли;
	КонецЦикла;
	
	//Если СозданДокументПередел.ВерсияДвижений = 2 тогда
	Если ВерсияДвижений = 2 тогда
		СтрокаП = СозданДокументПередел.Продукция[ СозданДокументПередел.Продукция.Количество()-1];
		
		Если СтрокаП.Группа = 2 тогда
			КоличествоИспользовано = СозданДокументПередел.Материалы.Итог("Количество") - СтрокаП.КоличествоПродукции;
			НоваяСтрокаИ = ДанныеВывода.Использовано.Добавить();
			
			НоваяСтрокаИ.ПредставлениеСтроки = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеПодробно( СтрокаП, ИменаП);
			НоваяСтрокаИ.ПредставлениеСтроки = НоваяСтрокаИ.ПредставлениеСтроки + " Кол-во: "+КоличествоИспользовано;
			НоваяСтрокаИ.Количество = КоличествоИспользовано;
		КонецЕсли;
	КонецЕсли;
	
	Если СозданДокументПередел.Материалы.Итог("Количество") <> СозданДокументПередел.Продукция.Итог("КоличествоПродукции") тогда
		НоваяСтрокаО = ДанныеВывода.Отход.Добавить();
		СтрокаП = СозданДокументПередел.Продукция[ 0];
		НоваяСтрокаО.Количество = СозданДокументПередел.Материалы.Итог("Количество") - СозданДокументПередел.Продукция.Итог("КоличествоПродукции");
		НоваяСтрокаО.ПредставлениеСтроки = "Отход "+Строка( СтрокаП.МаркаСплаваПродукции) + " Кол-во: "+НоваяСтрокаО.Количество;
	КонецЕсли;
	
	ДанныеВывода.Вставить("ВзятоДополнительно",ВзятоДополнительно);
	
	Для Каждого СтрокаИ из СозданДокументПередел.Исполнители цикл
		Если ЗначениеЗаполнено( СтрокаИ.ТехнологическаяОперация) тогда
			НоваяСтрока = ДанныеВывода.Операции.Добавить();
			НоваяСтрока.ПредставлениеСтроки = Строка( СтрокаИ.ТехнологическаяОперация)+" "+Строка( СтрокаИ.ВариантТехнологическойОперации)+" Кол-во: "+СтрокаИ.Количество;
			Если ЗначениеЗаполнено( СтрокаИ.ОтработаноЧасов) тогда
				НоваяСтрока.ПредставлениеСтроки = НоваяСтрока.ПредставлениеСтроки +" Часов: "+СтрокаИ.ОтработаноЧасов;
			КонецЕсли;
		иначе
			НоваяСтрока = ДанныеВывода.Исполнители.Добавить();
			НоваяСтрока.ПредставлениеСтроки = Строка( СтрокаИ.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Возврат( ДанныеВывода)
КонецФункции

&НаКлиенте
Процедура ДобавитьОтвесПолучено(Команда)
		ВариантПартии = 0;
		СтруктураДанных = СтруктураОсновныхДанных_Сервер();
		ЗаполнитьЗначенияСвойств( СтруктураДанных, ЭтаФорма);
		ТекущийТипРазмеров = ПолучитьТипРазмераПоГруппеПродукции(ГруппаПродукции);
		//ТекущийТипРазмеров = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипХарактеристики( СтруктураДанных, Организация);
		ПараметрыРазмеров = Новый Структура();
		ПараметрыРазмеров.Вставить("ГруппаПродукции", ГруппаПродукции);
		ПараметрыРазмеров.Вставить("Организация", Организация); 
		//ПараметрыРазмеров.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		ПараметрыРазмеров.Вставить("Размер1", Размер1);
		ПараметрыРазмеров.Вставить("Размер2", Размер2);
		ПараметрыРазмеров.Вставить("Размер3", Размер3);
		ПараметрыРазмеров.Вставить("Размер4", Размер4);
		ПараметрыРазмеров.Вставить("Размер5", Размер5);
		ПараметрыРазмеров.Вставить("ТекущийТипРазмеров", ТекущийТипРазмеров);
		ХарактеристикаНоменклатуры = УГМК_ОперативныйУчетВызовСервера.ОбновитьХарактеристику(ПараметрыРазмеров);
		Если ВводНовогоПолучено Тогда
			НоваяСтрока = Объект.Продукция.Добавить();
		Иначе 
			НоваяСтрока = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
		КонецЕсли;	
		Если ВариантПартии = 0 Тогда
			НоваяСтрока.ПаспортПартииПродукции = ПаспортПартии;	
		КонецЕсли;
		НоваяСтрока.ВариантПартии = ВариантПартии;
		НоваяСтрока.ПоСвойствамПродукции = Истина;
		НоваяСтрока.ГруппаПродукцииПродукции = ГруппаПродукции;
		НоваяСтрока.МаркаСплаваПродукции = МаркаСплава;
		НоваяСтрока.СостояниеПродукции = Состояние;
		НоваяСтрока.ХарактеристикаПродукции = ХарактеристикаНоменклатуры;
		НоваяСтрока.КоличествоПродукции = КоличествоПолучено; 
		ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Продукция.ТекущаяСтрока = ИдентификаторТекущейСтроки;
		
			Если Объект.Материалы.Количество() >= 1 Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("НомерСтроки", 1);
				МассивСтрок = Объект.Материалы.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрок.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект , МассивСтрок[0]);
					//ЗаполнитьЗначенияСвойствСервер(ЭтотОбъект ,МассивСтрок[0].ХарактеристикаНоменклатуры,
					//"Размер1, Размер2, Размер3, Размер4, Размер5");
				КонецЕсли;	
			КонецЕсли;	
			ОбновитьВидимостьРазмеры("Получено");
			ОбновитьПредставлениеПартии();
		ВводНовогоПолучено = Истина;	
		//ОбновитьОтображениеИнформацииШагПодтверждение();
	ОбновитьНадписьПолученоОтвес(Объект.Продукция.Количество() + 1, Объект.Продукция.Количество() + 1);
	КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьСтраницуШагПолучено(НомерТекущейСтроки)
	Если НомерТекущейСтроки > 0 Тогда
		ОпределитьТекущуюСтроку(НомерТекущейСтроки, "Продукция");			
		ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
		ПаспортПартии = ДанныеТекущейСтроки.ПаспортПартииПродукции;
		ГруппаПродукции = ДанныеТекущейСтроки.ГруппаПродукцииПродукции;
		МаркаСплава = ДанныеТекущейСтроки.МаркаСплаваПродукции;
		Состояние = ДанныеТекущейСтроки.СостояниеПродукции;
		ХарактеристикаНоменклатуры = ДанныеТекущейСтроки.ХарактеристикаПродукции;
		КоличествоПолучено = ДанныеТекущейСтроки.КоличествоПродукции;
		ОбновитьВидимостьРазмеры("Получено");
		ОбновитьПредставлениеПартии();
		ОбновитьСвойстваПолучено(НомерТекущейСтроки);
		ВводНовогоПолучено = Истина;
	КонецЕсли;
	ОбновитьНадписьПолученоОтвес(НомерТекущейСтроки,Объект.Продукция.Количество());
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПолученоОтвес(НомерТекущейСтроки, Количество)
	//Если НомерТекущейСтроки = 1 и Количество = 1 Тогда
	//	Элементы.НадписьОтвесПолучено.Заголовок = "Отвес № " + Строка(НомерТекущейСтроки) + " из " + Строка(Количество);
	//Иначе	
		Элементы.НадписьОтвесПолучено.Заголовок = "Отвес № " + Строка(НомерТекущейСтроки) + " из " + Строка(Количество);
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПустышка(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБирки(Команда)
	ПечатьБиркиСервер();	
КонецПроцедуры

&НаСервере
Процедура ПечатьБиркиСервер()
	Попытка
		ДокументОтправлен = Обмен.ОтправитьДокумент(Объект.Ссылка);	
		ВСОпределение = Новый WSОпределения("http://10.13.3.148:4447/copyOCM_OU_rzocm/ws/PrintOnDevice.1cws?wsdl","update1c","St7658"); 
		ВСервис = ВСОпределение.Сервисы.Получить("PrintOnDeviceStr","PrintOnDevice"); 
		ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("PrintOnDeviceSoap"); 
		ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("print"); 
		ВСПрокси = Новый WSПрокси(ВСОпределение, "PrintOnDeviceStr","PrintOnDevice","PrintOnDeviceSoap");
		ВСПрокси.Пользователь = "update1c"; 
		ВСПрокси.Пароль = "St7658"; 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УникальныйИдентификатор",Объект.Ссылка.УникальныйИдентификатор());
		ДанныеДляПечати = Новый ХранилищеЗначения(СтруктураПараметров);	
		//ДанныеДляПечати = Новый ХранилищеЗначения(Объект.Ссылка.УникальныйИдентификатор());	
		Принтер	= "\\10.35.4.89\Canon MF4500 kav";
		Если ЗначениеЗаполнено(ИмяПринтера) Тогда
			Принтер = ИмяПринтера;
		КонецЕсли;	
		СтруктураВозврат = ВСПрокси.print(ДанныеДляПечати, ИмяПринтера, ПараметрыСеанса.ТекущийПользователь.Наименование,НомерСтроки);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстПользователю = "Нет связи";
		Сообщить(ТекстПользователю);
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ТекИДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТекИДИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТекИДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекИД = Текст;
	НечитаемаяБирка(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтвесПолучено(Команда)
		Если Элементы.Продукция.ТекущаяСтрока = Неопределено Тогда
			ПредыдущийШаг = Истина;
		Иначе	
			ДанныеТекущейСтроки = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
			
			Если ДанныеТекущейСтроки.НомерСтроки > 1 ИЛИ ВводНовогоПолучено И ДанныеТекущейСтроки.НомерСтроки = 1 Тогда
				Если ВводНовогоПолучено Тогда
					НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки;
				Иначе
					НомерТекущейСтроки = ДанныеТекущейСтроки.НомерСтроки - 1;
				КонецЕсли;
				Объект.Продукция.Удалить(Объект.Продукция.Индекс(ДанныеТекущейСтроки));
				ОбновитьСтраницуШагПолучено(НомерТекущейСтроки);
				ВводНовогоПолучено = Ложь;
				ПредыдущийШаг = Ложь;
			Иначе
				ПредыдущийШаг = Истина;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолученоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолученоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УстройствоПечатиПриИзменении(Элемент)
	ПолучитьАдресУстройстваНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресУстройстваНаСервере()
	ИмяПринтера = УстройствоПечати.Адрес;
КонецПроцедуры

&НаКлиенте
Процедура ПоНаряду(Команда)
	ПоНарядуСервер();
КонецПроцедуры

&НаСервере
Процедура ПоНарядуСервер()
	АдресВебСервиса = Константы.АдресВебСервиса.Получить();
	ПарольПользователя = Константы.ПарольПользователя.Получить();
	ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
	ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
	ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
	ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
	ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("GetIspolnitel"); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
	ВСПрокси.Пользователь = "update1c"; 
	ВСПрокси.Пароль = "St7658";
	СтруктураПараметров = Новый Структура;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.Вставить("Пользователь", ТекущийПользователь);
	СтруктураПараметров.Вставить("Организация", Организация);
	ДанныеСотрудники = ВСПрокси.GetIspolnitel(Новый ХранилищеЗначения(Сериализовать(СтруктураПараметров), Новый СжатиеДанных(9)));
	Если ДанныеСотрудники <> Неопределено Тогда
		МассивИсполнителей = Десериализовать(ДанныеСотрудники.Получить());
		Исполнители.Очистить();
		Для каждого Исполнитель Из МассивИсполнителей Цикл
			НовыаяСтрока = Исполнители.Добавить();
			НовыаяСтрока.Исполнитель= Исполнитель;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

ДобавлятьДубльСтроки = Ложь;