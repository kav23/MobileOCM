Перем ДеревоЗначений, ТекущаяСтрокаДерева;

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеШК" Тогда
		ПолученныйШтрихкод = Параметр;
		ЗаполнитьИсториюПартииНаСервере(ПолученныйШтрихкод);
		//Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
		//	ДополнительныеПараметры = Новый Структура;
		//	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		//	ДополнительныеПараметры.Вставить("ПотоковоеСканирование",Истина);
		//	ДополнительныеПараметры.Вставить("СканированиеУведомлением",Истина);
		//	ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры);
		//КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	//Перем СтрокаШтрихкода1, ИнформацияБирки;
	//
	//Сообщение = "";
	//РезультатШК = ПолученныйШтрихкод;
	//РезультатШКВвод = "";
	//Если РезультатШК = "" Тогда
	//	Возврат;
	//КонецЕсли;	
	//Попытка
	//	ТекущийРезультат = "";
	//	ТекущийРезультат = РезультатШК;
	//	РезультатШК = "";
	//	СтрокаШтрихкода1 = СтрЗаменить( ТекущийРезультат, Символы.ВК, "");
	//	СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
	//	ТекстПредупреждения = "";
	//	ТекстШапкиПредупреждения = "";
	//	Если УГМК_ОперативныйУчет.ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
	//	//Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
	//		//ТаблицаМатериалы.Очистить();
	//		Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
	//			Сигнал();
	//		Иначе	
	//			ТекстПредупреждения = "ШК не прочитан";
	//			ТекстШапкиПредупреждения = "Внимание!!!";
	//			ПараметрыПредупреждения = Новый Структура;
	//			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
	//			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
	//			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
	//			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
	//			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
	//			//сообщить("2");
	//			
	//		КонецЕсли;	
	//		
	//		Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
	//			//сообщить("5");
	//				//НоваяСтрока = объект.Материалы.Добавить();
	//				Если Строка.Количество1 = 0 Тогда
	//					Строка.Количество1 = Строка.Количество; 						
	//				КонецЕсли;	
	//				ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
	//				НоваяСтрока.Группа = МаксимальныйНомерСтроки() + 1;
	//				НоваяСтрока.КоличествоУчетное = Строка.Количество;
	//				НоваяСтрока.Датаоперации = ТекущаяДата();
	//				НоваяСтрока.Представление = УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
	//				ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
	//				//Сообщить(ИдентификаторТекущейСтроки);
	//				Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	//				//Сообщить("Тек строка "+ Строка(Элементы.Материалы.ТекущаяСтрока));
	//				//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
	//				//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
	//				ТекстШапкиПредупреждения = "Добавлена";
	//				Модифицированность = Истина;
	//				РежимВводаНовогоОтвеса = Ложь;
	//				//сообщить("7");
	//				//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество)));
	//				Если НоваяСтрока.Количество1 > НоваяСтрока.Количество Тогда
	//					КоличествоПредставление = НоваяСтрока.Количество1;
	//					//КоличествоПредставление = НоваяСтрока.Количество1 + НоваяСтрока.КоличествоТара;
	//				Иначе
	//					КоличествоПредставление = НоваяСтрока.Количество;
	//					//КоличествоПредставление = НоваяСтрока.Количество + НоваяСтрока.КоличествоТара;
	//				КонецЕсли;
	//				НоваяСтрока.КоличествоПредставление = Формат(КоличествоПредставление,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(КоличествоПредставление)));
	//				Количество = Строка.Количество1;  

	//				//КонецЕсли;
	//			//Иначе
	//			//	ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
	//			//	Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	//			//	ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
	//			//	|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
	//			//	ТекстШапкиПредупреждения = "Строка есть";
	//			//	//сообщить("8");
	//			//КонецЕсли;
	//			//сообщить("9");
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//	Результат = "";
	//Исключение
	//	сообщить(ОписаниеОшибки());
	//	//сообщить("10.5");
	//	РезультатШК = ТекущийРезультат + РезультатШК;
	//КонецПопытки;
	//ЗакрытьИнтерфейс = Истина;
	//ОткрытьИнтерфейсПосле = Истина;
	////Сообщить( "Закрытиие сканирования ");
	////Иначе
	////	Текст = "Ошибка: " + Сообщение;
	//	//сообщить("11");
	////КонецЕсли;
	//
	//Если ЗакрытьИнтерфейс Тогда
	//	//сообщить("12");
	//	ОбновитьОтображениеИнформацииШагВзяли();
	//	Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
	//		ТекстПредупреждения = "ШК не получен";
	//		//сообщить("13");
	//	КонецЕсли;	
	//	Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
	//		ТекстШапкиПредупреждения = "ШК не найден";
	//		//сообщить("14");
	//	КонецЕсли;	
	//	ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
	//	ПараметрыПредупреждения = УГМК_МобильныеУстройства.ПараметрыПредупреждения();
	//	Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
	//		//Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
	//		ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
	//		УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
	//		//ТекущийЭлемент = Элементы.Материалы;
	//		//сообщить("15");
	//	КонецЕсли;	
	//	Если Не ПараметрыСеансаИдетСканирование() Тогда
	//		ПараметрыПредупреждения = Новый Структура;
	//		ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
	//		ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
	//		ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
	//		ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
	//		//сообщить("16");
	//		//СтрокаШтрихКод = "";
	//		//СтартСканироватьКлавиатура();
	//		//сообщить("17");
	//	КонецЕсли;	
	//	//сообщить("18");
	//	РедактироватьКоличество = Ложь;
	//	Если ОткрытьИнтерфейсПосле = Истина Тогда
	//		Если РедактироватьКоличество Тогда
	//			ИзменитьСтроку(Неопределено, Истина, Параметры.СканированиеУведомлением);
	//		КонецЕсли;	
	//		
	//		//ДанныеСтроки = Элементы.Материалы.ДанныеСтроки(Элементы.Материалы.ТекущаяСтрока);
	//		//ПараметрыФормы = Новый Структура;
	//		//ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
	//		//ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
	//		//ПараметрыФормы.Вставить("ПродолжитьСКанирование",Истина);
	//		//ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
	//		//ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
	//		//ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
	//		//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
	//		//ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество; 
	//		//ФормаРедактированияСтроки.Открыть();
	//		//СканированиеШтрихкода(Неопределено); 
	//	КонецЕсли;	
	//	//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьПартию(Команда)
	ЗаписатьПараметрыСеансаИдетСканирование(Истина);
	ПараметрыПредупреждения = Новый Структура;
	ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
	ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
	ПараметрыПредупреждения.Вставить("ТекстПредупреждения", "");
	ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
	УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
	#Если  МобильноеПриложениеКлиент  тогда
		Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
			Сообщить("не поддерживает сканирование штрихкода");
			Возврат;
		КонецЕсли; 	
	#КонецЕсли
	ПотоковеоСанирование = Истина;
	ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
	#Если  МобильноеПриложениеКлиент  тогда
		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Камеру на штрихкод", ОбработчикСканирования, ОбработчикЗакрытия,ТипШтрихКода.Двухмерный);
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыСеансаИдетСканирование(Значение) Экспорт
		ПараметрыСеанса.ИдетСканирование = Значение;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	Перем СтрокаШтрихкода1, ИнформацияБирки, ВыводитьПредупреждения;
	ВыводитьПредупреждения = Ложь;
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	#Если МобильноеПриложениеКлиент Тогда
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	#КонецЕсли
	ЗаполнитьИсториюПартииНаСервере(Штрихкод);
	Возврат;
	//Если ЗакрытьИнтерфейс Тогда
		//СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	//КонецЕсли;
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Штрихкод);
	//Сообщить(Штрихкод);
	Если Результат Тогда
		СтрокаШтрихкода1 = СтрЗаменить( Штрихкод, Символы.ВК, "");
		СтрокаШтрихкода1 = СтрЗаменить( СтрокаШтрихкода1, Символы.ПС, "");
		ТекстПредупреждения = "";
		ТекстШапкиПредупреждения = "";
		Если УГМК_ОперативныйУчет.ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
		//Если ПрочитатьСтрокуЭтикетки( СтрокаШтрихкода1, ИнформацияБирки) тогда
			//ТаблицаМатериалы.Очистить();
			Если ИнформацияБирки.ДанныеБирки.Количество() > 0 Тогда
				Сигнал();
				//сообщить("1" + Строка(ТекущаяДата()));
			Иначе	
				ТекстПредупреждения = "ШК не прочитан";
				ТекстШапкиПредупреждения = "Внимание!!!";
				ПараметрыПредупреждения = Новый Структура;
				ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
				ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
				ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
				ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
				УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
				//сообщить("2" + Строка(ТекущаяДата()));
				
			КонецЕсли;	
			//сообщить("3" + Строка(ТекущаяДата()));
		Если ВыводитьПредупреждения Тогда	
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		КонецЕсли;
			//сообщить("4" + Строка(ТекущаяДата()));
			
			Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
				//сообщить("5" + Строка(ТекущаяДата()));
				//ДобавитьНовуюСтроку = Истина;
				//Если ДобавлятьДубльСтроки Тогда
				//	ДобавитьНовуюСтроку = Истина;
				//Иначе
				//	СтруктураОтбора = УГМК_МобильныеУстройства.ПолучитьИменаКолонокВерсииОтборВерсия();
				//	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				//	Если СтруктураОтбора.Количество1 = 0 Тогда
				//		СтруктураОтбора.Количество1 = СтруктураОтбора.Количество;
				//	КонецЕсли;	
				//	МассивСтрокПоОтбору = объект.Материалы.НайтиСтроки(СтруктураОтбора);
				//	ДобавитьНовуюСтроку = МассивСтрокПоОтбору.Количество() = 0;
				//КонецЕсли;
				//Если ДобавитьНовуюСтроку Тогда
				//	//НоваяСтрока = объект.Материалы.Добавить();
				//	//Если Строка.Количество1 = 0 Тогда
				//	//	Строка.Количество1 = Строка.Количество; 						
				//	//КонецЕсли;	
				//	//ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка);
				//	//НоваяСтрока.КоличествоУчетное = Строка.Количество;
				//	//НоваяСтрока.Датаоперации = ТекущаяДата();
				//	//НоваяСтрока.Представление = УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиКлиентКратко(НоваяСтрока);
				//	//ИдентификаторТекущейСтроки = НоваяСтрока.ПолучитьИдентификатор();
				//	//Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
				//	//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
				//	//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(НоваяСтрока); 
				//	//ТекстШапкиПредупреждения = "Добавлена";
				//	//Сообщение = ТекстПредупреждения;
				//	Модифицированность = Истина;
				//	РежимВводаНовогоОтвеса = Ложь;
				//	//сообщить("7" + Строка(ТекущаяДата()));
				//	//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество)));
				//	Если НоваяСтрока.Количество1 > НоваяСтрока.Количество Тогда
				//		КоличествоПредставление = НоваяСтрока.Количество1;
				//		//КоличествоПредставление = НоваяСтрока.Количество1 + НоваяСтрока.КоличествоТара;
				//	Иначе
				//		КоличествоПредставление = НоваяСтрока.Количество;
				//		//КоличествоПредставление = НоваяСтрока.Количество + НоваяСтрока.КоличествоТара;
				//	КонецЕсли;
				//	НоваяСтрока.КоличествоПредставление = Формат(КоличествоПредставление,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(КоличествоПредставление)));
				//	Количество = Строка.Количество1;  
				//	
				//	//НоваяСтрока.КоличествоПредставление = Формат(НоваяСтрока.Количество + НоваяСтрока.КоличествоТара,УГМК_МобильныйКлиентСервер.ФорматПоТочности( УГМК_МобильныйКлиентСервер.ОпределитьТочность(НоваяСтрока.Количество + НоваяСтрока.КоличествоТара)));
				//	
				//	//КонецЕсли;
				//Иначе
				//	ИдентификаторТекущейСтроки = МассивСтрокПоОтбору[0].ПолучитьИдентификатор();
				//	Элементы.Материалы.ТекущаяСтрока = ИдентификаторТекущейСтроки;
				//	//ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения),"
				//	//|","") + УГМК_МобильныеУстройстваКлиент.ПредставлениеСтрокиПредупреждение(МассивСтрокПоОтбору[0]);
				//	//ТекстШапкиПредупреждения = "Строка есть";
				//	//сообщить("8" + Строка(ТекущаяДата()));
				//КонецЕсли;
				//сообщить("9" + Строка(ТекущаяДата()));
				
			КонецЦикла;
			ПараметрыПредупреждения = Новый Структура;
			ПараметрыПредупреждения.Вставить("ШКПолучен",Истина);
			ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
			ПараметрыПредупреждения.Вставить("ТекстПредупреждения",ТекстПредупреждения);
			ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения",ТекстШапкиПредупреждения);
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("10" + Строка(ТекущаяДата()));
		КонецЕсли;
		
		ЗакрытьИнтерфейс = Истина;
		ОткрытьИнтерфейсПосле = Истина;
		//Сообщить( "Закрытиие сканирования ");
	Иначе
		Текст = "Ошибка: " + Сообщение;
		//сообщить("11" + Строка(ТекущаяДата()));
	КонецЕсли;
	
	Если ЗакрытьИнтерфейс Тогда
		//сообщить("12" + Строка(ТекущаяДата()));
		//ОбновитьОтображениеИнформацииШагВзяли();
		Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
			ТекстПредупреждения = "ШК не получен";
			//сообщить("13" + Строка(ТекущаяДата()));
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ТекстШапкиПредупреждения) Тогда 
			ТекстШапкиПредупреждения = "ШК не найден";
			//сообщить("14" + Строка(ТекущаяДата()));
		КонецЕсли;	
		ЗаписатьПараметрыСеансаИдетСканирование(Ложь);
		ПараметрыПредупреждения = УГМК_МобильныеУстройства.ПараметрыПредупреждения();
		Если ПараметрыПредупреждения.ШКПолучен И (НЕ ПараметрыПредупреждения.ПредупреждениеВыведено) Тогда
			Если ВыводитьПредупреждения Тогда	
				#Если МобильноеПриложениеКлиент Тогда
					Предупреждение(ПараметрыПредупреждения.ТекстПредупреждения,,ПараметрыПредупреждения.ТекстШапкиПредупреждения);
				#КонецЕсли
			КонецЕсли;	
			ПараметрыПредупреждения.ПредупреждениеВыведено = Истина;
			УГМК_МобильныеУстройства.ЗаписатьПараметрыПредупреждения(ПараметрыПредупреждения);
			//сообщить("15" + Строка(ТекущаяДата()));
		КонецЕсли;	
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		//Если Не ПараметрыСеансаИдетСканирование() Тогда
		//	
		//	//ИзменитьСтроку(Неопределено, Истина, );

		//	//ДанныеСтроки = Элементы.Материалы.ДанныеСтроки(Элементы.Материалы.ТекущаяСтрока);
		//	//ПараметрыФормы = Новый Структура;
		//	//ПараметрыФормы.Вставить("ИзменнитьКоличество",Истина);
		//	//ПараметрыФормы.Вставить("Количество",ДанныеСтроки.Количество);
		//	//ПараметрыФормы.Вставить("ПродолжитьСКанирование",Истина);
		//	//ФормаРедактированияСтроки = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированияСтроки",ПараметрыФормы);
		//	//
		//	//ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ДанныеСтроки);
		//	//ФормаРедактированияСтроки.ИзменитьКоличество = Ложь;
		//	//ФормаРедактированияСтроки.КоличествоОсталось = ДанныеСтроки.КоличествоТара + ДанныеСтроки.Количество; 
		//	//ФормаРедактированияСтроки.КоличествоВзяли = ДанныеСтроки.Количество; 
		//	//ФормаРедактированияСтроки.Открыть();
		//	//ПараметрыПредупреждения = Новый Структура;
		//	//ПараметрыПредупреждения.Вставить("ШКПолучен",Ложь);
		//	//ПараметрыПредупреждения.Вставить("ПредупреждениеВыведено",Ложь);
		//	//ПараметрыПредупреждения.Вставить("ТекстПредупреждения","");
		//	//ПараметрыПредупреждения.Вставить("ТекстШапкиПредупреждения","");
		//	////сообщить("16" + Строка(ТекущаяДата()));
		//	//СтартСканировать();
		//	////сообщить("17" + Строка(ТекущаяДата()));
		//КонецЕсли;	
		//сообщить("18" + Строка(ТекущаяДата()));
		
	КонецЕсли;
	//Предупреждение(ТекстПредупреждения,4,ТекстШапкиПредупреждения);
	//Сообщить(Текст);
КонецПроцедуры


&НаСервере
Процедура ПолучитьИсториюСервер(Значение) Экспорт
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПартииНаСервере(Значение)
	//таблица значений
	//МассивСтруктур=УГМК_Сервер.ПолучитьИсториюОперацийПартии(Партия);
	//для каждого ЭлМ из МассивСтруктур цикл
	//	стрИ=ИсторияПартии.Добавить();
	//	ЗаполнитьЗначенияСвойств(стрИ,ЭлМ);
	//КонецЦикла;
	//дерево значений
	АдресВебСервиса = Константы.АдресВебСервиса.Получить();
	//АдресВебСервиса = "http://10.72.3.115:44501/OCM_OU/ws/MobileTransfer.1cws?wsdl";
	ПарольПользователя = Константы.ПарольПользователя.Получить();
	ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
	
	
	//ВСОпределение = Новый WSОпределения("http://10.35.4.172:4443/center/ws/MobileTransfer.1cws?wsdl","update1c","St7658"); 
	ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
	ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
	ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
	ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("GetHistory"); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
	ВСПрокси.Пользователь = "update1c"; 
	ВСПрокси.Пароль = "St7658"; 
	ТипПакетаСтруктура = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Структура");
	СтруктураОтвет =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаСтруктура);
	
	ТипПакетаМассив = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Massiv");
	МассивДанныхЗаписанных =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаМассив);
	
	
	//ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("DeleteReg"); 
	//ДанныеXDTO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, СтруктураОтвет);
	СтруктураВозврат = Десериализовать(ВСПрокси.GetHistory(Значение).Получить());
	ДеревоЗначений = СтруктураВозврат.ДеревоЗначений;
	спДопРеквизитов = СтруктураВозврат.спДопРеквизитов;
	//Если спДопРеквизитов.Количество()>0 Тогда
	//	СтруктураДопРеквизитов=Новый Структура;
	//	СтруктураДопРеквизитов.Вставить("Сплав",спДопРеквизитов.Получить(0).Значение);
	//	СтруктураДопРеквизитов.Вставить("Размер",спДопРеквизитов.Получить(1).Значение);
	//	СтруктураДопРеквизитов.Вставить("ГруппаПродукции",спДопРеквизитов.Получить(2).Значение);
	//	СтруктураДопРеквизитов.Вставить("Количество",спДопРеквизитов.Получить(3).Значение);
	//	ВывестиТекущееСостояниеПартии(СтруктураДопРеквизитов.Сплав,СтруктураДопРеквизитов.Размер,СтруктураДопРеквизитов.ГруппаПродукции,СтруктураДопРеквизитов.Количество,СокрЛП(УГМК_ОперативныйУчет.ПолучитьТекущееМестоУчетаБирки(Партия,СтруктураДопРеквизитов.Сплав,СтруктураДопРеквизитов.Размер,СтруктураДопРеквизитов.ГруппаПродукции)));
	//КонецЕсли;
	//ДеревоЗначений=УГМК_ОперативныйУчет.ПолучитьИсториюОперацийПартии(Партия,СтруктураДопРеквизитов);
	ДеревоЗначений.Колонки.Добавить("Текущая");
	Если ДеревоЗначений.строки.количество() = 0 Тогда
		Сообщить("Пустое дерево");
		Возврат;
	КонецЕсли;	
	ТекущаяСтрокаДерева = ДеревоЗначений.Строки[0]; 
	ТекущаяСтрокаДерева.Текущая = Истина;
	ДеревоЗначений.Строки[0].Текущая = Истина;
	ЗначениеВРеквизитФормы(ДеревоЗначений,"ИсторияПартииДерево");
	ВывестиТекущаяСтрокаДерева();
	//ДеревоЗначенийН = Новый ДеревоЗначений;
	//Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
	//	ДеревоЗначенийН.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	//КонецЦикла;
	//
	//МассивП=Новый Массив;
	//ОбходДереваЗначенийСОтбором(ДеревоЗначений,ДеревоЗначенийН,МассивП);
	//ПартииВверх="";
	//Если МассивП.Количество()>0 Тогда
	//	Элементы.ПартииВверх.Видимость=Истина;
	//	ПартииВверх="Внимание! Есть партии образованные из текущей: ";
	//	Для каждого стрМП из МассивП Цикл
	//		ПартииВверх=ПартииВверх+СокрЛП(стрМП)+", ";
	//	КонецЦикла;
	//	ПартииВверх=Лев(ПартииВверх,СтрДлина(ПартииВверх)-2);
	//Иначе
	//	Элементы.ПартииВверх.Видимость=Ложь;
	//КонецЕсли;
	//
	//тзДеревоЗначений=ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДеревоЗначенийН);
	//ИсторияПартии.Очистить();
	//для каждого ЭлМ из тзДеревоЗначений цикл
	//	стрИ=ИсторияПартии.Добавить();
	//	ЗаполнитьЗначенияСвойств(стрИ,ЭлМ);
	//	Если спДопРеквизитов.Количество()=0 Тогда
	//		Если ЭлМ.ТекущийДокумент=Истина Тогда
	//			ВывестиТекущееСостояниеПартии(ЭлМ.Сплав,ЭлМ.Размер,ЭлМ.ГруппаПродукции,ЭлМ.Количество,ЭлМ.ТекущееМестоУчетаБирки,ЭлМ.Партия);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ДеревоЗначенийЗначение=реквизитформывзначение("ИсторияПартииДерево");
	//ДеревоЗначенийЗначение.Строки.Очистить();
	//ДеревоЗначенийЗначение=ДеревоЗначенийН;
	//
	//
	////ТекУр="~";
	////ПервыйУровень=Истина;
	////ТекСтрока2=неопределено;
	////Для Каждого СтрокаТаблицы Из тзДеревоЗначений Цикл
	////	Если ТекУр="~" Тогда
	////		ТекСтрока1=ДеревоЗначенийЗначение.Строки.Добавить();
	////		ЗаполнитьЗначенияСвойств(ТекСтрока1, СтрокаТаблицы);
	////		ПервыйУровень=Истина;
	////	Иначе
	////		Если ТекУр<>СтрокаТаблицы.Уровень Тогда
	////			Если ТекСтрока2=неопределено Тогда
	////				ТекСтрока=ТекСтрока1.Строки.Добавить();
	////			Иначе
	////				ТекСтрока=ТекСтрока2.Строки.Добавить();
	////				ТекСтрока1=ТекСтрока2;
	////			КонецЕсли;
	////			ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаТаблицы);
	////			ПервыйУровень=Ложь;
	////		Иначе
	////			Если ПервыйУровень=Истина Тогда
	////				ТекСтрока1=ДеревоЗначенийЗначение.Строки.Добавить();
	////				ЗаполнитьЗначенияСвойств(ТекСтрока1, СтрокаТаблицы);
	////			Иначе
	////				ТекСтрока2=ТекСтрока1.Строки.Добавить();
	////				ЗаполнитьЗначенияСвойств(ТекСтрока2, СтрокаТаблицы);
	////			КонецЕсли;
	////			
	////		КонецЕсли;
	////	КонецЕсли;
	////	ТекУр=СтрокаТаблицы.Уровень;
	////КонецЦикла;
	//
	//ЗначениеВРеквизитФормы(ДеревоЗначенийЗначение,"ИсторияПартииДерево");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущаяСтрокаДерева(Индекс = Неопределено, ОтказЗакрытиеФормы = Истина)
	ТекущаяПартия = "";
	ВывестиПартию = Ложь;
	Если Индекс <> Неопределено Тогда
		ДеревоЗначений = РеквизитФормыВЗначение("ИсторияПартииДерево");
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Текущая",Истина);
		НайденныеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если Индекс = -2 Тогда
				ДеревоЗначений.Строки[0].Текущая = Истина;
				ТекущаяСтрокаДерева = ДеревоЗначений.Строки[0];
			ИначеЕсли Индекс = -1 Тогда
				ТекущаяСтрокаДерева = НайденныеСтроки[0].Родитель;
				Если ТекущаяСтрокаДерева = Неопределено Тогда 
					ОтказЗакрытиеФормы = Ложь;
					Возврат;
				КонецЕсли;	
				НайденныеСтроки[0].Родитель.Текущая = Истина;	
			Иначе
				ТекущаяСтрокаДерева = НайденныеСтроки[0].Строки[Индекс];
				НайденныеСтроки[0].Строки[Индекс].Текущая = Истина;
			КонецЕсли;	
			НайденныеСтроки[0].Текущая = Ложь;
			ЗначениеВРеквизитФормы(ДеревоЗначений,"ИсторияПартииДерево");
		Иначе
			ОтказЗакрытиеФормы = Ложь;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	ИсторияПартииЗначение = реквизитформывзначение("ИсторияПартии");
	ИсторияПартииЗначение.Очистить();
	//Если ТекущаяСтрокаДерева.Уровень()>0 Тогда
	//	НоваяСтрока = ИсторияПартииЗначение.Добавить();
	//	НоваяСтрока.Индекс = -1;
	//	НоваяСтрока.Представление = "Назад";
	//КонецЕсли;	
	Если ТекущаяСтрокаДерева.ВидОперации = "Формирование партии" Тогда
		ВывестиПартию = Истина;
	КонецЕсли;	
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		НоваяСтрока = ИсторияПартииЗначение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДерева);
		НоваяСтрока.ЕстьСтроки = СтрокаДерева.Строки.Количество() > 0;
		НоваяСтрока.Индекс =  ТекущаяСтрокаДерева.Строки.Индекс(СтрокаДерева);
		НоваяСтрока.Представление = ПредставлениеСтроки(СтрокаДерева, ВывестиПартию);
		НоваяСтрока.Представление1 = ПредставлениеСтроки1(СтрокаДерева, ВывестиПартию);
		НоваяСтрока.Представление2 = ПредставлениеСтроки2(СтрокаДерева, ВывестиПартию);
		ТекущаяПартия = СтрокаДерева.Партия;
	КонецЦикла;
	Если ТекущаяСтрокаДерева.ВидОперации = "Формирование партии" Тогда
		ТекущаяПартия = ТекущаяСтрокаДерева.Партия;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ИсторияПартииЗначение,"ИсторияПартии");
	//ЭтаФорма.АвтоЗаголовок = Ложь; 
	ЭтаФорма.Заголовок = ТекущаяПартия;
КонецПроцедуры


&НаСервере
Процедура ВывестиТекущееСостояниеПартии(Сплав,Размер,ГруппаПродукции,Количество,МестоУчета,Партия)
	ТекущееСостояниеПартии="Партия: "+СокрЛП(Партия.Номер)+Символы.ПС
							+"Сплав: "+СокрЛП(Сплав)+Символы.ПС
							+"Размер: "+СокрЛП(Размер)+Символы.ПС
							+"Группа: "+СокрЛП(ГруппаПродукции)+Символы.ПС
							+"Кол-во: "+СокрЛП(Количество)+Символы.ПС
							+"Место учета: "+СокрЛП(МестоУчета);
КонецПроцедуры

&НаСервере
Процедура ОбходДереваЗначенийСОтбором(ДеревоЗначений,ДеревоЗначенийН,МассивП)
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		стрН=ДеревоЗначенийН;
		Если СтрокаДерева.Уровень>0 Тогда
			Если МассивП.Найти(СтрокаДерева.Партия)=неопределено Тогда
				МассивП.Добавить(СтрокаДерева.Партия);
			КонецЕсли;
		Иначе
			стрН=стрН.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(стрН,СтрокаДерева);
		КонецЕсли;
		ОбходДереваЗначенийСОтбором(СтрокаДерева,стрН,МассивП);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт

    Если Таблица = Неопределено Тогда
        Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
    КонецЦикла;
    Возврат Таблица;

КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений()


&НаКлиенте
Процедура ИсторияПартииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если Элементы.ИсторияПартии.ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрокаТаблицы = ИсторияПартии.НайтиПоИдентификатору(Элементы.ИсторияПартии.ТекущаяСтрока);	
		Если ТекущаяСтрокаТаблицы.ЕстьСтроки ИЛИ ТекущаяСтрокаТаблицы.Индекс = -1 Тогда
			СтандартнаяОбработка = Ложь;
			ВывестиТекущаяСтрокаДерева(ТекущаяСтрокаТаблицы.Индекс);
			Элементы.ИсторияПартии.ТекущаяСтрока = 1;
			//ОбновитьОтображениеДанных();
		ИначеЕсли ТекущаяСтрокаТаблицы.ВидОперации = "Передел" Тогда
			СтандартнаяОбработка = Ложь;
			Режим = 1;
			ПеределHTMLПредставление = ПредставлениеПередел(ТекущаяСтрокаТаблицы.Индекс);
			ОбновитьВидимость();
			//Элементы.ИсторияПартииПредставлениеПередел.Видимость = Истина;
		КонецЕсли;	
	КонецЕсли;
			//ЭтаФорма.ТекущийЭлемент = Элементы.Экран;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПередел(Индекс)
	Если Индекс <> Неопределено Тогда
		ДеревоЗначений = РеквизитФормыВЗначение("ИсторияПартииДерево");
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Текущая",Истина);
		НайденныеСтроки = ДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрокаДерева = НайденныеСтроки[0].Строки[Индекс];
		КонецЕсли;	
	КонецЕсли;	
	ПредставлениеСтроки = "";
	size = " size=5";
	ПредставлениеСтроки = "<P><FONT " + size + " face=Verdana>" + ТекущаяСтрокаДерева.ВидОперации + " "
					+ Строка(ТекущаяСтрокаДерева.ТехнологическаяОперация) + " "
					+ Строка(ТекущаяСтрокаДерева.Оборудование) + " "
					+ "<P>" + Формат(ТекущаяСтрокаДерева.Дата,"ДФ='dd.MM ЧЧ:мм'") + " "
					//+ Строка(ТекущаяСтрокаДерева.Партия) + " "
					+ "<P>" + Строка(ТекущаяСтрокаДерева.ГруппаПродукции) + " "
					+ Строка(ТекущаяСтрокаДерева.Сплав) + " "
					+ Строка(ТекущаяСтрокаДерева.Размер) + " "
					+ Строка(ТекущаяСтрокаДерева.Состояние) + " "
					+ Строка(ТекущаяСтрокаДерева.Количество) + " "
					+ Строка(ТекущаяСтрокаДерева.Исполнители) + " "
					+ Строка(ТекущаяСтрокаДерева.Комментарий)
					+ " </FONT></P>";
	ПредставлениеСтроки = ПредставлениеСтроки + "<P><FONT " + size + " face=Verdana>" + "Материалы: </FONT></P>";				
	Для Каждого СтрокаМатериалов Из ТекущаяСтрокаДерева.СтруктураМатериалов Цикл
		ПредставлениеСтроки = ПредставлениеСтроки + УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиHTMLПередел(СтрокаМатериалов.Значение," size=4");
	КонецЦикла;	

	
	
	//Если Объект.Материалы.Количество() = 0 ИЛИ РежимВводаНовогоОтвеса Тогда
	//	ПредставлениеСтроки = "<P><FONT size=4 face=Verdana> SCAN NOW </FONT></P>";
	//	Элементы.ГруппаКоличество.Видимость = Ложь;
	//Иначе
	//	//ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	//	МатериалыТЧ = объект.Материалы;
	//	ДанныеТекущейСтроки = МатериалыТЧ.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	//	ПредставлениеСтроки = УГМК_МобильныеУстройстваКлиентСервер.ПредставлениеСтрокиКлиентHTML(ДанныеТекущейСтроки);
	//	ПредставлениеСтроки = "<P><FONT size=5 face=Verdana> Отвес № " + Строка(ДанныеТекущейСтроки.НомерСтроки) + " из " + Строка(МатериалыТЧ.Количество()) + " " + ПредставлениеСтроки;
	//	Элементы.ГруппаКоличество.Видимость = Истина;
	//КонецЕсли;
	//	
		ОбщиеДанные = "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18378""></HEAD>
		|<BODY>"
			+ ПредставлениеСтроки + 
		"</BODY></HTML>";
	Возврат ОбщиеДанные;
КонецФункции

&НаСервере
Функция ПредставлениеСтроки(СтрокаДерева, ВывестиПартию = Ложь)
	Представление = "";
	Представление = ?((СтрокаДерева.ВидОперации = "Передел"
	//И ЗначениеЗаполнено(СтрокаДерева.ТехнологическаяОперация)
	), Лев(СтрокаДерева.ТехнологическаяОперация,15), СтрокаДерева.ВидОперации)
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Оборудование) ," " + СтрокаДерева.Оборудование,"")  
	+ ?(ВывестиПартию, " " + СтрЗаменить(СтрокаДерева.Партия, "(Партия)",""),"")   
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Дата) ," " + Формат(СтрокаДерева.Дата,"ДФ='dd.MM ЧЧ:мм'"),"")
	+ ?(ЗначениеЗаполнено(СтрокаДерева.ГруппаПродукции) ," " + Строка(СтрокаДерева.ГруппаПродукции),"") 
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Размер) ," " + Строка(СтрокаДерева.Размер),"") 
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Состояние) ," " + Строка(СтрокаДерева.Состояние),""); 
	
	Если Представление = "" Тогда
		Представление = СтрЗаменить(СтрокаДерева.Партия, "(Партия)","");	
	КонецЕсли;	
					//+ ?(ЗначениеЗаполнено(СтрокаДерева.Количество) ," " + Строка(СтрокаДерева.Количество),""); 
	Возврат Представление;
КонецФункции

&НаСервере
Функция ПредставлениеСтроки1(СтрокаДерева, ВывестиПартию = Ложь)
	Представление = "";
	Представление = 
	?(ЗначениеЗаполнено(СтрокаДерева.Дата) ,Формат(СтрокаДерева.Дата,"ДФ='dd.MM ЧЧ:мм'"),"")
	+ ?((СтрокаДерева.ВидОперации = "Передел"
	//И ЗначениеЗаполнено(СтрокаДерева.ТехнологическаяОперация)
	)," " + Лев(СтрокаДерева.ТехнологическаяОперация,15)," " + СтрокаДерева.ВидОперации)
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Оборудование) ," " + СтрокаДерева.Оборудование,"")  
	//+ ?(ВывестиПартию, " " + СтрЗаменить(СтрокаДерева.Партия, "(Партия)",""),"")   
	//+ ?(ЗначениеЗаполнено(СтрокаДерева.ГруппаПродукции) ," " + Строка(СтрокаДерева.ГруппаПродукции.ГруппаПродСокрНаим),"") 
	//+ ?(ЗначениеЗаполнено(СтрокаДерева.Размер) ," " + Строка(СтрокаДерева.Размер),"") 
	//+ ?(ЗначениеЗаполнено(СтрокаДерева.Состояние) ," " + Строка(СтрокаДерева.Состояние),""); 
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Исполнители) ," " + Строка(СтрокаДерева.Исполнители),"") 
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Комментарий) ," " + Строка(СтрокаДерева.Комментарий),""); 
	
	//Если Представление = "" Тогда
	//	Представление = СтрЗаменить(СтрокаДерева.Партия, "(Партия)","");	
	//КонецЕсли;	
					//+ ?(ЗначениеЗаполнено(СтрокаДерева.Количество) ," " + Строка(СтрокаДерева.Количество),""); 
	Возврат Представление;
КонецФункции

&НаСервере
Функция ПредставлениеСтроки2(СтрокаДерева, ВывестиПартию = Ложь)
	Представление = "";
	Представление = 
	//?((СтрокаДерева.ВидОперации = "Передел"
	////И ЗначениеЗаполнено(СтрокаДерева.ТехнологическаяОперация)
	//), Лев(СтрокаДерева.ТехнологическаяОперация,15), СтрокаДерева.ВидОперации)
	//+ ?(ЗначениеЗаполнено(СтрокаДерева.Оборудование) ," " + СтрокаДерева.Оборудование,"")  
	//+ ?(ВывестиПартию, " " + СтрЗаменить(СтрокаДерева.Партия, "(Партия)",""),"")   
	//+ ?(ЗначениеЗаполнено(СтрокаДерева.Дата) ," " + Формат(СтрокаДерева.Дата,"ДФ='dd.MM ЧЧ:мм'"),"")
	?(ЗначениеЗаполнено(СтрокаДерева.ГруппаПродСокрНаим) ," " + Строка(СтрокаДерева.ГруппаПродСокрНаим)," "+СтрокаДерева.ГруппаПродукции) 
	+ ?(ВывестиПартию, " " + СтрЗаменить(СтрокаДерева.Партия, "(Партия)",""),"")   
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Размер) ," " + Строка(СтрокаДерева.Размер),"") 
	+ ?(ЗначениеЗаполнено(СтрокаДерева.Состояние) ," " + Строка(СтрокаДерева.Состояние),""); 
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = СтрЗаменить(СтрокаДерева.Партия, "(Партия)","");	
	КонецЕсли;	
					//+ ?(ЗначениеЗаполнено(СтрокаДерева.Количество) ," " + Строка(СтрокаДерева.Количество),""); 
	Возврат Представление;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РежимЗакрытияСтандартный = Истина;
	СканированиеКомпонентой1С = Константы.СканированиеКомпонентой1С.Получить();
	Элементы.ГруппаСканирование1С.Видимость = СканированиеКомпонентой1С;
	Режим = 0;
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если РежимЗакрытияСтандартный Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Если Режим = 1 Тогда
			Режим = 0;
			ОбновитьВидимость();
		Иначе	
			ВывестиТекущаяСтрокаДерева(-1, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьВидимость()
	
	Элементы.ГруппаСписокПартий.Видимость = ?(Режим = 0, Истина, Ложь);
	Элементы.ГруппаСтраницаПередела.Видимость = ?(Режим = 1, Истина, Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	РежимЗакрытияСтандартный = Ложь;
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура ВернутьсяВКорень(Команда)
	//ВывестиТекущаяСтрокаДерева(-2);
	ЭтаФорма.ТекущийЭлемент = Элементы.СканироватьПартию;
КонецПроцедуры

