Функция ПолучитьДанные() Экспорт
	
	//ДанныеОПрокси = ОбменПовтИсп.ПолучитьПрокси();
	//Прокси = ДанныеОПрокси.Прокси;
	//НомерВерсииСервиса = ДанныеОПрокси.ВерсияСервиса;
	//
	//СостояниеОбмена = Новый Структура;
	//СостояниеОбмена.Вставить("ПродолжитьЗагрузку", Ложь);
	//СостояниеОбмена.Вставить("КоличествоСообщенийВОчереди", 0);
	//СостояниеОбмена.Вставить("ПроцентГотовностиЗагружаемогоСообщения", 0);
	//
	//// Формирование объекта XDTO с запросом на получение очередной части
	//ЗапросНаСледующуюЧасть = СоздатьОбъект("MessageRequest", НомерВерсииСервиса, Прокси);
	//ЗапросНаСледующуюЧасть.mobileClientCode = Константы.КодУстройства.Получить();
	//ЗапросНаСледующуюЧасть.lastMessageId = Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Получить();
	//ЗапросНаСледующуюЧасть.lastMessagePartNumber = Константы.НомерПоследнейЗагруженнойЧастиСообщения.Получить();
	//
	//Ответ = Прокси.Get(ЗапросНаСледующуюЧасть);
	//
	//Если Ответ.Тип().Имя = "ExchangeResponse" Тогда
	//	// Если была принята часть сообщения, то заполняется структура, описывающая прогресс обмена
	//	ОбработатьДанныеОбмена(Ответ, СостояниеОбмена);	
	//КонецЕсли;
	
КонецФункции


&НаСервере 
Процедура СозданиеДинамическогоСоединенияНаСервере() Экспорт
	//ВСОпределение = Новый WSОпределения("http://10.35.4.172:4443/center/ws/MobileTransfer.1cws?wsdl","update1c","St7658"); 
	ВСОпределение = Новый WSОпределения("http://10.35.4.91:4481/tou_kav/ws/MobileTransfer.1cws?wsdl","update1c","St7658"); 
	ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
	ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
	ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("Get"); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
	ВСПрокси.Пользователь = "update1c"; 
	ВСПрокси.Пароль = "St7658"; 
	Результат = ВСПрокси.Get();
	Для Каждого ОбъектXDTO Из Результат.object Цикл
		Если ПроверитьТип(ОбъектXDTO, "GroupeProduction") Тогда		
			ЗаписатьСК_ГруппыПродукции(ОбъектXDTO);
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Organizaciya") Тогда		
			ЗаписатьОрганизации(ОбъектXDTO);
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "EdinicyIzmereniya") Тогда		
			ЗаписатьЕдиницыИзмерения(ОбъектXDTO);
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "КлассификаторЕдиницИзмерения") Тогда		
			ЗаписатьКлассификаторЕдиницИзмерения(ОбъектXDTO);
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Номенклатура") Тогда		
			ЗаписатьНоменклатура(ОбъектXDTO);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПрочитатьИзменения(МассивДанных, МассивДанныхЗаписанных, ФабрикаXDTO) Экспорт 
	//МассивДанныхЗаписанных.Очистить();
	Для Каждого ОбъектXDTO Из МассивДанных.object Цикл
		Если ПроверитьТип(ОбъектXDTO, "GroupeProduction") Тогда		
			ЗаписатьСК_ГруппыПродукции(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "GroupeProduction");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Organizaciya") Тогда		
			ЗаписатьОрганизации(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "Organizaciya");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "EdinicyIzmereniya") Тогда		
			ЗаписатьЕдиницыИзмерения(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "EdinicyIzmereniya");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "КлассификаторЕдиницИзмерения") Тогда		
			ЗаписатьКлассификаторЕдиницИзмерения(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "КлассификаторЕдиницИзмерения");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Номенклатура") Тогда		
			ЗаписатьНоменклатура(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "Номенклатура");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "НоменклатураГруппа") Тогда		
			ЗаписатьНоменклатураГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "НоменклатураГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "НоменклатурныеГруппы") Тогда		
			ЗаписатьНоменклатурныеГруппы(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "НоменклатурныеГруппы");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "НоменклатурныеГруппыГруппа") Тогда		
			ЗаписатьНоменклатурныеГруппыГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "НоменклатурныеГруппыГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Подразделения") Тогда		
			ЗаписатьПодразделения(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "Подразделения");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_МаркиСплавов") Тогда		
			ЗаписатьСК_МаркиСплавов(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_МаркиСплавов");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_МаркаСплаваПроизводство") Тогда		
			ЗаписатьУГМК_МаркаСплаваПроизводство(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_МаркаСплаваПроизводство");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "РабочиеЦентрыГруппа") Тогда		
			ЗаписатьРабочиеЦентрыГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "РабочиеЦентрыГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "РабочиеЦентры") Тогда		
			ЗаписатьРабочиеЦентры(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "РабочиеЦентры");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_ТараТехнологическая") Тогда		
			ЗаписатьУГМК_ТараТехнологическая(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ТараТехнологическая");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_ЗначенияРазмеров") Тогда		
			ЗаписатьУГМК_ЗначенияРазмеров(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ЗначенияРазмеров");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ЗначенияСвойствОбъектов") Тогда		
			ЗаписатьЗначенияСвойствОбъектов(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ЗначенияСвойствОбъектов");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ЗначенияСвойствОбъектовГруппа") Тогда		
			ЗаписатьЗначенияСвойствОбъектовГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ЗначенияСвойствОбъектовГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_СостоянияЗаказа") Тогда		
			ЗаписатьУГМК_СостоянияЗаказа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_СостоянияЗаказа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Склады") Тогда		
			ЗаписатьСклады(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "Склады");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СкладыГруппа") Тогда		
			ЗаписатьСкладыГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СкладыГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_ПродукцияОЦМ") Тогда		
			ЗаписатьСК_ПродукцияОЦМ(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_ПродукцияОЦМ");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_ПродукцияОЦМГруппа") Тогда		
			ЗаписатьСК_ПродукцияОЦМГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_ПродукцияОЦМГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_ДокументФакт") Тогда		
			ЗаписатьУГМК_ДокументФакт(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ДокументФакт");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ХарактеристикиНоменклатуры") Тогда		
			ЗаписатьХарактеристикиНоменклатуры(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ХарактеристикиНоменклатуры");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СерииНоменклатуры") Тогда		
			Если ОбъектXDTO.idВладелецТип <> "" Тогда
				ЗаписатьСерииНоменклатуры(ОбъектXDTO);
				ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СерииНоменклатуры");
			КонецЕсли;
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_Состояния") Тогда		
			ЗаписатьСК_Состояния(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_Состояния");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_СостоянияГруппа") Тогда		
			ЗаписатьСК_СостоянияГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_СостоянияГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "РабочиеМеста") Тогда		
			ЗаписатьРабочиеМеста(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "РабочиеМеста");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ТехнологическиеОперации") Тогда		
			ЗаписатьТехнологическиеОперации(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ТехнологическиеОперации");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ТехнологическиеОперацииГруппа") Тогда		
			ЗаписатьТехнологическиеОперацииГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ТехнологическиеОперацииГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Пользователи") Тогда		
			ЗаписатьПользователи(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "Пользователи");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ПользователиГруппа") Тогда		
			ЗаписатьПользователиГруппа(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "ПользователиГруппа");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_НастройкиРабочихЦентров") Тогда		
			ЗаписатьНаборЗаписейУГМК_НастройкиРабочихЦентров(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_НастройкиРабочихЦентров");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_ТипыРазмеров") Тогда		
			ЗаписатьСК_ТипыРазмеров(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_ТипыРазмеров");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СК_СоединителиРазмеров") Тогда		
			ЗаписатьСК_СоединителиРазмеров(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СК_СоединителиРазмеров");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_ТипыТехнологическихОснасток") Тогда		
			ЗаписатьУГМК_ТипыТехнологическихОснасток(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ТипыТехнологическихОснасток");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_ТехнологическаяОснастка") Тогда		
			ЗаписатьУГМК_ТехнологическаяОснастка(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ТехнологическаяОснастка");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "УГМК_РежимыРаботыРабочихЦентров") Тогда		
			ЗаписатьУГМК_РежимыРаботыРабочихЦентров(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_РежимыРаботыРабочихЦентров");
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "СотрудникиОрганизаций") Тогда		
			ЗаписатьСотрудникиОрганизаций(ОбъектXDTO);
			ТипПакета = ФабрикаXDTO.Тип("MobileTransferStr", "СотрудникиОрганизаций");
		Иначе 
			Возврат;
		КонецЕсли;
			ОбъектXDTOДубль = ФабрикаXDTO.Создать(ТипПакета);
			ЗаполнитьЗначенияСвойств(ОбъектXDTOДубль,ОбъектXDTO);
			МассивДанныхЗаписанных.object.Добавить(ОбъектXDTOДубль);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаписатьСК_ГруппыПродукции(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_ГруппыПродукции.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.СК_ГруппыПродукции.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Объект.ЗначениеПараметраПродукции = Справочники.УГМК_ГруппыПродукции.ПолучитьСсылку(ОбъектXDTO.idЗначениеПараметраПродукции);
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьОрганизации(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Организации.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.Организации.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьЕдиницыИзмерения(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Объект.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(ОбъектXDTO.idЕдиницаПоКлассификатору);
		Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
			Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьКлассификаторЕдиницИзмерения(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьНоменклатура(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Номенклатура.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
				Объект = Справочники.Номенклатура.СоздатьЭлемент();
				Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		
		//Если Объект.ЭтоГруппа Тогда 
		//	Объект = Справочники.Номенклатура.СоздатьГруппу();
		//	Объект.УстановитьСсылкуНового(Ссылка);	
		//Иначе	
			ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
			Объект.ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(ОбъектXDTO.idЕдиницаХраненияОстатков);
			Объект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(ОбъектXDTO.idБазоваяЕдиницаИзмерения);
			//Объект.ЕдиницаИзмеренияМест = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(ОбъектXDTO.idЕдиницаИзмеренияМест);
			Объект.НоменклатураОЦМ_ск = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.idНоменклатураОЦМ_ск);
			Объект.Родитель = Справочники.Номенклатура.ПолучитьСсылку(ОбъектXDTO.idРодитель);
			Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПолучитьСсылку(ОбъектXDTO.idВидНоменклатуры);
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
		//	Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
		//КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьНоменклатураГруппа(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Номенклатура.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
				Объект = Справочники.Номенклатура.СоздатьГруппу();
				
				Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		
		//Если Объект.ЭтоГруппа Тогда 
		//	Объект = Справочники.Номенклатура.СоздатьГруппу();
		//	Объект.УстановитьСсылкуНового(Ссылка);	
		//Иначе	
			ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
			//Объект.ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(ОбъектXDTO.idЕдиницаХраненияОстатков);
			//Объект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(ОбъектXDTO.idБазоваяЕдиницаИзмерения);
			////Объект.ЕдиницаИзмеренияМест = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(ОбъектXDTO.idЕдиницаИзмеренияМест);
			//Объект.НоменклатураОЦМ_ск = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.idНоменклатураОЦМ_ск);
			Объект.Родитель = Справочники.Номенклатура.ПолучитьСсылку(ОбъектXDTO.idРодитель);
			//Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПолучитьСсылку(ОбъектXDTO.idВидНоменклатуры);
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
		//	Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
		//КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьНоменклатурныеГруппы(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьНоменклатурныеГруппыГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.НоменклатурныеГруппы.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьПодразделения(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Подразделения.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.Подразделения.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.Подразделения.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьУГМК_МаркаСплаваПроизводство(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.УГМК_МаркаСплаваПроизводство.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_МаркаСплаваПроизводство.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.МаркаСплава = Справочники.СК_МаркиСплавов.ПолучитьСсылку(ОбъектXDTO.idМаркаСплава);
	Объект.Стандарт = Справочники.СК_НДНаПродукцию.ПолучитьСсылку(ОбъектXDTO.idСтандарт);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСК_МаркиСплавов(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_МаркиСплавов.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_МаркиСплавов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьРабочиеЦентры(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.РабочиеЦентры.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.РабочиеЦентры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.РабочиеЦентры.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.Подразделение = Справочники.Подразделения.ПолучитьСсылку(ОбъектXDTO.idПодразделение);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьРабочиеЦентрыГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.РабочиеЦентры.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.РабочиеЦентры.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.РабочиеЦентры.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьУГМК_ТараТехнологическая(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.УГМК_ТараТехнологическая.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_ТараТехнологическая.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Организация = Справочники.Организации.ПолучитьСсылку(ОбъектXDTO.idОрганизация);
	Объект.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(ОбъектXDTO.idНоменклатура);
	Объект.ТипТары = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ОбъектXDTO.idТипТары);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры


Процедура ЗаписатьУГМК_ЗначенияРазмеров(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.УГМК_ЗначенияРазмеров.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Для Номер = 1 по 5 Цикл
		Если ОбъектXDTO["РазмерТип"+Строка(Номер)] = 1 Тогда
			Объект["Размер" + Строка(Номер)] = ОбъектXDTO["РазмерСтрока"+Строка(Номер)];
		ИначеЕсли ОбъектXDTO["РазмерТип"+Строка(Номер)] = 2 Тогда
			Объект["Размер" + Строка(Номер)] = ОбъектXDTO["Размер"+Строка(Номер)];
		КонецЕсли;			
	КонецЦикла;	
	Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
		Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
	КонецЕсли;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры


Процедура ЗаписатьЗначенияСвойствОбъектов(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьЗначенияСвойствОбъектовГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.ЗначенияСвойствОбъектов.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьСклады(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Склады.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.Склады.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.Склады.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.Подразделение = Справочники.Подразделения.ПолучитьСсылку(ОбъектXDTO.idПодразделение);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСкладыГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Склады.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.Склады.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.Склады.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьСК_ПродукцияОЦМ(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_ПродукцияОЦМ.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.МаркаСплава = Справочники.СК_МаркиСплавов.ПолучитьСсылку(ОбъектXDTO.idМаркаСплава);
	Объект.ГруппаПродукции = Справочники.СК_ГруппыПродукции.ПолучитьСсылку(ОбъектXDTO.idГруппаПродукции);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСК_ПродукцияОЦМГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_ПродукцияОЦМ.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.СК_ПродукцияОЦМ.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьУГМК_СостоянияЗаказа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
	Если ОбъектXDTO.Предопределенный Тогда
		Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
	Иначе	
		Ссылка = Справочники.УГМК_СостоянияЗаказа.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_СостоянияЗаказа.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.УГМК_СостоянияЗаказа.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьУГМК_ДокументФакт(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
	Ссылка = Документы.УГМК_ДокументФакт.ПолучитьСсылку(ОбъектXDTO.id);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Документы.УГМК_ДокументФакт.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "Ответственный"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "Подразделение"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "Организация"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "Склад"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "ВидОперации"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "РабочийЦентр"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "СкладПолучатель"); 
	ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, "ПодразделениеПолучатель"); 
	Объект.Материалы.Очистить();
	Для Каждого СтрокаМатериалы Из ОбъектXDTO.Материалы Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		НоваяСтрока.РабочийЦентр = Справочники.РабочиеЦентры.ПолучитьСсылку(СтрокаМатериалы.idРабочийЦентр);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМатериалы,"Количество,Количество1,Коэффициент,КоличествоТара,КоличествоМест,Группа,ДатаОперации");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "Номенклатура"); 
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "ХарактеристикаНоменклатуры");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "СерияНоменклатуры");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "Состояние");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "ЕдиницаИзмеренияМест");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "ЕдиницаИзмерения");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "Тара");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "МаркаСплава");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "ЕдиницаИзмерения1");
		ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаМатериалы, "ПаспортПартии","ПаспортПартии");
		НоваяСтрока.ГруппаПродукции = Справочники.СК_ГруппыПродукции.ПолучитьСсылку(СтрокаМатериалы.idГруппаПродукции);
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(СтрокаМатериалы.idСклад);
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьХарактеристикиНоменклатуры(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
			Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьСерииНоменклатуры(ОбъектXDTO) Экспорт
	
		ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СерииНоменклатуры.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда  
			Объект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			Объект.УстановитьСсылкуНового(Ссылка);	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
		Если ЗначениеЗаполнено(ОбъектXDTO.idВладелец) И ЗначениеЗаполнено(ОбъектXDTO.idВладелецТип) Тогда 
			Объект.Владелец = Справочники[ОбъектXDTO.idВладелецТип].ПолучитьСсылку(ОбъектXDTO.idВладелец);
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьСК_Состояния(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_Состояния.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_Состояния.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.СК_Состояния.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСК_СостоянияГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_Состояния.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_Состояния.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.СК_Состояния.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьТехнологическиеОперации(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ТехнологическиеОперации.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.ТехнологическиеОперации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.ТехнологическиеОперации.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьТехнологическиеОперацииГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.ТехнологическиеОперации.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.ТехнологическиеОперации.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.ТехнологическиеОперации.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьРабочиеМеста(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.РабочиеМеста.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.РабочиеМеста.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоТипу(Объект, ОбъектXDTO, ИмяМетаданных = "", ТипМетаданных = "Справочник") 
	Если ТипМетаданных = "Справочник" Тогда
		Если ЗначениеЗаполнено(ОбъектXDTO["id" + ИмяМетаданных]) И ЗначениеЗаполнено(ОбъектXDTO["id" + ИмяМетаданных + "Тип"]) Тогда 
			Объект[ИмяМетаданных] = Справочники[ОбъектXDTO["id" + ИмяМетаданных + "Тип"]].ПолучитьСсылку(ОбъектXDTO["id" + ИмяМетаданных]);
		КонецЕсли;
	ИначеЕсли ТипМетаданных = "ПаспортПартии" Тогда
		Если ЗначениеЗаполнено(ОбъектXDTO["id" + ИмяМетаданных]) Тогда 
			Объект[ИмяМетаданных] = Документы.УГМК_Регистратор.ПолучитьСсылку(ОбъектXDTO["id" + ИмяМетаданных]);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаписатьПользователи(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Пользователи.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.Пользователи.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.Пользователи.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.УГМК_ОсновноеПодразделение = Справочники.Подразделения.ПолучитьСсылку(ОбъектXDTO.idОсновноеПодразделение);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	                       
КонецПроцедуры

Процедура ЗаписатьПользователиГруппа(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.Пользователи.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.Пользователи.СоздатьГруппу();
		
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.Пользователи.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
		
КонецПроцедуры

Процедура ЗаписатьСК_ТипыРазмеров(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_ТипыРазмеров.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_ТипыРазмеров.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.Родитель = Справочники.СК_ТипыРазмеров.ПолучитьСсылку(ОбъектXDTO.idРодитель);
	Объект.ГруппаПродукции = Справочники.СК_ГруппыПродукции.ПолучитьСсылку(ОбъектXDTO.idГруппаПродукции);
	Объект.ФормаСечения = Справочники.СК_ФормыСечения.ПолучитьСсылку(ОбъектXDTO.idФормаСечения);
	Объект.ВидыРазмеров.Очистить();
	Для Каждого СтрокаВидыРазмеров Из ОбъектXDTO.ВидыРазмеров Цикл
		НоваяСтрока = Объект.ВидыРазмеров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВидыРазмеров,"ПорядковыйНомерРазмера,ВидРазмера,Дополнительный,ФормулаРасчета,НеОсновной");
		НоваяСтрока.Соединитель = Справочники.СК_СоединителиРазмеров.ПолучитьСсылку(СтрокаВидыРазмеров.idСоединитель);
		Если ЗначениеЗаполнено(СтрокаВидыРазмеров.idСоединительИмяПредопределенныхДанных) Тогда
			НоваяСтрока.Соединитель = ПредопределенноеЗначение(СтрокаВидыРазмеров.idСоединительИмяПредопределенныхДанных);
		КонецЕсли;
		//ЗаполнитьЗначениеПоТипу(НоваяСтрока, СтрокаВидыРазмеров, "ВидРазмера"); 
	КонецЦикла;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьНаборЗаписейУГМК_НастройкиРабочихЦентров(ОбъектXDTO) Экспорт
	
	ЗначениеvsЗначениеНастроки = Неопределено;
	Если Найти(ОбъектXDTO.vsЗначениеНастроки.Получить(),"ChartOfCalculationTypesRef") > 0 Тогда
		Возврат;
	КонецЕсли;	
	ЗначениеvsЗначениеНастроки = Десериализовать(ОбъектXDTO.vsЗначениеНастроки.Получить());
	Если ЗначениеvsЗначениеНастроки = Null Тогда
		ЗначениеvsЗначениеНастроки = Неопределено;
	КонецЕсли;	
	Если ЗначениеvsЗначениеНастроки = "Неопределено" Тогда
		ЗначениеvsЗначениеНастроки = Неопределено; 
	КонецЕсли;	
	ЗначениеvsОбъектНастройки = Неопределено;
	ЗначениеvsОбъектНастройки = Десериализовать(ОбъектXDTO.vsОбъектНастройки.Получить());
	Если ЗначениеvsОбъектНастройки = Null Тогда
		ЗначениеvsОбъектНастройки = Неопределено;
	КонецЕсли;	
	Если ЗначениеvsОбъектНастройки = "Неопределено" Тогда
		ЗначениеvsОбъектНастройки = Неопределено; 
	КонецЕсли;	
	НаборЗаписей = РегистрыСведений.УГМК_НастройкиРабочихЦентров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗначениеНастроки.Установить(ЗначениеvsЗначениеНастроки);
	НаборЗаписей.Отбор.ОбъектНастройки.Установить(ЗначениеvsОбъектНастройки);
	НаборЗаписей.Отбор.ДополнениеИмени.Установить(ОбъектXDTO.ДополнениеИмени);
	//Если ОбъектXDTO["idЗначениеНастрокиТип"] <> "Строка" И ОбъектXDTO["idЗначениеНастрокиТип"] <> "Булево" Тогда
	//	ЗаполнитьЗначениеПоТипу(НаборЗаписей, ОбъектXDTO, "ЗначениеНастроки"); 
	//КонецЕсли;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Если НЕ ОбъектXDTO.Очистить Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,ОбъектXDTO);
		НоваяЗапись.ЗначениеНастроки = ЗначениеvsЗначениеНастроки;
		НоваяЗапись.ОбъектНастройки = ЗначениеvsОбъектНастройки;
	КонецЕсли;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСК_СоединителиРазмеров(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.СК_СоединителиРазмеров.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СК_СоединителиРазмеров.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		//Если ОбъектXDTO.Предопределенный Тогда
		//	Объект.ИмяПредопределенныхДанных = ОбъектXDTO.ПолноеИмяПредопределенныхДанных;
		//	Объект.Предопределенный = Истина;
		//КонецЕсли;	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьУГМК_ТипыТехнологическихОснасток(ОбъектXDTO) Экспорт
	
	
	ЭтоНовыйОбъект = Ложь;
		Если ОбъектXDTO.Предопределенный Тогда
			Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
		Иначе	
			Ссылка = Справочники.УГМК_ТипыТехнологическихОснасток.ПолучитьСсылку(ОбъектXDTO.id);
		КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_ТипыТехнологическихОснасток.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		//Если ОбъектXDTO.Предопределенный Тогда
		//	Объект.ИмяПредопределенныхДанных = ОбъектXDTO.ПолноеИмяПредопределенныхДанных;
		//	Объект.Предопределенный = Истина;
		//КонецЕсли;	
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьУГМК_ТехнологическаяОснастка(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
	Если ОбъектXDTO.Предопределенный Тогда
		Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
	Иначе	
		Ссылка = Справочники.УГМК_ТехнологическаяОснастка.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_ТехнологическаяОснастка.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	СтруктураПолей = Десериализовать(ОбъектXDTO.СтруктураПолей.Получить());
	ЗаполнитьЗначенияСвойств(Объект,СтруктураПолей,"Организация,Номенклатура,ДляПоиска,УГМК_ТипТехоснастки,РабочиеЦентрыПоОснастке,ДополнительнаяИнформация");
	Объект.РабочиеЦентры.Очистить();
	Для Каждого СтрокаРабочиеЦентры Из ОбъектXDTO.РабочиеЦентры Цикл
		НоваяСтрока = Объект.РабочиеЦентры.Добавить();
		НоваяСтрока.РабочийЦентр = Десериализовать(СтрокаРабочиеЦентры.РабочийЦентр.Получить());
	КонецЦикла;
	Объект.ДополнительнаяОснастка.Очистить();
	Для Каждого СтрокаДополнительнаяОснастка Из ОбъектXDTO.ДополнительнаяОснастка Цикл
		НоваяСтрока = Объект.ДополнительнаяОснастка.Добавить();
		НоваяСтрока.Оснастка = Десериализовать(СтрокаДополнительнаяОснастка.Оснастка.Получить());
	КонецЦикла;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьУГМК_РежимыРаботыРабочихЦентров(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
	Если ОбъектXDTO.Предопределенный Тогда
		Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
	Иначе	
		Ссылка = Справочники.УГМК_РежимыРаботыРабочихЦентров.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.УГМК_РежимыРаботыРабочихЦентров.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	СтруктураПолей = Десериализовать(ОбъектXDTO.СтруктураПолей.Получить());
	ЗаполнитьЗначенияСвойств(Объект,СтруктураПолей);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСотрудникиОрганизаций(ОбъектXDTO) Экспорт
	
	ЭтоНовыйОбъект = Ложь;
	Если ОбъектXDTO.Предопределенный Тогда
		Ссылка = ПредопределенноеЗначение(ОбъектXDTO.ПолноеИмяПредопределенныхДанных);
	Иначе	
		Ссылка = Справочники.СотрудникиОрганизаций.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда  
		Объект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		СтруктураПолей = Десериализовать(ОбъектXDTO.СтруктураПолей.Получить());
		ЗаполнитьЗначенияСвойств(Объект,СтруктураПолей);
		//Если ОбъектXDTO.Предопределенный Тогда
		//	Объект.ИмяПредопределенныхДанных = ОбъектXDTO.ПолноеИмяПредопределенныхДанных;
		//	Объект.Предопределенный = Истина;
		//КонецЕсли;	
	КонецЕсли;	
	//ЗаполнитьЗначенияСвойств(Объект,ОбъектXDTO);
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
КонецПроцедуры

Функция ПроверитьТип(ОбъектXDTO, ИмяТипа) Экспорт
	
	Возврат НРег(ОбъектXDTO.Тип().Имя) = НРег(ИмяТипа);
		
КонецФункции

Процедура ОтправитьДокументыСервер(ОтправляемДокумент = Ложь) Экспорт
	Выборка = Документы.УГМК_ДокументФакт.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОтправлен = Обмен.ОтправитьДокумент(Выборка.Ссылка,,,,ОтправляемДокумент);
		Если ДокументОтправлен Тогда
			Выборка.Ссылка.ПолучитьОбъект().Удалить();
		КонецЕсли;	
			
	КонецЦикла;	
КонецПроцедуры

Функция ВыполнитьСинхронизациюНаСервере()Экспорт
	НомерСообщения = 0;
	МассивДанныхЗаписанныхПустой = Ложь;
	Пока НЕ МассивДанныхЗаписанныхПустой Цикл 
		Попытка                                         
			
			АдресВебСервиса = Константы.АдресВебСервиса.Получить();
			ПарольПользователя = Константы.ПарольПользователя.Получить();
			ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
			Если НЕ (ЗначениеЗаполнено(ПользовательЦентральнойБазы) И ЗначениеЗаполнено(ПарольПользователя)) Тогда 
				ПользовательЦентральнойБазы = "update1c";
				ПарольПользователя = "St7658";
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(АдресВебСервиса) Тогда 
				АдресВебСервиса = "http://10.35.4.91:4481/tou_kav/ws/MobileTransfer.1cws?wsdl";
			КонецЕсли;	
			
			ВСОпределение = Новый WSОпределения(АдресВебСервиса, ПользовательЦентральнойБазы, ПарольПользователя); 
			ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
			
			ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
			ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("Get"); 
			ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
			ВСПрокси.Пользователь = ПользовательЦентральнойБазы; 
			ВСПрокси.Пароль = ПарольПользователя; 
			
			Данные = Новый ХранилищеЗначения(СформироватьСообщениеСерверу(), Новый СжатиеДанных(9));
			ДанныеXDTO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, Данные);
			
			СтруктураВозврат = ВСПрокси.Get(ДанныеXDTO, ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.ЭтотУзел().Код);
			МассивДанных = СтруктураВозврат.МассивДанных;
			НомерСообщения = СтруктураВозврат.НомерСообщения;
			
			ТипПакетаСтруктура = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Massiv");
			МассивДанныхЗаписанных =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаСтруктура);
			
			Обмен.ПрочитатьИзменения(МассивДанных, МассивДанныхЗаписанных,ВСОпределение.ФабрикаXDTO);
			
			Если МассивДанныхЗаписанных.object.Количество() > 30 Тогда
				МассивДанныхЗаписанныхПустой = Ложь;
			Иначе
				МассивДанныхЗаписанныхПустой = Истина;
			КонецЕсли;	
			ТипПакетаСтруктура = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Структура");
			СтруктураОтвет =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаСтруктура);
			СтруктураОтвет.МассивДанных = МассивДанныхЗаписанных;
			СтруктураОтвет.НомерСообщения =  НомерСообщения;
			СтруктураОтвет.Узел = ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.ЭтотУзел().Код;
			СтруктураВозврат = ВСПрокси.DeleteReg(СтруктураОтвет);
		Исключение
			СтрокаСообщения = ОписаниеОшибки();
			Если Обмен.ВыполнитьСинхронизациюНаСервере() Тогда
				Сообщить("Синхронизация прошла успешно!");
			Иначе
				Сообщить("При синхронизации были ошибки!");
			КонецЕсли; 
			//Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	Возврат Истина
	
КонецФункции

Функция СформироватьСообщениеСерверу()
	ЗаписьХМЛ = Новый ЗаписьXML;
    ЗаписьХМЛ.УстановитьСтроку();
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	Узлы = ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.Выбрать();
	Пока Узлы.Следующий() Цикл
		Если Узлы.Ссылка <> ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.ЭтотУзел() Тогда
			Узел = Узлы.Ссылка;
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьХМЛ,Узел);
	//ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,ЗаписьСообщения.НомерСообщения);
	//Пока ВыборкаИзменений.Следующий() Цикл
	//	ОбъектОбмена = ВыборкаИзменений.Получить();
	//	ЗаписатьXML(ЗаписьХМЛ,ОбъектОбмена);		
	//КонецЦикла; 
	
	ЗаписьСообщения.ЗакончитьЗапись();

    Возврат ЗаписьХМЛ.Закрыть(); 

КонецФункции
 
Процедура ПринятьИзменениеПоПлану(СтрокаСообщения);
    ЧтениеХМЛ = Новый ЧтениеXML;
    ЧтениеХМЛ.УстановитьСтроку(СтрокаСообщения);
    
    ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
    ЧтениеСообщения.НачатьЧтение(ЧтениеХМЛ);
	
	Пока ВозможностьЧтенияXML(ЧтениеХМЛ) Цикл
		Данные = ПрочитатьXML(ЧтениеСообщения.ЧтениеXML);
		Если Не Данные = Неопределено Тогда
			
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			
			Данные.Записать();
			
		КонецЕсли;
	КонецЦикла;

    ЧтениеСообщения.ЗакончитьЧтение();    
КонецПроцедуры

&НаСервере
Функция ПолучитьПодключениеПрокси() Экспорт
	НомерСообщения = 0;
	МассивДанныхЗаписанныхПустой = Ложь;
	АдресВебСервиса = Константы.АдресВебСервиса.Получить();
	ПарольПользователя = Константы.ПарольПользователя.Получить();
	ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
	
	
	//ВСОпределение = Новый WSОпределения("http://10.35.4.172:4443/center/ws/MobileTransfer.1cws?wsdl","update1c","St7658"); 
	ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
	ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
	ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
	//ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("Get"); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
	ВСПрокси.Пользователь = "update1c"; 
	ВСПрокси.Пароль = "St7658"; 
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВСПрокси", ВСПрокси);
	СтруктураВозврата.Вставить("ВСОпределение", ВСОпределение);
Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеОшибокОперацийОперативногоУчета(Документ) Экспорт
	Попытка
		СтруктураПодключения = ПолучитьПодключениеПрокси(); 
		ТипПакетаСтруктура = СтруктураПодключения.ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Структура");
		СтруктураОтвет =  СтруктураПодключения.ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаСтруктура);
		ТипПакетаМассив = СтруктураПодключения.ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Massiv");
		МассивДанныхЗаписанных =  СтруктураПодключения.ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаМассив);
		ДокументНаОтправку = ПолучитьОбъектВыгрузки(СтруктураПодключения.ВСОпределение, Документ);
		МассивДанныхЗаписанных.object.Добавить(ДокументНаОтправку);
		СтруктураОтвет.МассивДанных = МассивДанныхЗаписанных;
		СтруктураОтвет.НомерСообщения =  1;
		СтруктураОтвет.Узел = ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.ЭтотУзел().Код;
		СтруктураВозврат = СтруктураПодключения.ВСПрокси.GetErrors(СтруктураОтвет);
		ХранилищеВозвратЗначение = СтруктураВозврат.Получить();
		Если ХранилищеВозвратЗначение = Неопределено Тогда
			ОшибкиСоответствие = "Ошибка работы сервиса";
		Иначе
			ОшибкиСоответствие = Десериализовать(СтруктураВозврат.Получить());
		КонецЕсли;	
		Возврат ОшибкиСоответствие;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстПользователю = "Нет связи";
		Сообщить(ТекстПользователю);
		Возврат Ложь;
	КонецПопытки;
	
Возврат Истина;
	
КонецФункции


&НаСервере
Функция ОтправитьДокумент(Документ, КлючСтрокиПечатьБирки = 0, ИмяПринтера = "", ИзмененыДанныеСтрок = Неопределено, ОтправляемДокумент = Ложь) Экспорт
	Попытка
		НомерСообщения = 0;
		МассивДанныхЗаписанныхПустой = Ложь;
		АдресВебСервиса = Константы.АдресВебСервиса.Получить();
		ПарольПользователя = Константы.ПарольПользователя.Получить();
		ПользовательЦентральнойБазы = Константы.ПользовательЦентральнойБазы.Получить();
		
		
		//ВСОпределение = Новый WSОпределения("http://10.35.4.172:4443/center/ws/MobileTransfer.1cws?wsdl","update1c","St7658"); 
		ВСОпределение = Новый WSОпределения(АдресВебСервиса,ПользовательЦентральнойБазы,ПарольПользователя); 
		ВСервис = ВСОпределение.Сервисы.Получить("MobileTransferStr","MobileTransfer"); 
		ВТочкаВхода = ВСервис.ТочкиПодключения.Получить("MobileTransferSoap"); 
		ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("Get"); 
		ВСПрокси = Новый WSПрокси(ВСОпределение, "MobileTransferStr","MobileTransfer","MobileTransferSoap");
		ВСПрокси.Пользователь = "update1c"; 
		ВСПрокси.Пароль = "St7658"; 
		ТипПакетаСтруктура = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Структура");
		СтруктураОтвет =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаСтруктура);
		
		ТипПакетаМассив = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "Massiv");
		МассивДанныхЗаписанных =  ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаМассив);
		
		
		ДокументНаОтправку = ПолучитьОбъектВыгрузки(ВСОпределение, Документ);
		МассивДанныхЗаписанных.object.Добавить(ДокументНаОтправку);
		СтруктураОтвет.МассивДанных = МассивДанныхЗаписанных;
		СтруктураОтвет.НомерСообщения =  1;
		СтруктураОтвет.Узел = ПланыОбмена.УГМК_ОбменСМобильнымиУстройствами.ЭтотУзел().Код;
		
		//ВОперация = ВТочкаВхода.Интерфейс.Операции.Получить("DeleteReg"); 
		//ДанныеXDTO = ВСОпределение.ФабрикаXDTO.Создать(ВОперация.Параметры.Получить("Данные").Тип, СтруктураОтвет);
		СтруктураВозврат = ВСПрокси.PutDocum(СтруктураОтвет, КлючСтрокиПечатьБирки, ИмяПринтера, ОтправляемДокумент);
		ИзмененыДанныеСтрок = Десериализовать(СтруктураВозврат.МассивДанныхПечати.Получить());
		
		МассивПартий = СтруктураВозврат.МассивДанных.ХранилищеПартии;
		Для Каждого ХранилищеПартии из МассивПартий Цикл
			СтруктураПартии = Десериализовать(ХранилищеПартии.Получить());
			ДокументОбъект = Документ.ПолучитьОбъект();
			ТЧПродукция = ДокументОбъект.Продукция;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("НомерСтроки", СтруктураПартии.НомерСтроки);
			НайденныеСтроки = ТЧПродукция.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДокументССылка = Документы.УГМК_Регистратор.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПартии.УИДПартии));
				Если СсылкаСуществует( ДокументССылка) Тогда
					ОбъектБП = ДокументССылка.ПолучитьОбъект();
				Иначе
					ОбъектБП = Документы.УГМК_Регистратор.СоздатьДокумент();
					ОбъектБП.УстановитьСсылкуНового( ДокументССылка);
				КонецЕсли;	
				ОбъектБП.Дата = СтруктураПартии.Дата;
				ОбъектБП.Номер = СтруктураПартии.Номер;
				//ОбъектБП.ТипИсточника = ТипПартии;
				ОбъектБП.УИД_Источника = ДокументССылка.УникальныйИдентификатор();
				ОбъектБП.СсылкаИсточника = ДокументССылка;
				ОбъектБП.ОбменДанными.Загрузка = Истина;
				//ОбъектБП.ОбменДанными.Получатели.Очистить();
				ОбъектБП.Записать();
				
				НайденныеСтроки.ПаспортПартииПродукции = ОбъектБП.Ссылка;
			КонецЕсли;	
		КонецЦикла;	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	[ИмяТаблицы]
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	
КонецФункции

Функция ПолучитьОбъектВыгрузки(ВСОпределение, Ссылка)
	
	//Если Ссылка.Предопределенный Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	СтруктураДанных = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СК_ГруппыПродукции") Тогда
		Возврат Неопределено;
	//	СтруктураДанных = ПолучитьОбъектСК_ГруппыПродукции(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
	//	СтруктураДанных = ПолучитьОбъектОрганизации(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
	//	СтруктураДанных = ПолучитьОбъектЕдиницыИзмерения(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
	//	СтруктураДанных = ПолучитьОбъектКлассификаторЕдиницИзмерения(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	СтруктураДанных = ПолучитьОбъектНоменклатура(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
	//	СтруктураДанных = ПолучитьОбъектНоменклатурныеГруппы(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Подразделения") Тогда
	//	СтруктураДанных = ПолучитьОбъектПодразделения(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") Тогда
	//	СтруктураДанных = ПолучитьОбъектУГМК_МаркаСплаваПроизводство(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
	//	СтруктураДанных = ПолучитьОбъектРабочиеЦентры(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.УГМК_ТараТехнологическая") Тогда
	//	СтруктураДанных = ПолучитьОбъектУГМК_ТараТехнологическая(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
	//	СтруктураДанных = ПолучитьОбъектЗначенияСвойствОбъектов(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Склады") Тогда
	//	СтруктураДанных = ПолучитьОбъектСклады(Ссылка);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.УГМК_СостоянияЗаказа") Тогда
	//	СтруктураДанных = ПолучитьОбъектУГМК_СостоянияЗаказа(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УГМК_ДокументФакт") Тогда
		СтруктураДанных = ПолучитьОбъектУГМК_ДокументФакт(ВСОпределение, Ссылка);
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтруктураДанных; 

КонецФункции	

Функция  ПолучитьТипРазмераПоГруппеПродукции(ГруппаПродукции)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СК_ТипыРазмеров.Ссылка
		|ИЗ
		|	Справочник.СК_ТипыРазмеров КАК СК_ТипыРазмеров
		|ГДЕ
		|	НЕ СК_ТипыРазмеров.ПометкаУдаления
		|	И СК_ТипыРазмеров.ГруппаПродукции = &ГруппаПродукции";
	Запрос.УстановитьПараметр("ГруппаПродукции", ГруппаПродукции);	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаЗапроса = Результат.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьОбъектУГМК_ДокументФакт(ВСОпределение, Ссылка)
	ТипПакета = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ДокументФакт");
	ТипПакетаМатериал = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ДокументФактМатериалы");
	ТипПакетаИсполнители = ВСОпределение.ФабрикаXDTO.Тип("MobileTransferStr", "УГМК_ДокументФактИсполнители");
	СтруктураДанных = ВСОпределение.ФабрикаXDTO.Создать(ТипПакета);
	СтруктураДанных.ИмяМетаданных = Ссылка.Метаданные().ПолноеИмя();
	СтруктураДанных.id =  Ссылка.УникальныйИдентификатор();
	ЗаполнитьЗначенияСвойств(СтруктураДанных,Ссылка);
	УстановитьЗначение(СтруктураДанных.idОтветственный, Ссылка.Ответственный, Справочники.Пользователи.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idПодразделение, Ссылка.Подразделение, Справочники.Подразделения.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idОрганизация, Ссылка.Организация, Справочники.Организации.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idСклад, Ссылка.Склад, Справочники.Склады.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idВидОперации, Ссылка.ВидОперации, Справочники.УГМК_СостоянияЗаказа.ПустаяСсылка().УникальныйИдентификатор());
	СтруктураДанных.idВидОперацииИмяПредопределенныхДанных = Ссылка.ВидОперации.ИмяПредопределенныхДанных;
	УстановитьЗначение(СтруктураДанных.idРабочийЦентр, Ссылка.РабочийЦентр, Справочники.РабочиеЦентры.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idСкладПолучатель, Ссылка.СкладПолучатель, Справочники.Склады.ПустаяСсылка().УникальныйИдентификатор());
	УстановитьЗначение(СтруктураДанных.idПодразделениеПолучатель, Ссылка.ПодразделениеПолучатель, Справочники.Подразделения.ПустаяСсылка().УникальныйИдентификатор());
	ЗаполнитьТип(СтруктураДанных, Ссылка, "Ответственный");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "Подразделение");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "Организация");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "Склад");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "ВидОперации");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "РабочийЦентр");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "СкладПолучатель");
	ЗаполнитьТип(СтруктураДанных, Ссылка, "ПодразделениеПолучатель");
	
	СтруктураДопПолей = Новый Структура;
	СтруктураДопПолей.Вставить("РежимРабочегоЦентра",Ссылка.РежимРабочегоЦентра);
	СтруктураДопПолей.Вставить("Оснастка1",Ссылка.Оснастка1);
	СтруктураДопПолей.Вставить("Оснастка2",Ссылка.Оснастка2);
	СтруктураДопПолей.Вставить("Оснастка3",Ссылка.Оснастка3);
	СтруктураДанных.СтруктураПолей = Новый ХранилищеЗначения(Сериализовать(СтруктураДопПолей), Новый СжатиеДанных(9));
			
	Для Каждого СтрокаИсполнители Из Ссылка.Исполнители Цикл
		СтруктураДанныхИсполнители = ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаИсполнители);
		УстановитьЗначение(СтруктураДанныхИсполнители.idСотрудник, СтрокаИсполнители.Сотрудник, Справочники.СотрудникиОрганизаций.ПустаяСсылка().УникальныйИдентификатор());
		СтруктураДанных.Исполнители.Добавить(СтруктураДанныхИсполнители);
	КонецЦикла;
	
	Для Каждого СтрокаМатериалы Из Ссылка.Материалы Цикл
		СтруктураДанныхМатериалы = ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаМатериал);
		ЗаполнитьЗначенияСвойств(СтруктураДанныхМатериалы, СтрокаМатериалы);
		УстановитьЗначение(СтруктураДанныхМатериалы.idРабочийЦентр, СтрокаМатериалы.РабочийЦентр, Справочники.РабочиеЦентры.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idНоменклатура, СтрокаМатериалы.Номенклатура, Справочники.СК_МаркиСплавов.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Номенклатура");
		УстановитьЗначение(СтруктураДанныхМатериалы.idХарактеристикаНоменклатуры, СтрокаМатериалы.ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ХарактеристикаНоменклатуры");
		УстановитьЗначение(СтруктураДанныхМатериалы.idСерияНоменклатуры, СтрокаМатериалы.СерияНоменклатуры, Справочники.СерииНоменклатуры.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "СерияНоменклатуры");
		УстановитьЗначение(СтруктураДанныхМатериалы.idСостояние, СтрокаМатериалы.Состояние,Справочники.СК_Состояния.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Состояние");
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмеренияМест, СтрокаМатериалы.ЕдиницаИзмеренияМест, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмеренияМест");
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмерения, СтрокаМатериалы.ЕдиницаИзмерения, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмерения");
		УстановитьЗначение(СтруктураДанныхМатериалы.idТара, СтрокаМатериалы.Тара, Справочники.УГМК_ТараТехнологическая.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Тара");
		УстановитьЗначение(СтруктураДанныхМатериалы.idГруппаПродукции, СтрокаМатериалы.ГруппаПродукции, Справочники.СК_ГруппыПродукции.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idМаркаСплава, СтрокаМатериалы.МаркаСплава, Справочники.СК_МаркиСплавов.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "МаркаСплава");
		УстановитьЗначение(СтруктураДанныхМатериалы.idСклад, СтрокаМатериалы.Склад, Справочники.Склады.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмерения1, СтрокаМатериалы.ЕдиницаИзмерения1, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмерения1");
		УстановитьЗначение(СтруктураДанныхМатериалы.idПаспортПартии, СтрокаМатериалы.ПаспортПартии, Документы.УГМК_Регистратор.ПустаяСсылка().УникальныйИдентификатор());
		СтруктураДанных.Материалы.Добавить(СтруктураДанныхМатериалы);
	КонецЦикла;	
	
	Для Каждого СтрокаМатериалы Из Ссылка.Продукция Цикл
		СтруктураДанныхМатериалы = ВСОпределение.ФабрикаXDTO.Создать(ТипПакетаМатериал);
		УстановитьЗначение(СтруктураДанныхМатериалы.idРабочийЦентр, СтрокаМатериалы.РабочийЦентр, Справочники.РабочиеЦентры.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idНоменклатура, СтрокаМатериалы.Продукция, Справочники.СК_МаркиСплавов.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Номенклатура" , "Продукция");
		УстановитьЗначение(СтруктураДанныхМатериалы.idХарактеристикаНоменклатуры, СтрокаМатериалы.ХарактеристикаПродукции, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ХарактеристикаНоменклатуры", "ХарактеристикаПродукции");
		Если СтрокаМатериалы.ХарактеристикаПродукции.УГМК_Мобильный Тогда
			ПараметрыРазмеров = Новый Структура();
			ПараметрыРазмеров.Вставить("ГруппаПродукции", СтрокаМатериалы.ГруппаПродукцииПродукции);
			ПараметрыРазмеров.Вставить("Организация", Ссылка.Организация); 
			//ПараметрыРазмеров.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
			ПараметрыРазмеров.Вставить("Размер1", СтрокаМатериалы.ХарактеристикаПродукции.Размер1);
			ПараметрыРазмеров.Вставить("Размер2", СтрокаМатериалы.ХарактеристикаПродукции.Размер2);
			ПараметрыРазмеров.Вставить("Размер3", СтрокаМатериалы.ХарактеристикаПродукции.Размер3);
			ПараметрыРазмеров.Вставить("Размер4", СтрокаМатериалы.ХарактеристикаПродукции.Размер4);
			ПараметрыРазмеров.Вставить("Размер5", СтрокаМатериалы.ХарактеристикаПродукции.Размер5);
			ТекущийТипРазмеров = ПолучитьТипРазмераПоГруппеПродукции(СтрокаМатериалы.ГруппаПродукцииПродукции);
			ПараметрыРазмеров.Вставить("ТекущийТипРазмеров", ТекущийТипРазмеров);
			СтруктураДанныхМатериалы.РазмерыВременный = Истина;
			СтруктураДанныхМатериалы.РазмерыСтруктура = Новый ХранилищеЗначения(Сериализовать(ПараметрыРазмеров), Новый СжатиеДанных(9));
		КонецЕсли;
		УстановитьЗначение(СтруктураДанныхМатериалы.idСерияНоменклатуры, СтрокаМатериалы.СерияПродукции, Справочники.СерииНоменклатуры.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "СерияНоменклатуры", "СерияПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idСостояние, СтрокаМатериалы.СостояниеПродукции,Справочники.СК_Состояния.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Состояние", "СостояниеПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмеренияМест, СтрокаМатериалы.ЕдиницаИзмеренияМестПродукции, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмеренияМест", "ЕдиницаИзмеренияМестПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмерения, СтрокаМатериалы.ЕдиницаИзмеренияПродукции, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмерения", "ЕдиницаИзмеренияПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idТара, СтрокаМатериалы.ТараПродукции, Справочники.УГМК_ТараТехнологическая.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "Тара", "ТараПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idГруппаПродукции, СтрокаМатериалы.ГруппаПродукцииПродукции, Справочники.СК_ГруппыПродукции.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idМаркаСплава, СтрокаМатериалы.МаркаСплаваПродукции, Справочники.СК_МаркиСплавов.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "МаркаСплава", "МаркаСплаваПродукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idСклад, СтрокаМатериалы.СкладПродукции, Справочники.Склады.ПустаяСсылка().УникальныйИдентификатор());
		УстановитьЗначение(СтруктураДанныхМатериалы.idЕдиницаИзмерения1, СтрокаМатериалы.ЕдиницаИзмерения1Продукции, Справочники.ЕдиницыИзмерения.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьТип(СтруктураДанныхМатериалы, СтрокаМатериалы, "ЕдиницаИзмерения1", "ЕдиницаИзмерения1Продукции");
		УстановитьЗначение(СтруктураДанныхМатериалы.idПаспортПартии, СтрокаМатериалы.ПаспортПартииПродукции, Документы.УГМК_Регистратор.ПустаяСсылка().УникальныйИдентификатор());
		ЗаполнитьЗначенияСвойств(СтруктураДанныхМатериалы, СтрокаМатериалы);
		СтруктураДанныхМатериалы.КоличествоТара = СтрокаМатериалы.КоличествоТараПродукции; 
		СтруктураДанныхМатериалы.ПоСвойствам = СтрокаМатериалы.ПоСвойствамПродукции; 
		СтруктураДанныхМатериалы.ДатаОперации = СтрокаМатериалы.ДатаОперацииПродукции; 
		СтруктураДанныхМатериалы.Коэффициент1 = СтрокаМатериалы.Коэффициент1Продукции; 
		СтруктураДанныхМатериалы.КоличествоМест = СтрокаМатериалы.КоличествоМестПродукции; 
		СтруктураДанныхМатериалы.Количество = СтрокаМатериалы.КоличествоПродукции; 
		СтруктураДанныхМатериалы.Количество1 = СтрокаМатериалы.Количество1Продукции; 
		СтруктураДанныхМатериалы.Коэффициент = СтрокаМатериалы.КоэффициентПродукции; 
		СтруктураДанных.Продукция.Добавить(СтруктураДанныхМатериалы);
	КонецЦикла;	
	
	Если Метаданные.Справочники.Содержит(Ссылка.Метаданные()) Тогда
		Если Ссылка.Предопределенный Тогда 
			СтруктураДанных.ПолноеИмяПредопределенныхДанных = ПолучитьПолноеИмяПредопределенногоЗначения(Ссылка);
		Иначе
			СтруктураДанных.ПолноеИмяПредопределенныхДанных = "";
		КонецЕсли;	
	КонецЕсли;	

	Возврат СтруктураДанных; 
КонецФункции	


Процедура ЗаполнитьТип(Приемник, Источник, ИмяМетаданныхПриемник, ИмяМетаданныхИсточник="")
	Если НЕ ЗначениеЗаполнено(ИмяМетаданныхИсточник) Тогда
		ИмяМетаданныхИсточник = ИмяМетаданныхПриемник;
	КонецЕсли;	
		Если ЗначениеЗаполнено(Источник[ИмяМетаданныхИсточник]) Тогда
			Приемник["id" + ИмяМетаданныхПриемник + "Тип"] = Строка(Источник[ИмяМетаданныхИсточник].Метаданные().Имя);
		Иначе
			Приемник["id" + ИмяМетаданныхПриемник + "Тип"] = "";			
		КонецЕсли;
КонецПроцедуры	


Процедура УстановитьЗначение(Приемник, Источник, ПустоеЗначение = "")
	Если ЗначениеЗаполнено(Источник) Тогда 
		Приемник = Источник.УникальныйИдентификатор();
	Иначе 
		Приемник = ПустоеЗначение;
	КонецЕсли;
КонецПроцедуры	



//#Область Сериализация
//Функция Сериализовать(ОбъектСериализации) Экспорт
//	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
//	МойXML = Новый ЗаписьXML;
//	МойXML.УстановитьСтроку();
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 
//	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
//	Возврат МойXML.Закрыть();
//КонецФункции
//Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
//	ЧтениеXMLДанных = Новый ЧтениеXML;
//	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
//	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
//	ЧтениеXMLДанных.Закрыть();  
//	Возврат ТЗ;
//КонецФункции
//#КонецОбласти
