#Если Клиент тогда
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для Каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		Если Лев(ЭлементЗаполнения.Наименование,7) = "Удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( ЭлементЗаполнения) тогда
			ЭлементЗаполненияНаименование = ЭлементЗаполнения.Наименование;
		иначе
			ЭлементЗаполненияНаименование = "Выбрать из справочника..."
		КонецЕсли;
		
		ПунктМеню = ЭлементМеню.Кнопки.Добавить("Операция_"+ЭлементЗаполнения.Код, ТипКнопкиКоманднойПанели.Действие, 
		                                        ЭлементЗаполненияНаименование, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()
#КонецЕсли 

Функция ПолучитьРеквизитыМеталла( Значение, ТипЗначения = Неопределено) Экспорт
	Если ТипЗначения = Неопределено тогда
		ТипЗначения = ТипЗнч( Значение);
	КонецЕсли;
	
	Результат = Новый Структура("ГруппаПродукции,МаркаСплава,Стандарт,ДополнительныйНД,НДНаХимСостав,УсловноеОбозначение,МетодИзготовления,ФормаСечения,ТочностьИзготовления,Состояние,Мерность,ОсобыеУсловия,ПродукцияИД,Металлопрокат,ПодгруппаТрудоемкости,ОбъединениеПоТехЦепочке,ОбъединениеПоПрокату,ТипРазмера");
	Результат.Вставить("МаркаСплаваПроизводство");
	Результат.Вставить("МаркаСплаваОтход");
	
	Если ТипЗначения = Тип("СправочникСсылка.Номенклатура") тогда
		ЗаполнитьЗначенияСвойств( Результат, Значение.НоменклатураОЦМ_ск);
		Результат.МаркаСплаваПроизводство = Результат.МаркаСплава;
		Результат.МаркаСплаваОтход = Результат.МаркаСплава;
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.СК_ПродукцияОЦМ") тогда
		ЗаполнитьЗначенияСвойств( Результат, Значение);
		Результат.МаркаСплаваПроизводство = Результат.МаркаСплава;
		Результат.МаркаСплаваОтход = Результат.МаркаСплава;
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.СК_МаркиСплавов") тогда
		Результат.МаркаСплава = Значение;
		Результат.МаркаСплаваПроизводство = Значение;
		Результат.МаркаСплаваОтход = Значение;
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") тогда
		ЗаполнитьЗначенияСвойств( Результат, Значение);
		Результат.МаркаСплаваПроизводство = Значение;
		Если ЗначениеЗаполнено( Значение.МаркаСплаваОтход) тогда
			Результат.МаркаСплаваОтход = Значение.МаркаСплаваОтход;
		иначе
			Результат.МаркаСплаваОтход = Значение;
		КонецЕсли;
	иначе
		Возврат( Неопределено);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции
	
Функция ПолучитьМаркуСплаваПоЗначению( Значение, Данные = Неопределено) Экспорт
	ТипЗначения = ТипЗнч( Значение);
	Если ТипЗначения = Тип("СправочникСсылка.СК_МаркиСплавов") тогда
		Возврат( Значение);
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") тогда
		Возврат( Значение.МаркаСплава);
	КонецЕсли;	
	
	Если Данные = Неопределено тогда
		Данные = ПолучитьРеквизитыМеталла( Значение, ТипЗначения);
	КонецЕсли;
	
	Если Данные = Неопределено тогда
		Возврат( Справочники.СК_МаркиСплавов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат( Данные.МаркаСплава);
КонецФункции

Функция ПолучитьПроизводственнуюМаркуСплаваПоЗначению( Значение, Данные = Неопределено) Экспорт
	ТипЗначения = ТипЗнч( Значение);
	Если ТипЗначения = Тип("СправочникСсылка.СК_МаркиСплавов") тогда
		Возврат( Значение);
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") тогда
		Возврат( Значение);
	КонецЕсли;	
		
	Если Данные = Неопределено тогда
		Данные = ПолучитьРеквизитыМеталла( Значение, ТипЗначения);
	КонецЕсли;
	
	Если Данные = Неопределено тогда
		Возврат( Справочники.СК_МаркиСплавов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат( Данные.МаркаСплава);
КонецФункции

Функция ПолучитьСостояниеПоЗначению( Значение, Данные = Неопределено) Экспорт
	ТипЗначения = ТипЗнч( Значение);
	Если ТипЗначения = Тип("СправочникСсылка.СК_Состояния") тогда
		Возврат( Значение);
	КонецЕсли;	
	
	Если Данные = Неопределено тогда
		Данные = ПолучитьРеквизитыМеталла( Значение, ТипЗначения);
	КонецЕсли;
	
	Если Данные = Неопределено тогда
		Возврат( Справочники.СК_Состояния.ПустаяСсылка());
	КонецЕсли;
	
	Возврат( Данные.Состояние);
КонецФункции

Функция ПолучитьГруппуПродукцииПоЗначению( Значение, Данные = Неопределено) Экспорт
	ТипЗначения = ТипЗнч( Значение);
	Если ТипЗначения = Тип("СправочникСсылка.СК_ГруппыПродукции") тогда
		Возврат( Значение);
	КонецЕсли;	
		
	Если Данные = Неопределено тогда
		Данные = ПолучитьРеквизитыМеталла( Значение, ТипЗначения);
	КонецЕсли;
	
	Если Данные = Неопределено тогда
		Возврат( Справочники.СК_ГруппыПродукции.ПустаяСсылка());
	КонецЕсли;
	
	Возврат( Данные.ГруппаПродукции);
	
КонецФункции

Функция ПолучитьПредставлениеПартииЭтикетка( Значение) Экспорт
	Перем Результат;
	
	Если ЗначениеЗаполнено( Значение) тогда
		Если ЗначениеЗаполнено( Значение.ДляПредставления)и(ТипЗнч(Значение)<>Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК")) тогда //для партии стк выводим только номер, т.к. он не помещается на бирку
			Результат = Строка( Значение.ДляПредставления);
		иначе
			Результат = Строка( Значение.Номер);
		КонецЕсли;
		
		Если ТипЗнч( Значение) = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
			Если ЗначениеЗаполнено( Значение.Автомобиль) и (Строка( Значение.Автомобиль) <> Результат) тогда
				Результат = Строка( Значение.Автомобиль)+Символы.ПС+Результат;
			КонецЕсли;
		КонецЕсли;
	иначе
		Результат = "<>";
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция НайтиСоздатьПаспортПартии( ТаблицаСоставаПартии, Разделитель = " + ") Экспорт
Возврат Неопределено;
	//ОЦМ Мобильная
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("ТаблицаСоставаПартии", ТаблицаСоставаПартии);
	//Запр.УстановитьПараметр("КоличествоПлавок", ТаблицаСоставаПартии.Количество());
	//
	//Запр.Текст = "ВЫБРАТЬ
	//             |	ТаблицаСоставаПартии.Плавка,
	//             |	ТаблицаСоставаПартии.НомерСлитка
	//             |ПОМЕСТИТЬ ТаблицаСоставаПартии
	//             |ИЗ
	//             |	&ТаблицаСоставаПартии КАК ТаблицаСоставаПартии
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//             |	УГМК_ПаспортПартии.Ссылка КАК Ссылка,
	//             |	УГМК_ПаспортПартии.Номер КАК Плавка,
	//             |	УГМК_ПаспортПартии.НомерСлитка КАК НомерСлитка,
	//             |	0 КАК НомерСтроки
	//             |ПОМЕСТИТЬ ВсеПаспорта
	//             |ИЗ
	//             |	БизнесПроцесс.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии
	//             |ГДЕ
	//             |	НЕ УГМК_ПаспортПартии.Ссылка.ПометкаУдаления
	//             |	И (УГМК_ПаспортПартии.Номер, УГМК_ПаспортПартии.НомерСлитка) В
	//             |			(ВЫБРАТЬ
	//             |				ТаблицаСоставаПартии.Плавка,
	//             |				ТаблицаСоставаПартии.НомерСлитка
	//             |			ИЗ
	//             |				ТаблицаСоставаПартии КАК ТаблицаСоставаПартии)
	//             |
	//             |ОБЪЕДИНИТЬ ВСЕ
	//             |
	//             |ВЫБРАТЬ
	//             |	УГМК_ПаспортПартииУГМК_Плавки.Ссылка,
	//             |	УГМК_ПаспортПартииУГМК_Плавки.Плавка,
	//             |	УГМК_ПаспортПартииУГМК_Плавки.НомерСлитка,
	//             |	УГМК_ПаспортПартииУГМК_Плавки.НомерСтроки
	//             |ИЗ
	//             |	БизнесПроцесс.УГМК_ПаспортПартии.УГМК_Плавки КАК УГМК_ПаспортПартииУГМК_Плавки
	//             |ГДЕ
	//             |	НЕ УГМК_ПаспортПартииУГМК_Плавки.Ссылка.ПометкаУдаления
	//             |	И УГМК_ПаспортПартииУГМК_Плавки.Ссылка В
	//             |			(ВЫБРАТЬ
	//             |				УГМК_ПаспортПартии.Ссылка
	//             |			ИЗ
	//             |				БизнесПроцесс.УГМК_ПаспортПартии.УГМК_Плавки КАК УГМК_ПаспортПартии
	//             |			ГДЕ
	//             |				(УГМК_ПаспортПартии.Плавка, УГМК_ПаспортПартии.НомерСлитка) В
	//             |					(ВЫБРАТЬ
	//             |						ТаблицаСоставаПартии.Плавка,
	//             |						ТаблицаСоставаПартии.НомерСлитка
	//             |					ИЗ
	//             |						ТаблицаСоставаПартии КАК ТаблицаСоставаПартии))
	//             |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//			 |	СерииНоменклатурыУГМК_Плавки.Ссылка,
	//			 |	СУММА(1) КАК Совпадений
	//			 |ПОМЕСТИТЬ ПодходящиеСерии
	//			 |ИЗ
	//			 |	ВсеПаспорта КАК СерииНоменклатурыУГМК_Плавки
	//			 |ГДЕ
	//			 |	(СерииНоменклатурыУГМК_Плавки.Плавка, СерииНоменклатурыУГМК_Плавки.НомерСлитка) В (&ТаблицаСоставаПартии)
	//			 |
	//			 |СГРУППИРОВАТЬ ПО
	//			 |	СерииНоменклатурыУГМК_Плавки.Ссылка
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	ПодходящиеСерии.Ссылка,
	//			 |	ПодходящиеСерии.Совпадений,
	//			 |	МАКСИМУМ(СерииНоменклатурыУГМК_Плавки.НомерСтроки) КАК НомерСтроки
	//			 |ПОМЕСТИТЬ ПодходящиеСерииСМаксимумом
	//			 |ИЗ
	//			 |	ПодходящиеСерии КАК ПодходящиеСерии
	//			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеПаспорта КАК СерииНоменклатурыУГМК_Плавки
	//			 |		ПО ПодходящиеСерии.Ссылка = СерииНоменклатурыУГМК_Плавки.Ссылка
	//			 |
	//			 |СГРУППИРОВАТЬ ПО
	//			 |	ПодходящиеСерии.Ссылка,
	//			 |	ПодходящиеСерии.Совпадений
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ ПЕРВЫЕ 1
	//			 |	ПодходящиеСерии.Ссылка
	//			 |ИЗ
	//			 |	ПодходящиеСерииСМаксимумом КАК ПодходящиеСерии
	//			 |ГДЕ
	//			 |	ПодходящиеСерии.Совпадений = &КоличествоПлавок
	//			 |
	//			 |УПОРЯДОЧИТЬ ПО
	//			 |	ПодходящиеСерии.Ссылка
	//			 |АВТОУПОРЯДОЧИВАНИЕ";
	//			 
	//Результат = Запр.Выполнить().Выбрать();
	//Если Результат.Следующий() тогда
	//	Возврат( Результат.Ссылка);
	//КонецЕсли;
	//
	//Объект = БизнесПроцессы.УГМК_ПаспортПартии.СоздатьБизнесПроцесс();
	//Объект.ДляПредставления = "";
	//
	//Для каждого Плавка из ТаблицаСоставаПартии цикл
	//	СтрокаПлавки = Объект.УГМК_Плавки.Добавить();
	//	ЗаполнитьЗначенияСвойств( СтрокаПлавки, Плавка);
	//	
	//	Объект.ДляПредставления = Объект.ДляПредставления+Разделитель+СокрЛП( Строка( Плавка.Плавка));
	//КонецЦикла;
	//
	//Объект.ДляПредставления = Сред( Объект.ДляПредставления, СтрДлина( Разделитель)+1);
	//
	//Объект.Номер = СокрЛП( ТаблицаСоставаПартии[ 0].Плавка)+" ("+ТаблицаСоставаПартии.Количество()+")";
	//Объект.Дата = ТекущаяДата();
	//Объект.Записать();
	//
	//Сообщить("Создана партия ["+Объект.Номер+"]");
	//Возврат( Объект.Ссылка);
КонецФункции

Функция НайтиСоздатьПаспортПартииСТК( ТаблицаСоставаПартии, Разделитель = " + ") Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("ТаблицаСоставаПартии", ТаблицаСоставаПартии);
	//Запр.УстановитьПараметр("КоличествоПлавок", ТаблицаСоставаПартии.Количество());
	//
	//Запр.Текст = "ВЫБРАТЬ
	//             |	ТаблицаСоставаПартии.Плавка КАК Партия,
	//             |	ТаблицаСоставаПартии.НомерСлитка КАК ДопНомер
	//             |ПОМЕСТИТЬ ТаблицаСоставаПартии
	//             |ИЗ
	//             |	&ТаблицаСоставаПартии КАК ТаблицаСоставаПартии
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//             |	УГМК_ПаспортПартииСТК.Ссылка КАК Ссылка,
	//             |	УГМК_ПаспортПартииСТК.Номер КАК Партия,
	//             |	УГМК_ПаспортПартииСТК.ДопНомер КАК ДопНомер,
	//             |	0 КАК НомерСтроки
	//             |ПОМЕСТИТЬ ВсеПаспорта
	//             |ИЗ
	//             |	БизнесПроцесс.УГМК_ПаспортПартииСТК КАК УГМК_ПаспортПартииСТК
	//             |ГДЕ
	//             |	НЕ УГМК_ПаспортПартииСТК.Ссылка.ПометкаУдаления
	//             |	И (УГМК_ПаспортПартииСТК.Номер, УГМК_ПаспортПартииСТК.ДопНомер) В
	//             |			(ВЫБРАТЬ
	//             |				ТаблицаСоставаПартии.Партия,
	//             |				ТаблицаСоставаПартии.ДопНомер
	//             |			ИЗ
	//             |				ТаблицаСоставаПартии КАК ТаблицаСоставаПартии)
	//             |
	//             |ОБЪЕДИНИТЬ ВСЕ
	//             |
	//             |ВЫБРАТЬ
	//             |	СоставПартии.Ссылка,
	//             |	СоставПартии.Партия,
	//             |	СоставПартии.ДопНомер,
	//             |	СоставПартии.ДопНомер
	//             |ИЗ
	//             |	БизнесПроцесс.УГМК_ПаспортПартииСТК.УГМК_Партии КАК СоставПартии
	//             |ГДЕ
	//             |	НЕ СоставПартии.Ссылка.ПометкаУдаления
	//             |	И СоставПартии.Ссылка В
	//             |			(ВЫБРАТЬ
	//             |				УГМК_ПаспортПартииСТК.Ссылка
	//             |			ИЗ
	//             |				БизнесПроцесс.УГМК_ПаспортПартииСТК.УГМК_Партии КАК УГМК_ПаспортПартииСТК
	//             |			ГДЕ
	//             |				(УГМК_ПаспортПартииСТК.Партия, УГМК_ПаспортПартииСТК.ДопНомер) В
	//             |					(ВЫБРАТЬ
	//             |						ТаблицаСоставаПартии.Партия,
	//             |						ТаблицаСоставаПартии.ДопНомер
	//             |					ИЗ
	//             |						ТаблицаСоставаПартии КАК ТаблицаСоставаПартии))
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//             |	СерииНоменклатурыУГМК_Партии.Ссылка,
	//             |	СУММА(1) КАК Совпадений
	//             |ПОМЕСТИТЬ ПодходящиеСерии
	//             |ИЗ
	//             |	ВсеПаспорта КАК СерииНоменклатурыУГМК_Партии
	//             |ГДЕ
	//             |	(СерииНоменклатурыУГМК_Партии.Партия, СерииНоменклатурыУГМК_Партии.ДопНомер) В (&ТаблицаСоставаПартии)
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	СерииНоменклатурыУГМК_Партии.Ссылка
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	ПодходящиеСерии.Ссылка,
	//             |	ПодходящиеСерии.Совпадений,
	//             |	МАКСИМУМ(СерииНоменклатурыУГМК_Партии.НомерСтроки) КАК НомерСтроки
	//             |ПОМЕСТИТЬ ПодходящиеСерииСМаксимумом
	//             |ИЗ
	//             |	ПодходящиеСерии КАК ПодходящиеСерии
	//             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеПаспорта КАК СерииНоменклатурыУГМК_Партии
	//             |		ПО ПодходящиеСерии.Ссылка = СерииНоменклатурыУГМК_Партии.Ссылка
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	ПодходящиеСерии.Ссылка,
	//             |	ПодходящиеСерии.Совпадений
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ ПЕРВЫЕ 1
	//             |	ПодходящиеСерии.Ссылка
	//             |ИЗ
	//             |	ПодходящиеСерииСМаксимумом КАК ПодходящиеСерии
	//             |ГДЕ
	//             |	ПодходящиеСерии.Совпадений = &КоличествоПлавок
	//             |
	//             |УПОРЯДОЧИТЬ ПО
	//             |	ПодходящиеСерии.Ссылка
	//             |АВТОУПОРЯДОЧИВАНИЕ";
	//			 
	//Результат = Запр.Выполнить().Выбрать();
	//Если Результат.Следующий() тогда
	//	Возврат( Результат.Ссылка);
	//КонецЕсли;
	//
	//Объект = БизнесПроцессы.УГМК_ПаспортПартииСТК.СоздатьБизнесПроцесс();
	//Объект.ДляПредставления = "";
	//
	//Для каждого СтрокаД из ТаблицаСоставаПартии цикл
	//	СтрокаСостава = Объект.УГМК_Партии.Добавить();
	//	СтрокаСостава.Партия = СтрокаД.Плавка;
	//	СтрокаСостава.ДопНомер = СтрокаД.НомерСлитка;
	//	
	//	Объект.ДляПредставления = Объект.ДляПредставления+Разделитель+СокрЛП( Строка( СтрокаД.Плавка));
	//КонецЦикла;
	//
	//Объект.ДляПредставления = Сред( Объект.ДляПредставления, СтрДлина( Разделитель)+1);
	//
	//Объект.Номер = СокрЛП( ТаблицаСоставаПартии[ 0].Плавка)+" ("+ТаблицаСоставаПартии.Количество()+")";
	//Объект.Дата = ТекущаяДата();
	//Объект.Записать();
	//
	//Сообщить("Создана партия СТК ["+Объект.Номер+"]");
	//Возврат( Объект.Ссылка);
КонецФункции

Функция МаксимальнаяГруппа( Товары) Экспорт
	Группа = -1;
	Для каждого Строка из Товары цикл
		Группа = Макс( Группа, Строка.Группа);
	КонецЦикла;
	
	Возврат( Группа);
КонецФункции

Функция ПрефиксНумерацииДокументовПодразделения( Знач ДляПодразделения, Знач ГруппаНумерации = Неопределено) Экспорт
	Результат = Неопределено;

	Если ЗначениеЗаполнено( ДляПодразделения) тогда
		ИмяНастройкиСвойства = "Свойство_ПодразделениеПрефиксДокументов";
		
		Если ГруппаНумерации = "Анализы" тогда
			ИмяНастройкиСвойства = "Свойство_ПодразделениеПрефиксАнализы";
		иначеЕсли ГруппаНумерации = "СертификацияРезультат" тогда
			ИмяНастройкиСвойства = "Свойство_ПодразделениеПрефиксГодность";
		иначеЕсли ГруппаНумерации = "Сертификат" тогда
			ИмяНастройкиСвойства = "Свойство_ПодразделениеПрефиксСертификаты";
		иначеЕсли ГруппаНумерации = "БиркаОУ" тогда
			ИмяНастройкиСвойства = "Свойство_ПодразделениеПрефиксБиркаОУ";
		КонецЕсли;
			
		Результат = УГМК_СлужебныеФункции.ПолучитьЗначениеСвойства( УГМК_СлужебныеФункции.ПолучитьНастройку( ИмяНастройкиСвойства), ДляПодразделения);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( Результат) тогда
		Результат = "00";
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПрефиксНумерацииПартийСТКПодразделения( Знач ДляПодразделения) Экспорт
	Результат = Неопределено;
	Если ЗначениеЗаполнено( ДляПодразделения) тогда
		Результат = УГМК_СлужебныеФункции.ПолучитьЗначениеСвойства( УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ПодразделениеПрефиксПартийСТК"), ДляПодразделения);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( Результат) тогда
		Результат = "";
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПрефиксНумерацииПартийПодразделения( Знач ДляПодразделения) Экспорт
	Результат = Неопределено;
	Если ЗначениеЗаполнено( ДляПодразделения) тогда
		Результат = УГМК_СлужебныеФункции.ПолучитьЗначениеСвойства( УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ПодразделениеПрефиксПартий"), ДляПодразделения);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( Результат) тогда
		Результат = "";
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьПрефиксПартии( Знач ДляПодразделения, Знач ДляРабочегоЦентра) Экспорт
	Если ЗначениеЗаполнено( ДляРабочегоЦентра) тогда
		НовыйПрефикс = УГМК_ОперативныйУчет.ПолучитьПрефиксРабочегоЦентра( ДляРабочегоЦентра);
	иначеЕсли ЗначениеЗаполнено( ДляПодразделения) тогда
		НовыйПрефикс = ПрефиксНумерацииПартийПодразделения( ДляПодразделения);
	иначе
		НовыйПрефикс = "";
	КонецЕсли;
	
	Возврат( НовыйПрефикс)
КонецФункции

Функция ПолучитьПрефиксРабочегоЦентра( Знач РабочийЦентр) Экспорт
	Если ЗначениеЗаполнено( РабочийЦентр) тогда
		Префикс = РабочийЦентр.УГМК_Префикс;
	иначе
		Префикс = "";
	КонецЕсли;
	
	Возврат( Префикс);
КонецФункции

// В настройке должен быть описан формат даты "MMdd" "yy" и т.д.
Функция ВестиНумерациюДокументовОперативногоУчетаПоДате( ГруппаНумерации = Неопределено) Экспорт
	ИмяНастройки = "ВестиНумерациюДокументовОперативногоУчетаПоДате";
	
	Если ЗначениеЗаполнено( ГруппаНумерации) тогда
		ИмяНастройки = ИмяНастройки+"_"+Строка( ГруппаНумерации);
	КонецЕсли;
	
	Возврат( УГМК_СлужебныеФункции.ПолучитьНастройку( ИмяНастройки));	
КонецФункции

Процедура ЗаполнитьПрефиксОперативногоДокумента( ЭтотОбъект, Префикс, ПрефиксОперации = Истина, ИмяПодразделения = Неопределено) Экспорт
	Мета = ЭтотОбъект.Метаданные();
	ГруппаНумерации = УГМК_ОперативныйУчетВызовСервера.ПолучитьГруппуНумерацииПоИмениТипа( Мета.Имя);
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	Если ПрефиксОперации и (Мета.Реквизиты.Найти("ВидОперации") <> Неопределено) тогда
		Если ЗначениеЗаполнено( ЭтотОбъект.ВидОперации.Префикс) тогда
			Префикс = Префикс + ЭтотОбъект.ВидОперации.Префикс;
		иначе
			Префикс = Префикс + "О";
		КонецЕсли;
	КонецЕсли;
	
	ПрефиксСклада = "00";
	Если Мета.Реквизиты.Найти("Склад") <> Неопределено тогда
		ПрефиксСклада = УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( ЭтотОбъект.Склад, ГруппаНумерации);
	КонецЕсли;
	
	Если ПрефиксСклада = "00" тогда
		Если ИмяПодразделения = Неопределено тогда
			Префикс = Префикс + УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( ЭтотОбъект.Подразделение, ГруппаНумерации);
		иначеЕсли Лев( ИмяПодразделения, 1) = "." тогда
			Префикс = Префикс + Сред( ИмяПодразделения, 2);
		иначеЕсли ЗначениеЗаполнено( ИмяПодразделения) тогда
			Префикс = Префикс + УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( ЭтотОбъект[ ИмяПодразделения], ГруппаНумерации);
		КонецЕсли;
	иначе
		Префикс = Префикс + ПрефиксСклада;
	КонецЕсли;
	
	ФорматДаты = УГМК_ОперативныйУчет.ВестиНумерациюДокументовОперативногоУчетаПоДате( ГруппаНумерации);
	Если ЗначениеЗаполнено( ФорматДаты) тогда
		Префикс = Префикс + Формат( ЭтотОбъект.Дата, "ДФ="+ФорматДаты);
	КонецЕсли;
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	Префикс = Префикс + "-";
	
КонецПроцедуры

Процедура ФормаРедактированияПоискаЗаказовНаПроизводство( Параметры) Экспорт
	Перем Период, ДатаНазначения, Запр, НаборЗаписей, Результат, Форма, МенеджерЗаписи1, НомерЗаказа;
	
	Если ТипЗнч( Параметры) <> Тип( "Структура") тогда
		ОбщегоНазначения.Сообщение("ФормаРедактированияПоискаЗаказовНаПроизводство: Неожиданный тип параметра. Ожидается Структура.");
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЭтоНовый тогда
		Сообщить("Назначать Номера можно только у записанного документа.");
		Возврат;
	КонецЕсли;
	
	Период = НачалоГода( Параметры.Дата);
	ДатаНазначения = НачалоДня( Параметры.Дата);
	
	НаборЗаписей = Новый Структура("ДатаДействия,НомерЗаказа,НомерПозиции");
	НаборЗаписей.ДатаДействия = Период;
	
	НомерЗаказа = 0;
	Параметры.Свойство( "НомерЗаказа", НомерЗаказа);
	
	Запр = Новый Запрос;
	
	Запр.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
	Запр.УстановитьПараметр("ХарактеристикаНоменклатуры", Параметры.ХарактеристикаНоменклатуры);
	Запр.УстановитьПараметр("Заказ", Параметры.Заказ);
	Запр.УстановитьПараметр("ЗаказВыпуска", Параметры.ЗаказВыпуска);
	Запр.УстановитьПараметр("ДатаДействия", Период);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ПоискЗаказовНаПроизводство.ДатаДействия,
	             |	УГМК_ПоискЗаказовНаПроизводство.НомерЗаказа,
	             |	УГМК_ПоискЗаказовНаПроизводство.НомерПозиции,
	             |	УГМК_ПоискЗаказовНаПроизводство.Номенклатура,
	             |	УГМК_ПоискЗаказовНаПроизводство.ХарактеристикаНоменклатуры,
	             |	УГМК_ПоискЗаказовНаПроизводство.Заказ,
	             |	УГМК_ПоискЗаказовНаПроизводство.ЗаказВыпуска,
	             |	УГМК_ПоискЗаказовНаПроизводство.ДатаНазначения
	             |ИЗ
	             |	РегистрСведений.УГМК_ПоискЗаказовНаПроизводство КАК УГМК_ПоискЗаказовНаПроизводство
	             |ГДЕ
	             |	УГМК_ПоискЗаказовНаПроизводство.Номенклатура = &Номенклатура
	             |	И УГМК_ПоискЗаказовНаПроизводство.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	             |	И УГМК_ПоискЗаказовНаПроизводство.Заказ = &Заказ
	             |	И УГМК_ПоискЗаказовНаПроизводство.ЗаказВыпуска = &ЗаказВыпуска
	             |	И УГМК_ПоискЗаказовНаПроизводство.ДатаДействия = &ДатаДействия";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда // Позиции назначен номер
		НаборЗаписей.НомерЗаказа = Результат.НомерЗаказа;
		НаборЗаписей.НомерПозиции = Результат.НомерПозиции;
	иначеЕсли ЗначениеЗаполнено( НомерЗаказа) тогда // Передан номер заказа
		НаборЗаписей.НомерЗаказа = НомерЗаказа;
		
		Запр.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
		Запр.Текст = "ВЫБРАТЬ
		             |	МАКСИМУМ(УГМК_ПоискЗаказовНаПроизводство.НомерПозиции) КАК НомерПозиции
		             |ИЗ
		             |	РегистрСведений.УГМК_ПоискЗаказовНаПроизводство КАК УГМК_ПоискЗаказовНаПроизводство
		             |ГДЕ
		             |	УГМК_ПоискЗаказовНаПроизводство.НомерЗаказа = &НомерЗаказа
		             |	И УГМК_ПоискЗаказовНаПроизводство.ДатаДействия = &ДатаДействия";
		Результат = Запр.Выполнить().Выбрать();
		Если Результат.Следующий() и ЗначениеЗаполнено( Результат.НомерПозиции) тогда
			НаборЗаписей.НомерПозиции = Результат.НомерПозиции+1;
		иначе
			НаборЗаписей.НомерПозиции = 1;
		КонецЕсли;
	иначе
		Запр.УстановитьПараметр("ДатаНазначения", ДатаНазначения);
		Запр.Текст = "ВЫБРАТЬ
		             |	МАКСИМУМ(УГМК_ПоискЗаказовНаПроизводство.НомерЗаказа) КАК НомерЗаказа,
		             |	МАКСИМУМ(УГМК_ПоискЗаказовНаПроизводство.НомерПозиции) КАК НомерПозиции
		             |ИЗ
		             |	РегистрСведений.УГМК_ПоискЗаказовНаПроизводство КАК УГМК_ПоискЗаказовНаПроизводство
		             |ГДЕ
		             |	УГМК_ПоискЗаказовНаПроизводство.ДатаНазначения = &ДатаНазначения
		             |	И УГМК_ПоискЗаказовНаПроизводство.ДатаДействия = &ДатаДействия";
		Результат = Запр.Выполнить().Выбрать();
		Если Результат.Следующий() и ЗначениеЗаполнено( Результат.НомерЗаказа) тогда
			НаборЗаписей.НомерЗаказа = Результат.НомерЗаказа;
			НаборЗаписей.НомерПозиции = Результат.НомерПозиции+1;
		иначе
			Запр.УстановитьПараметр("ДатаНазначения", ДатаНазначения);
			Запр.Текст = "ВЫБРАТЬ
			             |	МАКСИМУМ(УГМК_ПоискЗаказовНаПроизводство.НомерЗаказа) КАК НомерЗаказа
			             |ИЗ
			             |	РегистрСведений.УГМК_ПоискЗаказовНаПроизводство КАК УГМК_ПоискЗаказовНаПроизводство
			             |ГДЕ
			             |	УГМК_ПоискЗаказовНаПроизводство.ДатаНазначения < &ДатаНазначения
			             |	И УГМК_ПоискЗаказовНаПроизводство.ДатаДействия = &ДатаДействия";
			Результат = Запр.Выполнить().Выбрать();
			Если Результат.Следующий() и ЗначениеЗаполнено( Результат.НомерЗаказа) тогда
				НаборЗаписей.НомерЗаказа = Результат.НомерЗаказа;
				НаборЗаписей.НомерПозиции = 1;
			иначе
				НаборЗаписей.НомерЗаказа = 1;
				НаборЗаписей.НомерПозиции = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи1 = РегистрыСведений.УГМК_ПоискЗаказовНаПроизводство.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств( МенеджерЗаписи1, НаборЗаписей);
	МенеджерЗаписи1.Прочитать();
	Если не МенеджерЗаписи1.Выбран() тогда
		ЗаполнитьЗначенияСвойств( МенеджерЗаписи1, Параметры);
		ЗаполнитьЗначенияСвойств( МенеджерЗаписи1, НаборЗаписей);
		МенеджерЗаписи1.ДатаНазначения = ДатаНазначения;
	КонецЕсли;
	
	Форма = МенеджерЗаписи1.ПолучитьФорму("ФормаЗаписи1");
	Форма.Открыть();
	
КонецПроцедуры

Функция ЕстьДоступКСкладу( Склад, ТекущийПользователь) Экспорт
	Перем Результат;
	
	Если не ЗначениеЗаполнено( Склад) тогда
		Возврат( Истина);
	иначеЕсли УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетОграничениеДоступакОперативнымДокументам") <> Истина тогда
		Возврат( Истина);
	иначеЕсли не ЗначениеЗаполнено( Склад.Подразделение) тогда
		Возврат( Истина);
	КонецЕсли;
	
	ГруппаДоступностиСкладов =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ГруппаДоступностиСкладов");
	Если ЗначениеЗаполнено( ГруппаДоступностиСкладов) тогда
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("ГруппаДоступности", ГруппаДоступностиСкладов);
		Запр.УстановитьПараметр("Склад", Склад);
		Запр.Текст = "ВЫБРАТЬ
		             |	СоставГруппДоступностиСкладов.ГруппаДоступности,
		             |	СоставГруппДоступностиСкладов.Склад
		             |ИЗ
		             |	РегистрСведений.СоставГруппДоступностиСкладов КАК СоставГруппДоступностиСкладов
		             |ГДЕ
		             |	СоставГруппДоступностиСкладов.ГруппаДоступности = &ГруппаДоступности
		             |	И СоставГруппДоступностиСкладов.Склад = &Склад";
					 
					 
		Результат = не Запр.Выполнить().Пустой();
	иначе
		ОсновноеПодразделение =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделение");
		Если не ЗначениеЗаполнено( ОсновноеПодразделение) тогда
			Возврат( Истина);
		КонецЕсли;
		
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("Ссылка",ОсновноеПодразделение);
		Запр.Текст = "ВЫБРАТЬ
		             |	Подразделения.Ссылка
		             |ИЗ
		             |	Справочник.Подразделения КАК Подразделения
		             |ГДЕ
		             |	Подразделения.Ссылка В ИЕРАРХИИ(&Ссылка)";
					 
					 
		ДоступныеПодразделения = Запр.Выполнить().Выгрузить();
		Строка1 = ДоступныеПодразделения.Найти( Склад.Подразделение, "Ссылка");
		Результат = Строка1 <> Неопределено;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ЕстьДоступКОборудованию( РабочийЦентр, ТекущийПользователь) Экспорт
	Перем Результат;
	
	Если не ЗначениеЗаполнено( РабочийЦентр) тогда
		Возврат( Истина);
	иначеЕсли УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетОграничениеДоступакОперативнымДокументам") <> Истина тогда
		Возврат( Истина);
	иначеЕсли УГМК_СлужебныеФункции.ПолучитьНастройку("ЕстьДоступКОборудованию_Фильтр") = Истина тогда
		Результат = УГМК_СлужебныйПовторноеИспользование.ЕстьДоступКОборудованию_Фильтр( РабочийЦентр, ТекущийПользователь);
	иначе
		Результат = УГМК_СлужебныйПовторноеИспользование.ЕстьДоступКОборудованию_Подразделение( РабочийЦентр, ТекущийПользователь);
	КонецЕсли;
	
	
	Возврат( Результат);
КонецФункции

Функция ЕстьДоступКПодразделению( Подразделение, ТекущийПользователь) Экспорт
	Перем Результат;
	
	Если не ЗначениеЗаполнено( Подразделение) тогда
		Возврат( Истина);
	иначеЕсли УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетОграничениеДоступакОперативнымДокументам") <> Истина тогда
		Возврат( Истина);
	КонецЕсли;
	
	ОсновноеПодразделение =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделение");
	Если не ЗначениеЗаполнено( ОсновноеПодразделение) тогда
		Возврат( Истина);
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",ОсновноеПодразделение);
	Запр.Текст = "ВЫБРАТЬ
	             |	Подразделения.Ссылка
	             |ИЗ
	             |	Справочник.Подразделения КАК Подразделения
	             |ГДЕ
	             |	Подразделения.Ссылка В ИЕРАРХИИ(&Ссылка)";
				 
				 
	ДоступныеПодразделения = Запр.Выполнить().Выгрузить();
	Строка1 = ДоступныеПодразделения.Найти( Подразделение, "Ссылка");
	Результат = Строка1 <> Неопределено;
	
	Возврат( Результат);
КонецФункции

#Если Клиент тогда
Процедура ПаспортПартииНачалоВыбора( ДокФорма, ТекущиеДанные, Элемент, СтандартнаяОбработка, ИмяРеквизита = "СерияНоменклатуры", Разделитель = " ", МаскаВвода = "") Экспорт
	Перем Плавка, НомерСлитка;
	
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомераПартий = Неопределено;
	ТекущаяПартия = ТекущиеДанные[ ИмяРеквизита];
	
	Если ТекущаяПартия = Неопределено тогда
		ТекущаяПартия = БизнесПроцессы.УГМК_ПаспортПартии.ПустаяСсылка();
	КонецЕсли;
		
	Если  ТипЗнч( ТекущаяПартия) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") тогда
		НомераПартий = Новый Массив;
	КонецЕсли;
	
	Если НомераПартий = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка из ТекущаяПартия.УГМК_Плавки цикл
		НомераПартий.Добавить( Строка( Строка.Плавка));
	КонецЦикла;
	
	Если НомераПартий.Количество() = 0 и ЗначениеЗаполнено( ТекущаяПартия) тогда
		НомераПартий.Добавить( ТекущаяПартия.Номер);
	КонецЕсли;
	
	ФормыНомераПлавки = ПолучитьОбщуюФорму("УГМК_ФормаВыбораПлавки");
	ФормыНомераПлавки.Заголовок = "Паспорта партий";
	Если ЗначениеЗаполнено( МаскаВвода) тогда
		ФормыНомераПлавки.МаскаВвода = МаскаВвода;
	иначе
		ФормыНомераПлавки.МаскаВвода = "9999999/9";
	КонецЕсли;
	ФормыНомераПлавки.НеПроверятьКорректность = Истина;
	ФормыНомераПлавки.НачальноеЗначениеВыбора = НомераПартий;
	Значение = ФормыНомераПлавки.ОткрытьМодально();
	
	Если не ЗначениеЗаполнено( Значение) тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаСоставаПартии = Новый ТаблицаЗначений;
	ТаблицаСоставаПартии.Колонки.Добавить("Плавка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 10));
	ТаблицаСоставаПартии.Колонки.Добавить("НомерСлитка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 2));
	
	СтандартнаяОбработка = Ложь;
	Для каждого КлючПлавки из Значение цикл
		Если ЗначениеЗаполнено( КлючПлавки) тогда
			НоваяСтрока = ТаблицаСоставаПартии.Добавить();
			НоваяСтрока.Плавка = КлючПлавки;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСоставаПартии.Количество() = 0 тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные[ ИмяРеквизита] = НайтиСоздатьПаспортПартии( ТаблицаСоставаПартии, Разделитель);
КонецПроцедуры

Процедура ПаспортПартииСТКНачалоВыбора( ДокФорма, ТекущиеДанные, Элемент, СтандартнаяОбработка, ИмяРеквизита = "СерияНоменклатуры", Разделитель = " ", МаскаВвода = "") Экспорт
	Перем Плавка, НомерСлитка;
	
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомераПартий = Неопределено;
	ТекущаяПартия = ТекущиеДанные[ ИмяРеквизита];
	
	Если ТекущаяПартия = Неопределено тогда
		ТекущаяПартия = БизнесПроцессы.УГМК_ПаспортПартииСТК.ПустаяСсылка();
	КонецЕсли;
		
	Если  ТипЗнч( ТекущаяПартия) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") тогда
		НомераПартий = Новый Массив;
	КонецЕсли;
	
	Если НомераПартий = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка из ТекущаяПартия.УГМК_Партии цикл
		НомераПартий.Добавить( Строка( Строка.Партия));
	КонецЦикла;
	
	Если НомераПартий.Количество() = 0 и ЗначениеЗаполнено( ТекущаяПартия) тогда
		НомераПартий.Добавить( ТекущаяПартия.Номер);
	КонецЕсли;
	
	ФормыНомераПлавки = ПолучитьОбщуюФорму("УГМК_ФормаВыбораПлавки");
	ФормыНомераПлавки.Заголовок = "Партии СТК";
	Если ЗначениеЗаполнено( МаскаВвода) тогда
		ФормыНомераПлавки.МаскаВвода = МаскаВвода;
	иначе
		ФормыНомераПлавки.МаскаВвода = "9999999/9";
	КонецЕсли;
	ФормыНомераПлавки.НеПроверятьКорректность = Истина;
	ФормыНомераПлавки.НачальноеЗначениеВыбора = НомераПартий;
	Значение = ФормыНомераПлавки.ОткрытьМодально();
	
	Если не ЗначениеЗаполнено( Значение) тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаСоставаПартии = Новый ТаблицаЗначений;
	ТаблицаСоставаПартии.Колонки.Добавить("Плавка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 10));
	ТаблицаСоставаПартии.Колонки.Добавить("НомерСлитка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 2));
	
	СтандартнаяОбработка = Ложь;
	Для каждого КлючПлавки из Значение цикл
		Если ЗначениеЗаполнено( КлючПлавки) тогда
			НоваяСтрока = ТаблицаСоставаПартии.Добавить();
			НоваяСтрока.Плавка = КлючПлавки;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСоставаПартии.Количество() = 0 тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные[ ИмяРеквизита] = НайтиСоздатьПаспортПартииСТК( ТаблицаСоставаПартии, Разделитель);
КонецПроцедуры

Процедура ПродукцияСерияНоменклатурыНачалоВыбора( ДокФорма, ТекущиеДанные, Элемент, СтандартнаяОбработка, ИмяРеквизита = "СерияНоменклатуры", ИмяНоменклатуры = "Номенклатура", МаскаВвода = "") Экспорт
	Перем Плавка, НомерСлитка;
	
	Если ТекущиеДанные = Неопределено или (не ЗначениеЗаполнено( ТекущиеДанные[ ИмяНоменклатуры])) тогда
		Возврат;
	иначеЕсли не ЗначениеЗаполнено( ТекущиеДанные[ ИмяНоменклатуры].НоменклатураОЦМ_ск) тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ДляНоменклатуры = ТекущиеДанные[ ИмяНоменклатуры];
	
	ФормыНомераПлавки = ПолучитьОбщуюФорму("УГМК_ФормаВыбораПлавки");
	Если ЗначениеЗаполнено( МаскаВвода) тогда
		ФормыНомераПлавки.МаскаВвода = МаскаВвода;
	КонецЕсли;
	ФормыНомераПлавки.НачальноеЗначениеВыбора = ТекущиеДанные[ ИмяРеквизита];
	Значение = ФормыНомераПлавки.ОткрытьМодально();
	
	Если не ЗначениеЗаполнено( Значение) тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаПлавок = УГМК_СлужебныеФункции.ПолучитьТаблицуКлючейПлавок();
	
	СтандартнаяОбработка = Ложь;
	Для каждого КлючПлавки из Значение цикл
		УГМК_СлужебныеФункции.РазобратьКлючПлавки( КлючПлавки, Плавка, НомерСлитка);
		
		ПлавкаБП = УГМК_СлужебныеФункции.НайтиПлавкуПоКлючу( Плавка);
		
		Если ЗначениеЗаполнено( ПлавкаБП) тогда
			УГМК_СлужебныеФункции.ДобавитьСтрокуКТаблицеКлючейПлавок( ТаблицаПлавок, ПлавкаБП, НомерСлитка);
		иначе
			Ответ = Вопрос("Не найдена плавка с номером ["+Плавка+"]. Создать новую?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да);
			Если Ответ <> КодВозвратаДиалога.Да тогда
				Возврат;
			КонецЕсли;
			
			УГМК_СлужебныеФункции.ДобавитьСтрокуКТаблицеКлючейПлавок( ТаблицаПлавок, УГМК_СлужебныеФункции.СоздатьПлавкуПоКлючу( Плавка, ДокФорма.Дата), НомерСлитка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные[ ИмяРеквизита] = УГМК_СлужебныеФункции.СоздатьСериюНоменклатурыСПлавкой( ДляНоменклатуры, ТаблицаПлавок);
КонецПроцедуры
#КонецЕсли 

Процедура КонтрольЗакрытияОперативногоУчета( ЭтотОбъект, Регистратор, ЗапрТекст, ИмяАналитики, Отказ) Экспорт
	//ОЦМ Мобильная
	//СпособПроверки = УГМК_ОперативныйУчетВызовСервера.СпособПроверкиИзмененийОперативныхДокументов();
	//СтрСообщения = "";
	//
	//ТекДата = ТекущаяДата();
	//
	//Если СпособПроверки = "ОтсрочкаСутки" тогда // Старый режим контроля
	//	ДатаНачалаКонтроля = УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетКонтрольДатыОперативныхДокументов");
	//	Если Отказ тогда
	//		Возврат;
	//	ИначеЕсли РольДоступна("УГМК_ИзменениеДатВыпуска") тогда
	//		Возврат;
	//	ИначеЕсли не ЗначениеЗаполнено( ДатаНачалаКонтроля) тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ИмяОбъекта = Регистратор.Метаданные().Имя;
	//	КонтролироватьЗакрытиеСмен = Ложь;
	//	Если ИмяОбъекта = "ТребованиеНакладная" или ИмяОбъекта = "ПеремещениеТоваров" тогда
	//		КонтролироватьЗакрытиеСмен = Истина;
	//	иначеЕсли ИмяОбъекта = "УГМК_ДокументФакт" тогда
	//		КонтролироватьЗакрытиеСмен = Истина;
	//	КонецЕсли;
	//	
	//	Если не КонтролироватьЗакрытиеСмен тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//АвтоДатаКонтроля = ТекДата-86400; // Сутки назад
	////АвтоДатаКонтроля = НачалоДня( ТекДата);
	//	
	//МинимальнаяДатаДвижений = Неопределено;
	//ЭтотОбъект.ДополнительныеСвойства.Свойство( "УГМК_МинимальнаяДатаДвижений", МинимальнаяДатаДвижений);
	//Если ЗначениеЗаполнено( МинимальнаяДатаДвижений) тогда
	//	АвтоДатаКонтроля = МинимальнаяДатаДвижений;
	//КонецЕсли;
	//
	//// Проверка на возможность изменения движений текущего МестаУчета в текущей базе по дате
	//Если СпособПроверки = "ОтсрочкаСутки" или // Старый режим контроля
	//	 ЗначениеЗаполнено( МинимальнаяДатаДвижений) тогда // Первое проведение
	//	Запр = Новый Запрос;
	//	Запр.Текст = ЗапрТекст+";ВЫБРАТЬ
	//	                       |	АналитикаКонтроля1.АналитикаКонтроля КАК АналитикаКонтроля,
	//	                       |	АналитикаКонтроля1.Период
	//	                       |ПОМЕСТИТЬ АналитикаКонтроля2
	//	                       |ИЗ
	//	                       |	&АналитикаКонтроля КАК АналитикаКонтроля1
	//	                       |;
	//	                       |
	//	                       |////////////////////////////////////////////////////////////////////////////////
	//	                       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	                       |	АналитикаКонтроля1.АналитикаКонтроля КАК АналитикаКонтроля,
	//	                       |	АналитикаКонтроля1.Период,
	//	                       |	УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля КАК АналитикаКонтроляЗарытие,
	//	                       |	УГМК_ГраницыЗакрытияОперативныхДокументов.ГраницаСмены,
	//	                       |	&АвтоДатаКонтроля КАК АвтоДатаКонтроля
	//	                       |ИЗ
	//	                       |	АналитикаКонтроля КАК АналитикаКонтроля1
	//	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГраницыЗакрытияОперативныхДокументов КАК УГМК_ГраницыЗакрытияОперативныхДокументов
	//	                       |		ПО АналитикаКонтроля1.АналитикаКонтроля = УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля
	//	                       |			И (АналитикаКонтроля1.Период < УГМК_ГраницыЗакрытияОперативныхДокументов.ГраницаСмены
	//	                       |					И АналитикаКонтроля1.Период >= &ДатаНачалаКонтроля
	//	                       |				ИЛИ АналитикаКонтроля1.Период < &АвтоДатаКонтроля)
	//	                       |ГДЕ
	//	                       |	НЕ УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля ЕСТЬ NULL 
	//	                       |
	//	                       |ОБЪЕДИНИТЬ ВСЕ
	//	                       |
	//	                       |ВЫБРАТЬ
	//	                       |	АналитикаКонтроля1.АналитикаКонтроля,
	//	                       |	АналитикаКонтроля1.Период,
	//	                       |	УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля,
	//	                       |	УГМК_ГраницыЗакрытияОперативныхДокументов.ГраницаСмены,
	//	                       |	&АвтоДатаКонтроля
	//	                       |ИЗ
	//	                       |	АналитикаКонтроля2 КАК АналитикаКонтроля1
	//	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГраницыЗакрытияОперативныхДокументов КАК УГМК_ГраницыЗакрытияОперативныхДокументов
	//	                       |		ПО АналитикаКонтроля1.АналитикаКонтроля = УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля
	//	                       |			И (АналитикаКонтроля1.Период < УГМК_ГраницыЗакрытияОперативныхДокументов.ГраницаСмены
	//	                       |					И АналитикаКонтроля1.Период >= &ДатаНачалаКонтроля
	//	                       |				ИЛИ АналитикаКонтроля1.Период < &АвтоДатаКонтроля
	//	                       |				ИЛИ УГМК_ГраницыЗакрытияОперативныхДокументов.ГраницаСмены = &ПустаяДата)
	//	                       |ГДЕ
	//	                       |	НЕ УГМК_ГраницыЗакрытияОперативныхДокументов.АналитикаКонтроля ЕСТЬ NULL ";
	//					
	//	Запр.УстановитьПараметр("Регистратор",Регистратор);
	//	Запр.УстановитьПараметр("ДатаНачалаКонтроля",ДатаНачалаКонтроля);
	//	Запр.УстановитьПараметр("АвтоДатаКонтроля",АвтоДатаКонтроля);
	//	Запр.УстановитьПараметр("ПустаяДата",'00010101');
	//	
	//	тзДвижений = ЭтотОбъект.Выгрузить( , ИмяАналитики+",Период");
	//	тзДвижений.Свернуть( ИмяАналитики+",Период");
	//	тзДвижений.Колонки[ ИмяАналитики].Имя = "АналитикаКонтроля";
	//	
	//	Запр.УстановитьПараметр("АналитикаКонтроля",тзДвижений);
	//	
	//	Результат = Запр.Выполнить().Выбрать();
	//	Пока Результат.Следующий() цикл
	//		Если не ЗначениеЗаполнено( Результат.ГраницаСмены) тогда
	//			СтрСообщения = "Контроль оперативных документов: В этой базе запрещено проводить документы по Месту учета ["+Строка( Результат.АналитикаКонтроля)+"]";
	//		иначеЕсли Результат.Период < Результат.ГраницаСмены тогда
	//			СтрСообщения = "Контроль даты оперативных документов: "+Строка( Результат.АналитикаКонтроля)+" граница закрытия ["+Результат.ГраницаСмены+"] попытка изменения информации ["+Результат.Период+"]";
	//		иначеЕсли Результат.Период < Результат.АвтоДатаКонтроля тогда
	//			СтрСообщения = "Контроль даты оперативных документов: "+Строка( Результат.АналитикаКонтроля)+" Автограница закрытия ["+Результат.АвтоДатаКонтроля+"] попытка изменения информации ["+Результат.Период+"]";
	//		КонецЕсли;
	//		
	//		//ОбщегоНазначения.Сообщение( СтрСообщения, СтатусСообщения.ОченьВажное);
	//		//Отказ = Истина;
	//		
	//		Прервать;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Если ЭтотОбъект.ДополнительныеСвойства.Свойство("УГМК_СтарыеДвижения") тогда
	//	Мета = ЭтотОбъект.Метаданные();
	//	Если Мета.Имя = "УГМК_ОперативныеОстатки" тогда
	//		СтрИзмерения = "Период,Активность";
	//		Для каждого Реквизит из Мета.Измерения цикл
	//			СтрИзмерения = СтрИзмерения+","+Реквизит.Имя;
	//		КонецЦикла;
	//		Для каждого Реквизит из Мета.Реквизиты цикл
	//			СтрИзмерения = СтрИзмерения+","+Реквизит.Имя;
	//		КонецЦикла;
	//		
	//		СтарыеДвижения = Неопределено;
	//		
	//		Если ЭтотОбъект.ДополнительныеСвойства.Свойство( "УГМК_СтарыеДвижения", СтарыеДвижения) тогда
	//			ТаблицаСтарыхДвижений = СтарыеДвижения.Получить( Мета);
	//		КонецЕсли;
	//		
	//		Если ТипЗнч( ТаблицаСтарыхДвижений) = Тип("ТаблицаЗначений") тогда
	//			Если ТаблицаСтарыхДвижений.Количество() > 0 тогда // Перепроведение
	//				ТаблицаКонтроль = ЭтотОбъект.Выгрузить();
	//				Для каждого СтараяСтрока из ТаблицаСтарыхДвижений цикл
	//					НоваяСтрока = ТаблицаКонтроль.Добавить();
	//					ЗаполнитьЗначенияСвойств( НоваяСтрока, СтараяСтрока);
	//					НоваяСтрока.Количество = - НоваяСтрока.Количество;
	//					НоваяСтрока.Количество1 = - НоваяСтрока.Количество1;
	//					НоваяСтрока.КоличествоМест = - НоваяСтрока.КоличествоМест;
	//				КонецЦикла;
	//				
	//				ТаблицаКонтроль.Свернуть( СтрИзмерения, "Количество,Количество1,КоличествоМест");
	//				Для каждого Строка из ТаблицаКонтроль цикл
	//					Если ЗначениеЗаполнено( Строка.Количество) или ЗначениеЗаполнено( Строка.Количество1) или ЗначениеЗаполнено( Строка.КоличествоМест) тогда
	//						СтрСообщения = "Контроль изменений в оперативных документах: попытка изменения информации. Для исправления нужно Отменить документ (Сторно) и ввести правильный.";
	//						Прервать;
	//					КонецЕсли;
	//				КонецЦикла;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( СтрСообщения) тогда
	//	ВызватьИсключение( СтрСообщения);
	//КонецЕсли;
КонецПроцедуры

Функция ПользовательМожетЗафиксироватьПлан() Экспорт
	//ОЦМ Мобильная
	//Возврат( РольДоступна("УГМК_ПроизводственныйОтделУК"));
КонецФункции

Функция ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени="") Экспорт
	ИменаКолонок = Новый Структура;
	ИменаКолонок.Вставить("НомерСтроки","НомерСтроки");
	ИменаКолонок.Вставить("РабочийЦентр","РабочийЦентр");
	ИменаКолонок.Вставить("Группа","Группа");
	ИменаКолонок.Вставить("ТехнологическаяОперация","ТехнологическаяОперация");
	ИменаКолонок.Вставить("ВариантТехнологическойОперации","ВариантТехнологическойОперации");
	ИменаКолонок.Вставить("ОбработкаПартииЗавершена","ОбработкаПартииЗавершена");
	
	Если ДополнениеИмени = "Продукции" тогда
		ИменаКолонок.Вставить("Номенклатура","Продукция");
		ИменаКолонок.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаПродукции");
		ИменаКолонок.Вставить("СерияНоменклатуры","СерияПродукции");
		ИменаКолонок.Вставить("Допуск","ДопускИзготовления");
		ИменаКолонок.Вставить("ДополнительнаяОперацияДо","ДополнительнаяОперацияДо");
		ИменаКолонок.Вставить("ДополнительнаяОперацияПосле","ДополнительнаяОперацияПосле");
		ИменаКолонок.Вставить("Дополнительно","Дополнительно");
		ИменаКолонок.Вставить("Заказ","ЗаказПродукции");
		ИменаКолонок.Вставить("ЗаказВыпуска","ЗаказВыпускаПродукции");
		ИменаКолонок.Вставить("РежимРабочегоЦентра","РежимРабочегоЦентра");
	иначе
		ИменаКолонок.Вставить("Номенклатура","Номенклатура");
		ИменаКолонок.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаНоменклатуры");
		ИменаКолонок.Вставить("СерияНоменклатуры","СерияНоменклатуры");
		ИменаКолонок.Вставить("Допуск","ДопускЗаготовки");
		ИменаКолонок.Вставить("Заказ","Заказ");
		ИменаКолонок.Вставить("ЗаказВыпуска","ЗаказВыпуска");
	КонецЕсли;
	
	ИменаКолонок.Вставить("Дополнительно","Дополнительно");
	ИменаКолонок.Вставить("Назначение","Назначение");
	
	ИменаКолонок.Вставить("Состояние","Состояние"+ДополнениеИмени);
	ИменаКолонок.Вставить("Качество","Качество"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмеренияМест","ЕдиницаИзмеренияМест"+ДополнениеИмени);
	ИменаКолонок.Вставить("КоличествоМест","КоличествоМест"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения","ЕдиницаИзмерения"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения1","ЕдиницаИзмерения1"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения1_Распределение","ЕдиницаИзмерения1_Распределение");
	ИменаКолонок.Вставить("Коэффициент","Коэффициент"+ДополнениеИмени);
	ИменаКолонок.Вставить("Количество","Количество"+ДополнениеИмени);
	ИменаКолонок.Вставить("Количество1","Количество1"+ДополнениеИмени);
	ИменаКолонок.Вставить("КоличествоТара","КоличествоТара"+ДополнениеИмени);
	ИменаКолонок.Вставить("КлючСвязи","КлючСвязи"+ДополнениеИмени);
	ИменаКолонок.Вставить("ДатаОперации","ДатаОперации"+ДополнениеИмени);
	ИменаКолонок.Вставить("Тара","Тара"+ДополнениеИмени);
	ИменаКолонок.Вставить("Маркировка","Маркировка"+ДополнениеИмени);
	ИменаКолонок.Вставить("ГруппаПродукции","ГруппаПродукции"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("Стандарт","Стандарт"+ДополнениеИмени);
	ИменаКолонок.Вставить("НДНаХимСостав","НДНаХимСостав"+ДополнениеИмени);
	ИменаКолонок.Вставить("МаркаСплава","МаркаСплава"+ДополнениеИмени);
	ИменаКолонок.Вставить("ПоСвойствам","ПоСвойствам"+ДополнениеИмени);
	ИменаКолонок.Вставить("ДополнительныйНД","ДополнительныйНД"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("ПаспортПартии","ПаспортПартии"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("Коэффициент1","Коэффициент1"+ДополнениеИмени);
	ИменаКолонок.Вставить("Склад","Склад"+ДополнениеИмени);
	ИменаКолонок.Вставить("ТипУказанияМестоУчета","ТипУказанияМестоУчета"+ДополнениеИмени);
	Возврат( ИменаКолонок)
КонецФункции

Процедура ЗаполнитьТоварыИзДокументФакт( Объект, Основание, ДополнениеИмени="") Экспорт
	Объект.Дата = Основание.Дата;
	Объект.Организация = Основание.Организация;
	Объект.Склад = Основание.СкладПолучатель;
	
	СтруктураСвойств = Документы.УГМК_ДокументФакт.ПолучитьСвойства( Основание);
	Если СтруктураСвойств.Свойство("Контрагент") тогда
		Объект.Контрагент = СтруктураСвойств.Контрагент;
	КонецЕсли;
	
	НастройкаКачество = УГМК_СлужебныеФункции.ПолучитьНастройку("Качество_Засор");
	Объект.Товары.Очистить();
	ИменаКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	
	Для каждого СтрокаФ из Основание.Продукция цикл
		НоваяСтрока = Объект.Товары.Добавить();
		
		Если СтрокаФ[ ИменаКолонок.ПоСвойствам] тогда
			ГруппаПродукции = СтрокаФ[ ИменаКолонок.ГруппаПродукции];
			
			Если ТипЗнч( СтрокаФ[ ИменаКолонок.МаркаСплава]) = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") тогда
				НоменклатураСтроки = УГМК_СлужебныеФункции.НайтиНоменклатуруПоГруппеИСплаву( ГруппаПродукции, СтрокаФ[ ИменаКолонок.МаркаСплава].МаркаСплава);
			иначе
				НоменклатураСтроки = УГМК_СлужебныеФункции.НайтиНоменклатуруПоГруппеИСплаву( ГруппаПродукции, СтрокаФ[ ИменаКолонок.МаркаСплава]);
			КонецЕсли;
		иначе
			Если ТипЗнч( СтрокаФ[ ИменаКолонок.Номенклатура]) = Тип("СправочникСсылка.СК_ПродукцияОЦМ") тогда
				НоменклатураСтроки = СтрокаФ[ ИменаКолонок.Номенклатура].Металлопрокат;
			иначеЕсли ТипЗнч( СтрокаФ[ ИменаКолонок.Номенклатура]) = Тип("СправочникСсылка.Номенклатура") тогда
				НоменклатураСтроки = СтрокаФ[ ИменаКолонок.Номенклатура];
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = НоменклатураСтроки;
		Если СтрокаФ[ ИменаКолонок.Коэффициент] = 1 или СтрокаФ[ ИменаКолонок.Коэффициент] = 0 тогда
			НоваяСтрока.ЕдиницаИзмерения = НайтиЕдиницуИзмеренияПоКоэффициенту( НоменклатураСтроки, 1);
		иначе
			НоваяСтрока.ЕдиницаИзмерения = НайтиЕдиницуИзмеренияПоКоэффициенту( НоменклатураСтроки, СтрокаФ[ ИменаКолонок.Коэффициент]);
		КонецЕсли;
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		
		НоваяСтрока.Количество = СтрокаФ[ ИменаКолонок.Количество];
		Если ЗначениеЗаполнено( СтрокаФ[ ИменаКолонок.Качество]) тогда
			НоваяСтрока.Качество = СтрокаФ[ ИменаКолонок.Качество];
		иначе
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
		Если (СтрокаФ[ ИменаКолонок.Количество1] <> 0) и (СтрокаФ[ ИменаКолонок.Количество1] <> СтрокаФ[ ИменаКолонок.Количество]) тогда
			Если ЗначениеЗаполнено( СтрокаФ[ ИменаКолонок.Коэффициент1]) тогда
				ПроцентЗасора = СтрокаФ[ ИменаКолонок.Коэффициент1];
			иначе
				ПроцентЗасора = 100 - Окр( 100*СтрокаФ[ ИменаКолонок.Количество]/СтрокаФ[ ИменаКолонок.Количество1], 3);
			КонецЕсли;
			
			ЕдиницаЗасора = НайтиЕдиницуПоДопКоэффициенту( НоваяСтрока.ЕдиницаИзмерения, ПроцентЗасора, Истина);
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = НоменклатураСтроки;
			НоваяСтрока.ЕдиницаИзмерения = ЕдиницаЗасора;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Количество = СтрокаФ[ ИменаКолонок.Количество1] - СтрокаФ[ ИменаКолонок.Количество];
			НоваяСтрока.Качество = НастройкаКачество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЕдиницуИзмеренияПоКоэффициенту( НоменклатураСтроки, Коэффициент)
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Номенклатура", НоменклатураСтроки);
	Запр.УстановитьПараметр("Коэффициент", Коэффициент);
	Запр.Текст = "ВЫБРАТЬ
	             |	ЕдиницыИзмерения.Ссылка
	             |ИЗ
	             |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	             |ГДЕ
	             |	ЕдиницыИзмерения.Владелец = &Номенклатура
	             |	И ЕдиницыИзмерения.Коэффициент = &Коэффициент
	             |	И НЕ ЕдиницыИзмерения.ПометкаУдаления
	             |	И НЕ ЕдиницыИзмерения.УГМК_Засор";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Возврат( Результат.Ссылка);
	иначе
		Сообщить("У Номенклатуры ["+НоменклатураСтроки+"] не найдена единица измерения с коэффициентом "+Коэффициент);
		Возврат( Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
КонецФункции

Функция НайтиЕдиницуПоДопКоэффициенту( ЕдиницаНоменклатуры, ПроцентЗасора, СоздаватьЕслиНеНайдено=Ложь) Экспорт
	// УГМК_Начало 14.01.2010 11:22:33 Кунилов А.В. 
	//Если ПроцентЗасора = 0 тогда
	//	Возврат( Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	//КонецЕсли;
	// УГМК_Конец 14.01.2010 11:22:38 Кунилов А.В. 
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Номенклатура", ЕдиницаНоменклатуры.Владелец);
	Запр.УстановитьПараметр("Коэффициент", ЕдиницаНоменклатуры.Коэффициент);
	Запр.УстановитьПараметр("УГМК_ДополнительныйКоэффициент",ПроцентЗасора);
	Запр.Текст = "ВЫБРАТЬ
	             |	ЕдиницыИзмерения.Ссылка
	             |ИЗ
	             |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	             |ГДЕ
	             |	ЕдиницыИзмерения.Владелец = &Номенклатура
	             |	И ЕдиницыИзмерения.УГМК_ДополнительныйКоэффициент = &УГМК_ДополнительныйКоэффициент
	             |	И ЕдиницыИзмерения.Коэффициент = &Коэффициент
	             |	И ЕдиницыИзмерения.УГМК_Засор";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Возврат( Результат.Ссылка);
	ИначеЕсли СоздаватьЕслиНеНайдено тогда
		Элемент = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( Элемент, ЕдиницаНоменклатуры,,"Родитель");
		Элемент.УГМК_ДополнительныйКоэффициент = ПроцентЗасора;
		Элемент.Наименование = УГМК_СлужебныеФункции.ПостроитьНаименованиеДляЕдиницыЗасора( Элемент);
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.УГМК_Засор = Истина;
		Элемент.УстановитьНовыйКод();
		Элемент.Записать();
		
		Возврат( Элемент.Ссылка);
	иначе
		Возврат( Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
КонецФункции

Функция ПолучитьПараметрыЗаполнения( ТекущиеДанные, ИменаКолонок) Экспорт
	Перем Параметры, ДанныеМеталла;
	Параметры = Новый Структура;
	
	Если ТекущиеДанные[ ИменаКолонок.ПоСвойствам] тогда
		Параметры.Вставить( "ГруппаПродукции", ТекущиеДанные[ ИменаКолонок.ГруппаПродукции]);
		Параметры.Вставить( "МаркаСплава", ТекущиеДанные[ ИменаКолонок.МаркаСплава]);
	иначе
		Параметры.Вставить( "ГруппаПродукции", ПолучитьГруппуПродукцииПоЗначению( ТекущиеДанные[ ИменаКолонок.Номенклатура], ДанныеМеталла));
		Параметры.Вставить( "МаркаСплава", ПолучитьМаркуСплаваПоЗначению( ТекущиеДанные[ ИменаКолонок.Номенклатура], ДанныеМеталла));
	КонецЕсли;
	
	Параметры.Вставить("ПаспортПартии", ТекущиеДанные[ ИменаКолонок.ПаспортПартии]);
	
	Возврат( Параметры);
КонецФункции

Функция  ПолучитьДанныеДляЗаполненияСтрокиДокумента( ТекущийПользователь, ПараметрыЗаполнения) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запр.УстановитьПараметр("ГруппаПродукции", ПараметрыЗаполнения.ГруппаПродукции);
	Запр.УстановитьПараметр("МаркаСплава", ПараметрыЗаполнения.МаркаСплава);
	Запр.Текст = "ВЫБРАТЬ
	             |	Данные.Приоритет КАК Приоритет12345,
	             |	Данные.Склад
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		0 КАК Приоритет,
	             |		УГМК_НастройкиЗаполненияСтрокиДокумента.Склад КАК Склад
	             |	ИЗ
	             |		РегистрСведений.УГМК_НастройкиЗаполненияСтрокиДокумента КАК УГМК_НастройкиЗаполненияСтрокиДокумента
	             |	ГДЕ
	             |		УГМК_НастройкиЗаполненияСтрокиДокумента.ТекущийПользователь = &ТекущийПользователь
	             |		И УГМК_НастройкиЗаполненияСтрокиДокумента.ГруппаПродукции = &ГруппаПродукции
	             |		И УГМК_НастройкиЗаполненияСтрокиДокумента.МаркаСплава = &МаркаСплава
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		10,
	             |		УГМК_НастройкиЗаполненияСтрокиДокумента.Склад
	             |	ИЗ
	             |		РегистрСведений.УГМК_НастройкиЗаполненияСтрокиДокумента КАК УГМК_НастройкиЗаполненияСтрокиДокумента
	             |	ГДЕ
	             |		УГМК_НастройкиЗаполненияСтрокиДокумента.ТекущийПользователь = &ТекущийПользователь
	             |		И УГМК_НастройкиЗаполненияСтрокиДокумента.ГруппаПродукции = &ГруппаПродукции
	             |		И УГМК_НастройкиЗаполненияСтрокиДокумента.МаркаСплава = ЗНАЧЕНИЕ(Справочник.СК_МаркиСплавов.ПустаяССылка)) КАК Данные
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Приоритет12345";
	Результат = Новый Структура("Склад");
	Выборка = Запр.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ЗаполнитьЗначенияСвойств( Результат, Выборка); 
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция УГМК_ПолучитьПредставлениеЗаказаНаПроизводство( Заказ, УГМК_Кеш) Экспорт
	Если не ЗначениеЗаполнено( Заказ) тогда
		Возврат( "");
	КонецЕсли;
	
	ПредставлениеЗаказа = УГМК_Кеш.Получить( Заказ);
	
	Если ПредставлениеЗаказа = Неопределено тогда
		Запр = Новый Запрос;
		
		Запр.Текст = "ВЫБРАТЬ
		             |	ЗаказНаПроизводство.УГМК_ДляПоиска
		             |ИЗ
		             |	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		             |ГДЕ
		             |	ЗаказНаПроизводство.Ссылка = &Ссылка";
			
		Запр.УстановитьПараметр("Ссылка", Заказ);
		Результат = Запр.Выполнить().Выбрать();
		Если Результат.Следующий() тогда
			Если ЗначениеЗаполнено( Результат.УГМК_ДляПоиска) тогда
				ПредставлениеЗаказа = Результат.УГМК_ДляПоиска;
			иначе
				ПредставлениеЗаказа = Строка( Заказ);
			КонецЕсли;
		иначе
			ПредставлениеЗаказа = Строка( Заказ);
		КонецЕсли;
		
		УГМК_Кеш.Вставить( Заказ, ПредставлениеЗаказа);
	КонецЕсли;
		
	Возврат( ПредставлениеЗаказа);
КонецФункции

Процедура ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, ИмяКолонки, ТипЗаказНаПроизводство, УГМК_Кеш)
		
	Если (ЯчейкиСтрокиТабПоля.Найти( ИмяКолонки) <> Неопределено) и ЗначениеЗаполнено( ЯчейкиСтрокиТабПоля[ ИмяКолонки].Значение) тогда
		
		Заказ = ЯчейкиСтрокиТабПоля[ ИмяКолонки].Значение;
		
		Если ТипЗнч( Заказ) = ТипЗаказНаПроизводство тогда
			ЯчейкиСтрокиТабПоля[ ИмяКолонки].УстановитьТекст( УГМК_ПолучитьПредставлениеЗаказаНаПроизводство( Заказ, УГМК_Кеш));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УГМК_ИзменитьПредставлениеЗаказов( КолонкиТабПоля, ЯчейкиСтрокиТабПоля, УГМК_Кеш) Экспорт
	Если УГМК_Кеш = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Мета = Метаданные.Документы;
	Если Мета.Найти( "ЗаказНаПроизводство") <> Неопределено тогда
		ТипЗаказНаПроизводство = Тип("ДокументСсылка.ЗаказНаПроизводство");
	
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "Заказ", ТипЗаказНаПроизводство, УГМК_Кеш);
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "ЗаказПродукции", ТипЗаказНаПроизводство, УГМК_Кеш);
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "ЗаказПолучатель", ТипЗаказНаПроизводство, УГМК_Кеш);
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "ЗаказВыпуска", ТипЗаказНаПроизводство, УГМК_Кеш);
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "ЗаказВыпускаПродукции", ТипЗаказНаПроизводство, УГМК_Кеш);
		ОбработатьКолонкуТипЗаказНаПроизводство( ЯчейкиСтрокиТабПоля, "ЗаказРезерв", ТипЗаказНаПроизводство, УГМК_Кеш);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитЕслиОнЕсть( СтрокаТабличнойЧасти, Мета, Значение, Имя)
	Если Мета.Реквизиты.Найти( Имя) = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти[ Имя] = Значение;
КонецПроцедуры

Процедура ЗаполнитьЗаказыВСтрокеТабличногоПоля( СтрокаТабличнойЧасти, Знач ПодразделениеШапки=Неопределено, Знач Дата=Неопределено, Знач ИмяДополнение="", Знач ПодразделениеСтроки=Неопределено, ИмяНоменклатуры="Номенклатура") Экспорт
	Подразделение = ПодразделениеСтроки;
	Если не ЗначениеЗаполнено( ПодразделениеШапки) тогда
		Подразделение = ПодразделениеШапки;
	КонецЕсли;
	
	Заказы = УГМК_СлужебныйПовторноеИспользование.ПолучитьДействующийВнутреннийЗаказ( СтрокаТабличнойЧасти[ ИмяНоменклатуры], Подразделение, Дата);
	Мета = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти));
	ЗаполнитьРеквизитЕслиОнЕсть( СтрокаТабличнойЧасти, Мета, Заказы.Заказ, "Заказ"+ИмяДополнение);
	ЗаполнитьРеквизитЕслиОнЕсть( СтрокаТабличнойЧасти, Мета, Заказы.ЗаказВыпуска, "ЗаказВыпуска"+ИмяДополнение);
	ЗаполнитьРеквизитЕслиОнЕсть( СтрокаТабличнойЧасти, Мета, Заказы.ЗаказРезерв, "ЗаказРезерв"+ИмяДополнение);
КонецПроцедуры 

Функция ПолучитьНастройкуВидимостиКолонокОперации( ВидОперации, Подразделение) Экспорт
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Подразделение",Подразделение);
	Запр.УстановитьПараметр("Ссылка",ВидОперации);
	Если ЗначениеЗаполнено( ВидОперации.ИсточникВидимости) тогда
		Запр.УстановитьПараметр("ИсточникВидимости",ВидОперации.ИсточникВидимости);
	иначе
		Запр.УстановитьПараметр("ИсточникВидимости",ВидОперации);
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	УГМК_СостоянияЗаказаВидимость.ИмяРеквизита,
	             |	УГМК_СостоянияЗаказаВидимость.ВидимостьРеквизита,
	             |	УГМК_СостоянияЗаказаВидимость.Подразделение,
	             |	ВЫБОР
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.ВидимостьРеквизита
	             |			ТОГДА 2
	             |		ИНАЧЕ 1
	             |	КОНЕЦ + ВЫБОР
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	             |			ТОГДА 15
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.Подразделение = &Подразделение
	             |			ТОГДА 105
	             |		ИНАЧЕ 55
	             |	КОНЕЦ КАК Приоритет
	             |ПОМЕСТИТЬ Данные
	             |ИЗ
	             |	Справочник.УГМК_СостоянияЗаказа.Видимость КАК УГМК_СостоянияЗаказаВидимость
	             |ГДЕ
	             |	(УГМК_СостоянияЗаказаВидимость.Ссылка = &Ссылка
	             |				И (УГМК_СостоянияЗаказаВидимость.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	             |			ИЛИ УГМК_СостоянияЗаказаВидимость.Подразделение В ИЕРАРХИИ (&Подразделение)))
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	УГМК_СостоянияЗаказаВидимость.ИмяРеквизита,
	             |	УГМК_СостоянияЗаказаВидимость.ВидимостьРеквизита,
	             |	УГМК_СостоянияЗаказаВидимость.Подразделение,
	             |	ВЫБОР
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.ВидимостьРеквизита
	             |			ТОГДА 2
	             |		ИНАЧЕ 1
	             |	КОНЕЦ + ВЫБОР
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	             |			ТОГДА 10
	             |		КОГДА УГМК_СостоянияЗаказаВидимость.Подразделение = &Подразделение
	             |			ТОГДА 100
	             |		ИНАЧЕ 50
	             |	КОНЕЦ
	             |ИЗ
	             |	Справочник.УГМК_СостоянияЗаказа.Видимость КАК УГМК_СостоянияЗаказаВидимость
	             |ГДЕ
	             |	(УГМК_СостоянияЗаказаВидимость.Ссылка = &ИсточникВидимости
	             |				И (УГМК_СостоянияЗаказаВидимость.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	             |			ИЛИ УГМК_СостоянияЗаказаВидимость.Подразделение В ИЕРАРХИИ (&Подразделение)))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Данные.ИмяРеквизита,
	             |	Данные.ВидимостьРеквизита,
	             |	Данные.Подразделение,
	             |	Данные.Приоритет
	             |ИЗ
	             |	Данные КАК Данные
	             |ГДЕ
	             |	(Данные.ИмяРеквизита, Данные.Приоритет) В
	             |			(ВЫБРАТЬ
	             |				Данные.ИмяРеквизита,
	             |				МАКСИМУМ(Данные.Приоритет) КАК Приоритет
	             |			ИЗ
	             |				Данные КАК Данные
	             |			СГРУППИРОВАТЬ ПО
	             |						Данные.ИмяРеквизита)";
				 
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Процедура ПолучитьНастройкиТиповДляТаблицы( ДанныеПараметр, Разделитель = Неопределено, ИмяКолонкиНастройки = "Настройка") Экспорт
	Перем Данные;
	
	ПараметрСтруктура = ТипЗнч( ДанныеПараметр) = Тип("Структура");
	Если ПараметрСтруктура тогда
		ДокФакт = Документы.УГМК_ДокументФакт.ПолучитьСсылку();
		Данные = ДокФакт.Материалы.Выгрузить();
		Строка0 = Данные.Добавить();
		ЗаполнитьЗначенияСвойств( Строка0, ДанныеПараметр);
	иначе
		Данные = ДанныеПараметр;
	КонецЕсли;
	
	Если Данные.Колонки.Найти("Результат") = Неопределено тогда
		Данные.Колонки.Добавить("Результат");
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Настройка", Данные.ВыгрузитьКолонку( ИмяКолонкиНастройки));
	
	Разделители = Новый Массив;
	Разделители.Добавить( Разделитель);
	Если Разделитель <> Неопределено тогда
		Разделители.Добавить( Неопределено);
	КонецЕсли;
	Запр.УстановитьПараметр("Разделитель", Разделители);
	
	Запр.Текст = "ВЫБРАТЬ
	             |	ВЫБОР
	             |		КОГДА УГМК_НастройкиТиповСтрокиДокументаФакта.Разделитель = НЕОПРЕДЕЛЕНО
	             |			ТОГДА 10
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК Приоритет,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Настройка,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Характеристика,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Серия,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Состояние,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.ЕдиницаИзмеренияМест,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.ЕдиницаИзмерения,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.ЕдиницаИзмерения1,
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Коэффициент1
	             |ПОМЕСТИТЬ данные
	             |ИЗ
	             |	РегистрСведений.УГМК_НастройкиТиповСтрокиДокументаФакта КАК УГМК_НастройкиТиповСтрокиДокументаФакта
	             |ГДЕ
	             |	УГМК_НастройкиТиповСтрокиДокументаФакта.Настройка В(&Настройка)
	             |	И УГМК_НастройкиТиповСтрокиДокументаФакта.Разделитель В(&Разделитель)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	данные.Приоритет,
	             |	данные.Настройка,
	             |	данные.Характеристика,
	             |	данные.Серия,
	             |	данные.Состояние,
	             |	данные.ЕдиницаИзмеренияМест,
	             |	данные.ЕдиницаИзмерения,
	             |	данные.ЕдиницаИзмерения1,
	             |	данные.Коэффициент1
	             |ИЗ
	             |	данные КАК данные
	             |ГДЕ
	             |	(данные.Приоритет, данные.Настройка) В
	             |			(ВЫБРАТЬ
	             |				МИНИМУМ(данные.Приоритет) КАК Приоритет,
	             |				данные.Настройка
	             |			ИЗ
	             |				данные КАК данные
	             |			СГРУППИРОВАТЬ ПО
	             |						данные.Настройка)";
				 
	Результат = Запр.Выполнить().Выбрать();
	ОтборИсходныхСтрок = Новый Структура( ИмяКолонкиНастройки);
	Пока Результат.Следующий() цикл
		ОтборИсходныхСтрок[ ИмяКолонкиНастройки] = Результат.Настройка;
		Строки1 = Данные.НайтиСтроки( ОтборИсходныхСтрок);
		Для каждого Строка1 из Строки1 цикл
			Строка1.Результат = Неопределено;
			Строка1.Результат = Новый Структура("Приоритет,Настройка,Характеристика,Серия,Состояние,ЕдиницаИзмеренияМест,ЕдиницаИзмерения,ЕдиницаИзмерения1,Коэффициент1");
			ЗаполнитьЗначенияСвойств( Строка1.Результат, Результат);
		КонецЦикла;
	КонецЦикла;
	
	Если ПараметрСтруктура тогда
		Строка0 = Данные[ 0];
		Если ДанныеПараметр.Свойство("Результат") тогда
			ДанныеПараметр.Результат = Строка0.Результат;
		иначе
			ДанныеПараметр.Вставить("Результат", Строка0.Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ В ПОСЛЕДОВАТЕЛЬНОСТЯХ

Процедура СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации = Неопределено) Экспорт
	Для Каждого ТекущееСтароеСостояние Из ТаблицаСтаройРегистрацииВПоследовательности Цикл
		Если Дата > ТекущееСтароеСостояние.Период  //Дата документа при перепроведении увеличилась
		  ИЛИ ТаблицаПоследовательностейДляРегистрации = Неопределено //Отмена проведения документа
		  ИЛИ ТаблицаПоследовательностейДляРегистрации.НайтиСтроки(Новый Структура("ИмяПоследовательности, Организация", ТекущееСтароеСостояние.ИмяПоследовательности, ТекущееСтароеСостояние.Организация)).Количество() = 0//Изменились организация или признаки отражения в учете
		Тогда
			//Состояние изменилось, нужно передвинуть границу последовательности на старое состояние
			ОтборГраницы = Новый Структура("Организация, ПроведенВХронологическойПоследовательности",ТекущееСтароеСостояние.Организация, Ложь);
			СтараяГраница = Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].ПолучитьГраницу(ОтборГраницы);
			Если СтараяГраница.Сравнить(Новый МоментВремени(ТекущееСтароеСостояние.Период, Ссылка)) = 1 Тогда
				Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].УстановитьГраницу(ТекущееСтароеСостояние.Период,ОтборГраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦИкла;
КонецПроцедуры	

Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(Ссылка, Дата, Организация = Неопределено, Упр=Ложь, Бух = Ложь, Нал = Ложь, СпособВеденияПартионногоУчетаПоОрганизации=Неопределено,ТаблицаСтаройРегистрацииВПоследовательности = Неопределено) Экспорт
	
	Возврат;
	// ОЦММобильная
	//ТаблицаПоследовательностейДляРегистрации = Новый ТаблицаЗначений();
	//ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("ИмяПоследовательности");
	//ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("Организация");
	//
	//
	//Если Упр Тогда
	//	
	//	Если СпособВеденияПартионногоУчетаПоОрганизации = Неопределено Тогда
	//		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, Дата);
	//	Иначе
	//		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = СпособВеденияПартионногоУчетаПоОрганизации;
	//	КонецЕсли;	
	//	
	//	Если СпособВеденияПартионногоУчетаПоОрганизацииДляУУ <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
	//		НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
	//		НоваяСтрока.ИмяПоследовательности = "ПартионныйУчет";
	//		НоваяСтрока.Организация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
	//	КонецЕсли;
	//КонецЕсли;	
	//
	//Если Бух ИЛИ Нал Тогда
	//	НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
	//	НоваяСтрока.ИмяПоследовательности = "ПартионныйУчетБУ";
	//	НоваяСтрока.Организация = Организация;
	//КонецЕсли;	
	//
	//
	//Если ТаблицаСтаройРегистрацииВПоследовательности <> Неопределено
	//  И ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
	//	//Документ перепроводиться и уже был зарегистрирован в последовательности ранее  
	//	СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации);
	//КонецЕсли;
	//	
	//Для Каждого ТекущееСостояние Из ТаблицаПоследовательностейДляРегистрации Цикл
	//	//В таблице значений может быть только по одной строке на каждую последовательность
	//	НаборЗаписейПоследовательности = Последовательности[ТекущееСостояние.ИмяПоследовательности].СоздатьНаборЗаписей();
	//	НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Ссылка);
	//	НоваяЗапись = НаборЗаписейПоследовательности.Добавить();
	//	НоваяЗапись.Период      = Дата;
	//	НоваяЗапись.Организация = ТекущееСостояние.Организация;
	//	НоваяЗапись.Регистратор = Ссылка;
	//	НаборЗаписейПоследовательности.Записать();
	//КонецЦикла;	
		
КонецПроцедуры	

Процедура УдалитьРегистрациюДокументаВПоследовательностяхНаСервере(ДокументСсылка, ПроверятьДвижения,ТаблицаСтаройРегистрацииВПоследовательности)Экспорт
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка);
		Для Каждого СтрокаТаблицыРегистрацииВПоследовательности Из ТаблицаРегистраций Цикл
			НаборЗаписейРегистрацииВПоследовательности = Последовательности[СтрокаТаблицыРегистрацииВПоследовательности.Имя].СоздатьНаборЗаписей();  
			НаборЗаписейРегистрацииВПоследовательности.Отбор.Регистратор.Установить(ДокументСсылка);
			Если СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчет"  
			  ИЛИ СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчетБУ" Тогда
				НаборЗаписейРегистрацииВПоследовательности.Прочитать();
				Для Каждого ЗаписьВПоследовательности Из НаборЗаписейРегистрацииВПоследовательности Цикл
					НоваяЗаписьРегистрации = ТаблицаСтаройРегистрацииВПоследовательности.Добавить();
					НоваяЗаписьРегистрации.ИмяПоследовательности = СтрокаТаблицыРегистрацииВПоследовательности.Имя;
					НоваяЗаписьРегистрации.Организация = ЗаписьВПоследовательности.Организация;
					НоваяЗаписьРегистрации.Период = ЗаписьВПоследовательности.Период;
				КонецЦикла;	
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;	
			НаборЗаписейРегистрацииВПоследовательности.Записать();
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка)
	ТекстЗапроса = "";	
	
	КоллекцияПоследовательностей = Метаданные.Последовательности;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Для Каждого Последовательность ИЗ КоллекцияПоследовательностей Цикл
		Если Последовательность.Документы.Содержит(МетаданныеДокумента) Тогда
			// в запросе получаем имена последовательностей, в которых документ зарегистрирован
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ """ + Последовательность.Имя 
			+  """ КАК Имя ИЗ " + Последовательность.ПолноеИмя()  
			+ " ГДЕ Регистратор = &Регистратор";
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаЗапроса;
	КонецЕсли;	
	
КонецФункции//ОпределитьНаличиеРегистрацииДокументаВПоследовательности

#Если ТолстыйКлиентОбычноеПриложение тогда

////////////////////////////////////////////////////////////////////////////////
// МеханизмНумерацииОбъектов

// Процедура изменения доступности "ручного" изменения кода/номера объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//	ПолеВводаНомераДубль - необязательный параметр, необходим в случаях, когда код/номер одновременно связан с двумя элементами формы
//	КодНомерСтрокой - необязательный параметр, позволяет задать переназначить имя кода/номера при выводе запроса на подтверждение
//
// ++ УГМК Игитов М.А. 06.04.2010 23:10:15 
// Процедура ИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "") Экспорт
Процедура ИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "",ПолеВводаПостфикса=Неопределено) Экспорт
// -- УГМК Игитов М.А.  06.04.2010 23:10:19 	
	Кнопка = ПодменюДействия.Кнопки.РедактироватьКодНомер;
	Если НЕ Кнопка.Пометка Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда			
			Если ВРЕГ(ПолеВводаНомера.Данные) = ВРЕГ("Код") Тогда
				ТекстВопроса = "Код присваивается автоматически при записи элемента, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить код вручную?"
			Иначе
				ТекстВопроса = "Номер документу присваивается автоматически при записи, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить номер вручную?"
			КонецЕсли;
		КонецЕсли;		
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПолеВводаНомера.ТолькоПросмотр = НЕ Кнопка.Пометка;
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;	
	ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера);
	
	Если ПолеВводаНомераДубль <> Неопределено Тогда
		ПолеВводаНомераДубль.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаНомераДубль.ПропускатьПриВводе = ПолеВводаНомераДубль.ТолькоПросмотр;
		ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомераДубль);
	КонецЕсли;
	// ++ УГМК Игитов М.А. 06.04.2010 23:11:18 
	Если ПолеВводаПостфикса <> Неопределено Тогда
		ПолеВводаПостфикса.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаПостфикса.ПропускатьПриВводе = ПолеВводаПостфикса.ТолькоПросмотр;
	КонецЕсли;
	// -- УГМК Игитов М.А.  06.04.2010 23:11:19 
	
КонецПроцедуры // ИзменениеВозможностиРедактированияНомера()

//	Процедура установки флага ТолькоПросмотр для поля ввода кода/номера в зависимости от стратегии автонумерации объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта
//  ФормаОбъекта - форма объекта, табличное поле
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
// ++ УГМК Игитов М.А. 06.04.2010 22:46:31 
// Процедура УстановитьДоступностьПоляВводаНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
Процедура УстановитьДоступностьПоляВводаНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаПостфикса=Неопределено) Экспорт
// -- УГМК Игитов М.А.  06.04.2010 22:46:34 	
	Если ФормаОбъекта.Автонумерация = АвтонумерацияВФорме.Авто Тогда
		Возврат;
	КонецЕсли;	
	
	СтратегияРедактирования = ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта);
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Доступно Тогда
		Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") <> Неопределено Тогда
			ПодменюДействия.Кнопки.Удалить(ПодменюДействия.Кнопки.РедактироватьКодНомер);
		КонецЕсли;
		ПолеВводаНомера.ТолькоПросмотр = Ложь;		
	КонецЕсли;
	
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;		
	// ++ УГМК Игитов М.А. 06.04.2010 22:49:48 
	Если ПолеВводаПостфикса<>Неопределено тогда
		ПолеВводаПостфикса.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаПостфикса.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;		
	КонецЕсли;
	// -- УГМК Игитов М.А.  06.04.2010 22:49:50 
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования);	
	
//+ УГМК_isn 28.03.2012 16:06:08
	УГМК_СлужебныеФункции.ПриОткрытииФормы(МетаданныеОбъекта, ФормаОбъекта);
//- УГМК_isn 28.03.2012 16:06:08 
		
КонецПроцедуры // УстановитьДоступностьПоляВводаНомера()

 //	Процедура установки текста подсказки для поля ввода кода/номера в зависимости от стратегии редактирования
//	и введенного значения
//
// Параметры
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//	СтратегияРедактирования - стратегия автонумерации объекта
//
Процедура УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования) Экспорт
		
	КодНомерСтрокой = ПолеВводаНомера.Данные;		
	
	Если ТипЗнч(ПолеВводаНомера) = Тип("ПолеВвода") Тогда
		ПолеВвода = ПолеВводаНомера;
	Иначе
		ПолеВвода = ПолеВводаНомера.ЭлементУправления;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПолеВвода.Значение) Тогда
		ПолеВвода.Подсказка =  КодНомерСтрокой + " будет присвоен при записи объекта.";
	Иначе
		ПолеВвода.Подсказка =  "";
	КонецЕсли;
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно Тогда
		Если НЕ ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
			Если НЕ ПодменюДействия.Кнопки.РедактироватьКодНомер.Пометка Тогда
				ПолеВвода.Подсказка =  ПолеВвода.Подсказка + ?(ПустаяСтрока(ПолеВвода.Подсказка), "", " ") 
											 + "Для возможности редактирования " + ?(КодНомерСтрокой = "Номер", "номера", "кода") + " используйте подменю ""Действия"".";
			КонецЕсли;
		КонецЕсли;								 
	КонецЕсли;
	
КонецПроцедуры // УстановитьПодсказкуПоляВводаКодаНомера()

 //	Возвращает стратегию нумерации для объекта
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерации для объекта
//
Функция ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта) Экспорт
	КэшСтратегииАвтонумерации = глЗначениеПеременной("КэшСтратегииАвтонумерации");
	СтратегияРедактирования = КэшСтратегииАвтонумерации[МетаданныеОбъекта];
	Если СтратегияРедактирования = Неопределено Тогда
		СтратегияРедактирования = ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта);
		КэшСтратегииАвтонумерации.Вставить(МетаданныеОбъекта, СтратегияРедактирования);
	КонецЕсли;		
	Возврат СтратегияРедактирования;
КонецФункции // ПолучитьСтратегиюРедактированияНомераОбъекта()

//	Возвращает стратегию нумерации для объекта, сохраненную в соотв. регистре сведений
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерации для объекта
//
Функция ПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта) Экспорт
	
	Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно;
	
КонецФункции // ПолучитьСтратегиюАвтонумерацииДляОбъекта()

//	Процедура обновления текста подсказки для поля ввода кода/номера
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//
Процедура ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, ПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта));
КонецПроцедуры // ОбновитьПодсказкуКодНомерОбъекта()

//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия, ПолеВводаНомера) Экспорт
	
	ОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	Если ОбъектМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		ЭтотОбъект[КодНомер] = "";
	Иначе
		ДлинаПрефикса = СтрДлина(ЭтотОбъект.Организация.Префикс);
		Если ДлинаПрефикса = 0 ИЛИ Лев(ПолеВводаНомера.Значение, ДлинаПрефикса) <> ЭтотОбъект.Организация.Префикс Тогда
			ЭтотОбъект[КодНомер] = "";
			
		//УГМК++   Игитов М.А. 
			Если ОбъектМетаданные.Реквизиты.Найти("УГМК_префикс")<>Неопределено и
				ЗначениеЗаполнено(ЭтотОбъект.УГМК_Префикс) и Не УГМК_СлужебныеФункции.ПрефиксДействуетДляОрганизации(ЭтотОбъект.УГМК_Префикс, ЭтотОбъект.Организация)
					 тогда
					ЭтотОбъект.УГМК_Префикс = Неопределено;
			КонецЕсли; 
		//УГМК--   Игитов М.А.
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект[КодНомер] = "" Тогда
		ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ПодменюДействия, ПолеВводаНомера);
	КонецЕсли;
	
КонецПроцедуры // СброситьУстановленныйКодНомерОбъекта()

Процедура ДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "номер");
	
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "код");
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, КодНомер) Экспорт
	
	Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда	
		Обработчик = Новый Действие("ДействияФормыРедактировать" + КодНомер);
		ПодменюДействия.Кнопки.Добавить("РазделительРедактированияКодаНомера", ТипКнопкиКоманднойПанели.Разделитель);
		Кнопка = ПодменюДействия.Кнопки.Добавить("РедактироватьКодНомер", ТипКнопкиКоманднойПанели.Действие, "Редактировать " + КодНомер, Обработчик);
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

// Перенесено из УправлениеПроизводством
// УГМК++ Пресников Ю.В. Функция переопределена, имя оставлено для сохранения вызовов.
//
// Функция определяет спецификацию по умолчанию для номенклатуры, характеристики и подразделения
// на указанную дату
//
// Параметры
//  Номенклатура               - СправочникСсылка.Номенклатура: номенклатура, спецификацию которой 
//                               требуется определить
//  ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры: характеристика номенклатуры,
//                               спецификацию которой требуется определить
//  Момент                     - Дата: момент времени, на который определяется спецификация
//  Подразделение              - СправочникСсылка.Подразделения: подразделение, для которого
//                  	         требуется определить спецификацию
//
// Возвращаемое значение:
//   Справочники.СпецификацииНоменклатуры - спецификация, определенная для указанного сочетания параметров как основная
//
Функция Типовая_ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Момент, Подразделение = Неопределено, Знач УГМК_ТипСпецификации=Неопределено) Экспорт

	Перем Спецификация;

	Если УГМК_ТипСпецификации=Неопределено тогда
		УГМК_ТипСпецификации = Справочники.УГМК_ТипыСпецификаций.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч( УГМК_ТипСпецификации) = Тип( "Массив") тогда
		УсловиеТип = " и УГМК_ТипСпецификации в (&УГМК_ТипСпецификации)";
	иначе
		УсловиеТип = " и УГМК_ТипСпецификации = &УГМК_ТипСпецификации";
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеСпецификацииНоменклатуры.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры,
	|		1 КАК Приоритет
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВнЗапрос.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|					&Дата,
	|					Номенклатура = &Номенклатура
	|						И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|						И Подразделение = &Подразделение"+УсловиеТип+") КАК ВнЗапрос
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВнЗапрос.Период УБЫВ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		2
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВнЗапрос.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|					&Дата,
	|					Номенклатура = &Номенклатура
	|						И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|						И Подразделение = &ПодразделениеПустаяСсылка"+УсловиеТип+") КАК ВнЗапрос
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВнЗапрос.Период УБЫВ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		3
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВнЗапрос.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|					&Дата,
	|					Номенклатура = &Номенклатура
	|						И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры"+УсловиеТип+") КАК ВнЗапрос
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВнЗапрос.Период УБЫВ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		4
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВнЗапрос.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|					&Дата,
	|					Номенклатура = &Номенклатура
	|						И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатурыПустаяСсылка"+УсловиеТип+") КАК ВнЗапрос
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВнЗапрос.Период УБЫВ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		5
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВнЗапрос.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура"+УсловиеТип+") КАК ВнЗапрос
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			ВнЗапрос.Период УБЫВ) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних) КАК ОсновныеСпецификацииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеСпецификацииНоменклатуры.Приоритет");

	Запрос.УстановитьПараметр("Дата", ?(ТипЗнч(Момент) = Тип("Дата"), Момент, ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатурыПустаяСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение = Неопределено, Справочники.Подразделения.ПустаяСсылка(), Подразделение));
	Запрос.УстановитьПараметр("ПодразделениеПустаяСсылка", Справочники.Подразделения.ПустаяСсылка());

	Запрос.УстановитьПараметр("УГМК_ТипСпецификации", УГМК_ТипСпецификации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Спецификация = Выборка.СпецификацияНоменклатуры;
		
	КонецЕсли;

	Возврат Спецификация;

КонецФункции // ОпределитьСпецификациюПоУмолчанию()

Функция ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Момент, Подразделение = Неопределено, Знач УГМК_ТипСпецификации=Неопределено, УГМК_ИскатьПоПодгруппе = Истина, ПараметрыПодгруппаТрудоемкости = Неопределено) Экспорт
	Если УГМК_ИскатьПоПодгруппе тогда
		Параметры = Новый Структура("Продукция,ХарактеристикаПродукции,Заказ");
		Параметры.Продукция = Номенклатура;
		Если ЗначениеЗаполнено( ХарактеристикаНоменклатуры) тогда
			Параметры.ХарактеристикаПродукции = ХарактеристикаНоменклатуры;
		иначе
			Параметры.ХарактеристикаПродукции = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Если ПараметрыПодгруппаТрудоемкости = Неопределено Тогда
			НайденыеПараметры = УГМК_СлужебныеФункции.ПолучитьПараметрыИзготовленияДляПродукции( Параметры, Момент, Подразделение);          
			Если НайденыеПараметры <> Неопределено Тогда
				ПараметрыПодгруппаТрудоемкости = НайденыеПараметры.ПодгруппаТрудоемкости;
			КонецЕсли; 
		КонецЕсли; 
		Если ПараметрыПодгруппаТрудоемкости <> Неопределено тогда
			Спецификация = УГМК_СлужебныеФункции.ОпределитьСпецификациюПоШаблонуПодгруппыТрудоемкости( ПараметрыПодгруппаТрудоемкости, Момент, Подразделение, УГМК_ТипСпецификации);
			Если (не ЗначениеЗаполнено( Спецификация)) и ЗначениеЗаполнено( УГМК_ТипСпецификации) тогда
				Спецификация = УГМК_СлужебныеФункции.ОпределитьСпецификациюПоШаблонуПодгруппыТрудоемкости( ПараметрыПодгруппаТрудоемкости, Момент, Подразделение, Справочники.УГМК_ТипыСпецификаций.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено( Спецификация) тогда
		Возврат( Спецификация);
	КонецЕсли;
	
	ТиповаяСпецификация = Типовая_ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Момент, Подразделение, УГМК_ТипСпецификации);
	Если ЗначениеЗаполнено( ТиповаяСпецификация) тогда
		Возврат( ТиповаяСпецификация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено( УГМК_ТипСпецификации) тогда
		ТиповаяСпецификация = Типовая_ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Момент, Подразделение, Справочники.УГМК_ТипыСпецификаций.ПустаяСсылка());
		Если ЗначениеЗаполнено( ТиповаяСпецификация) тогда
			Возврат( ТиповаяСпецификация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

&НаСервере
Процедура ДобавитьПоляКомпоновки( ЭлементПоля, ИменаПолей)
	// ОЦММобильная
	//Если ТипЗнч( ИменаПолей) = Тип("Строка") тогда 
	//	Если ЗначениеЗаполнено( ИменаПолей) тогда 
	//		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок( ИменаПолей, ",");
	//		Для Каждого Значение из МассивПодстрок цикл
	//			ЭлементПоле = ЭлементПоля.Элементы.Добавить();
	//			ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных( Значение);
	//			ЭлементПоле.Использование = Истина;
	//		КонецЦикла;
	//	КонецЕсли;
	//иначе
	//	ЭлементПоле = ЭлементПоля.Элементы.Добавить();
	//	ЭлементПоле.Поле = ИменаПолей;
	//	ЭлементПоле.Использование = Истина;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, ПолеСписокДата, ОформляемоеПоле) Экспорт
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = ПолеСписокДата;
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбор.ПравоеЗначение = ДатаНачалоОформления;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ОформляемоеПоле);
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.гг'");
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = ПолеСписокДата;
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбор.ПравоеЗначение = ДатаНачалоОформления;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ОформляемоеПоле);
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM   HH:mm'");
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыКолонок( Элементы, ДопИмя) Экспорт
	ЭлементПоле = Элементы[ ДопИмя+"Дата"];
	ЭлементПоле.Ширина = 9;
	ЭлементПоле.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементПоле = Элементы[ ДопИмя+"Номер"];
	ЭлементПоле.Ширина = 12;
	ЭлементПоле.РастягиватьПоГоризонтали = Ложь;
КонецПроцедуры

&НаСервере
Функция СписокГоден( ДобавитьНеСоответствует = Ложь) Экспорт
	Перем Результат;
	
	Результат = Новый СписокЗначений;
	Результат.Добавить( Истина);
	Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.УГМК_Годен);
	Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.Сертификат);
	Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.УГМК_СоответствуетТП);
	Если ДобавитьНеСоответствует = Истина тогда
		Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеСоответствует);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

&НаСервере
Функция СписокНеГоден() Экспорт
	Перем Результат;
	
	Результат = Новый СписокЗначений;
	Результат.Добавить( Ложь);
	Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеГоден);
	Результат.Добавить( Перечисления.РезультатыСертификацииНоменклатуры.ОтказаноВСертификации);
	
	Возврат( Результат);
КонецФункции

&НаСервере
Процедура ПрименитьУсловноеОформлениеАнализов( УсловноеОф, ОформлениеСписок=Неопределено, ТекФорма=Неопределено) Экспорт
	Инд = 0;
	Пока Инд <= УсловноеОф.Элементы.Количество()-1 цикл
		Элемент = УсловноеОф.Элементы[ Инд];
		Если Элемент.Представление = ".Авто." тогда
			УсловноеОф.Элементы.Удалить( Элемент);
		иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДатаНачалоОформления = НачалоДня( ДобавитьМесяц( ТекущаяДата(), -1));
	
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("Список.Дата"), "Дата");
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("ДокументыПлавки.Дата"), "ДокументыПлавкиДата");
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("Заявки.Дата"), "ЗаявкиДата");
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("Годность.Дата"), "ГодностьДата");
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("Протоколы.Дата"), "ПротоколыДата");
	
	ПолеВидРезультатаАнализа = Новый ПолеКомпоновкиДанных("Анализы.ВидРезультатаАнализа");
	ПолеАнализыМаксЗначениеПоказателя = Новый ПолеКомпоновкиДанных("АнализыМаксЗначениеПоказателя");
	ПолеАнализыЕдиницаИзмерения = Новый ПолеКомпоновкиДанных("АнализыЕдиницаИзмерения");
	
	ПолеЗначения = Новый ПолеКомпоновкиДанных("АнализыПредставлениеРезультата");
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Анализы.СтрокаЗаявки");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = Истина;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ПолеЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "----------");
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Анализы.ЦветРезультатТекст");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = 1;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ПолеЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Анализы.ЦветРезультатТекст");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = 2;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ПолеЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Анализы.СоответствуетНормативуПогрешность");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = Ложь;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, ПолеЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.СтатусОтклонен);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	ЭлементОтбор.Использование = Истина;
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Анализы.УбратьВидимостьКолонок");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = Истина;
	ЭлементОтбор.Использование = Истина;
	ДобавитьПоляКомпоновки( Элемент.Поля, "АнализыПоказательАнализа,АнализыЕдиницаИзмерения,АнализыЗначениеРезультата");
	//ДобавитьПоляКомпоновки( Элемент.Поля, "АнализыПоказательАнализа,АнализыЕдиницаИзмерения,АнализыПредставлениеРезультата,АнализыЗначениеРезультата");
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	ЭлементОтбор.Использование = Истина;
	
	Если ОформлениеСписок = Неопределено тогда // это форма партии
		ПолеГодность = Новый ПолеКомпоновкиДанных("Список.ГодностьЗначение");

		Элемент = УсловноеОф.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеГодность;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = Неопределено;
		ЭлементОтбор.Использование = Истина;
		ДобавитьПоляКомпоновки( Элемент.Поля, "Дата,Номер,ДляПредставления");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = УсловноеОф.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеГодность;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбор.ПравоеЗначение = СписокНеГоден();
		ЭлементОтбор.Использование = Истина;
		ДобавитьПоляКомпоновки( Элемент.Поля, "Дата,Номер,ДляПредставления");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = УсловноеОф.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеГодность;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_СоответствуетТП;
		ЭлементОтбор.Использование = Истина;
		ДобавитьПоляКомпоновки( Элемент.Поля, "Дата,Номер,ДляПредставления");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = УсловноеОф.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеГодность;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеСоответствует;
		ЭлементОтбор.Использование = Истина;
		ДобавитьПоляКомпоновки( Элемент.Поля, "Дата,Номер,ДляПредставления");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Коричневый);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = УсловноеОф.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Авиатехприемка");;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = Истина;
		ЭлементОтбор.Использование = Истина;
		ДобавитьПоляКомпоновки( Элемент.Поля, "Список");
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЗеленаяЛужайка);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		//условное оформление для документов формирование партий
		Если ТекФорма<>Неопределено тогда
			ПолеСторноПроведен=Новый ПолеКомпоновкиДанных("СторноПроведен");
			УсловноеОфДП=ТекФорма.ДокументыПлавки.УсловноеОформление;
			Элемент = УсловноеОфДП.Элементы.Добавить();
			ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеСторноПроведен;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбор.ПравоеЗначение = Истина;
			ЭлементОтбор.Использование = Истина;
			ДобавитьПоляКомпоновки( Элемент.Поля, "Дата,Номер,ВидОперации,ДляПредставления");
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
			Элемент.Использование = Истина;
			Элемент.Представление = ".Авто.";
		КонецЕсли;
		//****
	иначе // Это форма с результатами Анализов
		ОформлениеСписок.Элементы.Очистить();
		ПолеНазначениеАнализаИдентификатор = Новый ПолеКомпоновкиДанных("УГМК_НазначениеАнализа.УГМК_Идентификатор");
		
		Элемент = ОформлениеСписок.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеНазначениеАнализаИдентификатор;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = "Зеленый";
		ЭлементОтбор.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = ОформлениеСписок.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеНазначениеАнализаИдентификатор;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = "Красный";
		ЭлементОтбор.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = ОформлениеСписок.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеНазначениеАнализаИдентификатор;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = "Коричневый";
		ЭлементОтбор.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Коричневый);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = ОформлениеСписок.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = ПолеНазначениеАнализаИдентификатор;
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбор.ПравоеЗначение = "Синий";
		ЭлементОтбор.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
		
		Элемент = ОформлениеСписок.Элементы.Добавить();
		ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатСертификации");
		ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбор.ПравоеЗначение = СписокГоден();
		ЭлементОтбор.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ФонНедоступнойСтрокиДокумента);
		Элемент.Использование = Истина;
		Элемент.Представление = ".Авто.";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеФормаОУ( УсловноеОф, СписокДокументов = Неопределено) Экспорт
	Инд = 0;
	Пока Инд <= УсловноеОф.Элементы.Количество()-1 цикл
		Элемент = УсловноеОф.Элементы[ Инд];
		Если Элемент.Представление = ".Авто." тогда
			УсловноеОф.Элементы.Удалить( Элемент);
		иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДатаНачалоОформления = НачалоДня( ДобавитьМесяц( ТекущаяДата(), -1));
	
	ОформитьДатуВСписке( УсловноеОф, ДатаНачалоОформления, Новый ПолеКомпоновкиДанных("Список.Дата"), "Дата");
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Сторно");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбор.Использование = Истина;
	ЭлементПоле = Элемент.Поля.Элементы.Добавить();
	ЭлементПоле.Использование = Истина;
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("Список");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
	Если СписокДокументов = Неопределено тогда
		ШрифрПроведеноСторно = Новый Шрифт( ШрифтыСтиля.ШрифтТекста, , , , , , Истина);
	иначе
		ШрифрПроведеноСторно = Новый Шрифт( СписокДокументов.Шрифт, , , , , , Истина);
	КонецЕсли;
	
	Элемент = УсловноеОф.Элементы.Добавить();
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Сторно");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбор.Использование = Истина;
	ЭлементОтбор = Элемент.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СторноПроведен");
	ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = Истина;
	ЭлементОтбор.Использование = Истина;
	ЭлементПоле = Элемент.Поля.Элементы.Добавить();
	ЭлементПоле.Использование = Истина;
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументКоличество");
	ЭлементПоле = Элемент.Поля.Элементы.Добавить();
	ЭлементПоле.Использование = Истина;
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДокументКоличествоПродукции");
	ЭлементПоле = Элемент.Поля.Элементы.Добавить();
	ЭлементПоле.Использование = Истина;
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементПоле = Элемент.Поля.Элементы.Добавить();
	ЭлементПоле.Использование = Истина;
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("Номер");
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифрПроведеноСторно);
	Элемент.Использование = Истина;
	Элемент.Представление = ".Авто.";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоследнююЗаявку( УГМК_ПаспортПартии)
	Если не ЗначениеЗаполнено( УГМК_ПаспортПартии) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("УГМК_ПаспортПартии", УГМК_ПаспортПартии);
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_ЗаявкаНаАнализ.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ЗаявкаНаАнализ КАК УГМК_ЗаявкаНаАнализ
	             |ГДЕ
	             |	НЕ УГМК_ЗаявкаНаАнализ.ПометкаУдаления
	             |	И УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_ЗаявкаНаАнализ.Проведен УБЫВ,
	             |	УГМК_ЗаявкаНаАнализ.МоментВремени УБЫВ";
	Результат = Запр.Выполнить().Выбрать();
	ПоследняяЗаявка = Неопределено;
	Если Результат.Следующий() тогда
		ПоследняяЗаявка = Результат.Ссылка;
	КонецЕсли;
	
	Возврат( ПоследняяЗаявка);
КонецФункции

&НаСервере
Процедура ОбработатьЗаполнение_РезультатАнализа( ЭтотОбъект, Основание, ЗаполнятьАнализы = Истина) Экспорт
	//ОЦМ Мобильная
	//ЗаполнениеВыполнено = Истина;
	//Если ТипЗнч( Основание) = Тип( "Структура") тогда
	//	ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание);
	//иначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.УГМК_ЗаявкаНаАнализ") Тогда
	//	
	//	Если ТипЗнч(ЭтотОбъект) <> Тип("ДокументОбъект.УГМК_СертификацияРезультат") Тогда
	//		Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.УГМК_ЗаявкаНаАнализ") Тогда
	//			ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Номер,Проведен,ПометкаУдаления,Анализы,ОписаниеМеталла,ДокументОснование,Комментарий,КоличествоМест,ОбразцыС,ОбразцыПо,КоличествоМестДляОбразцов,ОбразцовСМеста,ПерваяЗаявка");//Касьянов (не заполнять комментарий и образцы)
	//			ЭтотОбъект.СписокОбразцов.Загрузить( Основание.СписокОбразцов.Выгрузить());
	//		ИначеЕсли ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.УГМК_РезультатАнализа") Тогда
	//			ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Номер,Проведен,ПометкаУдаления,Анализы,ОписаниеМеталла,ДокументОснование,Комментарий");
	//			ЭтотОбъект.СписокОбразцов.Загрузить( Основание.СписокОбразцов.Выгрузить());
	//		Иначе
	//			ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Номер,Проведен,ПометкаУдаления,Анализы,ОписаниеМеталла,ДокументОснование");
	//		КонецЕсли;
	//		
	//		Если ЗаполнятьАнализы тогда
	//			ЭтотОбъект.Анализы.Загрузить( Основание.Анализы.Выгрузить());
	//		КонецЕсли;
	//	Иначе
	//		ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Проведен,ПометкаУдаления,Номер,ДокументОснование");
	//	КонецЕсли; 
	//	
	//	ЭтотОбъект.ОписаниеМеталла.Загрузить( Основание.ОписаниеМеталла.Выгрузить());
	//	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	//	
	//иначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.УГМК_РезультатАнализа") Тогда
	//	
	//	Если ТипЗнч(ЭтотОбъект) <> Тип("ДокументОбъект.УГМК_СертификацияРезультат") Тогда
	//	
	//		ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Номер,Проведен,ПометкаУдаления,Анализы,ОписаниеМеталла,ДокументОснование");
	//		
	//		Если ЗаполнятьАнализы тогда
	//			ЭтотОбъект.Анализы.Загрузить( Основание.Анализы.Выгрузить());
	//		КонецЕсли;
	//	Иначе
	//		ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание,,"Ответственный,Дата,Номер,Проведен,ПометкаУдаления,ДокументОснование");
	//	КонецЕсли;
	//	
	//	ЭтотОбъект.ОписаниеМеталла.Загрузить( Основание.ОписаниеМеталла.Выгрузить());
	//	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	//	
	//иначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры") Тогда
	//	
	//	ЭтотОбъект.Номенклатура = Основание.Номенклатура;
	//	ЭтотОбъект.Организация = Основание.Организация;
	//	ЭтотОбъект.Подразделение = Основание.Подразделение;
	//	ЭтотОбъект.СерияНоменклатуры = Основание.СерияНоменклатуры;
	//	ЭтотОбъект.НормативныйДокумент = Основание.НормативныйДокумент;
	//	
	//	Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внешняя Тогда
	//		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.внешняя;
	//	Иначе
	//		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.внутренняя;
	//	КонецЕсли;
	//	
	//	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	//	
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктОтбораПробНоменклатуры") Тогда
	//
	//	ЭтотОбъект.Номенклатура        = Основание.Номенклатура;
	//	ЭтотОбъект.Организация         = Основание.Организация;
	//	ЭтотОбъект.Подразделение       = Основание.Подразделение;
	//	ЭтотОбъект.СерияНоменклатуры   = Основание.СерияНоменклатуры;
	//	ЭтотОбъект.НормативныйДокумент = Основание.НормативныйДокумент;
	//	
	//	Если Основание.ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации Тогда
	//		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.Внешняя;
	//	Иначе
	//		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.Внутренняя;
	//		// Берем первое подразделение из табличной части
	//		Если Основание.РаспределениеПоЛабораториям.Количество() > 0 Тогда
	//			ЭтотОбъект.Подразделение = Основание.РаспределениеПоЛабораториям[0].Подразделение;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	//	
	//ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
	//
	//	ЭтотОбъект.Номенклатура          = Основание.Владелец;
	//	ЭтотОбъект.СерияНоменклатуры     = Основание;
	//	ЭтотОбъект.Организация           = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	//	ЭтотОбъект.Подразделение         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	//	ЭтотОбъект.ВидОперации           = Перечисления.ВидыОперацийСертификацияНоменклатуры.Внутренняя;
	//	ЭтотОбъект.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.Сертификат;
	//	
	//ИначеЕсли ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") 
	//	  или ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") 
	//	  или ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") 
	//	  или ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_Плавка") Тогда
	//	ЭтотОбъект.УГМК_ПаспортПартии = Основание.Ссылка;
	//	
	//	Если (ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии"))и(ТипЗнч(ЭтотОбъект.Ссылка)=Тип("ДокументСсылка.УГМК_СертификацияРезультат")) Тогда
	//		//получаем формирование партии, из нее получаем партию плавки с годностью
	//		ДокументФормированиеПартии=ПолучитьДокументФормирванияПартии(Основание.Ссылка);
	//		Если (ДокументФормированиеПартии<>Неопределено)и(ДокументФормированиеПартии.Материалы.Количество() > 0) тогда
	//			ДокументГодностьПартии=ПолучитьДокументГодностьПартии(ДокументФормированиеПартии.Материалы[ 0].ПаспортПартии);
	//			Если ДокументГодностьПартии<>Неопределено Тогда
	//				ЗаполнитьЗначенияСвойств( ЭтотОбъект, ДокументГодностьПартии,,"УГМК_ПаспортПартии,Ответственный,Дата,Проведен,ПометкаУдаления,Номер,ДокументОснование");
	//				ЭтотОбъект.ОписаниеМеталла.Загрузить(ДокументГодностьПартии.ОписаниеМеталла.Выгрузить());
	//				ЭтотОбъект.Анализы.Загрузить(ДокументГодностьПартии.Анализы.Выгрузить());
	//				ЭтотОбъект.Нормативы.Загрузить(ДокументГодностьПартии.Нормативы.Выгрузить());
	//			КонецЕсли;
	//		КонецЕсли;
	//		//ОбработатьЗаполнение_РезультатАнализа( ЭтотОбъект, ДокументФормированиеПартии);
	//		//****
	//	Иначе
	//		ПоследняяЗаявка = ПолучитьПоследнююЗаявку( ЭтотОбъект.УГМК_ПаспортПартии);
	//		Если ЗначениеЗаполнено( ПоследняяЗаявка) тогда
	//			ОбработатьЗаполнение_РезультатАнализа( ЭтотОбъект, ПоследняяЗаявка, Ложь);
	//		иначе
	//			ЗаполнениеВыполнено = Ложь;
	//		КонецЕсли;
	//		
	//		ЭтотОбъект.ДокументОснование = Неопределено;
	//		Если (ТипЗнч(Основание)=Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК"))и(ТипЗнч(ЭтотОбъект.Ссылка)=Тип("ДокументСсылка.УГМК_СертификацияРезультат")) Тогда
	//			ЭтотОбъект.Авиатехприемка=Основание.Авиатехприемка;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.УГМК_ДокументФакт") Тогда
	//	Если Основание.Продукция.Количество() > 0 тогда
	//		ЭтотОбъект.УГМК_ПаспортПартии = Основание.Продукция[ 0].ПаспортПартииПродукции;
	//		
	//		ПоследняяЗаявка = ПолучитьПоследнююЗаявку( ЭтотОбъект.УГМК_ПаспортПартии);
	//		Если ЗначениеЗаполнено( ПоследняяЗаявка) тогда
	//			ОбработатьЗаполнение_РезультатАнализа( ЭтотОбъект, ПоследняяЗаявка, Ложь);
	//		иначе
	//			ЗаполнениеВыполнено = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//	ЕстьТаблицаПродукцияОУ = Истина;
	//иначе
	//	ЗаполнениеВыполнено = Ложь;
	//КонецЕсли;	
	//
	//Если (не ЗаполнениеВыполнено) и (ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК")) тогда
	//	ПерваяСтрокаПродукции = Неопределено;
	//	Если Основание.Продукция.Количество() > 0 тогда
	//		ПерваяСтрокаПродукции = Основание.Продукция[ 0];
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( Основание.ПродукцияПартии) тогда
	//		ЭтотОбъект.ПоСвойствам = Ложь;
	//		ЭтотОбъект.Номенклатура = Основание.ПродукцияПартии;
	//		ЭтотОбъект.ХарактеристикаНоменклатуры = Основание.ХарактеристикаПродукцииПартии;
	//	иначеЕсли ПерваяСтрокаПродукции <> Неопределено тогда
	//		ЭтотОбъект.ПоСвойствам = Ложь;
	//		ЭтотОбъект.Номенклатура = ПерваяСтрокаПродукции.Продукция;
	//		ЭтотОбъект.ХарактеристикаНоменклатуры = ПерваяСтрокаПродукции.ХарактеристикаПродукции;
	//	КонецЕсли;
	//	
	//	Если ПерваяСтрокаПродукции <> Неопределено тогда
	//		ЭтотОбъект.СерияНоменклатуры = ПерваяСтрокаПродукции.ЗаказВыпускаПродукции;
	//	КонецЕсли;
	//
	//	ХарактеристикаНоменклатурыВыбор = Неопределено;
	//	УГМК_ОперативныйУчетВызовСервера.СертификацияНоменклатураПриИзменении( ЭтотОбъект, ХарактеристикаНоменклатурыВыбор, Ложь);
	//иначеЕсли (не ЗаполнениеВыполнено) и (ТипЗнч(Основание) = Тип("ДокументСсылка.УГМК_ДокументФакт")) и (Основание.Продукция.Количество() > 0) тогда
	//	 ПерваяСтрокаПродукции = Основание.Продукция[ 0];
	//	 ЭтотОбъект.ПоСвойствам = ПерваяСтрокаПродукции.ПоСвойствамПродукции;
	//	 ЭтотОбъект.Номенклатура = ПерваяСтрокаПродукции.Продукция;
	//	 ЭтотОбъект.ХарактеристикаНоменклатуры = ПерваяСтрокаПродукции.ХарактеристикаПродукции;
	//	 ЭтотОбъект.СерияНоменклатуры = ПерваяСтрокаПродукции.ЗаказВыпускаПродукции;
	//	 ЭтотОбъект.МаркаСплава = ПерваяСтрокаПродукции.МаркаСплаваПродукции;
	//	 ЭтотОбъект.ГруппаПродукции = ПерваяСтрокаПродукции.ГруппаПродукцииПродукции;
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокументФормирванияПартии(ТекПартия)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_ДокументФакт.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт1
	             |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФакт1.ДокументОснование
	             |			И (УГМК_ДокументФакт1.Сторно)
	             |			И (НЕ УГМК_ДокументФакт1.ПометкаУдаления)
	             |ГДЕ
	             |	УГМК_ДокументФакт.Ссылка В
	             |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |				УГМК_ДокументФактТовары.Ссылка
	             |			ИЗ
	             |				Документ.УГМК_ДокументФакт.Товары КАК УГМК_ДокументФактТовары
	             |			ГДЕ
	             |				(УГМК_ДокументФактТовары.ПаспортПартииПродукции = &ПаспортПартииПродукции
	             |					ИЛИ УГМК_ДокументФактТовары.ПаспортПартии = &ПаспортПартииПродукции)
	             |		
	             |			ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |			ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |				УГМК_ДокументФактТовары.Ссылка
	             |			ИЗ
	             |				Документ.УГМК_ДокументФакт.Маркировка КАК УГМК_ДокументФактТовары
	             |			ГДЕ
	             |				УГМК_ДокументФактТовары.ПаспортПартии = &ПаспортПартииПродукции)
	             |	И НЕ ВЫБОР
	             |				КОГДА УГМК_ДокументФакт.Сторно
	             |					ТОГДА УГМК_ДокументФакт.Проведен
	             |				КОГДА УГМК_ДокументФакт1.Сторно
	             |					ТОГДА УГМК_ДокументФакт1.Проведен
	             |				ИНАЧЕ ЛОЖЬ
	             |			КОНЕЦ
	             |	И УГМК_ДокументФакт.Проведен
				 |	И УГМК_ДокументФакт.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ФормированиеЦеховойПартии)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_ДокументФакт.МоментВремени УБЫВ";
	Запрос.УстановитьПараметр("ПаспортПартииПродукции",ТекПартия);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат Выб.Ссылка;
	Иначе
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьДокументГодностьПартии(ТекПартия)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_СертификацияРезультат.Ссылка
	             |ИЗ
	             |	Документ.УГМК_СертификацияРезультат КАК УГМК_СертификацияРезультат
	             |ГДЕ
	             |	УГМК_СертификацияРезультат.УГМК_ПаспортПартии = &ТекПартия
	             |	И УГМК_СертификацияРезультат.Проведен
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_СертификацияРезультат.МоментВремени УБЫВ";
	Запрос.УстановитьПараметр("ТекПартия",ТекПартия);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат выб.Ссылка;
	иначе
		возврат неопределено;
	КонецЕсли;
КонецФункции
//&НаСервере
//Функция ПолучитьПредставлениеНорматива( ТекДанные)
//	Если ТекДанные.ПоказательНормаПолучена тогда
//		ПВХ = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры;
//		ФорматПоТочности = ФорматПоТочности( ТекДанные.Точность);
//		
//		Если ТекДанные.ПоказательУГМК_Остальное тогда
//			Норматив = "ост. ";
//		иначеЕсли ТекДанные.ПоказательУГМК_НеРегламентируется тогда
//			Норматив = "не регл. ";
//		иначе
//			Норматив = "";
//		КонецЕсли;
//			
//		Если ТекДанные.ВидРезультатаАнализа = ПВХ.Погрешность тогда
//			Если ЗначениеЗаполнено( ТекДанные.ПоказательМинЗначение) или ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда  
//				Норматив = Норматив + Формат( ТекДанные.ПоказательМинЗначение, ФорматПоТочности)+" (+/-) "+Формат( ТекДанные.ПоказательМаксЗначение, ФорматПоТочности);
//			КонецЕсли;
//		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХ.ЗначениеИзСписка тогда
//			Если ЗначениеЗаполнено( ТекДанные.ПоказательМинЗначение) или ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда  
//				Норматив = Норматив + "от "+Формат( ТекДанные.ПоказательМинЗначение, ФорматПоТочности)+" до "+Формат( ТекДанные.ПоказательМаксЗначение, ФорматПоТочности);
//			КонецЕсли;
//		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХ.Поддиапазон тогда
//			Если ЗначениеЗаполнено( ТекДанные.ПоказательМинЗначение) или ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда  
//				Норматив = Норматив + "диап. от "+Формат( ТекДанные.ПоказательМинЗначение, ФорматПоТочности)+" до "+Формат( ТекДанные.ПоказательМаксЗначение, ФорматПоТочности);
//			КонецЕсли;
//		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХ.ЧислоВИнтервале тогда
//			Если ЗначениеЗаполнено( ТекДанные.ПоказательМинЗначение) или ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда  
//				Норматив = Норматив + "от "+Формат( ТекДанные.ПоказательМинЗначение, ФорматПоТочности)+" до "+Формат( ТекДанные.ПоказательМаксЗначение, ФорматПоТочности);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено( ТекДанные.Точность) тогда
//			Норматив = Норматив + " ("+ТекДанные.Точность+")";
//		КонецЕсли;
//	иначе
//		Норматив = "Не задан";
//	КонецЕсли;
//	
//	Возврат( СокрЛП( Норматив));
//КонецФункции

&НаСервере
Функция ОтобратьИзМассиваПоТипу( НазначениеПараметраСплав, ТипЗ)
	Результат = Новый Массив;
	Для каждого Значение из НазначениеПараметраСплав цикл
		Если ТипЗнч( Значение) = ТипЗ тогда
			Результат.Добавить( Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Результат);
КонецФункции

//&НаСервере
//// 
//// Показатели - массив или список Показателей
//// 
//// КонтролироватьНорматив - аналитика по которой требуется получить норматив
//// 
//Функция ПолучитьНормативыНесколькихПоказателей( Показатели, КонтролироватьНорматив) Экспорт
//	НазначениеПараметраСтандарт = Новый Массив;
//	НазначениеПараметраСтандарт.Добавить( Неопределено);
//	НазначениеПараметраСтандарт.Добавить( КонтролироватьНорматив.НормативныйДокумент);
//	
//	НазначениеПараметраСплав = ПолучитьВозможныеНазначенияСплав( КонтролироватьНорматив.Номенклатура); 
//	
//	Запр = Новый Запрос;
//	Запр.УстановитьПараметр("ПоказательАнализа", Показатели);
//	Запр.УстановитьПараметр("НазначениеПараметраСплав", НазначениеПараметраСплав);
//	Запр.УстановитьПараметр("НазначениеПараметраСтандарт",НазначениеПараметраСтандарт);
//	Запр.УстановитьПараметр("Дата", КонтролироватьНорматив.Дата);
//	
//	Запр.УстановитьПараметр("Назначение_МаркаСплаваПроизводство", ОтобратьИзМассиваПоТипу( НазначениеПараметраСплав, Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство")));
//	Запр.УстановитьПараметр("Назначение_МаркиСплавов", ОтобратьИзМассиваПоТипу( НазначениеПараметраСплав, Тип("СправочникСсылка.СК_МаркиСплавов")));
//	Запр.УстановитьПараметр("Назначение_ВидыСплавов", ОтобратьИзМассиваПоТипу( НазначениеПараметраСплав, Тип("СправочникСсылка.СК_ВидыСплавов")));
//	
//	Запр.Текст = "ВЫБРАТЬ
//				 |	ВЫБОР
//				 |		КОГДА УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСтандарт = НЕОПРЕДЕЛЕНО
//				 |			ТОГДА 10
//				 |		ИНАЧЕ 100
//				 |	КОНЕЦ * ВЫБОР
//				 |		КОГДА УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСплав В (&Назначение_МаркаСплаваПроизводство)
//				 |			ТОГДА 7
//				 |		КОГДА УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСплав В (&Назначение_МаркиСплавов)
//				 |			ТОГДА 5
//				 |		КОГДА УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСплав В (&Назначение_ВидыСплавов)
//				 |			ТОГДА 3
//				 |		ИНАЧЕ 1
//				 |	КОНЕЦ * ВЫБОР
//				 |		КОГДА УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСплав.ЭтоГруппа
//				 |			ТОГДА 0.1
//				 |		ИНАЧЕ 1
//				 |	КОНЕЦ КАК Приоритет,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСтандарт,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.НазначениеПараметраСплав,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.ПоказательАнализа КАК ПоказательАнализа,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.ТипРазмера,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.Диапазон1,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.Диапазон2,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.Диапазон3,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.МинЗначение,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.МаксЗначение,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.ЕдиницаИзмерения,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.УГМК_Остальное,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.УГМК_НеРегламентируется,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.Точность,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.ВидСравнения,
//				 |	УГМК_НормативныеЗначенияПараметровСрезПоследних.ПоказательАнализа.ВидРезультатаАнализа КАК ВидРезультатаАнализа
//				 |ИЗ
//				 |	РегистрСведений.УГМК_НормативныеЗначенияПараметров.СрезПоследних(
//				 |			&Дата,
//				 |			ПоказательАнализа В (&ПоказательАнализа)
//				 |				И НазначениеПараметраСплав В ИЕРАРХИИ (&НазначениеПараметраСплав)
//				 |				И НазначениеПараметраСтандарт В ИЕРАРХИИ (&НазначениеПараметраСтандарт)) КАК УГМК_НормативныеЗначенияПараметровСрезПоследних
//				 |
//				 |УПОРЯДОЧИТЬ ПО
//				 |	ПоказательАнализа,
//				 |	Приоритет УБЫВ
//				 |ИТОГИ ПО
//				 |	ПоказательАнализа";
//				 
//				 
//	Результат = Новый Соответствие;
//	
//	РезПоказатель = Запр.Выполнить().Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока РезПоказатель.Следующий() цикл
//		Рез = РезПоказатель.Выбрать( ОбходРезультатаЗапроса.Прямой);
//		ТекДанные = Новый Структура("ПоказательНормаПолучена,ПоказательМинЗначение,ПоказательМаксЗначение,ПоказательУГМК_Остальное,ПоказательУГМК_НеРегламентируется,ВидСравнения,Точность,ВидРезультатаАнализа,Норматив");
//		
//		Если Рез.Следующий() тогда
//			ТекДанные.ПоказательНормаПолучена = Истина;
//			ТекДанные.ПоказательМинЗначение = Рез.МинЗначение;
//			ТекДанные.ПоказательМаксЗначение = Рез.МаксЗначение;
//			ТекДанные.ПоказательУГМК_Остальное = Рез.УГМК_Остальное;
//			ТекДанные.ПоказательУГМК_НеРегламентируется = Рез.УГМК_НеРегламентируется;
//			ТекДанные.ВидСравнения = Рез.ВидСравнения;
//			ТекДанные.Точность = Рез.Точность;
//			ТекДанные.ВидРезультатаАнализа = Рез.ВидРезультатаАнализа;
//		КонецЕсли;
//		
//		ТекДанные.Норматив = ПолучитьПредставлениеНорматива( ТекДанные);
//		
//		Результат.Вставить( РезПоказатель.ПоказательАнализа, ТекДанные); 
//	КонецЦикла;
//	
//	Возврат( Результат);
//КонецФункции

&НаСервере
Функция ПолучитьВозможныеНазначенияСплав( Значение) Экспорт
	ВозможныеЗначения = Новый Массив;
	
	ВозможныеЗначения.Добавить( Значение);
	МаркаСплава = УГМК_ОперативныйУчет.ПолучитьМаркуСплаваПоЗначению( Значение);
	Если ЗначениеЗаполнено( МаркаСплава) тогда
		Если ВозможныеЗначения.Найти( МаркаСплава) = Неопределено тогда
			ВозможныеЗначения.Добавить( МаркаСплава);
		КонецЕсли;
		
		ВозможныеЗначения.Добавить( МаркаСплава.ВидСплава);
		Если ЗначениеЗаполнено( МаркаСплава.Родитель) тогда
			ВозможныеЗначения.Добавить( МаркаСплава.Родитель);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( ВозможныеЗначения);
КонецФункции
	
&НаСервере
Функция ПолучитьПогрешностьМетодаИсследования( ПараметрыПолучения) Экспорт
	Перем Результат, РезультатЗ, Запр;
	
	Если ЗначениеЗаполнено( ПараметрыПолучения.ВидСравнения) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата",ПараметрыПолучения.Дата);
	Если ТипЗнч( ПараметрыПолучения.МетодИсследования) = Тип("СправочникСсылка.УГМК_МетодыПроведенияИсследований") тогда
		Запр.УстановитьПараметр("МетодИсследования",ПараметрыПолучения.МетодИсследования.МетодИсследования);
	иначе
		Запр.УстановитьПараметр("МетодИсследования",ПараметрыПолучения.МетодИсследования);
	КонецЕсли;
	
	Запр.УстановитьПараметр("НазначениеПараметраСплав", ПолучитьВозможныеНазначенияСплав( ПараметрыПолучения.НазначениеПараметраСплав));
	Запр.УстановитьПараметр("ПоказательАнализа",ПараметрыПолучения.ПоказательАнализа);
	Запр.УстановитьПараметр("Значение",ПараметрыПолучения.Значение);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	             |	ВЫБОР
	             |		КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав = НЕОПРЕДЕЛЕНО
	             |			ТОГДА 0
	             |		КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав ССЫЛКА Справочник.СК_ВидыСплавов
	             |			ТОГДА 5
	             |		КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав ССЫЛКА Справочник.СК_МаркиСплавов
	             |			ТОГДА ВЫБОР
	             |					КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав.ЭтоГруппа
	             |						ТОГДА 10
	             |					ИНАЧЕ 15
	             |				КОНЕЦ
	             |		КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав ССЫЛКА Справочник.УГМК_МаркаСплаваПроизводство
	             |			ТОГДА 20
	             |		ИНАЧЕ -10000
	             |	КОНЕЦ КАК приоритет,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.Период,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.МетодИсследования,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.НазначениеПараметраСплав,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.ПоказательАнализа,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.Значение,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.Формула,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.ИмяПараметра,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.ТипУказанияПогрешности,
	             |	УГМК_ПогрешностиИсследованийСрезПоследних.Точность
	             |ИЗ
	             |	РегистрСведений.УГМК_ПогрешностиИсследований.СрезПоследних(
	             |			&Дата,
	             |			МетодИсследования = &МетодИсследования
	             |				И НазначениеПараметраСплав В иерархии (&НазначениеПараметраСплав)
	             |				И ПоказательАнализа = &ПоказательАнализа) КАК УГМК_ПогрешностиИсследованийСрезПоследних
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 0
	             |					И (&Значение МЕЖДУ УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение И УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение)
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 1
	             |					И (&Значение > УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение
	             |						И &Значение <= УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение)
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 2
	             |					И (&Значение > УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение
	             |						И &Значение < УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение)
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 3
	             |					И (&Значение >= УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение
	             |						И &Значение < УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение)
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 4
	             |					И &Значение > УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 5
	             |					И &Значение < УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 6
	             |					И &Значение <= УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МаксЗначение
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.ТипДиапазона = 7
	             |					И &Значение >= УГМК_ПогрешностиИсследованийСрезПоследних.Диапазон.МинЗначение
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	приоритет УБЫВ";
				 
	Результат = Неопределено;
	РезультатЗ = Запр.Выполнить().Выбрать();
	Если РезультатЗ.Следующий() тогда
		СтруктураД = Новый Структура("Значение,Формула,ИмяПараметра,ТипУказанияПогрешности,Точность");
		
		ЗаполнитьЗначенияСвойств( СтруктураД, РезультатЗ);
		
		Результат = УГМК_ОперативныйУчет.РассчитатьЗначениеПогрешности( СтруктураД, ПараметрыПолучения.Значение);
	КонецЕсли;
	Возврат( Результат);
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоАнализам( Знач ЗаявкаНаАнализ, Знач Партия, Знач ВыводитьВсеОбразцы, Знач ГруппироватьПоНазначению = Истина) Экспорт
	СсылкаЗаявка = ЗаявкаНаАнализ;
	УсловиеПоЗаявке = " И Заявка = &Ссылка";
	УсловиеПоЗаявкеДок = " И Док.Ссылка = &Ссылка";
	Если НЕ ЗначениеЗаполнено( СсылкаЗаявка) тогда
		СсылкаЗаявка = Документы.УГМК_ЗаявкаНаАнализ.ПолучитьСсылку();
		УсловиеПоЗаявке = "";
		УсловиеПоЗаявкеДок = "";
	КонецЕсли;

	Запр = Новый Запрос;
	Запр.УстановитьПараметр( "Ссылка", СсылкаЗаявка);
	Запр.УстановитьПараметр( "ВыводитьВсеОбразцы", ВыводитьВсеОбразцы);
	Запр.УстановитьПараметр( "УГМК_ПаспортПартии", Партия);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	УГМК_РезультатАнализаАнализы.Ссылка,
				|	УГМК_РезультатАнализаАнализы.Ссылка как Протокол,
				|	УГМК_РезультатАнализаАнализы.ПоказательАнализа,
				|	УГМК_РезультатАнализаАнализы.НомерОбразца,
				|	УГМК_РезультатАнализаАнализы.НормативВидСравнения,
				|	УГМК_РезультатАнализаАнализы.НормативКлючОтбора,
				|	УГМК_РезультатАнализаАнализы.НормативЗначение,
				|	УГМК_РезультатАнализаАнализы.НормативЗначениеНачальное,
				|	УГМК_РезультатАнализаАнализы.НормативЗначениеКонечное,
				|	УГМК_РезультатАнализаАнализы.НормативФормат,
				|	УГМК_РезультатАнализаАнализы.НормативЗнаковПослеЗапятой,
				|	УГМК_РезультатАнализаАнализы.НормативПредставление поместить НормативыДокумента
				|ИЗ
				|	Документ.УГМК_РезультатАнализа.Анализы КАК УГМК_РезультатАнализаАнализы
				|ГДЕ
				|	УГМК_РезультатАнализаАнализы.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	УГМК_РезультатАнализаАнализы.Ссылка,
				|	УГМК_РезультатАнализаАнализы.Протокол,
				|	УГМК_РезультатАнализаАнализы.ПоказательАнализа,
				|	УГМК_РезультатАнализаАнализы.НомерОбразца,
				|	УГМК_РезультатАнализаАнализы.НормативВидСравнения,
				|	УГМК_РезультатАнализаАнализы.НормативКлючОтбора,
				|	УГМК_РезультатАнализаАнализы.НормативЗначение,
				|	УГМК_РезультатАнализаАнализы.НормативЗначениеНачальное,
				|	УГМК_РезультатАнализаАнализы.НормативЗначениеКонечное,
				|	УГМК_РезультатАнализаАнализы.НормативФормат,
				|	УГМК_РезультатАнализаАнализы.НормативЗнаковПослеЗапятой,
				|	УГМК_РезультатАнализаАнализы.НормативПредставление
				|ИЗ
				|	Документ.УГМК_СертификацияРезультат.Анализы КАК УГМК_РезультатАнализаАнализы
				|ГДЕ
				|	УГМК_РезультатАнализаАнализы.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
				|
				|;
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				 |	УГМК_РезультатыАнализовСрезПоследних.Период КАК Период, 
				 |	УГМК_РезультатыАнализовСрезПоследних.Регистратор.НормативныйДокумент как НормативныйДокумент,
				 |	УГМК_РезультатыАнализовСрезПоследних.Номенклатура поместить ПоследняяНоменклатура
				 |ИЗ
				 |	РегистрСведений.УГМК_РезультатыАнализов.СрезПоследних(, УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+УсловиеПоЗаявке+") КАК УГМК_РезультатыАнализовСрезПоследних
				 |
				 |УПОРЯДОЧИТЬ ПО
				 |	Период УБЫВ
				 |
				 |;
	             |ВЫБРАТЬ
				 |	Док.Ссылка КАК Ссылка,
				 |	Док.Ссылка.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии,
				 |	Док.НомерСтроки КАК НомерСтроки,
				 |	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				 |	Док.ПоказательАнализа КАК ПоказательАнализа,
				|	Док.НормативВидСравнения,
				|	Док.НормативКлючОтбора,
				|	Док.НормативЗначение,
				|	Док.НормативЗначениеНачальное,
				|	Док.НормативЗначениеКонечное,
				|	Док.НормативФормат,
				|	Док.НормативЗнаковПослеЗапятой,
				|	Док.НормативПредставление
				 |ПОМЕСТИТЬ ДанныеЗаявки
				 |ИЗ
				 |	Документ.УГМК_ЗаявкаНаАнализ.Анализы КАК Док
				 |ГДЕ
				 |	Док.Ссылка.Проведен и Док.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+УсловиеПоЗаявкеДок+"
				 |;
				 |
				 |ВЫБРАТЬ
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК СтрокаЗаявки,
	             |	ВЫБОР
	             |		КОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА 1000
	             |		ИНАЧЕ УГМК_ЗаявкаНаАнализАнализы.НомерСтроки
	             |	КОНЕЦ КАК НомерСтрокиПоказателя,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа
	             |	КОНЕЦ КАК ПоказательАнализа,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_ТипАнализа
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_ТипАнализа
	             |	КОНЕЦ КАК УГМК_ТипАнализа,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.УГМК_НазначениеАнализа.УГМК_Сортировка
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа.УГМК_Сортировка
	             |	КОНЕЦ КАК УГМК_НазначениеАнализаСортировка,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.УГМК_НазначениеАнализа
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа
	             |	КОНЕЦ КАК УГМК_НазначениеАнализа,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ЗначениеПоказателя ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ЗначениеПоказателя
	             |	КОНЕЦ КАК ЗначениеПоказателя,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПогрешностьИсследования ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПогрешностьИсследования
	             |	КОНЕЦ КАК ПогрешностьИсследования,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.МинЗначениеПоказателя ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.МинЗначениеПоказателя
	             |	КОНЕЦ КАК МинЗначениеПоказателя,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ВидСравнения ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ВидСравнения
	             |	КОНЕЦ КАК ВидСравнения,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.МаксЗначениеПоказателя ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.МаксЗначениеПоказателя
	             |	КОНЕЦ КАК МаксЗначениеПоказателя,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативу ЕСТЬ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативу
	             |	КОНЕЦ КАК СоответствуетНормативу,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативуПогрешность ЕСТЬ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативуПогрешность
	             |	КОНЕЦ КАК СоответствуетНормативуПогрешность,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Точность ЕСТЬ NULL 
	             |			ТОГДА 0
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Точность
	             |	КОНЕЦ КАК Точность,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ЕдиницаИзмерения
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ЕдиницаИзмерения
	             |	КОНЕЦ КАК ЕдиницаИзмерения,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.Номенклатура
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Номенклатура
	             |	КОНЕЦ КАК Номенклатура,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.ВидРезультатаАнализа
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.ВидРезультатаАнализа
	             |	КОНЕЦ КАК ВидРезультатаАнализа,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_ДляСортировки
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_ДляСортировки
	             |	КОНЕЦ КАК УГМК_ДляСортировки,
	             |	ВЫБОР
	             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.НомерОбразца ЕСТЬ NULL 
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.НомерОбразца
	             |	КОНЕЦ КАК НомерОбразца,
				|	НормативыДокумента.Ссылка как НормативСсылка,
				|	НормативыДокумента.НормативВидСравнения,
				|	НормативыДокумента.НормативКлючОтбора,
				|	НормативыДокумента.НормативЗначение,
				|	НормативыДокумента.НормативЗначениеНачальное,
				|	НормативыДокумента.НормативЗначениеКонечное,
				|	НормативыДокумента.НормативФормат,
				|	НормативыДокумента.НормативЗнаковПослеЗапятой,
				|	ВЫБОР КОГДА НормативыДокумента.НормативПредставление ЕСТЬ NULL  
				|		ТОГДА УГМК_ЗаявкаНаАнализАнализы.НормативПредставление 
				|		ИНАЧЕ НормативыДокумента.НормативПредставление КОНЕЦ как НормативПредставление
	             |ИЗ
	             |	РегистрСведений.УГМК_РезультатыАнализов.СрезПоследних(, (УГМК_ПаспортПартии = &УГМК_ПаспортПартии) И 
	             |															(Номенклатура в (Выбрать ПоследняяНоменклатура.Номенклатура из ПоследняяНоменклатура как ПоследняяНоменклатура))
	             |															"+УсловиеПоЗаявке+") КАК УГМК_РезультатыАнализовСрезПоследних
				 |		ЛЕВОЕ СОЕДИНЕНИЕ НормативыДокумента 
				 |		ПО УГМК_РезультатыАнализовСрезПоследних.Регистратор = НормативыДокумента.Ссылка 
				 |			и УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа = НормативыДокумента.ПоказательАнализа 
				 |			и УГМК_РезультатыАнализовСрезПоследних.Протокол = НормативыДокумента.Протокол 
				 |			и ((УГМК_РезультатыАнализовСрезПоследних.НомерОбразца = НормативыДокумента.НомерОбразца) или ((УГМК_РезультатыАнализовСрезПоследних.НомерОбразца = 0) и (НормативыДокумента.НомерОбразца = 1))) 
	             |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				 |	ДанныеЗаявки.Ссылка,
				 |	ДанныеЗаявки.УГМК_ПаспортПартии,
				 |	ДанныеЗаявки.НомерСтроки,
				 |	ДанныеЗаявки.ЕдиницаИзмерения,
				 |	ДанныеЗаявки.ПоказательАнализа,
				|	ДанныеЗаявки.НормативВидСравнения,
				|	ДанныеЗаявки.НормативКлючОтбора,
				|	ДанныеЗаявки.НормативЗначение,
				|	ДанныеЗаявки.НормативЗначениеНачальное,
				|	ДанныеЗаявки.НормативЗначениеКонечное,
				|	ДанныеЗаявки.НормативФормат,
				|	ДанныеЗаявки.НормативЗнаковПослеЗапятой,
				|	ДанныеЗаявки.НормативПредставление
				 |ИЗ
				 |	ДанныеЗаявки КАК ДанныеЗаявки
				 |ГДЕ
				 |	(ДанныеЗаявки.ПоказательАнализа, ДанныеЗаявки.НомерСтроки) В
				 |			(ВЫБРАТЬ
				 |				ДанныеЗаявки.ПоказательАнализа,
				 |				МАКСИМУМ(ДанныеЗаявки.НомерСтроки)
				 |			ИЗ
				 |				ДанныеЗаявки КАК ДанныеЗаявки
				 |			СГРУППИРОВАТЬ ПО
				 |						ДанныеЗаявки.ПоказательАнализа)) КАК УГМК_ЗаявкаНаАнализАнализы
	             |		ПО УГМК_РезультатыАнализовСрезПоследних.УГМК_ПаспортПартии = УГМК_ЗаявкаНаАнализАнализы.УГМК_ПаспортПартии
	             |			И УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа = УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ВЫБОР
	             |					КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура = УГМК_ЗаявкаНаАнализАнализы.Ссылка.Номенклатура
	             |						ТОГДА ИСТИНА
	             |					ИНАЧЕ ЛОЖЬ
	             |				КОНЕЦ
	             |		КОНЕЦ
	             |	И ВЫБОР
	             |			КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			КОГДА &ВыводитьВсеОбразцы
	             |				ТОГДА ВЫБОР
	             |						КОГДА УГМК_РезультатыАнализовСрезПоследних.НомерОбразца > 0
	             |							ТОГДА ИСТИНА
	             |						ИНАЧЕ ЛОЖЬ
	             |					КОНЕЦ
	             |			ИНАЧЕ ВЫБОР
	             |					КОГДА УГМК_РезультатыАнализовСрезПоследних.НомерОбразца <= 0
	             |						ТОГДА ИСТИНА
	             |					ИНАЧЕ ЛОЖЬ
	             |				КОНЕЦ
	             |		КОНЕЦ";
				 
	
	
	СтрИтоги = "";
	Если ГруппироватьПоНазначению тогда
		СтрИтоги = СтрИтоги + ",УГМК_НазначениеАнализа";
	КонецЕсли;
	
	ВыводитьВсеОбразцы = Истина;
	Если ВыводитьВсеОбразцы тогда
		СтрИтоги = СтрИтоги + ",ПоказательАнализа";
	КонецЕсли;
	
	Если ЗначениеЗаполнено( СтрИтоги) тогда
		Запр.Текст = Запр.Текст + " ИТОГИ ПО " + Сред( СтрИтоги, 2); 
	КонецЕсли;
	
	ДеревоЗ = Запр.Выполнить().Выгрузить( ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоЗ.Колонки.Добавить("Группировка", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 50));
	ДеревоЗ.Колонки.Добавить("ПредставлениеРезультата", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 100));
	ДеревоЗ.Колонки.Добавить("ЗначениеРезультата", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 35));
	ДеревоЗ.Колонки.Добавить("УбратьВидимостьКолонок",  Новый ОписаниеТипов("Булево"));
	ДеревоЗ.Колонки.Добавить("ЦветРезультатТекст", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 1));
	
	Если ГруппироватьПоНазначению тогда 
		Для каждого СтрокаН из ДеревоЗ.Строки цикл
			//СтрокаН.Группировка = Строка( СтрокаН.УГМК_НазначениеАнализа);
			СтрокаН.ПредставлениеРезультата = Строка( СтрокаН.УГМК_НазначениеАнализа);
			СтрокаН.СоответствуетНормативуПогрешность = Истина;
			СтрокаН.УбратьВидимостьКолонок = Истина;
			ПерваяСтрока = Истина;
			Для каждого СтрокаД из СтрокаН.Строки цикл
				СтрокаД.Группировка = Строка( СтрокаД.ПоказательАнализа);
				СтрокаД.ЦветРезультатТекст = 1; // Синий
				СтрокаД.СоответствуетНормативуПогрешность = Истина;
				СтрокаН.УГМК_НазначениеАнализаСортировка = СтрокаД.УГМК_НазначениеАнализаСортировка;
				ПерваяСтрока_1 = Истина;
				Для каждого СтрокаД_1 из СтрокаД.Строки цикл
					СтрокаД_1.Группировка = Формат( СтрокаД_1.НомерОбразца, "");
					СтрокаД_1.ЦветРезультатТекст = ?( СтрокаД_1.СоответствуетНормативу, 0, 2); // Черный или Красный
					СтрокаД_1.ПредставлениеРезультата = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( СтрокаД_1.ВидРезультатаАнализа, СтрокаД_1.ВидСравнения, СтрокаД_1.ЗначениеПоказателя, СтрокаД_1.МинЗначениеПоказателя, СтрокаД_1.МаксЗначениеПоказателя, СтрокаД_1.ПогрешностьИсследования, 0, Неопределено, Истина);
					Если ЗначениеЗаполнено( СтрокаД_1.ПогрешностьИсследования) тогда
						СтрокаД_1.ЗначениеРезультата = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( СтрокаД_1.ВидРезультатаАнализа, СтрокаД_1.ВидСравнения, СтрокаД_1.ЗначениеПоказателя, СтрокаД_1.МинЗначениеПоказателя, СтрокаД_1.МаксЗначениеПоказателя, 0, 0, Неопределено, Истина);
					КонецЕсли;
					Если ПерваяСтрока_1 тогда
						ПерваяСтрока_1 = Ложь;
						СтрокаД.ПредставлениеРезультата = "["+СтрокаД_1.НормативПредставление+"]";
						СтрокаД.НомерСтрокиПоказателя = СтрокаД_1.НомерСтрокиПоказателя;
						СтрокаД.УГМК_НазначениеАнализаСортировка = СтрокаД_1.УГМК_НазначениеАнализаСортировка;
					КонецЕсли;
					Если ПерваяСтрока тогда
						ПерваяСтрока = Ложь;
						СтрокаН.УГМК_НазначениеАнализаСортировка = СтрокаД_1.УГМК_НазначениеАнализаСортировка;
						//СтрокаН.Группировка = Строка( СтрокаД_1.Номенклатура) + " (" +СтрокаН.Группировка+")";
						СтрокаН.ПредставлениеРезультата = Строка( СтрокаД_1.Номенклатура) + " (" +СтрокаН.ПредставлениеРезультата+")";
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	иначе
		Для каждого СтрокаД из ДеревоЗ.Строки цикл
			СтрокаД.Группировка = Строка( СтрокаД.ПоказательАнализа);
			СтрокаД.ЦветРезультатТекст = 1; // Синий
			СтрокаД.СоответствуетНормативуПогрешность = Истина;
			ПерваяСтрока = Истина;
			Для каждого СтрокаД_1 из СтрокаД.Строки цикл
				СтрокаД_1.Группировка = Формат( СтрокаД_1.НомерОбразца, "");
				СтрокаД_1.ЦветРезультатТекст = ?( СтрокаД_1.СоответствуетНормативу, 0, 2); // Черный или Красный
				СтрокаД_1.ПредставлениеРезультата = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( СтрокаД_1.ВидРезультатаАнализа, СтрокаД_1.ВидСравнения, СтрокаД_1.ЗначениеПоказателя, СтрокаД_1.МинЗначениеПоказателя, СтрокаД_1.МаксЗначениеПоказателя, СтрокаД_1.ПогрешностьИсследования, 0, Неопределено, Истина);
				Если ЗначениеЗаполнено( СтрокаД_1.ПогрешностьИсследования) тогда
					СтрокаД_1.ЗначениеРезультата = СтрокаД_1.ЗначениеПоказателя;
				КонецЕсли;
				Если ПерваяСтрока тогда
					ПерваяСтрока = Ложь;
					СтрокаД.ПредставлениеРезультата = "["+СтрокаД_1.НормативПредставление+"]";
					СтрокаД.НомерСтрокиПоказателя = СтрокаД_1.НомерСтрокиПоказателя;
					СтрокаД.УГМК_НазначениеАнализаСортировка = СтрокаД_1.УГМК_НазначениеАнализаСортировка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДеревоЗ.Строки.Сортировать("УГМК_НазначениеАнализаСортировка,УГМК_ТипАнализа,НомерСтрокиПоказателя,УГМК_ДляСортировки,ПоказательАнализа,НомерОбразца",Истина);
	
	Возврат( ДеревоЗ);
КонецФункции

Функция НомераОбразцовЗаявок( НомераОбразцов, Выборка1)
	Отбор = Новый Структура("Номенклатура, СерияНоменклатуры, НормативныйДокумент, УГМК_НазначениеАнализа");
	ЗаполнитьЗначенияСвойств( Отбор, Выборка1);
	СтрокиЗаявок = НомераОбразцов.НайтиСтроки( Отбор);
	Стр = "";
	
	Для каждого Строка из СтрокиЗаявок цикл
		Стр = Стр+" "+?(Строка.Проведен, "", "*");
		Если Строка.РазбитьПоМестам тогда
			Стр = Стр + Строка( Строка.КоличествоМестДляОбразцов)+" ("+Строка( Строка.ОбразцовСМеста)+")";
		иначе
			Если Строка.ОбразцыС = Строка.ОбразцыПо тогда
				Стр = Стр + Строка( Строка.ОбразцыС);
			иначе
				Стр = Стр + Строка( Строка.ОбразцыС) +"-"+ Строка( Строка.ОбразцыПо);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( СокрЛП( Стр));
КонецФункции

&НаСервере
Функция ПартияГодна(ТекПартия)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_РезультатыАнализовСрезПоследних.УГМК_ПаспортПартии
	             |ИЗ
	             |	РегистрСведений.УГМК_РезультатыАнализов.СрезПоследних КАК УГМК_РезультатыАнализовСрезПоследних
	             |ГДЕ
	             |	УГМК_РезультатыАнализовСрезПоследних.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
	             |	И (УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа = &Годен
	             |			ИЛИ УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа = &СоответствуетТП)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_РезультатыАнализовСрезПоследних.УГМК_ПаспортПартии";
	Запрос.УстановитьПараметр("УГМК_ПаспортПартии",ТекПартия);
	Запрос.УстановитьПараметр("Годен",УГМК_СлужебныеФункции.ПолучитьНастройку("НазначениеАнализа_Годен"));
	Запрос.УстановитьПараметр("СоответствуетТП",УГМК_СлужебныеФункции.ПолучитьНастройку("НазначениеАнализа_СоответствуетТП"));
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат Истина;
	Иначе
		возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПолучитьПоследнююГоднуюПартию(ТекПартия,ПоследняяГоднаяПартия)
	Если ПартияГодна(ТекПартия) Тогда
		ПоследняяГоднаяПартия = ТекПартия;
		возврат;
	КонецЕсли;
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ИсходныеПартииСрезПоследних.Исходная КАК Партия
	             |ИЗ
	             |	РегистрСведений.УГМК_ИсходныеПартии.СрезПоследних(
	             |			,
	             |			Образована = &ТекПартия
	             |				И НЕ Подчиненные) КАК УГМК_ИсходныеПартииСрезПоследних
	             |ГДЕ
	             |	УГМК_ИсходныеПартииСрезПоследних.Действует
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ИсходныеПартииСрезПоследних.Исходная";
	Запрос.УстановитьПараметр("ТекПартия",ТекПартия);
	Выб=Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ПолучитьПоследнююГоднуюПартию(Выб.Партия,ПоследняяГоднаяПартия);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокИсходныхПартий(ТекПартия,спПартий) экспорт
	//Если ПартияГодна(ТекПартия) Тогда
	//	ПоследняяГоднаяПартия = ТекПартия;
	//	возврат;
	//КонецЕсли;
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ИсходныеПартииСрезПоследних.Исходная КАК Партия
	             |ИЗ
	             |	РегистрСведений.УГМК_ИсходныеПартии.СрезПоследних(
	             |			,
	             |			Образована = &ТекПартия
	             |				И НЕ Подчиненные) КАК УГМК_ИсходныеПартииСрезПоследних
	             |ГДЕ
	             |	УГМК_ИсходныеПартииСрезПоследних.Действует
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ИсходныеПартииСрезПоследних.Исходная";
	Запрос.УстановитьПараметр("ТекПартия",ТекПартия);
	Выб=Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если спПартий.НайтиПоЗначению( Выб.Партия) = Неопределено тогда 
			спПартий.Добавить(Выб.Партия);
			ПолучитьСписокИсходныхПартий(Выб.Партия,спПартий);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ГодностьПартииНеСоотв(Партия)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ЗначенияСвойствПартий.Значение
	             |ИЗ
	             |	РегистрСведений.УГМК_ЗначенияСвойствПартий КАК УГМК_ЗначенияСвойствПартий
	             |ГДЕ
	             |	УГМК_ЗначенияСвойствПартий.Объект = &Объект
	             |	И УГМК_ЗначенияСвойствПартий.Свойство = &Свойство
	             |	И УГМК_ЗначенияСвойствПартий.Значение = &Значение";
	Запрос.УстановитьПараметр("Объект",Партия);
	Запрос.УстановитьПараметр("Свойство",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_РезультатСертификации"));
	Запрос.УстановитьПараметр("Значение",Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеСоответствует);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат истина;
	иначе
		возврат ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличныйДокументСАнализами( ЗаявкаНаАнализ, Партия, РезультатОтчет, Макет = Неопределено) Экспорт
	// ОЦММобильная
	//Если Макет = Неопределено тогда
	//	Макет = ПолучитьОбщийМакет("УГМК_МакетРезультатыАнализов");
	//КонецЕсли;
	//
	//Настройка_ПоказыватьВсеАнализыОкругленные=УГМК_СлужебныеФункции.ПолучитьНастройку("Настройка_ПоказыватьВсеАнализыОкругленные");
	//Настройка_ПоказыватьПоГодностиАнализыОкругленные=УГМК_СлужебныеФункции.ПолучитьНастройку("Настройка_ПоказыватьПоГодностиАнализыОкругленные");
	//
	//РезультатОтчет.Очистить();
	//
	//СсылкаЗаявка = ЗаявкаНаАнализ;
	//УсловиеПоЗаявке = " И Заявка = &Ссылка";
	//УсловиеПоЗаявкеДок = " И Док.Ссылка = &Ссылка";
	//УсловиеСоединения = "";
	//Если НЕ ЗначениеЗаполнено( СсылкаЗаявка) тогда
	//	СсылкаЗаявка = Документы.УГМК_ЗаявкаНаАнализ.ПолучитьСсылку();
	//	УсловиеПоЗаявке = "";
	//	УсловиеПоЗаявкеДок = "";
	//	УсловиеСоединения = " и УГМК_РезультатыАнализовСрезПоследних.Регистратор.ДокументОснование = УГМК_ЗаявкаНаАнализАнализы.Ссылка";
	//	//УсловиеСоединения = " И УГМК_РезультатыАнализовСрезПоследних.Номенклатура = УГМК_ЗаявкаНаАнализАнализы.Номенклатура
	//	//			 		|	И УГМК_РезультатыАнализовСрезПоследних.СерияНоменклатуры = УГМК_ЗаявкаНаАнализАнализы.СерияНоменклатуры";
	//КонецЕсли;
	//
	//Настройка_ПоказыватьТолькоГодные=УГМК_СлужебныеФункции.ПолучитьНастройку("Настройка_ПоказыватьТолькоГодные");
	//ЭтоПартияНеСоотв=ГодностьПартииНеСоотв(Партия);
	//
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр( "Ссылка", СсылкаЗаявка);
	//Запр.УстановитьПараметр( "УГМК_ПаспортПартии", Партия);
	//
	//////Получим последнюю годную партию исходную, если текущая не годна
	////ПоследняяГоднаяПартия=неопределено;
	////ПолучитьПоследнююГоднуюПартию(Партия,ПоследняяГоднаяПартия);
	////ВыводимПоПоследнейГоднойПартии=Истина;
	////Если ПоследняяГоднаяПартия=Партия или ПоследняяГоднаяПартия=неопределено Тогда
	////	ВыводимПоПоследнейГоднойПартии=Ложь;
	////Иначе
	////	Запр.УстановитьПараметр( "УГМК_ПаспортПартии_ПосленяяГодная", ПоследняяГоднаяПартия);
	////КонецЕсли;
	//////****
	//
	//УсловиеПоНазначению = "";
	//УсловиеПоказыватьТолькоДляГодных="";
	//СостоянияГодности = УГМК_ОбщегоНазначенияККСервер.ПолучитьСписокНазначенийАнализовПоРезультатамВСертификации();
	//Ном = 1;
	//Для каждого Состояние из СостоянияГодности цикл
	//	ИмяПараметра = "НазначениеАнализа"+Строка( Ном);
	//	Ном = Ном + 1;
	//	Запр.УстановитьПараметр( ИмяПараметра, Состояние.Значение);
	//	УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( УсловиеПоНазначению, " ИЛИ ");
	//	УсловиеПоНазначению = УсловиеПоНазначению + " УГМК_НазначениеАнализа = &"+ИмяПараметра;
	//КонецЦикла;
	//Если ПустаяСтрока( УсловиеПоНазначению) тогда
	//	УсловиеПоНазначению = "ИСТИНА";
	//КонецЕсли;
	//
	//спПартий=Новый СписокЗначений;
	//ПолучитьСписокИсходныхПартий(Партия,спПартий);
	//спПартийИли="";
	//спПартийИли1="";
	//спПартийИли2="";
	//Если спПартий.Количество()>0 и Настройка_ПоказыватьТолькоГодные<>истина Тогда
	//	Настройка_ПоказыватьРезультатыПартийПредковТолькоГодные=УГМК_СлужебныеФункции.ПолучитьНастройку("Настройка_ПоказыватьРезультатыПартийПредковТолькоГодные");
	//	н=0;
	//	для каждого стрП из спПартий цикл
	//		н=н+1;
	//		спПартийИли = спПартийИли + " или УГМК_ПаспортПартии = &УГМК_ПаспортПартии"+СокрЛП(н);
	//		спПартийИли1 = спПартийИли1 + " или УГМК_РезультатАнализаАнализы.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии"+СокрЛП(н);
	//		спПартийИли2 = спПартийИли2 + " или УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии = &УГМК_ПаспортПартии"+СокрЛП(н);
	//		Запр.УстановитьПараметр("УГМК_ПаспортПартии"+СокрЛП(н),стрП.Значение);
	//	КонецЦикла;
	//	Если Настройка_ПоказыватьРезультатыПартийПредковТолькоГодные = Истина Тогда
	//		
	//		
	//		спПартийИли=Сред(спПартийИли,6);
	//		спПартийИли=" или (("+спПартийИли+") и ("+УсловиеПоНазначению+"))";
	//	КонецЕсли;
	//КонецЕсли;
	////Запр.УстановитьПараметр( "спПартий", спПартий);
	//
	//Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			|	УГМК_РезультатАнализаАнализы.Ссылка,
	//			|	УГМК_РезультатАнализаАнализы.Ссылка как Протокол,
	//			|	УГМК_РезультатАнализаАнализы.ПоказательАнализа,
	//			|	УГМК_РезультатАнализаАнализы.НомерОбразца,
	//			|	УГМК_РезультатАнализаАнализы.НормативВидСравнения,
	//			|	УГМК_РезультатАнализаАнализы.НормативКлючОтбора,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначение,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначениеНачальное,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначениеКонечное,
	//			|	УГМК_РезультатАнализаАнализы.НормативФормат,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗнаковПослеЗапятой,
	//			|	УГМК_РезультатАнализаАнализы.НормативПредставление поместить НормативыДокумента
	//			|ИЗ
	//			|	Документ.УГМК_РезультатАнализа.Анализы КАК УГМК_РезультатАнализаАнализы
	//			|ГДЕ
	//			|	УГМК_РезультатАнализаАнализы.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии"+спПартийИли1+"
	//			|
	//			|ОБЪЕДИНИТЬ ВСЕ
	//			|
	//			|ВЫБРАТЬ
	//			|	УГМК_РезультатАнализаАнализы.Ссылка,
	//			|	УГМК_РезультатАнализаАнализы.Протокол,
	//			|	УГМК_РезультатАнализаАнализы.ПоказательАнализа,
	//			|	УГМК_РезультатАнализаАнализы.НомерОбразца,
	//			|	УГМК_РезультатАнализаАнализы.НормативВидСравнения,
	//			|	УГМК_РезультатАнализаАнализы.НормативКлючОтбора,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначение,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначениеНачальное,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗначениеКонечное,
	//			|	УГМК_РезультатАнализаАнализы.НормативФормат,
	//			|	УГМК_РезультатАнализаАнализы.НормативЗнаковПослеЗапятой,
	//			|	УГМК_РезультатАнализаАнализы.НормативПредставление
	//			|ИЗ
	//			|	Документ.УГМК_СертификацияРезультат.Анализы КАК УГМК_РезультатАнализаАнализы
	//			|ГДЕ
	//			|	УГМК_РезультатАнализаАнализы.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии"+спПартийИли1+"
	//			|
	//			|;
	//             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА ИСТИНА
	//             |		ИНАЧЕ ЛОЖЬ
	//             |	КОНЕЦ КАК СтрокаЗаявки,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА 1000
	//             |		ИНАЧЕ УГМК_ЗаявкаНаАнализАнализы.НомерСтроки
	//             |	КОНЕЦ КАК НомерСтрокиПоказателя,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА ЕстьNull(УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_Остальное,Ложь)
	//			 //замена пред строки: ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_Остальное
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_Остальное
	//             |	КОНЕЦ КАК УГМК_Остальное,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА ЕстьNull(УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_НеРегламентируется,Ложь)
	//			 //замена пред строки: ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_НеРегламентируется
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_НеРегламентируется
	//             |	КОНЕЦ КАК УГМК_НеРегламентируется,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа
	//             |	КОНЕЦ КАК ПоказательАнализа,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_ТипАнализа
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_ТипАнализа
	//             |	КОНЕЦ КАК УГМК_ТипАнализа,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.УГМК_НазначениеАнализа.УГМК_Сортировка
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа.УГМК_Сортировка
	//             |	КОНЕЦ КАК УГМК_НазначениеАнализаСортировка,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.УГМК_НазначениеАнализа
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.УГМК_НазначениеАнализа
	//             |	КОНЕЦ КАК УГМК_НазначениеАнализа,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ЗначениеПоказателя ЕСТЬ NULL 
	//             |			ТОГДА НЕОПРЕДЕЛЕНО
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ЗначениеПоказателя
	//             |	КОНЕЦ КАК ЗначениеПоказателя,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПогрешностьИсследования ЕСТЬ NULL 
	//             |			ТОГДА НЕОПРЕДЕЛЕНО
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПогрешностьИсследования
	//             |	КОНЕЦ КАК ПогрешностьИсследования,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.МинЗначениеПоказателя ЕСТЬ NULL 
	//             |			ТОГДА НЕОПРЕДЕЛЕНО
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.МинЗначениеПоказателя
	//             |	КОНЕЦ КАК МинЗначениеПоказателя,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ВидСравнения ЕСТЬ NULL 
	//             |			ТОГДА НЕОПРЕДЕЛЕНО
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ВидСравнения
	//             |	КОНЕЦ КАК ВидСравнения,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.МаксЗначениеПоказателя ЕСТЬ NULL 
	//             |			ТОГДА НЕОПРЕДЕЛЕНО
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.МаксЗначениеПоказателя
	//             |	КОНЕЦ КАК МаксЗначениеПоказателя,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Примечание ЕСТЬ NULL 
	//             |			ТОГДА """"
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Примечание
	//             |	КОНЕЦ КАК Примечание,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативу ЕСТЬ NULL 
	//             |			ТОГДА ИСТИНА
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативу
	//             |	КОНЕЦ КАК СоответствуетНормативу,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативуПогрешность ЕСТЬ NULL 
	//             |			ТОГДА ИСТИНА
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.СоответствуетНормативуПогрешность
	//             |	КОНЕЦ КАК СоответствуетНормативуПогрешность,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Точность ЕСТЬ NULL 
	//             |			ТОГДА 0
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Точность
	//             |	КОНЕЦ КАК Точность,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ЕдиницаИзмерения
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ЕдиницаИзмерения
	//             |	КОНЕЦ КАК ЕдиницаИзмерения,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Номенклатура
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Номенклатура
	//             |	КОНЕЦ КАК Номенклатура,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.СерияНоменклатуры ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.СерияНоменклатуры
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.СерияНоменклатуры
	//             |	КОНЕЦ КАК СерияНоменклатуры,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Регистратор ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.НормативныйДокумент
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.Регистратор.НормативныйДокумент
	//             |	КОНЕЦ КАК НормативныйДокумент,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Регистратор ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка.НоменклатураПоНД
	//             |		ИНАЧЕ 
	//			 |			ВЫБОР 
	//			 |				КОГДА УГМК_РезультатыАнализовСрезПоследних.Регистратор Ссылка Документ.УГМК_СертификацияРезультат 
	//			 |					ТОГДА УГМК_РезультатыАнализовСрезПоследних.Регистратор.НоменклатураПоНД
	//			 |				ИНАЧЕ УГМК_ЗаявкаНаАнализАнализы.Ссылка.НоменклатураПоНД
	//			 |			КОНЕЦ
	//             |	КОНЕЦ КАК НоменклатураПоНД,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.ВидРезультатаАнализа
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.ВидРезультатаАнализа
	//             |	КОНЕЦ КАК ВидРезультатаАнализа,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа ЕСТЬ NULL 
	//             |			ТОГДА УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа.УГМК_ДляСортировки
	//             |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа.УГМК_ДляСортировки
	//             |	КОНЕЦ КАК УГМК_ДляСортировки,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.НомерОбразца ЕСТЬ NULL 
	//             |			ТОГДА 0
	//             |		КОГДА УГМК_РезультатыАнализовСрезПоследних.НомерОбразца = 0
	//             |			ТОГДА 9999
	//             |		ИНАЧЕ 
	//			 |	ВЫБОР
	//			 |		КОГДА УГМК_РезультатыАнализовСрезПоследних.Заявка.РазбитьПоМестам
	//			 |			ТОГДА УГМК_ЗаявкаНаАнализСписокОбразцов.ПредставлениеОбразца
	//			 |		ИНАЧЕ УГМК_РезультатыАнализовСрезПоследних.НомерОбразца
	//			 |	Конец
	//			 //|УГМК_РезультатыАнализовСрезПоследних.НомерОбразца
	//             |	КОНЕЦ КАК НомерОбразца,
	//			|	НормативыДокумента.Ссылка как НормативСсылка,
	//			|	НормативыДокумента.Ссылка.УГМК_ПаспортПартии как УГМК_ПаспортПартии,
	//			|	Выбор когда ТИПЗНАЧЕНИЯ(НормативыДокумента.Ссылка.УГМК_ПаспортПартии)=Тип(БизнесПроцесс.УГМК_ПаспортПартииСТК)
	//			|		тогда 1
	//			|		  когда ТИПЗНАЧЕНИЯ(НормативыДокумента.Ссылка.УГМК_ПаспортПартии)=Тип(БизнесПроцесс.УГМК_ПаспортПартии)
	//			|		тогда 2
	//			|		  когда ТИПЗНАЧЕНИЯ(НормативыДокумента.Ссылка.УГМК_ПаспортПартии)=Тип(БизнесПроцесс.УГМК_Плавка)
	//			|		тогда 3
	//			|		иначе 4
	//			|	Конец как СортировкаПоВоидуПартии,
	//			|	НормативыДокумента.НормативВидСравнения,
	//			|	НормативыДокумента.НормативКлючОтбора,
	//			|	НормативыДокумента.НормативЗначение,
	//			|	НормативыДокумента.НормативЗначениеНачальное,
	//			|	НормативыДокумента.НормативЗначениеКонечное,
	//			|	НормативыДокумента.НормативФормат,
	//			|	НормативыДокумента.НормативЗнаковПослеЗапятой,
	//			|	НормативыДокумента.НормативПредставление
	//             |ИЗ
	//             |	РегистрСведений.УГМК_РезультатыАнализов.СрезПоследних(,
	//			 //|"+?(ВыводимПоПоследнейГоднойПартии=Ложь," (УГМК_ПаспортПартии = &УГМК_ПаспортПартии) "," (УГМК_ПаспортПартии = &УГМК_ПаспортПартии) или ("+УсловиеПоНазначению+") ")+"
	//			 //УГМК_ПаспортПартии в (&спПартий)
	//			 |"+?(спПартий.Количество()=0," (УГМК_ПаспортПартии = &УГМК_ПаспортПартии) "," (УГМК_ПаспортПартии = &УГМК_ПаспортПартии  "+спПартийИли+") ")+" 
	//			 |"+?(Настройка_ПоказыватьТолькоГодные=Истина," и ("+УсловиеПоНазначению+") ","")+"
	//             |															"+УсловиеПоЗаявке+") КАК УГМК_РезультатыАнализовСрезПоследних
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ НормативыДокумента 
	//			 |		ПО УГМК_РезультатыАнализовСрезПоследних.Регистратор = НормативыДокумента.Ссылка 
	//			 |			и УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа = НормативыДокумента.ПоказательАнализа 
	//			 |			и УГМК_РезультатыАнализовСрезПоследних.Протокол = НормативыДокумента.Протокол 
	//			 |			и УГМК_РезультатыАнализовСрезПоследних.НомерОбразца = НормативыДокумента.НомерОбразца 
	//             |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//             |			Док.Ссылка КАК Ссылка,
	//             |			Док.Ссылка.Номенклатура КАК Номенклатура,
	//             |			Док.Ссылка.СерияНоменклатуры КАК СерияНоменклатуры,
	//			 |			Док.Ссылка.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии,
	//             |			Док.НомерСтроки КАК НомерСтроки,
	//             |			Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//             |			Док.ПоказательАнализа КАК ПоказательАнализа
	//             |		ИЗ
	//             |			Документ.УГМК_ЗаявкаНаАнализ.Анализы КАК Док
	//             |		ГДЕ
	//             |			(не Док.Ссылка.ПометкаУдаления) и Док.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+?(Настройка_ПоказыватьТолькоГодные=Истина," и Ложь=Истина ","")+" "+УсловиеПоЗаявкеДок+") КАК УГМК_ЗаявкаНаАнализАнализы
	//             |		ПО УГМК_РезультатыАнализовСрезПоследних.УГМК_ПаспортПартии = УГМК_ЗаявкаНаАнализАнализы.УГМК_ПаспортПартии
	//             |			И УГМК_РезультатыАнализовСрезПоследних.ПоказательАнализа = УГМК_ЗаявкаНаАнализАнализы.ПоказательАнализа
	//             |			"+УсловиеСоединения+"
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ЗаявкаНаАнализ.СписокОбразцов КАК УГМК_ЗаявкаНаАнализСписокОбразцов
	//			 |		ПО УГМК_РезультатыАнализовСрезПоследних.НомерОбразца = УГМК_ЗаявкаНаАнализСписокОбразцов.НомерОбразца
	//			 |			И УГМК_РезультатыАнализовСрезПоследних.Заявка = УГМК_ЗаявкаНаАнализСписокОбразцов.Ссылка
	//             |//ГДЕ
	//             |//	ВЫБОР
	//             |//			КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура ЕСТЬ NULL 
	//             |//				ТОГДА ИСТИНА
	//             |//			КОГДА УГМК_ЗаявкаНаАнализАнализы.Ссылка ЕСТЬ NULL 
	//             |//				ТОГДА ИСТИНА
	//             |//			ИНАЧЕ ВЫБОР
	//             |//					КОГДА УГМК_РезультатыАнализовСрезПоследних.Номенклатура = УГМК_ЗаявкаНаАнализАнализы.Ссылка.Номенклатура
	//             |//						ТОГДА ИСТИНА
	//             |//					ИНАЧЕ ЛОЖЬ
	//             |//				КОНЕЦ
	//             |//		КОНЕЦ
	//             |УПОРЯДОЧИТЬ ПО
	//             |	СортировкаПоВоидуПартии,УГМК_НазначениеАнализаСортировка,УГМК_НазначениеАнализа,
	//             |	УГМК_ТипАнализа, НомерОбразца,
	//             |	НомерСтрокиПоказателя, 
	//			 |	ПоказательАнализа
	//			 //
	//             |ИТОГИ ПО
	//             |	Номенклатура, СерияНоменклатуры, НормативныйДокумент, УГМК_ПаспортПартии,   УГМК_НазначениеАнализаСортировка, УГМК_НазначениеАнализа,
	//             |	УГМК_ТипАнализа, НомерОбразца,
	//             |	НомерСтрокиПоказателя, 
	//			 |	ПоказательАнализа
	//			 |АВТОУПОРЯДОЧИВАНИЕ";
	//			//НоменклатураПоНД,
	//			 
	//ЗапрНомера = Новый Запрос;
	//ЗапрНомера.УстановитьПараметр( "Ссылка", СсылкаЗаявка);
	//ЗапрНомера.УстановитьПараметр( "УГМК_ПаспортПартии", Партия);
	//ЗапрНомера.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                   |	Док.Ссылка.Номенклатура КАК Номенклатура,
	//                   |	Док.Ссылка.СерияНоменклатуры КАК СерияНоменклатуры,
	//                   |	Док.Ссылка.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии,
	//                   |	Док.Ссылка.ОбразцыС КАК ОбразцыС,
	//                   |	Док.Ссылка.ОбразцыПо,
	//                   |	Док.Ссылка.УГМК_НазначениеАнализа КАК УГМК_НазначениеАнализа,
	//                   |	Док.Ссылка.НормативныйДокумент КАК НормативныйДокумент,
	//                   |	Док.Ссылка.Проведен,
	//                   |	Док.Ссылка.РазбитьПоМестам,
	//                   |	Док.Ссылка.КоличествоМестДляОбразцов,
	//                   |	Док.Ссылка.ОбразцовСМеста
	//                   |ИЗ
	//                   |	Документ.УГМК_ЗаявкаНаАнализ.Анализы КАК Док
	//                   |ГДЕ
	//                   |	Док.Ссылка.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
	//                   |	И НЕ Док.Ссылка.ПометкаУдаления"+УсловиеПоЗаявкеДок+"
	//                   |
	//                   |УПОРЯДОЧИТЬ ПО
	//                   |	ОбразцыС";
	// НомераОбразцов = ЗапрНомера.Выполнить().Выгрузить();
	// 
	// РезультатОтчет.Вывести( Макет.ПолучитьОбласть("Шапка|НачалоСтроки"));
	// ОбластьШапкаП = Макет.ПолучитьОбласть("Шапка|Показатель");
	// ОбластьСтрокаН = Макет.ПолучитьОбласть("Строка|НачалоСтроки");
	// ОбластьСтрокаП = Макет.ПолучитьОбласть("Строка|Показатель");
	// ОбластьПримечание = Макет.ПолучитьОбласть("Строка|Примечание");
	// ОбластьНоменклатура = Макет.ПолучитьОбласть("Номенклатура");
	// 
	// ОбластьПоказатели = Новый ТабличныйДокумент;
	// 
	// ПозицияПоказателя = Новый Массив;
	// НормативыПоказателей = Новый Структура;
	// 
	// Результат = Запр.Выполнить();
	// 
	// Выборка0 = Результат.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_ТипАнализа");
	// Пока Выборка0.Следующий() цикл
	//	 Выборка = Выборка0.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиПоказателя");
	//	 Пока Выборка.Следующий() цикл
	//		 Выборка1 = Выборка.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "ПоказательАнализа");
	//		 Пока Выборка1.Следующий() цикл
	//			 Если ПозицияПоказателя.Найти( Выборка1.ПоказательАнализа) = Неопределено тогда
	//				 ОбластьШапкаП.Параметры.ПоказательАнализа = Выборка1.ПоказательАнализа;
	//				 РезультатОтчет.Присоединить( ОбластьШапкаП);
	//				 
	//				 Если ПозицияПоказателя.Количество() = 0 тогда
	//					 ОбластьПоказатели.Вывести( ОбластьСтрокаП);
	//				 иначе
	//					 ОбластьПоказатели.Присоединить( ОбластьСтрокаП);
	//				 КонецЕсли;
	//				 
	//				 ПозицияПоказателя.Добавить( Выборка1.ПоказательАнализа);
	//				 
	//			 КонецЕсли;
	//		 КонецЦикла;
	//	 КонецЦикла;
	// КонецЦикла;
	// Выборка0 = Неопределено;
	// Выборка  = Неопределено;
	// Выборка1 = Неопределено;
	// 
	// ВыводитьИтого = Ложь;
	// 
	// ВыборкаНом = Результат.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	// Пока ВыборкаНом.Следующий() цикл // Номенклатура
	//	 ВыборкаСерияНом = ВыборкаНом.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "СерияНоменклатуры");
	//	 Пока ВыборкаСерияНом.Следующий() цикл // Серия Номенклатуры
	//		 ВыборкаНД = ВыборкаСерияНом.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НормативныйДокумент");
	//		 Пока ВыборкаНД.Следующий() цикл // Нормативный документ
	//			 
	//		 //ВыборкаНоменклатураПоНД = ВыборкаНД.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураПоНД");
	//		 //Пока ВыборкаНоменклатураПоНД.Следующий() цикл // Нормативный документ
	//		 //    ВыборкаПаспортПартии=ВыборкаНоменклатураПоНД.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_ПаспортПартии");
	//		 //    Пока ВыборкаПаспортПартии.Следующий() Цикл
	//		 
	//		 ВыборкаПаспортПартии=ВыборкаНД.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_ПаспортПартии");
	//		 Пока ВыборкаПаспортПартии.Следующий() цикл // Нормативный документ
	//			 //ВыборкаНоменклатураПоНД = ВыборкаПаспортПартии.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураПоНД");
	//			 //Пока ВыборкаНоменклатураПоНД.Следующий() Цикл
	//		 
	//			 //Если ЗначениеЗаполнено(ВыборкаНоменклатураПоНД.НоменклатураПоНД) Тогда
	//			 //	НоменклатураСтр = Строка( ВыборкаНоменклатураПоНД.НоменклатураПоНД);
	//			 //Иначе
	//			 //	
	//			 //	НоменклатураСтр = Строка( ВыборкаНД.Номенклатура);
	//			 //	Если ЗначениеЗаполнено( ВыборкаНД.СерияНоменклатуры) тогда
	//			 //   	 НоменклатураСтр = НоменклатураСтр + " ["+Строка( ВыборкаНД.СерияНоменклатуры)+"]";
	//			 //	КонецЕсли;
	//			 //	Если ЗначениеЗаполнено( ВыборкаНД.НормативныйДокумент) тогда
	//			 //   	 НоменклатураСтр = НоменклатураСтр + " НД:"+Строка( ВыборкаНД.НормативныйДокумент);
	//			 //	КонецЕсли;
	//			 //КонецЕсли;
	//			 Если СокрЛП(ВыборкаПаспортПартии.УГМК_ПаспортПартии)="" Тогда
	//				 //продолжить;
	//				// ВыборкаСортировка = ВыборкаПаспортПартии.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_НазначениеАнализаСортировка");
	//				// Если ВыборкаСортировка.Следующий() Тогда
	//				//	 ОбластьНоменклатура.Параметры.НоменклатураСтр = Строка( ВыборкаНД.Номенклатура);
	//				//	 РезультатОтчет.Вывести( ОбластьНоменклатура);
	//				//КонецЕсли;
	//			 Иначе
	//				 НоменклатураСтр = СокрЛП(ВыборкаПаспортПартии.УГМК_ПаспортПартии.Номер)+". "+Строка( ВыборкаНД.Номенклатура);
	//				 Если ЗначениеЗаполнено( ВыборкаНД.СерияНоменклатуры) тогда
	//					 НоменклатураСтр = НоменклатураСтр + " ["+Строка( ВыборкаНД.СерияНоменклатуры)+"]";
	//				 КонецЕсли;
	//				 Если ЗначениеЗаполнено( ВыборкаНД.НормативныйДокумент) тогда
	//					 НоменклатураСтр = НоменклатураСтр + " НД:"+Строка( ВыборкаНД.НормативныйДокумент);
	//				 КонецЕсли;
	//				 //Если ЗначениеЗаполнено(ВыборкаНоменклатураПоНД.НоменклатураПоНД) Тогда
	//				 //    НоменклатураСтр = НоменклатураСтр + "(по НД:" + Строка( ВыборкаНоменклатураПоНД.НоменклатураПоНД)+")";
	//				 //КонецЕсли;
	//				 
	//				 ОбластьНоменклатура.Параметры.НоменклатураСтр = СокрЛП( НоменклатураСтр);
	//				 РезультатОтчет.Вывести( ОбластьНоменклатура);
	//			 КонецЕсли;
	//			 
	//			 ВыборкаСортировка = ВыборкаПаспортПартии.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_НазначениеАнализаСортировка");
	//			 //ВыборкаСортировка = ВыборкаНоменклатураПоНД.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_НазначениеАнализаСортировка");
	//			 
	//			 Пока ВыборкаСортировка.Следующий() цикл // УГМК_НазначениеАнализаСортировка
	//			 Выборка = ВыборкаСортировка.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_НазначениеАнализа");
	//			 Пока Выборка.Следующий() цикл // УГМК_НазначениеАнализа
	//				 Выборка1 = Выборка.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НомерОбразца");
	//				 Пока Выборка1.Следующий() цикл // НомерОбразца
	//					 ОбластьСтрокаН.Параметры.УГМК_НазначениеАнализа = Выборка1.УГМК_НазначениеАнализа;
	//					Если (СокрЛП(Выборка1.УГМК_НазначениеАнализа)="НЕ соотв.") и (Настройка_ПоказыватьТолькоГодные=истина) Тогда
	//						 ОбластьСтрокаН.Параметры.УГМК_НазначениеАнализа = "Годен";
	//					КонецЕсли;
	//					 Если Выборка1.НомерОбразца = 9999 тогда
	//						ОбластьСтрокаН.Параметры.НомерОбразца = "ИТОГО";
	//						Если не ВыводитьИтого тогда
	//							Продолжить;
	//						КонецЕсли;
	//					 иначе
	//						 //ОбластьСтрокаН.Параметры.НомерОбразца = Формат( Выборка1.НомерОбразца, "ЧГ=2");
	//						 ОбластьСтрокаН.Параметры.НомерОбразца = Выборка1.НомерОбразца;
	//					 КонецЕсли;
	//					 
	//					 Если Выборка1.НомерОбразца = 0 тогда // Строка от заявки
	//						 ОбластьНоменклатура.Параметры.НоменклатураСтр = Строка( ВыборкаНД.Номенклатура);
	//						 РезультатОтчет.Вывести( ОбластьНоменклатура);
	//						 ОбластьСтрокаН.Параметры.НомерОбразца = НомераОбразцовЗаявок( НомераОбразцов, Выборка1);
	//					КонецЕсли;
	//					 
	//					 СтрПримечание = "";
	//					 РезультатОтчет.Вывести( ОбластьСтрокаН);
	//					 РезультатОтчет.Присоединить( ОбластьПоказатели);
	//					 
	//					 Выборка2 = Выборка1.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиПоказателя");
	//					 Пока Выборка2.Следующий() цикл
	//						 Выборка_ТипАнализа = Выборка2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "УГМК_ТипАнализа");
	//						 Пока Выборка_ТипАнализа.Следующий() цикл
	//							 
	//							 Выборка3 = Выборка_ТипАнализа.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам, "ПоказательАнализа");
	//							 Пока Выборка3.Следующий() цикл
	//								 
	//								 СтрокаД = Выборка3.Выбрать( ОбходРезультатаЗапроса.Прямой);
	//								 Пока СтрокаД.Следующий() цикл
	//									 НормативСуществует = ЗначениеЗаполнено( СтрокаД.НормативСсылка) и ЗначениеЗаполнено( СтрокаД.НормативВидСравнения);
	//									 
	//									 ТекСтрока = РезультатОтчет.ВысотаТаблицы;
	//									 ТекКолонка = ПозицияПоказателя.Найти( СтрокаД.ПоказательАнализа)+3;
	//									 
	//									 Область1 = РезультатОтчет.Область( ТекСтрока, ТекКолонка, ТекСтрока, ТекКолонка);
	//									 Если СтрокаД.УГМК_Остальное или (СтрокаД.НормативВидСравнения = Перечисления.УГМК_ВидСравнения.Остальное) тогда
	//										 Область1.Текст = "ост.";
	//									 иначеЕсли СтрокаД.УГМК_НеРегламентируется тогда
	//										 Область1.Текст = "не регл.";
	//									 иначеЕсли СтрокаД.СтрокаЗаявки тогда
	//										 Область1.Текст = "----------";
	//									 иначе
	//										 Если не ((ЭтоПартияНеСоотв=истина) и (Настройка_ПоказыватьТолькоГодные=истина)) Тогда
	//											Если НормативСуществует тогда
	//												Если не СтрокаД.СоответствуетНормативу тогда
	//													Область1.ЦветТекста = WebЦвета.Красный;
	//												КонецЕсли;
	//												Если не СтрокаД.СоответствуетНормативуПогрешность тогда
	//													Область1.ЦветФона = ЦветаСтиля.СтатусОтклонен;
	//												КонецЕсли;
	//											иначе
	//												Область1.ЦветТекста = WebЦвета.Коричневый;
	//											КонецЕсли;
	//										КонецЕсли;
	//										//определим округлть или нет результаты
	//										ОкруглятьРезультаты=Ложь;
	//										Если Настройка_ПоказыватьВсеАнализыОкругленные=Истина Тогда
	//											ОкруглятьРезультаты=Истина;
	//										ИначеЕсли Настройка_ПоказыватьПоГодностиАнализыОкругленные=Истина Тогда
	//											Если СостоянияГодности.НайтиПоЗначению(Выборка1.УГМК_НазначениеАнализа)<>неопределено Тогда
	//												ОкруглятьРезультаты=Истина;
	//											КонецЕсли;
	//										КонецЕсли;
	//										//****
	//									 
	//										Область1.Текст = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( СтрокаД.ВидРезультатаАнализа, СтрокаД.ВидСравнения, СтрокаД.ЗначениеПоказателя, СтрокаД.МинЗначениеПоказателя, СтрокаД.МаксЗначениеПоказателя, СтрокаД.ПогрешностьИсследования, СтрокаД.Точность, Неопределено, Ложь,ОкруглятьРезультаты);
	//									 КонецЕсли;
	//									 
	//									 Если ЗначениеЗаполнено( СтрокаД.Примечание) тогда
	//										 СтрПримечание = СтрПримечание + "; "+СокрЛП( СтрокаД.Примечание);
	//									 КонецЕсли;
	//								 КонецЦикла;
	//							 КонецЦикла;
	//						 КонецЦикла;
	//					 КонецЦикла;
	//					 
	//					 Если ЗначениеЗаполнено( СтрПримечание) тогда
	//						 ОбластьПримечание.Параметры.Примечание = Сред( СтрПримечание, 3);
	//						 РезультатОтчет.Присоединить( ОбластьПримечание);
	//					 КонецЕсли;
	//				 КонецЦикла;
	//			 КонецЦикла;
	//		 	//КонецЦикла;
	//		 	КонецЦикла;
	//		 КонецЦикла;
	//		 КонецЦикла;
	//	 КонецЦикла;
	// КонецЦикла;

	// 
	//Если ЗначениеЗаполнено( ЗаявкаНаАнализ) тогда
	//	Запр.УстановитьПараметр("Заявка", ЗаявкаНаАнализ);
	//	Запр.Текст = "ВЫБРАТЬ
	//	             |	Данные.ДокументТип КАК ДокументТип,
	//	             |	0 КАК ЭтоИсходная,
	//	             |	Данные.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии,
	//	             |	Данные.УГМК_ПаспортПартии.ДляПредставления КАК ДляПредставления,
	//	             |	Данные.Номер КАК Номер,
	//	             |	Данные.Дата КАК Дата,
	//	             |	Данные.Документ КАК Документ,
	//	             |	Данные.Ответственный,
	//	             |	Данные.ДокументПредставление,
	//	             |	Данные.Комментарий,
	//	             |	Данные.Заключение,
	//	             |	"""" КАК ОснованиеГодности
	//	             |ИЗ
	//	             |	(ВЫБРАТЬ
	//	             |		""Заявка"" КАК ДокументТип,
	//	             |		УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии,
	//	             |		УГМК_ЗаявкаНаАнализ.Номер КАК Номер,
	//	             |		УГМК_ЗаявкаНаАнализ.Дата КАК Дата,
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка КАК Документ,
	//	             |		УГМК_ЗаявкаНаАнализ.Ответственный КАК Ответственный,
	//	             |		ПРЕДСТАВЛЕНИЕ(УГМК_ЗаявкаНаАнализ.Ссылка) КАК ДокументПредставление,
	//	             |		УГМК_ЗаявкаНаАнализ.Комментарий КАК Комментарий,
	//	             |		"""" КАК Заключение
	//	             |	ИЗ
	//	             |		Документ.УГМК_ЗаявкаНаАнализ КАК УГМК_ЗаявкаНаАнализ
	//	             |	ГДЕ
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка = &Заявка
	//	             |	
	//	             |	ОБЪЕДИНИТЬ ВСЕ
	//	             |	
	//	             |	ВЫБРАТЬ
	//	             |		""Результат"",
	//	             |		УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии,
	//	             |		УГМК_ЗаявкаНаАнализ.Номер,
	//	             |		УГМК_ЗаявкаНаАнализ.Дата,
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка,
	//	             |		УГМК_ЗаявкаНаАнализ.Ответственный,
	//	             |		ПРЕДСТАВЛЕНИЕ(УГМК_ЗаявкаНаАнализ.Ссылка),
	//	             |		УГМК_ЗаявкаНаАнализ.Комментарий,
	//	             |		УГМК_ЗаявкаНаАнализ.Заключение
	//	             |	ИЗ
	//	             |		Документ.УГМК_РезультатАнализа КАК УГМК_ЗаявкаНаАнализ
	//	             |	ГДЕ
	//	             |		УГМК_ЗаявкаНаАнализ.ДокументОснование.Ссылка = &Заявка) КАК Данные
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО
	//	             |	Дата УБЫВ,
	//	             |	Документ УБЫВ
	//	             |АВТОУПОРЯДОЧИВАНИЕ";
	//иначе
	//	Запр.УстановитьПараметр("УГМК_ПаспортПартии",Партия);
	//	Запр.Текст = "ВЫБРАТЬ
	//	             |	Данные.ДокументТип КАК ДокументТип, 
	//			 	 |	Выбор когда Данные.УГМК_ПаспортПартии = &УГМК_ПаспортПартии тогда 0 иначе 1 конец как ЭтоИсходная,
	//				 |	Данные.УГМК_ПаспортПартии как УГМК_ПаспортПартии,
	//				 |	Данные.УГМК_ПаспортПартии.ДляПредставления как ДляПредставления,
	//	             |	Данные.Номер КАК Номер,
	//	             |	Данные.Дата КАК Дата,
	//	             |	Данные.Документ КАК Документ,
	//	             |	Данные.Ответственный,
	//	             |	Данные.ДокументПредставление,
	//	             |	Данные.Комментарий,
	//	             |	Данные.Заключение,
	//	             |	Данные.ОснованиеГодности
	//	             |ИЗ
	//	             |	(ВЫБРАТЬ
	//	             |		""Заявка"" КАК ДокументТип, УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии как УГМК_ПаспортПартии,
	//	             |		УГМК_ЗаявкаНаАнализ.Номер КАК Номер,
	//	             |		УГМК_ЗаявкаНаАнализ.Дата КАК Дата,
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка КАК Документ,
	//	             |		УГМК_ЗаявкаНаАнализ.Ответственный КАК Ответственный,
	//	             |		ПРЕДСТАВЛЕНИЕ(УГМК_ЗаявкаНаАнализ.Ссылка) КАК ДокументПредставление,
	//	             |		УГМК_ЗаявкаНаАнализ.Комментарий КАК Комментарий,
	//	             |		"""" КАК Заключение,
	//	             |		"""" КАК ОснованиеГодности
	//	             |	ИЗ
	//	             |		Документ.УГМК_ЗаявкаНаАнализ КАК УГМК_ЗаявкаНаАнализ
	//	             |	ГДЕ
	//	             |		УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+спПартийИли2+"
	//	             |	
	//	             |	ОБЪЕДИНИТЬ ВСЕ
	//	             |	
	//	             |	ВЫБРАТЬ
	//	             |		""Результат"", УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии как УГМК_ПаспортПартии,
	//	             |		УГМК_ЗаявкаНаАнализ.Номер,
	//	             |		УГМК_ЗаявкаНаАнализ.Дата,
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка,
	//	             |		УГМК_ЗаявкаНаАнализ.Ответственный,
	//	             |		ПРЕДСТАВЛЕНИЕ(УГМК_ЗаявкаНаАнализ.Ссылка),
	//	             |		УГМК_ЗаявкаНаАнализ.Комментарий,
	//	             |		УГМК_ЗаявкаНаАнализ.Заключение,
	//	             |		""""
	//	             |	ИЗ
	//	             |		Документ.УГМК_РезультатАнализа КАК УГМК_ЗаявкаНаАнализ
	//	             |	ГДЕ
	//	             |		УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+спПартийИли2+"
	//	             |	
	//	             |	ОБЪЕДИНИТЬ ВСЕ
	//	             |	
	//	             |	ВЫБРАТЬ
	//	             |		""Годность"", УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии как УГМК_ПаспортПартии,
	//	             |		УГМК_ЗаявкаНаАнализ.Номер,
	//	             |		УГМК_ЗаявкаНаАнализ.Дата,
	//	             |		УГМК_ЗаявкаНаАнализ.Ссылка,
	//	             |		УГМК_ЗаявкаНаАнализ.Ответственный,
	//	             |		ПРЕДСТАВЛЕНИЕ(УГМК_ЗаявкаНаАнализ.Ссылка),
	//	             |		УГМК_ЗаявкаНаАнализ.Комментарий,
	//	             |		УГМК_ЗаявкаНаАнализ.Заключение,
	//	             |		УГМК_ЗаявкаНаАнализ.ОснованиеГодности
	//	             |	ИЗ
	//	             |		Документ.УГМК_СертификацияРезультат КАК УГМК_ЗаявкаНаАнализ
	//	             |	ГДЕ
	//	             |		УГМК_ЗаявкаНаАнализ.УГМК_ПаспортПартии = &УГМК_ПаспортПартии "+спПартийИли2+"
	//				 |) КАК Данные
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО ЭтоИсходная,
	//	             |	Дата УБЫВ,
	//	             |	Документ УБЫВ
	//	             |АВТОУПОРЯДОЧИВАНИЕ";
	//КонецЕсли;
	//			 
	//Если ЗначениеЗаполнено( Партия) и ЗначениеЗаполнено( Партия.Комментарий) тогда
	//	ОбластьПримечание.Параметры.Примечание = Партия.Комментарий;
	//	РезультатОтчет.Вывести( ОбластьПримечание);
	//КонецЕсли;
	//
	//Результат = Запр.Выполнить().Выбрать();
	//Пока Результат.Следующий() цикл
	//	СтрПримечание = "";
	//	
	//	Если ЗначениеЗаполнено( Результат.Комментарий) или ЗначениеЗаполнено( Результат.Заключение) или ЗначениеЗаполнено( Результат.ОснованиеГодности) тогда
	//		СтрПримечание = СтрПримечание + "           " + Результат.Ответственный+" ("+Результат.ДокументТип+" "+Результат.Номер+" от "+Формат( Результат.Дата, "ДФ=dd.MM.yyyy")+")";
	//		Если Результат.ЭтоИсходная тогда
	//			СтрПримечание = СтрПримечание +" "+ Результат.ДляПредставления;
	//			
	//			ТипПартии = ТипЗнч( Результат.УГМК_ПаспортПартии);
	//			Если ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
	//				СтрПримечание = СтрПримечание + " (Сырья)";
	//			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") тогда
	//				СтрПримечание = СтрПримечание + " (Партия)";
	//			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") тогда
	//				СтрПримечание = СтрПримечание + " (СТК)";
	//			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_Плавка") тогда
	//				СтрПримечание = СтрПримечание + " (Плавка)";
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено( Результат.ОснованиеГодности) тогда
	//     		СтрПримечание = СтрПримечание + Символы.ПС + "Основание: "+Результат.ОснованиеГодности;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено( Результат.Заключение) тогда
	//     		СтрПримечание = СтрПримечание + Символы.ПС + "Заключение: "+Результат.Заключение;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено( Результат.Комментарий) тогда
	//     		СтрПримечание = СтрПримечание + Символы.ПС + Результат.Комментарий;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( СтрПримечание) тогда
	//		ОбластьПримечание.Параметры.Примечание = СтрПримечание;
	//		РезультатОтчет.Вывести( ОбластьПримечание);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//РезультатОтчет.ФиксацияСверху = 1;
	//
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныйДокументСертификат(Партия,Т,Макет) Экспорт
	//ОЦМ Мобильная
	//Т.Очистить();
	//
	//ОблПредставление=Макет.ПолучитьОбласть("Представление");
	//Если ТипЗнч(Партия)=Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") Тогда
	//	ОблПредставление.Параметры.Представление="Партия "+Партия.ДляПоиска+" "+Строка(Партия.ПродукцияПартии)+" "+Партия.ХарактеристикаПродукцииПартии.Размеры;
	//Иначе
	//	ОблПредставление.Параметры.Представление="Партия "+Партия.ДляПоиска;
	//КонецЕсли;
	//Т.Вывести(ОблПредставление);
	//	
	//ДокументГодностьСсылка="";
	//ЗапросД=Новый Запрос;
	//ЗапросД.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	//              |	УГМК_СертификацияРезультат.Ссылка
	//              |ИЗ
	//              |	Документ.УГМК_СертификацияРезультат КАК УГМК_СертификацияРезультат
	//              |ГДЕ
	//              |	УГМК_СертификацияРезультат.Проведен
	//              |	И УГМК_СертификацияРезультат.УГМК_ПаспортПартии = &УГМК_ПаспортПартии
	//              |	И УГМК_СертификацияРезультат.РезультатСертификации в (&СписокГоден)
	//              |
	//              |УПОРЯДОЧИТЬ ПО
	//              |	УГМК_СертификацияРезультат.Дата УБЫВ";
	//ЗапросД.УстановитьПараметр("УГМК_ПаспортПартии",Партия);
	//ЗапросД.УстановитьПараметр("СписокГоден", УГМК_ОперативныйУчет.СписокГоден( Истина));
	//ВыбД=ЗапросД.Выполнить().Выбрать();
	//Если ВыбД.Следующий() Тогда
	//	ДокументГодностьСсылка=ВыбД.ссылка;
	//КонецЕсли;
	//Если ДокументГодностьСсылка="" Тогда
	//	//Сообщить("Не найден документ годность по партии: "+Партия);
	//	возврат;
	//КонецЕсли;
	//
	//Запрос=Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//             |	УГМК_СертификацияРезультатСертификат.Ссылка.Номенклатура,
	//             |	УГМК_СертификацияРезультатСертификат.Ссылка.СерияНоменклатуры,
	//             |	УГМК_СертификацияРезультатСертификат.ПоказательАнализа,
	//             |	УГМК_СертификацияРезультатСертификат.ПоказательАнализа.УГМК_ТипАнализа КАК ТипАнализа,
	//             |	УГМК_СертификацияРезультатСертификат.ПоказательАнализа.УГМК_ТипАнализа.УГМК_Идентификатор КАК ТипАнализа_Ид,
	//             |	УГМК_СертификацияРезультатСертификат.НомерОбразца,
	//             |	УГМК_СертификацияРезультатСертификат.ЗначениеПоказателя,
	//             |	УГМК_СертификацияРезультатСертификат.ЕдиницаИзмерения,
	//             |	УГМК_СертификацияРезультатСертификат.Ссылка КАК Док,
	//             |	УГМК_СертификацияРезультатСертификат.НормативПредставление,
	//             |	УГМК_СертификацияРезультатСертификат.НормативЗначение КАК Норматив,
	//             |	УГМК_СертификацияРезультатСертификат.НормативВидСравнения,
	//             |	УГМК_СертификацияРезультатСертификат.НормативЗначениеНачальное,
	//             |	УГМК_СертификацияРезультатСертификат.НормативЗначениеКонечное,
	//             |	УГМК_СертификацияРезультатСертификат.ВидСравнения,
	//             |	УГМК_СертификацияРезультатСертификат.МинЗначениеПоказателя,
	//             |	УГМК_СертификацияРезультатСертификат.МаксЗначениеПоказателя,
	//             |	Ложь КАК ПредставитьКакДиапазон
	//             |ИЗ
	//             |	Документ.УГМК_СертификацияРезультат.Сертификат КАК УГМК_СертификацияРезультатСертификат
	//             |ГДЕ
	//             |	УГМК_СертификацияРезультатСертификат.Ссылка = &Ссылка";
	//Запрос.УстановитьПараметр("Ссылка",ДокументГодностьСсылка);
	//тз=Запрос.Выполнить().Выгрузить();
	//Если ДокументГодностьСсылка.ВыводитьДиапазон Тогда
	//	тз1=тз.СкопироватьКолонки();
	//	тзО=тз.Скопировать();
	//	тзО.Свернуть("ПоказательАнализа,ЗначениеПоказателя");
	//	тз.Сортировать("ПоказательАнализа,НомерОбразца");
	//	ТекПок="";
	//	для каждого стр из тз цикл
	//		Если ТекПок<>стр.ПоказательАнализа Тогда
	//			стр1=тз1.Добавить();
	//			ЗаполнитьЗначенияСвойств(стр1,стр);
	//			тзПок=тзО.Скопировать(Новый Структура("ПоказательАнализа",стр.ПоказательАнализа));
	//			тзПок.Свернуть("ЗначениеПоказателя");
	//			тзПок.Сортировать("ЗначениеПоказателя");
	//			стр1.НомерОбразца=1;
	//			Если тзПок.Количество()=1 Тогда
	//				стр1.ЗначениеПоказателя=стр.ЗначениеПоказателя;
	//			Иначе
	//				стр1.ПредставитьКакДиапазон=Истина;
	//				стр1.ЗначениеПоказателя=0;
	//				стр1.МинЗначениеПоказателя=тзПок[0].ЗначениеПоказателя;
	//				стр1.МаксЗначениеПоказателя=тзПок[тзПок.Количество()-1].ЗначениеПоказателя;
	//			КонецЕсли;
	//		КонецЕсли;
	//		ТекПок=стр.ПоказательАнализа;
	//	КонецЦикла;
	//	тз=тз1.Скопировать();
	//КонецЕсли;
	//
	//тзШ=тз.Скопировать();
	//тзШ.Свернуть("Номенклатура,Док");
	//Для каждого стрШ из тзШ Цикл
	//	//физические испытания
	//	тзФиз=тз.Скопировать(Новый Структура("Док,ТипАнализа_Ид",СтрШ.Док,"Физ"));
	//	тзФизЗ=тзФиз.Скопировать();
	//	тзФизЗ.Свернуть("ПоказательАнализа");
	//	тзФизЗ.Сортировать("ПоказательАнализа");
	//	ОблЗаголовкиФиз=Макет.ПолучитьОбласть("ЗаголовокИспытаний");
	//	Для к=0 по 6 цикл
	//		попытка
	//			ТекЗначениеФизЗ=тзФизЗ[к].ПоказательАнализа;
	//		исключение
	//			ТекЗначениеФизЗ="";
	//		КонецПопытки;
	//		ОблЗаголовкиФиз.Параметры.Установить(к,ТекЗначениеФизЗ);
	//	КонецЦикла;
	//	Т.Вывести(ОблЗаголовкиФиз);
	//	тзФизОбр=тзФиз.Скопировать();
	//	тзФизОбр.Свернуть("НомерОбразца");
	//	тзФизОбр.Сортировать("НомерОбразца");
	//	ОблСтрокиФиз=Макет.ПолучитьОбласть("СтрокаИспытаний");
	//	ОблНормыФиз=Макет.ПолучитьОбласть("СтрокаФизНорм");
	//	Для каждого стрФизОбр из тзФизОбр Цикл
	//		ОблСтрокиФиз.Параметры.НомерОбразца=стрФизОбр.НомерОбразца;
	//		Для к=0 по 6 цикл
	//			ТекЗначениеФизС="";
	//			ТекЗначениеФизС_Норма="";
	//			попытка
	//				ТекЗначениеФизЗ=тзФизЗ[к].ПоказательАнализа;
	//			исключение
	//				ТекЗначениеФизЗ="";
	//			КонецПопытки;
	//			Если ТекЗначениеФизЗ<>"" Тогда
	//				тзЗначФиз=тзФиз.Скопировать(новый Структура("НомерОбразца,ПоказательАнализа",стрФизОбр.НомерОбразца,ТекЗначениеФизЗ));
	//				попытка
	//					ТекЗначениеФизС=тзЗначФиз[0].ЗначениеПоказателя;
	//					Если (ТекЗначениеФизЗ.ВидРезультатаАнализа=ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон)или(тзЗначФиз[0].ПредставитьКакДиапазон=Истина) Тогда
	//						ТекЗначениеФизС=""+СокрЛП(тзЗначФиз[0].МинЗначениеПоказателя)+" - "+СокрЛП(тзЗначФиз[0].МаксЗначениеПоказателя);
	//					КонецЕсли;
	//				исключение
	//					ТекЗначениеФизС="";
	//				КонецПопытки;
	//				//нормы
	//				попытка
	//					ТекЗначениеФизС_Норма=СокрЛП(тзЗначФиз[0].НормативПредставление);
	//					Если СокрЛП(ТекЗначениеФизС_Норма)="Не задан" Тогда
	//						ТекЗначениеФизС_Норма="";
	//					ИначеЕсли СокрЛП(ТекЗначениеФизС_Норма)="заполнено" Тогда
	//						ТекЗначениеФизС_Норма="-";
	//					//ИначеЕсли СокрЛП(тзЗначФиз[0].ВидСравнения)="менее" Тогда
	//					//	ТекЗначениеФизС_Норма="менее "+тзЗначФиз[0].НормативЗначениеКонечное;
	//					КонецЕсли;
	//					ТекЗначениеФизС_Норма=СтрЗаменить(ТекЗначениеФизС_Норма,"от 0 до","не более");
	//				исключение
	//					ТекЗначениеФизС_Норма="";
	//				КонецПопытки;
	//				//****
	//			КонецЕсли;
	//			ОблНормыФиз.Параметры.Установить(к,ТекЗначениеФизС_Норма);
	//			ОблСтрокиФиз.Параметры.Установить(к+1,ТекЗначениеФизС);
	//		КонецЦикла;
	//		Если тзФизОбр.Индекс(стрФизОбр)=0 Тогда
	//			Т.Вывести(ОблНормыФиз);
	//		КонецЕсли;
	//		Т.Вывести(ОблСтрокиФиз);
	//	КонецЦикла;
	//	//****
	//	
	//	//Химический состав
	//	тзХим=тз.Скопировать(Новый Структура("Док,ТипАнализа_Ид",СтрШ.Док,"Хим"));
	//	тзХимЗ=тзХим.Скопировать();
	//	тзХимЗ.Свернуть("ВидСравнения,НормативВидСравнения,ПоказательАнализа,ЗначениеПоказателя,Норматив,НормативПредставление,НормативЗначениеКонечное");
	//	//тзХимЗ.Сортировать("ВидСравнения,ПоказательАнализа,ЗначениеПоказателя,Норматив,НормативПредставление");
	//	тзХимЗ.Сортировать("ПоказательАнализа,ЗначениеПоказателя,Норматив,НормативПредставление");
	//	
	//	//с нормативами
	//	ОблЗаголовкиХим=Макет.ПолучитьОбласть("ЗаголовокХимСостав1");
	//	ОблСтрокиХимНормы=Макет.ПолучитьОбласть("СтрокаХимСоставНормы");
	//	ОблСтрокиХим=Макет.ПолучитьОбласть("СтрокаХимСостав1");
	//	//Для к=0 по 13 цикл
	//	к=0;
	//	р=0;
	//	Пока к<=15 Цикл
	//		попытка
	//			ТекЗначениеХимЗ=тзХимЗ[к].ПоказательАнализа;
	//		исключение
	//			ТекЗначениеХимЗ="";
	//		КонецПопытки;
	//		попытка
	//			ТекЗначениеХимС=тзХимЗ[к].ЗначениеПоказателя;
	//			Если не ЗначениеЗаполнено(ТекЗначениеХимС) Тогда
	//				ТекЗначениеХимС="остальное";
	//			КонецЕсли;
	//			Если (СокрЛП(тзХимЗ[к].ВидСравнения)="менее")или(СокрЛП(тзХимЗ[к].НормативВидСравнения)="менее") Тогда
	//				ТекЗначениеХимС="<"+ТекЗначениеХимС;
	//			КонецЕсли;
	//		исключение
	//			ТекЗначениеХимС="";
	//		КонецПопытки;
	//		ОблЗаголовкиХим.Параметры.Установить(к-р,ТекЗначениеХимЗ);
	//		ОблСтрокиХим.Параметры.Установить(к-р,ТекЗначениеХимС);
	//		попытка
	//			ТекЗначениеХимС_Норма=СокрЛП(тзХимЗ[к].НормативПредставление);
	//			Если СокрЛП(ТекЗначениеХимС_Норма)="Не задан" Тогда
	//				ТекЗначениеХимС_Норма="";
	//			ИначеЕсли СокрЛП(ТекЗначениеХимС_Норма)="заполнено" Тогда
	//				ТекЗначениеХимС_Норма="-";
	//			//ИначеЕсли СокрЛП(тзХимЗ[к].ВидСравнения)="менее" Тогда
	//			//	ТекЗначениеХимС_Норма="менее "+тзХимЗ[к].НормативЗначениеКонечное;
	//			КонецЕсли;
	//			ТекЗначениеХимС_Норма=СтрЗаменить(ТекЗначениеХимС_Норма,"от 0 до","не более");
	//		исключение
	//			ТекЗначениеХимС_Норма="";
	//		КонецПопытки;
	//		ОблСтрокиХимНормы.Параметры.Установить(к-р,ТекЗначениеХимС_Норма);
	//		к=к+1;
	//	КонецЦикла;
	//	Т.Вывести(ОблЗаголовкиХим);
	//	Т.Вывести(ОблСтрокиХимНормы);
	//	Т.Вывести(ОблСтрокиХим);
	//	
	//	ОблПодвал=Макет.ПолучитьОбласть("ПодвалКонтролер");
	//	Т.Вывести(ОблПодвал);
	//	//****
	//	
	//	Т.АвтоМасштаб=Истина;
	//	Т.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	//	Т.ТолькоПросмотр=Истина;
	//	Т.ОтображатьЗаголовки=Ложь;
	//	Т.ОтображатьСетку=Ложь;
	//	Т.Показать("Сертификат");
	//КонецЦикла;
КонецПроцедуры

Функция КоличествоЗнаковТочности( Точность) Экспорт
	Знаков = 5;
	Если Точность = -1 тогда
		Знаков = 0;
	иначеЕсли Точность = 0 тогда
		Знаков = 5;
	иначе
		Знаков = Точность;
	КонецЕсли;
		
	Возврат( Знаков);
КонецФункции

Функция ОкруглитьЗначениеДоТочности( Значение, Точность) Экспорт
	Возврат( Окр( Значение, КоличествоЗнаковТочности( Точность)));
КонецФункции

Функция ФорматПоТочности( Точность) Экспорт
	СтрФормат = "ЧН=0; ЧГ=0";
	Если Точность > 0 тогда
		СтрФормат = СтрФормат + "; ЧДЦ="+Строка( КоличествоЗнаковТочности( Точность));
	КонецЕсли;
	
	Возврат( СтрФормат);
КонецФункции

Функция РассчитатьЗначениеПогрешности( СтруктураД, ЗначениеПараметра) Экспорт
	Перем Результат, Формула;
	
	Если СтруктураД.ТипУказанияПогрешности = 0 тогда
		Результат = СтруктураД.Значение;
	иначеЕсли СтруктураД.ТипУказанияПогрешности = 1 тогда
		Формула = "Результат = "+СтруктураД.Формула;
		СтрЗН = Формат( ЗначениеПараметра, "ЧРД=.; ЧГ=0");
		Формула = СтрЗаменить( Формула, СтруктураД.ИмяПараметра, СтрЗН);
		Выполнить( Формула);
	иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат( УГМК_ОперативныйУчет.ОкруглитьЗначениеДоТочности( Результат, СтруктураД.Точность));
КонецФункции

Функция ПолучитьАвтоПредставлениеДиапазона( ТипДиапазона, МинЗначение, МаксЗначение = 0) Экспорт
	СтрНаименование = "";
	Если ТипДиапазона = 0 тогда //"0 >= .. <= (от .. до .. вкл. )"
		СтрНаименование = "от " + Строка( МинЗначение)+" до "+Строка( МаксЗначение)+" вкл.";
	иначеЕсли ТипДиапазона = 1 тогда //"1 >  .. <=  (св. .. до .. вкл.)"
		СтрНаименование = "св. "+Строка( МинЗначение)+" до "+Строка( МаксЗначение)+" вкл.";
	иначеЕсли ТипДиапазона = 2 тогда //"2 >  .. <    (св. .. до .. )"
		СтрНаименование = "св. "+Строка( МинЗначение)+" до "+Строка( МаксЗначение);
	иначеЕсли ТипДиапазона = 3 тогда //"3 >= .. <   (от .. до ..)"
		СтрНаименование = "от "+Строка( МинЗначение)+" до "+Строка( МаксЗначение);
	иначеЕсли ТипДиапазона = 4 тогда //"4 >           (св. .. )"
		СтрНаименование = "св. "+Строка( МинЗначение);
	иначеЕсли ТипДиапазона = 5 тогда //"5 <           (до .. )"
		СтрНаименование = "до "+Строка( МаксЗначение);
	иначеЕсли ТипДиапазона = 6 тогда //"6 <=         (до .. вкл.)"
		СтрНаименование = "до "+Строка( МаксЗначение)+" вкл.";
	иначеЕсли ТипДиапазона = 7 тогда //"7 >=         (от .. )"
		СтрНаименование = "от "+Строка( МинЗначение);
	КонецЕсли;
	
	Возврат( СтрНаименование);
КонецФункции	

Функция ПолучитьСимволСравнения( ВидСравнения) Экспорт
	СимволСравнения = "";
	Если ВидСравнения = Перечисления.УГМК_ВидСравнения.НеБолее тогда
		СимволСравнения = "< ";
	иначеЕсли ВидСравнения = Перечисления.УГМК_ВидСравнения.НеМенее тогда
		СимволСравнения = "> ";
	КонецЕсли;
	
	Возврат( СимволСравнения);
КонецФункции

Функция ПолучитьПредставлениеРезультата( Знач ВидРезультатаАнализа, Знач ВидСравнения, Знач ЗначениеПоказателя, Знач МинЗначение, Знач МаксЗначение, Знач ПогрешностьИсследования, Знач Точность, Знач ЕдиницаИзмерения = Неопределено, Знач ДиапазонСПогрешностью = Истина, Округлять=Истина) Экспорт
	// ОЦММобильная
	//СтруктураДанных = Новый Структура("ВидСравнения, Значение, ЗначениеНачальное, ЗначениеКонечное, Формат, ЗнаковПослеЗапятой");
	//Если ЗначениеЗаполнено( ПогрешностьИсследования) и ДиапазонСПогрешностью тогда
	//	СтруктураДанных.ВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.ВИнтервале");
	//	СтруктураДанных.Значение = ЗначениеПоказателя;
	//	СтруктураДанных.ЗначениеНачальное = МинЗначение-ПогрешностьИсследования;
	//	СтруктураДанных.ЗначениеКонечное = МаксЗначение+ПогрешностьИсследования;
	//	СтруктураДанных.Формат = "";
	//	СтруктураДанных.ЗнаковПослеЗапятой = Точность;
	//	
	//	СтрПогрешность = УГМК_ОбщегоНазначенияККСервер.ПолучитьПредставлениеНормативаПоСтроке( СтруктураДанных, Ложь); 
	//иначе
	//	СтрПогрешность = "";
	//КонецЕсли;
	//
	//СтруктураДанных.ВидСравнения = ВидСравнения;
	//СтруктураДанных.Значение = ЗначениеПоказателя;
	//СтруктураДанных.ЗначениеНачальное = МинЗначение;
	//СтруктураДанных.ЗначениеКонечное = МаксЗначение;
	//СтруктураДанных.Формат = "";
	//СтруктураДанных.ЗнаковПослеЗапятой = Точность;
	//
	//Если не ЗначениеЗаполнено( СтруктураДанных.ВидСравнения) тогда
	//	СтруктураДанных.ВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.Равно");
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( СтрПогрешность) тогда
	//	//Стр = СтрПогрешность+ " (" + УГМК_ОбщегоНазначенияККСервер.ПолучитьПредставлениеНормативаПоСтроке( СтруктураДанных, Ложь) + ")";
	//	Стр = СтрПогрешность;
	//иначе
	//	Стр = УГМК_ОбщегоНазначенияККСервер.ПолучитьПредставлениеНормативаПоСтроке( СтруктураДанных, Ложь);
	//	
	//	Если МаксЗначение<>МинЗначение Тогда
	//		Стр=СокрЛП(МинЗначение)+" - "+СокрЛП(МаксЗначение);
	//	Иначе
	//		ПозПробел = Найти( Стр, " ");
	//		СтрНачало = "";
	//		Если ПозПробел > 0 тогда
	//			СтрНачало = Лев( Стр, ПозПробел);
	//			Стр = Сред( Стр, ПозПробел+1);
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено( ЗначениеПоказателя) и ((Стр = "0,0") или (Стр = "0,00") или (Стр = "0,000") или (Стр = "0,0000") или (Стр = "0,00000")) тогда
	//			Стр = Формат( ЗначениеПоказателя, "ЧГ=0");
	//		КонецЕсли;
	//		
	//		Если не Округлять Тогда
	//			Стр = Формат( ЗначениеПоказателя, "ЧГ=0");
	//		КонецЕсли;
	//		
	//		Стр = СтрНачало + Стр;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( ЕдиницаИзмерения) тогда
	//	Стр = Стр + Строка( ЕдиницаИзмерения);
	//КонецЕсли;
	//
	//Возврат( Стр)
КонецФункции

//*************   Формы списков Документов и Бизнес-Процессов   ************************************
Функция НайтиДобавитьЭлементОтбора( Элементы, Поле1) Экспорт
	Перем Результат1;
	
	Результат1 = Неопределено;
	
	Для Каждого ЭлементОтбора из Элементы цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле1 тогда
			Результат1 = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат1 = Неопределено тогда
		Результат1 = Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		Результат1.ЛевоеЗначение = Поле1;
		Результат1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Возврат( Результат1);
КонецФункции
//**************************************************************************************************

Функция ПолучитьИменаКолонокОбработки( ИмяОбработки) Экспорт
	Перем Результат, Колонки, Колонка;
	
	Результат = Новый Массив;
	Колонки = Метаданные.Обработки[ ИмяОбработки].Реквизиты;
	Для каждого Колонка из Колонки цикл
		Результат.Добавить( Колонка.Имя);
	КонецЦикла;
	
	Возврат( Результат);
КонецФункции


Процедура СкопироватьДанныеТабличныхЧастей( Приемник, Источник, Имена1, Имена2, ПКолонки = Неопределено, ИКолонки = Неопределено, НомерСтроки = Неопределено)Экспорт
	Перем ИмяПриемник, Имена;
	
	Если ПКолонки = Неопределено тогда
		ПКолонки = Метаданные.НайтиПоТипу( ТипЗнч( Приемник)).Реквизиты;
	КонецЕсли;
	Если ИКолонки = Неопределено тогда
		ИКолонки = Метаданные.НайтиПоТипу( ТипЗнч( Источник)).Реквизиты;
	КонецЕсли;
	
	Имена = Новый Структура;
	Для каждого Элемент из Имена2 цикл
		Если Имена1.Свойство( Элемент.Ключ, ИмяПриемник) и 
			(ПКолонки.Найти( ИмяПриемник) <> Неопределено) и 
			(ИКолонки.Найти( Элемент.Значение) <> Неопределено) тогда
			Имена.Вставить( Элемент.Значение, ИмяПриемник);
		КонецЕсли;
	КонецЦикла;
	
	Если НомерСтроки = Неопределено тогда
		Приемник.Очистить();
	КонецЕсли;

	Для каждого Строка из Источник цикл
		Если НомерСтроки = Неопределено или Строка.НомерСтроки = НомерСтроки тогда
			НоваяСтрока = Приемник.Добавить();
			Для каждого Элемент из Имена цикл
				НоваяСтрока[ Элемент.Значение] = Строка[ Элемент.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// требуется вызов из транзакции, чтобы избежать грязного чтения
Функция ПолучитьСледующийУГМК_Код( Имя = "Справочник.ХарактеристикиНоменклатуры") Экспорт
	Префикс = "";
	ОбщегоНазначения.ПриУстановкеНовогоКодаДляСправочникаИлиПВХ( Неопределено, Истина, Префикс);
	ДлинаПрефикс = СтрДлина( Префикс);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("УГМК_Код", Префикс);
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ХарактеристикиНоменклатуры.УГМК_Код КАК УГМК_Код
	             |ИЗ
	             |	"+Имя+" КАК ХарактеристикиНоменклатуры
	             |ГДЕ
	             |	ПОДСТРОКА(ХарактеристикиНоменклатуры.УГМК_Код, 1, "+ДлинаПрефикс+") = &УГМК_Код
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_Код УБЫВ";
				 
	ДлинаЧисл = 11 - ДлинаПрефикс;
	РезультатЗ = Запр.Выполнить().Выбрать();
	Последний = 0;
	Если РезультатЗ.Следующий() тогда
		Последний = Число( Сред( РезультатЗ.УГМК_Код, ДлинаПрефикс+1));
	КонецЕсли;
	
	Возврат( Префикс + Формат( Последний+1, "ЧЦ="+ДлинаЧисл+"; ЧВН=; ЧГ=0"));
КонецФункции

//******************************************* Печать и чтение этикетки *******************************************************

Функция ПолучитьИменаКолонокВерсииЭтикетки( Версия) Экспорт
	Имена = Новый Структура;

	Имена.Вставить("ПоСвойствам");
	Имена.Вставить("РабочийЦентр");
	Имена.Вставить("Номенклатура");
	Имена.Вставить("МаркаСплава");
	Имена.Вставить("ГруппаПродукции");
	Имена.Вставить("ХарактеристикаНоменклатуры");
	Имена.Вставить("СерияНоменклатуры");
	Имена.Вставить("Состояние");
	Имена.Вставить("Коэффициент");
	Имена.Вставить("Коэффициент1");
	Имена.Вставить("ЕдиницаИзмерения1");
	Имена.Вставить("ПаспортПартии");
	Имена.Вставить("Количество");
	Имена.Вставить("Количество1");
	Имена.Вставить("КоличествоМест");
	Имена.Вставить("Тара");
	Имена.Вставить("КоличествоТара");
	Имена.Вставить("Размер1");
	Имена.Вставить("Размер2");
	Имена.Вставить("Размер3");
	Имена.Вставить("Размер4");
	Имена.Вставить("Размер5");
	Имена.Вставить("ДополнительнаяИнформация");
	Имена.Вставить("Маркировка");
	Имена.Вставить("ОбъемПогонногоМетра");
	Имена.Вставить("СерияНоменклатурыПредставление");
	Если Версия >= "003" тогда
		Имена.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если Версия >= "005" тогда
		Имена.Вставить("Назначение");
		Имена.Вставить("Дополнительно");
	КонецЕсли;
	
	Возврат( Имена);
КонецФункции

Функция ПолучитьТипыВерсииЭтикетки( Версия) Экспорт
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить( Тип("Число"),	"Число");
	СписокТипов.Добавить( Тип("Булево"),"Булево");
	СписокТипов.Добавить( Тип("Дата"),	"Дата");
	СписокТипов.Добавить( Тип("Строка"),"Строка");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеЦентры"),					"СправочникСсылка.РабочиеЦентры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МаркиСплавов"),					"СправочникСсылка.СК_МаркиСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПродукцияОЦМ"),					"СправочникСсылка.СК_ПродукцияОЦМ");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЗначенияСвойствОбъектов"),			"СправочникСсылка.ЗначенияСвойствОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТипыРазмеров"),					"СправочникСсылка.СК_ТипыРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.Номенклатура"),						"СправочникСсылка.Номенклатура");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство"),		"СправочникСсылка.УГМК_МаркаСплаваПроизводство");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ГруппыПродукции"),				"СправочникСсылка.СК_ГруппыПродукции");
	СписокТипов.Добавить( Тип("СправочникСсылка.ХарактеристикиНоменклатуры"),		"СправочникСсылка.ХарактеристикиНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ЗначенияРазмеров"),			"СправочникСсылка.УГМК_ЗначенияРазмеров");
	СписокТипов.Добавить( Тип("СправочникСсылка.СерииНоменклатуры"),				"СправочникСсылка.СерииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Состояния"),						"СправочникСсылка.СК_Состояния");
	СписокТипов.Добавить( Тип("СправочникСсылка.ЕдиницыИзмерения"),					"СправочникСсылка.ЕдиницыИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),		"СправочникСсылка.КлассификаторЕдиницИзмерения");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ТараТехнологическая"),			"СправочникСсылка.УГМК_ТараТехнологическая");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПартияСырья");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_Плавка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартии");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"БизнесПроцессСсылка.УГМК_ПаспортПартииСТК");
	
	СписокТипов.Добавить( Тип("СправочникСсылка.ГрафикиРаботы"),					"СправочникСсылка.ГрафикиРаботы");
	СписокТипов.Добавить( Тип("СправочникСсылка.Должности"),						"СправочникСсылка.Должности");
	СписокТипов.Добавить( Тип("СправочникСсылка.ДолжностиОрганизаций"),				"СправочникСсылка.ДолжностиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ИнформационныеКарты"),				"СправочникСсылка.ИнформационныеКарты");
	СписокТипов.Добавить( Тип("СправочникСсылка.КатегорииОбъектов"),				"СправочникСсылка.КатегорииОбъектов");
	СписокТипов.Добавить( Тип("СправочникСсылка.Качество"),							"СправочникСсылка.Качество");
	СписокТипов.Добавить( Тип("СправочникСсылка.Контрагенты"),						"СправочникСсылка.Контрагенты");
	СписокТипов.Добавить( Тип("СправочникСсылка.НоменклатурныеГруппы"),				"СправочникСсылка.НоменклатурныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры"),"СправочникСсылка.НормативныеДокументыСертификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Организации"),						"СправочникСсылка.Организации");
	СписокТипов.Добавить( Тип("СправочникСсылка.Подразделения"),					"СправочникСсылка.Подразделения");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПодразделенияОрганизаций"),			"СправочникСсылка.ПодразделенияОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПоказателиАнализовНоменклатуры"),	"СправочникСсылка.ПоказателиАнализовНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.Проекты"),							"СправочникСсылка.Проекты");
	СписокТипов.Добавить( Тип("СправочникСсылка.ПрофессииРабочих"),					"СправочникСсылка.ПрофессииРабочих");
	СписокТипов.Добавить( Тип("СправочникСсылка.РабочиеМеста"),						"СправочникСсылка.РабочиеМеста");
	СписокТипов.Добавить( Тип("СправочникСсылка.Склады"),							"СправочникСсылка.Склады");
	СписокТипов.Добавить( Тип("СправочникСсылка.Смены"),							"СправочникСсылка.Смены");
	СписокТипов.Добавить( Тип("СправочникСсылка.СотрудникиОрганизаций"),			"СправочникСсылка.СотрудникиОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СохраненныеНастройки"),				"СправочникСсылка.СохраненныеНастройки");
	СписокТипов.Добавить( Тип("СправочникСсылка.СпецификацииНоменклатуры"),			"СправочникСсылка.СпецификацииНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.СценарииПланирования"),				"СправочникСсылка.СценарииПланирования");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТарифныеРазряды"),					"СправочникСсылка.ТарифныеРазряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеКартыПроизводства"), "СправочникСсылка.ТехнологическиеКартыПроизводства");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТехнологическиеОперации"),			"СправочникСсылка.ТехнологическиеОперации");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТиповыеАнализыНоменклатуры"),		"СправочникСсылка.ТиповыеАнализыНоменклатуры");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВариантыТехнологическихОпераций"),	"СправочникСсылка.УГМК_ВариантыТехнологическихОпераций");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций"),	"СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ФормыСечения"),					"СправочникСсылка.СК_ФормыСечения");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_МетодыИзготовления"),			"СправочникСсылка.СК_МетодыИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ТочностьИзготовления"),			"СправочникСсылка.СК_ТочностьИзготовления");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_НДНаПродукцию"),					"СправочникСсылка.СК_НДНаПродукцию");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_Мерность"),						"СправочникСсылка.СК_Мерность");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ОсобыеУсловия"),					"СправочникСсылка.СК_ОсобыеУсловия");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ВидыСплавов"),					"СправочникСсылка.СК_ВидыСплавов");
	СписокТипов.Добавить( Тип("СправочникСсылка.tb_Производитель"),					"СправочникСсылка.tb_Производитель");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_СостоянияЗаказа"),				"СправочникСсылка.УГМК_СостоянияЗаказа");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Бригады"),						"СправочникСсылка.УГМК_Бригады");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Разряды"),						"СправочникСсылка.УГМК_Разряды");
	СписокТипов.Добавить( Тип("СправочникСсылка.ТочкиМаршрута"),					"СправочникСсылка.ТочкиМаршрута");
	СписокТипов.Добавить( Тип("СправочникСсылка.СК_ПроизводственныеГруппы"),		"СправочникСсылка.СК_ПроизводственныеГруппы");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Комиссии"),					"СправочникСсылка.УГМК_Комиссии");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ВидыБрака"),					"СправочникСсылка.УГМК_ВидыБрака");
	СписокТипов.Добавить( Тип("СправочникСсылка.ФизическиеЛица"),					"СправочникСсылка.ФизическиеЛица");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_АвтотранспортВнутренний"),		"СправочникСсылка.УГМК_АвтотранспортВнутренний");
	СписокТипов.Добавить( Тип("СправочникСсылка.Пользователи"),						"СправочникСсылка.Пользователи");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров"),	"СправочникСсылка.УГМК_РежимыРаботыРабочихЦентров");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_ДиапазоныЗначений"),			"СправочникСсылка.УГМК_ДиапазоныЗначений");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_МетодыПроведенияИсследований"),"СправочникСсылка.УГМК_МетодыПроведенияИсследований");
	
	СписокТипов.Добавить( Тип("ДокументСсылка.АктОтбораПробНоменклатуры"),			"ДокументСсылка.АктОтбораПробНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.ВнутреннийЗаказ"),					"ДокументСсылка.ВнутреннийЗаказ");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказНаПроизводство"),				"ДокументСсылка.ЗаказНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаказПокупателя"),					"ДокументСсылка.ЗаказПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры"),	"ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаНаПроизводство"),	"ДокументСсылка.КорректировкаЗаказаНаПроизводство");
	СписокТипов.Добавить( Тип("ДокументСсылка.КорректировкаЗаказаПокупателя"),		"ДокументСсылка.КорректировкаЗаказаПокупателя");
	СписокТипов.Добавить( Тип("ДокументСсылка.СертификацияНоменклатуры"),			"ДокументСсылка.СертификацияНоменклатуры");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_НормыПроизводства"),				"ДокументСсылка.УГМК_НормыПроизводства");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ДокументФакт"),					"ДокументСсылка.УГМК_ДокументФакт");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Регистратор"),					"ДокументСсылка.УГМК_Регистратор");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_Упаковка"),						"ДокументСсылка.УГМК_Упаковка");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_РезультатАнализа"),				"ДокументСсылка.УГМК_РезультатАнализа");
	СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ЗаявкаНаАнализ"),				"ДокументСсылка.УГМК_ЗаявкаНаАнализ");
		
	СписокТипов.Добавить( Тип("Неопределено"),	"Неопределено");
	СписокТипов.Добавить( Тип("Неопределено"),	"Неопределено");
	СписокТипов.Добавить( Тип("Неопределено"),	"Неопределено");
	
	//СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ОтчетМастераЗаСмену"),			"ДокументСсылка.УГМК_ОтчетМастераЗаСмену");
	//СписокТипов.Добавить( Тип("ДокументСсылка.УГМК_ДокументПлан"),					"ДокументСсылка.УГМК_ДокументПлан");
	СписокТипов.Добавить( Тип("СправочникСсылка.УГМК_Весы"),						"СправочникСсылка.УГМК_Весы");
	
	Возврат( СписокТипов);
КонецФункции

Функция ПолучитьИндексТипа( СписокТипов, Значение) Экспорт
	ТипЗначение = ТипЗнч( Значение);
	ЭлементС = СписокТипов.НайтиПоЗначению( ТипЗначение);
	Если ЭлементС = Неопределено тогда
		ИндексС = -1;
		Сообщить("ПолучитьИндексТипа: Неожиданный тип значения ["+ОбщегоНазначения.СтроковоеПредставлениеТипа( ТипЗначение)+"]");
	иначе
		ИндексС = СписокТипов.Индекс( ЭлементС);
	КонецЕсли;
	
	Возврат( ИндексС);
КонецФункции

Функция СконвертироватьЗначениеИзСтроки( СтрокаФайла, ТипЗначения)
	Если ЗначениеЗаполнено( СтрокаФайла) тогда
		Значение = XMLЗначение( ТипЗначения, СтрокаФайла);
	иначеЕсли ТипЗначения = Тип("Число") тогда
		Значение = 0;
	иначеЕсли ТипЗначения = Тип("Строка") тогда
		Значение = "";
	иначеЕсли ТипЗначения = Тип("Булево") тогда
		Значение = Ложь;
	иначеЕсли ТипЗначения = Тип("Дата") тогда
		Значение = '00010101';
	иначеЕсли ТипЗначения = Тип("Неопределено") тогда
		Значение = Неопределено;
	иначе
		ТипДляПриведения = Новый Массив;
		ТипДляПриведения.Добавить( ТипЗначения);
		Описание = Новый ОписаниеТипов( ТипДляПриведения);
		Значение = Описание.ПривестиЗначение( Неопределено);
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

Функция ПолучитьСледующееЗначениеИзФайла( Файл, НомерСтроки, ТипЗначения) Экспорт
	Перем Значение;
	
	Значение = СконвертироватьЗначениеИзСтроки( Файл.ПолучитьСтроку( НомерСтроки), ТипЗначения);
	НомерСтроки = НомерСтроки + 1;
	
	Возврат( Значение)
КонецФункции

Функция ПолучитьСледующееЗначениеИзМассива( МассивИсточник, Индекс, ТипЗначения) Экспорт
	Перем Значение;
	
	Значение = СконвертироватьЗначениеИзСтроки( МассивИсточник[ Индекс], ТипЗначения);
	Индекс = Индекс + 1;
	
	Возврат( Значение)
КонецФункции

Функция ПолучитьТипПоИндексу( СписокТипов, Индекс) Экспорт
	Перем Значение;
	
	Если Индекс = -1 или Индекс = Неопределено тогда
		Значение = Тип("Неопределено");
	иначе
		ЭлементЗ = СписокТипов.Получить( Индекс);
		Значение = ЭлементЗ.Значение;
	КонецЕсли;
	
	Возврат( Значение)
КонецФункции

Функция УзлыРегистрации( Ссылка, ИмяТаблицы) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",Ссылка);
	Запр.Текст = "ВЫБРАТЬ
	             |	ХарактеристикиНоменклатурыИзменения.Узел,
	             |	ХарактеристикиНоменклатурыИзменения.НомерСообщения,
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка
	             |ИЗ
	             |	"+ИмяТаблицы+".Изменения КАК ХарактеристикиНоменклатурыИзменения
	             |ГДЕ
	             |	ХарактеристикиНоменклатурыИзменения.Ссылка = &Ссылка
	             |	И ХарактеристикиНоменклатурыИзменения.Узел ССЫЛКА ПланОбмена.УГМК_ОперативныйУчетНСИ";
	Результат = Запр.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	Возврат( Результат);
КонецФункции
	
Функция ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления, ТипПартии) Экспорт
	//ОЦМ Мобильная
	Если ЗначениеЗаполнено( ЗначениеСсылка) Тогда
		Если НЕ (ТипПартии = ЗначениеСсылка.ТипИсточника И СсылкаСуществует( ЗначениеСсылка)) Тогда
			Если СсылкаСуществует( ЗначениеСсылка) Тогда
				ОбъектБП = ЗначениеСсылка.ПолучитьОбъект();
			Иначе
				Мета = Метаданные.НайтиПоТипу( ТипЗначения);
				ОбъектБП = Документы[ Мета.Имя].СоздатьДокумент();
				ОбъектБП.УстановитьСсылкуНового( ЗначениеСсылка);
				
			КонецЕсли;	
			
		//ОбъектБП.УГМК_Временный = Истина;
		ОбъектБП.Дата = ?(ЗначениеЗаполнено(ЗначениеДата),ЗначениеДата, ТекущаяДата());
		ОбъектБП.Номер = ЗначениеНомер;
		ОбъектБП.ПредставлениеИсточника = УГМК_МобильныйСервер.ПолучитьКраткоеПредставлениеПартии(ЗначениеДляПредставления,ТипПартии);
		ОбъектБП.ТипИсточника = ТипПартии;
		ОбъектБП.УИД_Источника = ЗначениеСсылка.УникальныйИдентификатор();
		ОбъектБП.СсылкаИсточника = ЗначениеСсылка;
		ОбъектБП.ОбменДанными.Загрузка = Истина;
		//ОбъектБП.ОбменДанными.Получатели.Очистить();
		ОбъектБП.Записать();
		КонецЕсли;
		
		//ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "БизнесПроцесс."+Мета.Имя), ЗначениеСсылка);
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
	//Если ЗначениеЗаполнено( ЗначениеСсылка) и (не ОбщегоНазначения.СсылкаСуществует( ЗначениеСсылка)) тогда
	//	Мета = Метаданные.НайтиПоТипу( ТипЗначения);
	//	ОбъектБП = БизнесПроцессы[ Мета.Имя].СоздатьБизнесПроцесс();
	//	ОбъектБП.УстановитьСсылкуНового( ЗначениеСсылка);
	//	ОбъектБП.УГМК_Временный = Истина;
	//	ОбъектБП.Дата = ЗначениеДата;
	//	ОбъектБП.Номер = ЗначениеНомер;
	//	ОбъектБП.ДляПредставления = ЗначениеДляПредставления;
	//	ОбъектБП.ОбменДанными.Загрузка = Истина;
	//	ОбъектБП.ОбменДанными.Получатели.Очистить();
	//	ОбъектБП.Записать();
	//	
	//	ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "БизнесПроцесс."+Мета.Имя), ЗначениеСсылка);
	//КонецЕсли;
	//
	//Возврат( ЗначениеСсылка);
КонецФункции

Функция ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование) Экспорт
	//ОЦМ Мобильная
	//Если ЗначениеЗаполнено( ЗначениеСсылка) и (не ОбщегоНазначения.СсылкаСуществует( ЗначениеСсылка)) тогда
	//	ОбъектСпр = Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
	//	ОбъектСпр.УстановитьСсылкуНового( ЗначениеСсылка);
	//	ОбъектСпр.УГМК_Временный = Истина;
	//	ОбъектСпр.Код = ЗначениеКод;
	//	ОбъектСпр.Владелец = Справочники.СК_ТипыРазмеров.НайтиПоКоду( ЗначениеВладелецКод);
	//	ОбъектСпр.Наименование = ЗначениеНаименование;
	//	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	//	ОбъектСпр.ОбменДанными.Получатели.Очистить();
	//	ОбъектСпр.Записать();
	//	
	//	ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( ЗначениеСсылка, "Справочник.УГМК_ЗначенияРазмеров"), ЗначениеСсылка);
	//КонецЕсли;
	//
	Возврат( ЗначениеСсылка);
КонецФункции

Функция ПолучитьСсылкуМаркаСплаваПроизводство( ЗначениеКод)
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Код",ЗначениеКод);
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_МаркаСплаваПроизводство.Ссылка,
	             |	УГМК_МаркаСплаваПроизводство.Активная КАК Активная
	             |ИЗ
	             |	Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводство
	             |ГДЕ
	             |	(УГМК_МаркаСплаваПроизводство.Код = &Код
	             |			ИЛИ УГМК_МаркаСплаваПроизводство.КодВременный = &Код)
	             |	И УГМК_МаркаСплаваПроизводство.Наименование <> """"
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Активная УБЫВ";
				 
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ЗначениеСсылка = Результат.Ссылка;
	иначе
		ЗначениеСсылка = Справочники.УГМК_МаркаСплаваПроизводство.ПустаяСсылка();
	КонецЕсли;
	
	Возврат( ЗначениеСсылка);
КонецФункции

Процедура ПроверитьПоляЗначенияРазмеров( НоваяСтрока) Экспорт
	//ОЦМ Мобильная
	//Если НоваяСтрока.ХарактеристикаНоменклатуры.УГМК_Временный тогда
	//	ОбъектСпр = НоваяСтрока.ХарактеристикаНоменклатуры.ПолучитьОбъект();
	//	ЗаполнитьЗначенияСвойств( ОбъектСпр, НоваяСтрока, "Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра");
	//	ОбъектСпр.Записать();
	//	
	//	ПланыОбмена.УдалитьРегистрациюИзменений( УзлыРегистрации( НоваяСтрока.ХарактеристикаНоменклатуры, "Справочник.УГМК_ЗначенияРазмеров"), НоваяСтрока.ХарактеристикаНоменклатуры);
	//КонецЕсли;
КонецПроцедуры

Функция НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, ИмяПоля)
	Мета = Метаданные.НайтиПоТипу( ТипЗначения);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Код",ЗначениеКод);
	Запр.Текст = "ВЫБРАТЬ первые 1
	             |	Спр.Ссылка как Ссылка
	             |ИЗ
	             |	Справочник."+Мета.Имя+" КАК Спр
	             |ГДЕ
	             |	Спр."+ИмяПоля+" = &Код";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Значение = Результат.Ссылка;
	иначе
		//Сообщить("НайтиЭлементСправочникаПоРеквизиту: Не найден элемент справочника ["+Мета.Имя+"] с ["+ИмяПоля+"] = ["+ЗначениеКод+"]");
		Значение = Справочники[ Мета.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Возврат( Значение);
КонецФункции

Функция ПолучитьУИДЭтикетки()
	СтрУИД = "";
	// ОЦММобильная
	//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//Если ЗначениеЗаполнено( РабочееМесто) тогда
	//	СтрУИД = РабочееМесто.Код;
	//иначе
	//	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//	Если ЗначениеЗаполнено( ТекущийПользователь) тогда
	//		СтрУИД = ТекущийПользователь.Код;
	//	КонецЕсли;
	//КонецЕсли;
	//
	Возврат( СтрУИД+XMLСтрока( ТекущаяДата()));
КонецФункции

Функция СообщениеКодирования( КолонкиСообщения, Данные)
	Пропускать = ",ПоСвойствам,ПаспортПартии,Тара,";
	
	СтрСообщения = "";
	Для каждого Имя из КолонкиСообщения цикл
		Если Найти( Пропускать, ","+Имя+",") = 0 тогда
			Значение = Данные[ Имя];
			Если ЗначениеЗаполнено( Значение) тогда
				СтрСообщения = СтрСообщения +СтрЗаменить( Строка( Значение), Символы.НПП, "")+"; ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( СтрСообщения);
КонецФункции

Функция ПредставлениеМаркиСплава( МаркаСплава) Экспорт
	СтрПредставление = "";
	
	Попытка
		СтрПредставление = МаркаСплава.ПредставлениеОУ;
	исключение
		СтрПредставление = Строка( МаркаСплава);
	КонецПопытки;
	
	Если не ЗначениеЗаполнено( СтрПредставление) тогда
		СтрПредставление = Строка( МаркаСплава);
	КонецЕсли;
	
	Возврат( СтрПредставление);
КонецФункции

Функция ПолучитьКлассификаторыЕдИзм() Экспорт
	ПараметрыЕдИзм = Новый Структура;
	
	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Штуки",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Штуки"));
	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Килограмм",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Килограмм"));
	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Грамм",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Грамм"));
	ПараметрыЕдИзм.Вставить("КлассификаторЕдИзм_Тонна",УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Тонна"));
	
	Возврат( ПараметрыЕдИзм)
КонецФункции

Функция ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм) Экспорт
	Если ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")) тогда
		МассаНетто = ВыборкаСтрокТовары.Количество*ВыборкаСтрокТовары.ЕдиницаИзмерения.Вес;
	Иначе 
		Если ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
			МассаНетто = ВыборкаСтрокТовары.Количество*1000;
		иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
			МассаНетто = ВыборкаСтрокТовары.Количество*0.001;
		иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
			МассаНетто = ВыборкаСтрокТовары.Количество;
		иначе
			МассаНетто = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( МассаНетто);
КонецФункции 

Функция ПолучитьМассаБрутто( Организация, ВыборкаСтрокТовары, ПараметрыЕдИзм) Экспорт
	
	ПараметрыВ = Новый Структура("ГруппаПродукции,ЕдиницаИзмерения1,ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств( ПараметрыВ, ВыборкаСтрокТовары);
		
	МассаБрутто = 0;
	ЕдиницаИзмерения1Весовая = УГМК_СлужебныеФункции.ЕдиницаИзмерения1Весовая( Организация, ПараметрыВ);
	Если ЕдиницаИзмерения1Весовая тогда
		Если ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения1) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения1) = Тип("СправочникСсылка.ЕдиницыИзмерения")) тогда
			Если ЗначениеЗаполнено( ВыборкаСтрокТовары.Количество1) тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1*ВыборкаСтрокТовары.ЕдиницаИзмерения1.Вес;
			иначе
				МассаБрутто = ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм);
			КонецЕсли;
		иначеЕсли ЗначениеЗаполнено( ВыборкаСтрокТовары.ЕдиницаИзмерения1) и (ТипЗнч( ВыборкаСтрокТовары.ЕдиницаИзмерения1) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")) тогда 
			Если ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1*1000;
			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1*0.001;
			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения1 = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1;
			иначе
				МассаБрутто = 0;
			КонецЕсли;
		иначе
			Если ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Тонна тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1*1000;
			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Грамм тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1*0.001;
			иначеЕсли ВыборкаСтрокТовары.ЕдиницаИзмерения = ПараметрыЕдИзм.КлассификаторЕдИзм_Килограмм тогда
				МассаБрутто = ВыборкаСтрокТовары.Количество1;
			иначе
				МассаБрутто = 0;
			КонецЕсли;
		КонецЕсли;
	иначе
		МассаБрутто = ПолучитьМассаНетто( ВыборкаСтрокТовары, ПараметрыЕдИзм); 
	КонецЕсли;
	
	Возврат( МассаБрутто);
КонецФункции 

Функция СформироватьСтруктуруЭтикетки_Файл( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени = "", ВерсияЭтикетки = "004") Экспорт
	РезультатФ = "";
	//ОЦМ Мобильная
	//#Если  МобильноеПриложениеКлиент  тогда
	//	Возврат Неопределено;
	//#Иначе
	//ИменаКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	//
	//Файл = Новый ТекстовыйДокумент;
	//Файл.ДобавитьСтроку( XMLСтрока( ВерсияЭтикетки));
	//
	//Если ВерсияЭтикетки <> "001" тогда
	//	Файл.ДобавитьСтроку( ПолучитьУИДЭтикетки());
	//КонецЕсли;
	//
	//СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	//
	//ПростыеТипы = Новый Массив;
	//ПростыеТипы.Добавить( Тип( "Число"));
	//ПростыеТипы.Добавить( Тип( "Строка"));
	//ПростыеТипы.Добавить( Тип( "Дата"));
	//ПростыеТипы.Добавить( Тип( "Булево"));
	//ПростыеТипы.Добавить( Тип( "Неопределено"));
	//
	//Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	//Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
	//
	//СтруктураКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
	//
	//СтрИзмерения = "";
	//СтрРесурсы = ",Количество,Количество1,КоличествоМест,КоличествоТара,";

	//// Свернем данные кодирования, чтобы при чтении строки поиска были уникальны
	//ТаблицаКодирования = Новый ТаблицаЗначений;
	//Для каждого Колонка из СтруктураКолонок цикл
	//	ИмяКолонки = Колонка.Ключ;
	//	ТаблицаКодирования.Колонки.Добавить( ИмяКолонки);
	//	
	//	Если Найти( СтрРесурсы, ","+ИмяКолонки+",") = 0 тогда
	//		СтрИзмерения = СтрИзмерения + "," + ИмяКолонки;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ДобавочныеКолонки = ",Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра,ДополнительнаяИнформация,";
	//Для каждого Строка из ДанныеБирки цикл
	//	НоваяСтрока = ТаблицаКодирования.Добавить();
	//	
	//	Для каждого Колонка из СтруктураКолонок цикл
	//		НоваяСтрока[ Колонка.Ключ] = Неопределено;
	//		Если Найти( ДобавочныеКолонки, ","+Колонка.Ключ+",") = 0 тогда
	//			НоваяСтрока[ Колонка.Ключ] = Строка[ ИменаКолонок[ Колонка.Ключ]];
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//ТаблицаКодирования.Свернуть( Сред( СтрИзмерения, 2), "Количество,Количество1,КоличествоМест,КоличествоТара");
	//
	//КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
	//КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
	//
	//КоличествоЭ = 0;
	//МестЭ = 0;
	//ПараметрыЕдИзм = УГМК_ОперативныйУчет.ПолучитьКлассификаторыЕдИзм();
	//МаркиСплава = Новый Массив;
	//МаркаСплаваСтр = "";
	//ПартияСтр = "";
	//ПартияМассив = Новый Массив; 
	//ТараСтр = "";
	//ТараМассив = Новый Массив;
	//Текст1 = "";
	//
	//// ТаблицаКодирования свернута, Имена колонок равны колонкам бирки
	//Для каждого Строка из ТаблицаКодирования цикл
	//	ЗаполнитьЗначенияСвойств( СтруктураКолонок, Строка);
	//	
	//	ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	//	Если ЗначениеЗаполнено( ХарактеристикаНоменклатуры) тогда
	//		ЗаполнитьЗначенияСвойств( СтруктураКолонок, ХарактеристикаНоменклатуры);
	//	КонецЕсли;
	//	
	//	Если Строка.ПоСвойствам тогда
	//		Текст1 = Текст1 + СообщениеКодирования( КлючПоСвойствам, СтруктураКолонок);
	//	иначе
	//		Текст1 = Текст1 + СообщениеКодирования( КлючНатуральный, СтруктураКолонок);
	//	КонецЕсли;
	//	
	//	// Формирование текстовых полей этикетки
	//	КоличествоЭ = КоличествоЭ + ПолучитьМассаБрутто( ОбъектОрганизация, СтруктураКолонок, ПараметрыЕдИзм);
	//	МестЭ = МестЭ + СтруктураКолонок.КоличествоМест; 
	//	
	//	Если ЗначениеЗаполнено( СтруктураКолонок.МаркаСплава) и (МаркиСплава.Найти( СтруктураКолонок.МаркаСплава) = Неопределено) тогда
	//		МаркиСплава.Добавить( СтруктураКолонок.МаркаСплава);
	//		МаркаСплаваСтр = МаркаСплаваСтр+";"+ПредставлениеМаркиСплава( СтруктураКолонок.МаркаСплава);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( СтруктураКолонок.ПаспортПартии) и (ПартияМассив.Найти( СтруктураКолонок.ПаспортПартии) = Неопределено) тогда
	//		ПартияМассив.Добавить( СтруктураКолонок.ПаспортПартии);
	//		ПартияСтр = ПартияСтр+";"+ПолучитьПредставлениеПартииЭтикетка( СтруктураКолонок.ПаспортПартии);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( СтруктураКолонок.Тара) и (ТараМассив.Найти( СтруктураКолонок.Тара) = Неопределено) тогда
	//		ТараМассив.Добавить( СтруктураКолонок.Тара);
	//		ТараСтр = ТараСтр+";"+Строка( СтруктураКолонок.Тара);
	//	КонецЕсли;
	//	
	//	Для каждого Колонка из СтруктураКолонок цикл
	//		КолонкаИмя = Колонка.Ключ;
	//		Значение = Колонка.Значение;
	//		ТипЗначения = ТипЗнч( Значение);
	//		
	//		Если КолонкаИмя = "ПаспортПартии" тогда
	//			Если Значение = Неопределено тогда
	//				Файл.ДобавитьСтроку( "");
	//				Файл.ДобавитьСтроку( "");
	//				Файл.ДобавитьСтроку( "");
	//				Файл.ДобавитьСтроку( "");
	//				Файл.ДобавитьСтроку( "");
	//			иначе
	//				Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
	//				Файл.ДобавитьСтроку( XMLСтрока( Значение.Дата));
	//				Файл.ДобавитьСтроку( XMLСтрока( Значение.Номер));
	//				Файл.ДобавитьСтроку( XMLСтрока( Значение.ДляПредставления));
	//				Файл.ДобавитьСтроку( XMLСтрока( Значение));
	//			КонецЕсли;
	//		иначе
	//			Если ЗначениеЗаполнено( Значение) тогда
	//				Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
	//				ТипЗначения = ТипЗнч( Значение);
	//				
	//				Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение));
	//				иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение.УГМК_Код));
	//				иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Код));
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Владелец.Код));
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Наименование));
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение));
	//				иначе
	//					Файл.ДобавитьСтроку( XMLСтрока( Значение.Код));
	//				КонецЕсли;
	//			иначеЕсли ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//				Файл.ДобавитьСтроку( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
	//				Файл.ДобавитьСтроку( "");
	//			иначе
	//				Файл.ДобавитьСтроку( "");
	//				Файл.ДобавитьСтроку( "");
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//ИмяФайлаФормированиеЭтикетки = УГМК_СлужебныеФункции.ПолучитьНастройку("ИмяФайлаФормированиеЭтикетки");
	//Если не ЗначениеЗаполнено( ИмяФайлаФормированиеЭтикетки) тогда
	//	ИмяФайлаФормированиеЭтикетки = ПолучитьИмяВременногоФайла();
	//КонецЕсли;
	//
	//Файл.Записать( ИмяФайлаФормированиеЭтикетки, КодировкаТекста.ANSI);
	//
	//Данные = Новый ХранилищеЗначения( Новый ДвоичныеДанные( ИмяФайлаФормированиеЭтикетки), Новый СжатиеДанных( 9));
	//
	//СтрокаКода = СтрЗаменить( XMLСтрока( Данные), "AgFTS2/0iI3BTqDV67a9oKcN", "_");
	//СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК+Символы.ПС, "")+Символы.ВК; 
	//
	//РезультатФ = Новый Структура("ТекстДляКодирования", СтрокаКода);
	//РезультатФ.Вставить("КоличествоСтр",Формат( КоличествоЭ, "ЧГ=0"));
	//РезультатФ.Вставить("МаркаСплаваСтр",Сред( МаркаСплаваСтр, 2));
	//
	//Если МестЭ > 1 тогда
	//	РезультатФ.Вставить("Текст1", Формат( МестЭ, "ЧГ=0")+" мест; "+Текст1);
	//иначе	
	//	РезультатФ.Вставить("Текст1", Текст1);
	//КонецЕсли;
	//
	////РезультатФ.Вставить("Текст2","");
	////РезультатФ.Вставить("Текст3","");
	////РезультатФ.Вставить("Текст4","");
	//
	//ТараСтр = Сред( ТараСтр, 2);
	//ПартияСтр = Сред( ПартияСтр, 2);
	//Если ЗначениеЗаполнено( ТараСтр) и ЗначениеЗаполнено( ПартияСтр) тогда
	//	РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+" ("+ТараСтр+")");
	//ИначеЕсли ЗначениеЗаполнено( ТараСтр) или ЗначениеЗаполнено( ПартияСтр) тогда
	//	РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+ТараСтр);
	//КонецЕсли;
	//
	Возврат( РезультатФ);
КонецФункции

Функция	СобратьСтрокуИзМассива( Знач МассивСтрок, Знач Разделитель = Неопределено) Экспорт
	Если Разделитель = Неопределено тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	
	СтрокаКодаПолная = "";
	Для каждого Элем из МассивСтрок цикл
		СтрокаКодаПолная = СтрокаКодаПолная + Элем + Разделитель;
	КонецЦикла;
	
	Возврат( СтрокаКодаПолная);
КонецФункции

Функция СформироватьСтруктуруЭтикетки_Строка( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени = "", ВерсияЭтикетки = "005") Экспорт
	
	ИменаКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	
	Файл = Новый Массив;
	Файл.Добавить( XMLСтрока( ВерсияЭтикетки));
	
	Если ВерсияЭтикетки <> "001" тогда
		Файл.Добавить( ПолучитьУИДЭтикетки());
	КонецЕсли;
	
	СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	
	ПростыеТипы = Новый Массив;
	ПростыеТипы.Добавить( Тип( "Число"));
	ПростыеТипы.Добавить( Тип( "Строка"));
	ПростыеТипы.Добавить( Тип( "Дата"));
	ПростыеТипы.Добавить( Тип( "Булево"));
	ПростыеТипы.Добавить( Тип( "Неопределено"));
	
	Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
	
	СтруктураКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
	
	СтрИзмерения = "";
	СтрРесурсы = ",Количество,Количество1,КоличествоМест,КоличествоТара,";

	// Свернем данные кодирования, чтобы при чтении строки поиска были уникальны
	ТаблицаКодирования = Новый ТаблицаЗначений;
	Для каждого Колонка из СтруктураКолонок цикл
		ИмяКолонки = Колонка.Ключ;
		ТаблицаКодирования.Колонки.Добавить( ИмяКолонки);
		
		Если Найти( СтрРесурсы, ","+ИмяКолонки+",") = 0 тогда
			СтрИзмерения = СтрИзмерения + "," + ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	ДобавочныеКолонки = ",Размер1,Размер2,Размер3,Размер4,Размер5,ОбъемПогонногоМетра,ДополнительнаяИнформация,";
	
	НазначениеСтр = "";
	ДополнительноСтр = "";
	РабочийЦентрСтр = "";
	
	Для каждого Строка из ДанныеБирки цикл
		НоваяСтрока = ТаблицаКодирования.Добавить();
		
		
		Если (ВерсияЭтикетки >= "005") и (ЗначениеЗаполнено( Строка.Назначение)) тогда
			ДобавитьУникальноеПредставление( НазначениеСтр, Строка.Назначение);
		КонецЕсли;
		Если (ВерсияЭтикетки >= "005") и (ЗначениеЗаполнено( Строка.Дополнительно)) тогда
			ДобавитьУникальноеПредставление( ДополнительноСтр, Строка.Дополнительно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Строка.РабочийЦентр) тогда
			ДобавитьУникальноеПредставление( РабочийЦентрСтр, Строка.РабочийЦентр);
		КонецЕсли;
		
		Для каждого Колонка из СтруктураКолонок цикл
			НоваяСтрока[ Колонка.Ключ] = Неопределено;
			Если Найти( ДобавочныеКолонки, ","+Колонка.Ключ+",") = 0 тогда
				НоваяСтрока[ Колонка.Ключ] = Строка[ ИменаКолонок[ Колонка.Ключ]];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаКодирования.Свернуть( Сред( СтрИзмерения, 2), "Количество,Количество1,КоличествоМест,КоличествоТара");
	
	КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
	КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
	
	КоличествоЭ = 0;
	МестЭ = 0;
	ПараметрыЕдИзм = УГМК_ОперативныйУчет.ПолучитьКлассификаторыЕдИзм();
	МаркиСплава = Новый Массив;
	МаркаСплаваСтр = "";
	ПартияСтр = "";
	ПартияМассив = Новый Массив; 
	ТараСтр = "";
	ТараМассив = Новый Массив;
	Текст1 = КомпактноеПредставлениеБирки( ТаблицаКодирования);
	
	// ТаблицаКодирования свернута, Имена колонок равны колонкам бирки
	Для каждого Строка из ТаблицаКодирования цикл
		ЗаполнитьЗначенияСвойств( СтруктураКолонок, Строка);
		
		ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		Если ЗначениеЗаполнено( ХарактеристикаНоменклатуры) тогда
			ЗаполнитьЗначенияСвойств( СтруктураКолонок, ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		//Если Строка.ПоСвойствам тогда
		//	Текст1 = Текст1 + СообщениеКодирования( КлючПоСвойствам, СтруктураКолонок);
		//иначе
		//	Текст1 = Текст1 + СообщениеКодирования( КлючНатуральный, СтруктураКолонок);
		//КонецЕсли;
		
		// Формирование текстовых полей этикетки
		КоличествоЭ = КоличествоЭ + ПолучитьМассаБрутто( ОбъектОрганизация, СтруктураКолонок, ПараметрыЕдИзм);
		МестЭ = МестЭ + СтруктураКолонок.КоличествоМест; 
		
		Если ЗначениеЗаполнено( СтруктураКолонок.МаркаСплава) и (МаркиСплава.Найти( СтруктураКолонок.МаркаСплава) = Неопределено) тогда
			МаркиСплава.Добавить( СтруктураКолонок.МаркаСплава);
			МаркаСплаваСтр = МаркаСплаваСтр+";"+ПредставлениеМаркиСплава( СтруктураКолонок.МаркаСплава);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( СтруктураКолонок.ПаспортПартии) и (ПартияМассив.Найти( СтруктураКолонок.ПаспортПартии) = Неопределено) тогда
			ПартияМассив.Добавить( СтруктураКолонок.ПаспортПартии);
			ПартияСтр = ПартияСтр+";"+ПолучитьПредставлениеПартииЭтикетка( СтруктураКолонок.ПаспортПартии);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( СтруктураКолонок.Тара) и (ТараМассив.Найти( СтруктураКолонок.Тара) = Неопределено) тогда
			ТараМассив.Добавить( СтруктураКолонок.Тара);
			ТараСтр = ТараСтр+";"+Строка( СтруктураКолонок.Тара);
		КонецЕсли;
		
		Для каждого Колонка из СтруктураКолонок цикл
			КолонкаИмя = Колонка.Ключ;
			Значение = Колонка.Значение;
			ТипЗначения = ТипЗнч( Значение);
			
			Если КолонкаИмя = "ПаспортПартии" тогда
				Если Значение = Неопределено тогда
					Файл.Добавить( "");
					Файл.Добавить( "");
					Файл.Добавить( "");
					Файл.Добавить( "");
					Файл.Добавить( "");
				иначе
					Файл.Добавить( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
					Файл.Добавить( XMLСтрока( Значение.Дата));
					Файл.Добавить( XMLСтрока( Значение.Номер));
					Файл.Добавить( XMLСтрока( Значение.ДляПредставления));
					Файл.Добавить( XMLСтрока( Значение));
				КонецЕсли;
			иначе
				Если ЗначениеЗаполнено( Значение) тогда
					Файл.Добавить( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
					ТипЗначения = ТипЗнч( Значение);
					
					Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
						Файл.Добавить( XMLСтрока( Значение));
					иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
						Файл.Добавить( XMLСтрока( Значение.УГМК_Код));
					иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
						Файл.Добавить( XMLСтрока( Значение.Код));
						Файл.Добавить( XMLСтрока( Значение.Владелец.Код));
						Файл.Добавить( XMLСтрока( Значение.Наименование));
						Файл.Добавить( XMLСтрока( Значение));
					иначе
						Файл.Добавить( XMLСтрока( Значение.Код));
					КонецЕсли;
				иначеЕсли ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
					Файл.Добавить( XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)));
					Файл.Добавить( "");
				иначе
					Файл.Добавить( "");
					Файл.Добавить( "");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтрокаКодаПолная = СобратьСтрокуИзМассива( Файл);
	
	Данные = Новый ХранилищеЗначения( СтрокаКодаПолная, Новый СжатиеДанных( 9));
	
	СтрокаКода = СтрЗаменить( XMLСтрока( Данные), "AgFTS2/0iI3BTqDV67a9oKcN", "_");
	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК+Символы.ПС, "")+Символы.ВК; 
	
	РезультатФ = Новый Структура("ТекстДляКодирования", СтрокаКода);
	РезультатФ.Вставить("КоличествоСтр",Формат( КоличествоЭ, "ЧГ=0"));
	РезультатФ.Вставить("МаркаСплаваСтр",Сред( МаркаСплаваСтр, 2));
	
	РезультатФ.Вставить("НазначениеСтр", НазначениеСтр);
	РезультатФ.Вставить("ДополнительноСтр", ДополнительноСтр);
	РезультатФ.Вставить("РабочийЦентрСтр", РабочийЦентрСтр);
	
	Если МестЭ > 1 тогда
		РезультатФ.Вставить("Текст1", Формат( МестЭ, "ЧГ=0")+" мест; "+Текст1);
	иначе	
		РезультатФ.Вставить("Текст1", Текст1);
	КонецЕсли;
	
	//РезультатФ.Вставить("Текст2","");
	//РезультатФ.Вставить("Текст3","");
	//РезультатФ.Вставить("Текст4","");
	
	ТараСтр = Сред( ТараСтр, 2);
	ПартияСтр = Сред( ПартияСтр, 2);
	Если ЗначениеЗаполнено( ТараСтр) и ЗначениеЗаполнено( ПартияСтр) тогда
		РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+" ("+ТараСтр+")");
	ИначеЕсли ЗначениеЗаполнено( ТараСтр) или ЗначениеЗаполнено( ПартияСтр) тогда
		РезультатФ.Вставить("ПаспортПартииСтр", ПартияСтр+ТараСтр);
	КонецЕсли;
	
	Возврат( РезультатФ);
КонецФункции

Функция СформироватьСтруктуруЭтикетки( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени = "", ВерсияЭтикетки = "005") Экспорт
	СодержимоеБиркиСтрока = Истина;
	Если СодержимоеБиркиСтрока = Истина тогда
		РезультатФ = СформироватьСтруктуруЭтикетки_Строка( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени, ВерсияЭтикетки);
	иначе
		РезультатФ = СформироватьСтруктуруЭтикетки_Файл( ДанныеБирки, ОбъектОрганизация, ДополнениеИмени, ВерсияЭтикетки);
	КонецЕсли;
	
	Возврат( РезультатФ);
КонецФункции

Процедура ПрочитатьСтрокуЭтикетки_Файл( РезультатЧтенияБирки, ДвоичныеДанные)
	//ОЦМ Мобильная
	//ИмяФайлаЧтениеЭтикетки = УГМК_СлужебныеФункции.ПолучитьНастройку("ИмяФайлаЧтениеЭтикетки");
	//Если не ЗначениеЗаполнено( ИмяФайлаЧтениеЭтикетки) тогда
	//	ИмяФайлаЧтениеЭтикетки = ПолучитьИмяВременногоФайла();
	//КонецЕсли;
	//
	//ДвоичныеДанные.Записать( ИмяФайлаЧтениеЭтикетки);
	//
	//Файл = Новый ТекстовыйДокумент;
	//Файл.Прочитать( ИмяФайлаЧтениеЭтикетки, КодировкаТекста.ANSI);
	//
	//ТекСтрока = 1;
	//ВерсияЭтикетки = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//
	//Если ВерсияЭтикетки = "001" тогда
	//	СтрУИД = "Бирка "+Строка( Файл.КоличествоСтрок());
	//иначе
	//	СтрУИД = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//КонецЕсли;
	//РезультатЧтенияБирки.Вставить("УИДЭтикетки", СтрУИД);
	//
	//СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	//
	//ПростыеТипы = Новый Массив;
	//ПростыеТипы.Добавить( Тип( "Число"));
	//ПростыеТипы.Добавить( Тип( "Строка"));
	//ПростыеТипы.Добавить( Тип( "Дата"));
	//ПростыеТипы.Добавить( Тип( "Булево"));
	//ПростыеТипы.Добавить( Тип( "Неопределено"));
	//
	//Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	//Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
	//Тип_МаркаСплаваПроизводство = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство");
	//
	//СтруктураКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
	//
	//ВсегоСтрок = Файл.КоличествоСтрок();
	//
	//ДанныеБирки = Новый Массив;
	//Пока 1 = 1 цикл
	//	Если ТекСтрока >= ВсегоСтрок тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	НоваяСтрока = Новый Структура;
	//		
	//	Для каждого Колонка из СтруктураКолонок цикл
	//		КолонкаИмя = Колонка.Ключ;
	//		
	//		Если КолонкаИмя = "ПаспортПартии" тогда
	//			ИндексТипа = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Число"));
	//			ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
	//			ЗначениеДата = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Дата"));
	//			ЗначениеНомер = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//			ЗначениеДляПредставления = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//			ЗначениеСсылка = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, ТипЗначения);
	//			
	//			Если ПростыеТипы.Найти( ТипЗначения) = Неопределено тогда
	//				Значение = ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления);
	//			иначе
	//				Значение = Неопределено;
	//			КонецЕсли;
	//		иначе
	//			ИндексТипа = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Число"));
	//			ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
	//			Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//				Значение = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, ТипЗначения);
	//			иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
	//				ЗначениеУГМК_Код = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеУГМК_Код, "УГМК_Код");
	//			иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
	//				ЗначениеКод = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				ЗначениеВладелецКод = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				ЗначениеНаименование = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				ЗначениеСсылка = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, ТипЗначения);
	//				
	//				Значение = ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование);
	//			иначеЕсли ТипЗначения = Тип_МаркаСплаваПроизводство тогда
	//				ЗначениеКод = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				Значение = ПолучитьСсылкуМаркаСплаваПроизводство( ЗначениеКод);
	//			иначе
	//				ЗначениеКод = ПолучитьСледующееЗначениеИзФайла( Файл, ТекСтрока, Тип("Строка"));
	//				Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, "Код");
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		НоваяСтрока.Вставить( КолонкаИмя, Значение);
	//	КонецЦикла;
	//	Если ТипЗнч( НоваяСтрока.ХарактеристикаНоменклатуры) = Тип_ЗначенияРазмеров тогда
	//		ПроверитьПоляЗначенияРазмеров( НоваяСтрока);
	//	КонецЕсли;
	//	
	//	ДанныеБирки.Добавить( НоваяСтрока);
	//КонецЦикла;
	//
	//ПроверитьТипыВДанныхБирки( ДанныеБирки);
	//
	//РезультатЧтенияБирки.Вставить("ДанныеБирки", ДанныеБирки);
КонецПроцедуры

Функция ПолучитьЗакодированнуюСсылку( ОбъектСсылка, Версия = "004") Экспорт
	СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
	Элемент = СписокТипов.НайтиПоЗначению( ТипЗнч( ОбъектСсылка));
	
	Если Элемент = Неопределено тогда
		Результат = Неопределено;
	иначе
		ПрефиксТипа = Формат( СписокТипов.Индекс( Элемент), "ЧЦ=3; ЧВН=; ЧГ=0");
		Результат = ПрефиксТипа+XMLСтрока( ОбъектСсылка)+Символы.ВК;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ВосстановитьСсылкуИзШтрихкода( Знач СтрокаКода, Версия = "004") Экспорт
	Результат = Неопределено;
	
	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ВК, "");
	СтрокаКода = СтрЗаменить( СтрокаКода, Символы.ПС, "");
	
	ДлинаСтрокаКода = СтрДлина( СтрокаКода);
	Если ДлинаСтрокаКода = 39 тогда
		Попытка 
			ИндексТипа = Число( Лев( СтрокаКода, 3));
		исключение
			ИндексТипа = Неопределено;
		КонецПопытки;
		
		Если ИндексТипа <> Неопределено тогда
			СписокТипов = ПолучитьТипыВерсииЭтикетки( Версия);
			Если СписокТипов.Количество() - 1 >= ИндексТипа тогда
				ЭлементТипа = СписокТипов[ ИндексТипа];
				Результат = XMLЗначение( ЭлементТипа.Значение, Сред( СтрокаКода, 4));
			КонецЕсли;
		КонецЕсли;
	иначеЕсли ДлинаСтрокаКода = 8 или ДлинаСтрокаКода = 13 тогда
		Результат = УГМК_ОперативныйУчетВызовСервера.ПолучитьПартиюПоШК( СтрокаКода); 
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	
	Пока СтрДлина( ПраваяЧасть) > 0 Цикл
		Массив.Добавить( СокрЛП( Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем( Стр, Разделитель);
	КонецЦикла; 
	
	Массив.Добавить( СокрЛП( Стр));

	Возврат( Массив);
	
КонецФункции // МассивИзСтроки() 

//ОЦМ Мобильная
Функция ПолучитьТипПартии( ИндексТипа) Экспорт
	ТипПартии = Перечисления.УГМК_ТипПартии.УГМК_ПаспортПартии;
	
	Если ИндексТипа = 19 Тогда
		ТипПартии = Перечисления.УГМК_ТипПартии.УГМК_ПартияСырья;
	ИначеЕсли ИндексТипа = 20 Тогда	
		ТипПартии = Перечисления.УГМК_ТипПартии.УГМК_Плавка;
	ИначеЕсли ИндексТипа = 21 Тогда	
		ТипПартии = Перечисления.УГМК_ТипПартии.УГМК_ПаспортПартии;
	ИначеЕсли ИндексТипа = 22 Тогда	
		ТипПартии = Перечисления.УГМК_ТипПартии.УГМК_ПаспортПартииСТК;
	КонецЕсли;	
	
	Возврат ТипПартии;
КонецФункции

// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	[ИмяТаблицы]
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции


Процедура ПрочитатьСтрокуЭтикетки_Строка( РезультатЧтенияБирки, Файл)
	
	ТекСтрока = 0;
	ВерсияЭтикетки = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
	
	Если ВерсияЭтикетки = "001" тогда
		СтрУИД = "Бирка "+Строка( Файл.Количество());
	иначе
		СтрУИД = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
	КонецЕсли;
	РезультатЧтенияБирки.Вставить("УИДЭтикетки", СтрУИД);
	РезультатЧтенияБирки.Вставить("ВерсияЭтикетки", ВерсияЭтикетки);
	
	СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	
	ПростыеТипы = Новый Массив;
	ПростыеТипы.Добавить( Тип( "Число"));
	ПростыеТипы.Добавить( Тип( "Строка"));
	ПростыеТипы.Добавить( Тип( "Дата"));
	ПростыеТипы.Добавить( Тип( "Булево"));
	ПростыеТипы.Добавить( Тип( "Неопределено"));
	
	Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	Тип_ЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
	Тип_МаркаСплаваПроизводство = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство");
	
	СтруктураКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки( ВерсияЭтикетки);
	
	ПоследнийИндекс = Файл.Количество()-1;
	
	ДанныеБирки = Новый Массив;
	Пока 1 = 1 цикл
		Если ТекСтрока >= ПоследнийИндекс тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = Новый Структура;
			
		Для каждого Колонка из СтруктураКолонок цикл
			КолонкаИмя = Колонка.Ключ;
			
			Если КолонкаИмя = "ПаспортПартии" тогда
				ИндексТипа = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
				ТипЗначения = УГМК_ОперативныйУчет.ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
				ЗначениеДата = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Дата"));
				ЗначениеНомер = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
				ЗначениеДляПредставления = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
				ТипПартии = ПолучитьТипПартии(ИндексТипа);
				ЗначениеСсылка = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
				
				Если ПростыеТипы.Найти( ТипЗначения) = Неопределено тогда
					Значение = УГМК_ОперативныйУчет.ПолучитьСсылкуПартии( ТипЗначения, ЗначениеСсылка, ЗначениеДата, ЗначениеНомер, ЗначениеДляПредставления, ТипПартии);
				иначе
					Значение = Неопределено;
				КонецЕсли;
			ИначеЕсли КолонкаИмя = "СерияНоменклатурыПредставление" тогда
					Продолжить;
			Иначе
				ИндексТипа = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Число"));
				ТипЗначения = УГМК_ОперативныйУчет.ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
				Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
					Значение = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
				иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
					ЗначениеУГМК_Код = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеУГМК_Код, "УГМК_Код");
				иначеЕсли ТипЗначения = Тип_ЗначенияРазмеров тогда
					ЗначениеКод = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеВладелецКод = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеНаименование = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					ЗначениеСсылка = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, ТипЗначения);
					
					Значение = УГМК_ОперативныйУчет.ПолучитьСсылкуЗначенияРазмера( ТипЗначения, ЗначениеСсылка, ЗначениеКод, ЗначениеВладелецКод, ЗначениеНаименование);
				иначеЕсли ТипЗначения = Тип_МаркаСплаваПроизводство тогда
					ЗначениеКод = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					Значение = ПолучитьСсылкуМаркаСплаваПроизводство( ЗначениеКод);
				иначе
					ЗначениеКод = УГМК_ОперативныйУчет.ПолучитьСледующееЗначениеИзМассива( Файл, ТекСтрока, Тип("Строка"));
					Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, "Код");
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.Вставить( КолонкаИмя, Значение);
		КонецЦикла;
		Если ТипЗнч( НоваяСтрока.ХарактеристикаНоменклатуры) = Тип_ЗначенияРазмеров тогда
			УГМК_ОперативныйУчет.ПроверитьПоляЗначенияРазмеров( НоваяСтрока);
		КонецЕсли;
		
		Если ВерсияЭтикетки < "005" тогда
			НоваяСтрока.Вставить( "Назначение", "");
			НоваяСтрока.Вставить( "Дополнительно", "");
		КонецЕсли;
		
		Если ВерсияЭтикетки < "005" тогда
			НоваяСтрока.Вставить( "Назначение", "");
			НоваяСтрока.Вставить( "Дополнительно", "");
		КонецЕсли;
		
		ДанныеБирки.Добавить( НоваяСтрока);
	КонецЦикла;
	
	ПроверитьТипыВДанныхБирки( ДанныеБирки, ВерсияЭтикетки);
	
	РезультатЧтенияБирки.Вставить("ДанныеБирки", ДанныеБирки);

КонецПроцедуры

Функция ПрочитатьСтрокуЭтикетки( Знач ТекстДляКодирования, РезультатЧтенияБирки) Экспорт
	Перем ДанныеБирки, Серия, Тара, СтруктураОтвета, ТаблицаРезультатЗапроса, СерияНоменклатурыПредставление;
	
	Если ТипЗнч( РезультатЧтенияБирки) <> Тип("Структура") тогда
		РезультатЧтенияБирки = Новый Структура;
	иначе
		РезультатЧтенияБирки.Очистить();
	КонецЕсли;
	
	// Проверка на короткий ШК серии
	КоличествоСерии = 0;
	КоличествоТары = 0;
	Если ШКСерии(ТекстДляКодирования, Серия, КоличествоСерии, СерияНоменклатурыПредставление) Тогда
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
		БиркаСодержитСерию = Истина;
	Иначе	
		БиркаСодержитСерию = Ложь;
	КонецЕсли;	
	
		// Проверка на короткий ШК тары
	Если ШКТары(ТекстДляКодирования, Тара, КоличествоТары) Тогда
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
		БиркаСодержитТару = Истина;
	Иначе	
		БиркаСодержитТару = Ложь;
	КонецЕсли;

	
	Если Лев( ТекстДляКодирования, 1) = "_" тогда
		ТекстДляКодирования = "AgFTS2/0iI3BTqDV67a9oKcN"+Сред( ТекстДляКодирования, 2);
	КонецЕсли;
	
	Попытка 
		Данные = XMLЗначение( Тип("ХранилищеЗначения"), ТекстДляКодирования);	
		ДанныеИзКода = Данные.Получить();
		
		БиркаСодержитХранилище = Истина;
	исключение
		БиркаСодержитХранилище = Ложь;
	КонецПопытки;
	
	БиркаСодержитСтроку = БиркаСодержитХранилище и ТипЗнч( ДанныеИзКода) = Тип("Строка");
	БиркаСодержитФайл = БиркаСодержитХранилище и ТипЗнч( ДанныеИзКода) = Тип("ДвоичныеДанные");
	
	Если БиркаСодержитСтроку тогда
		ПрочитатьСтрокуЭтикетки_Строка( РезультатЧтенияБирки, МассивИзСтроки( ДанныеИзКода, Символы.ПС));
	иначеЕсли БиркаСодержитФайл тогда
		ПрочитатьСтрокуЭтикетки_Файл( РезультатЧтенияБирки, ДанныеИзКода);	
	иначеЕсли БиркаСодержитСерию тогда
		ПолучитьДанныепоШКСерии( РезультатЧтенияБирки, Серия, КоличествоСерии, СерияНоменклатурыПредставление);
		БиркаСодержитХранилище = Истина;
	иначеЕсли БиркаСодержитТару тогда
		ПолучитьДанныепоШКТары( РезультатЧтенияБирки, Тара, КоличествоТары);
		БиркаСодержитХранилище = Истина;
	иначе
		РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
		РезультатЧтенияБирки.Вставить("ДанныеБирки", Новый Массив);
	КонецЕсли;
	
	Возврат( БиркаСодержитХранилище)
КонецФункции

Функция ЗаполнитьПоУПП( Серия)
	Возврат "";
	// ОЦММобильная
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("СерияНоменклатуры", Серия);
	//
	//Запр.Текст = "ВЫБРАТЬ
	//             |	1 КАК ТипЗаписи,
	//             |	ЛОЖЬ КАК ПоСвойствам,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
	//             |	ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры,
	//             |	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Количество,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Коэффициент,
	//             |	0 КАК Коэффициент1,
	//             |	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения1,
	//             |	НЕОПРЕДЕЛЕНО КАК ПаспортПартии,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Брутто КАК Количество1,
	//             |	ОтчетПроизводстваЗаСменуПродукция.КоличествоТары,
	//             |	ОтчетПроизводстваЗаСменуПродукция.КоличествоМест,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Состояние КАК Состояние,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.МаркаСплава КАК МаркаСплава,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции КАК ГруппаПродукции,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Стандарт КАК Стандарт,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.ДополнительныйНД КАК ДополнительныйНД,
	//             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.НДНаХимСостав КАК НДНаХимСостав
	//             |ИЗ
	//             |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	//             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	//             |		ПО ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры = СерииНоменклатуры.Ссылка
	//             |			И ОтчетПроизводстваЗаСменуПродукция.Ссылка = СерииНоменклатуры.УГМК_ДокументОприходования
	//             |ГДЕ
	//             |	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры = &СерияНоменклатуры
	//             |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.ОтражатьВУправленческомУчете
	//             |
	//             |ОБЪЕДИНИТЬ ВСЕ
	//             |
	//             |ВЫБРАТЬ
	//             |	0,
	//             |	ЛОЖЬ,
	//             |	УГМК_УпаковкаТовары.ДокументОприходования,
	//             |	УГМК_УпаковкаТовары.Номенклатура,
	//             |	УГМК_УпаковкаТовары.ХарактеристикаНоменклатуры,
	//             |	УГМК_УпаковкаТовары.СерияНоменклатуры,
	//             |	УГМК_УпаковкаТовары.Количество,
	//             |	УГМК_УпаковкаТовары.Коэффициент,
	//             |	0,
	//             |	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения1,
	//             |	НЕОПРЕДЕЛЕНО КАК ПаспортПартии,
	//             |	УГМК_УпаковкаТовары.Брутто,
	//             |	ВЫБОР
	//             |		КОГДА УГМК_УпаковкаТовары.НомерСтроки = 1
	//             |			ТОГДА УГМК_УпаковкаТовары.Ссылка.КоличествоТары
	//             |		ИНАЧЕ 0
	//             |	КОНЕЦ,
	//             |	УГМК_УпаковкаТовары.КоличествоМест,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.Состояние,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.МаркаСплава,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.Стандарт,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.ДополнительныйНД,
	//             |	УГМК_УпаковкаТовары.Номенклатура.НоменклатураОЦМ_ск.НДНаХимСостав
	//             |ИЗ
	//             |	Документ.УГМК_Упаковка.Товары КАК УГМК_УпаковкаТовары
	//             |ГДЕ
	//             |	УГМК_УпаковкаТовары.Ссылка В
	//             |			(ВЫБРАТЬ
	//             |				СерииНоменклатуры.УГМК_Упаковка
	//             |			ИЗ
	//             |				Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	//             |			ГДЕ
	//             |				СерииНоменклатуры.Ссылка = &СерияНоменклатуры)
	//             |
	//             |УПОРЯДОЧИТЬ ПО
	//             |	ТипЗаписи";

	//Если УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияОперативногоУчета() Тогда 
	//	УзелПодключения = Строка( УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы"));
	//	РезультатЗапроса = Неопределено;
	//	Если не УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПолучитьТаблицуWEBСервисомКонсолидации( УзелПодключения, Запр, РезультатЗапроса, Истина) тогда
	//		РезультатЗапроса = Новый ТаблицаЗначений;
	//	КонецЕсли;
	//Иначе
	//	РезультатЗапроса = Запр.Выполнить().Выгрузить();
	//КонецЕсли;
	//
	//Если РезультатЗапроса.Количество() > 0 тогда
	//	МинТип = РезультатЗапроса[ 0].ТипЗаписи;
	//	Инд = 1;
	//	Пока Инд <= РезультатЗапроса.Количество()-1 цикл
	//		СтрокаР = РезультатЗапроса[ Инд];
	//		Если МинТип = СтрокаР.ТипЗаписи тогда
	//			Инд = Инд + 1;
	//		иначе
	//			РезультатЗапроса.Удалить( СтрокаР);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Возврат( РезультатЗапроса);
КонецФункции

Функция ЗаполнитьПоОстаткамОУ( Серия, Остатки)
	ГрупповаяТара = Новый Массив;
	Для каждого СтрокаО из Остатки цикл
		Если СтрокаО.ЭтоГрупповаяТара и ГрупповаяТара.Найти( СтрокаО.Тара) = Неопределено тогда
			ГрупповаяТара.Добавить( СтрокаО.Тара);
		КонецЕсли;
	КонецЦикла;
	
	Если ГрупповаяТара.Количество() = 0 тогда
		РезультатЗапроса = Остатки;
	иначе
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("ГрупповаяТара",ГрупповаяТара);
		Запр.УстановитьПараметр("ТипТары_Групповая", УГМК_СлужебныеФункции.ПолучитьНастройку("ТипТары_СерияСборнойПартии"));
		Запр.Текст = "ВЫБРАТЬ
		             |	ЛОЖЬ КАК ПоСвойствам,
		             |	УГМК_ОперативныеОстаткиОстатки.МестоУчета,
		             |	УГМК_ОперативныеОстаткиОстатки.МаркаСплава,
		             |	УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции,
		             |	УГМК_ОперативныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		             |	УГМК_ОперативныеОстаткиОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
		             |	УГМК_ОперативныеОстаткиОстатки.Состояние,
		             |	УГМК_ОперативныеОстаткиОстатки.ПаспортПартии КАК СерияНоменклатуры,
		             |	УГМК_ОперативныеОстаткиОстатки.Тара,
		             |	УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК Количество,
		             |	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток КАК Количество1,
		             |	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток - УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК КоличествоТара,
		             |	УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток КАК КоличествоМест,
		             |	ВЫБОР
		             |		КОГДА УГМК_ОперативныеОстаткиОстатки.Тара.ТипТары = &ТипТары_Групповая
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК ЭтоГрупповаяТара
		             |ИЗ
		             |	РегистрНакопления.УГМК_ОперативныеОстатки.Остатки КАК УГМК_ОперативныеОстаткиОстатки
		             |ГДЕ
		             |	УГМК_ОперативныеОстаткиОстатки.Тара в (&ГрупповаяТара)
		             |	И УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток > 0";
		РезультатЗапроса = Запр.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат( РезультатЗапроса);
КонецФункции

Функция ЗаполнитьПоПриемкеОУ( Серия)
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("СерияНоменклатуры", Серия);
	Запр.Текст = "ВЫБРАТЬ
	             |	1 КАК ТипЗаписи,
	             |	ЛОЖЬ КАК ПоСвойствам,
	             |	УГМК_ОперативныеОстатки.МестоУчета,
	             |	УГМК_ОперативныеОстатки.МаркаСплава,
	             |	УГМК_ОперативныеОстатки.ГруппаПродукции,
	             |	УГМК_ОперативныеОстатки.Номенклатура КАК Номенклатура,
	             |	УГМК_ОперативныеОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
	             |	УГМК_ОперативныеОстатки.Состояние,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии КАК СерияНоменклатуры,
	             |	УГМК_ОперативныеОстатки.Тара,
	             |	1 КАК Коэффициент,
	             |	0 КАК Коэффициент1,
	             |	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения1,
	             |	НЕОПРЕДЕЛЕНО КАК ПаспортПартии,
	             |	СУММА(УГМК_ОперативныеОстатки.Количество) КАК Количество,
	             |	СУММА(УГМК_ОперативныеОстатки.Количество1) КАК Количество1,
	             |	СУММА(УГМК_ОперативныеОстатки.Количество1 - УГМК_ОперативныеОстатки.Количество) КАК КоличествоТара,
	             |	СУММА(УГМК_ОперативныеОстатки.КоличествоМест) КАК КоличествоМест,
	             |	ИСТИНА КАК ЭтоГрупповаяТара
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	             |ГДЕ
	             |	УГМК_ОперативныеОстатки.Активность
	             |	И УГМК_ОперативныеОстатки.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.УпаковкаГП)
	             |	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	             |	И УГМК_ОперативныеОстатки.Тара В
	             |			(ВЫБРАТЬ
	             |				Данные.Тара
	             |			ИЗ
	             |				(ВЫБРАТЬ
	             |					УГМК_ОперативныеОстатки.Тара КАК Тара,
	             |					СУММА(УГМК_ОперативныеОстатки.Количество) КАК Количество
	             |				ИЗ
	             |					РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	             |				ГДЕ
	             |					УГМК_ОперативныеОстатки.Активность
	             |					И УГМК_ОперативныеОстатки.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.УпаковкаГП)
	             |					И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	             |					И УГМК_ОперативныеОстатки.ПаспортПартии = &СерияНоменклатуры
	             |				СГРУППИРОВАТЬ ПО
	             |					УГМК_ОперативныеОстатки.Тара
	             |				ИМЕЮЩИЕ
	             |					СУММА(УГМК_ОперативныеОстатки.Количество) > 0) КАК Данные)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ОперативныеОстатки.МестоУчета,
	             |	УГМК_ОперативныеОстатки.МаркаСплава,
	             |	УГМК_ОперативныеОстатки.ГруппаПродукции,
	             |	УГМК_ОперативныеОстатки.Номенклатура,
	             |	УГМК_ОперативныеОстатки.Характеристика,
	             |	УГМК_ОперативныеОстатки.Состояние,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	УГМК_ОперативныеОстатки.Тара
	             |
	             |ИМЕЮЩИЕ
	             |	СУММА(УГМК_ОперативныеОстатки.Количество) > 0
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	0,
	             |	ЛОЖЬ,
	             |	УГМК_ОперативныеОстатки.МестоУчета,
	             |	УГМК_ОперативныеОстатки.МаркаСплава,
	             |	УГМК_ОперативныеОстатки.ГруппаПродукции,
	             |	УГМК_ОперативныеОстатки.Номенклатура,
	             |	УГМК_ОперативныеОстатки.Характеристика,
	             |	УГМК_ОперативныеОстатки.Состояние,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	УГМК_ОперативныеОстатки.Тара,
	             |	1,
	             |	0,
	             |	НЕОПРЕДЕЛЕНО,
	             |	НЕОПРЕДЕЛЕНО,
	             |	СУММА(УГМК_ОперативныеОстатки.Количество),
	             |	СУММА(УГМК_ОперативныеОстатки.Количество1),
	             |	СУММА(УГМК_ОперативныеОстатки.Количество1 - УГМК_ОперативныеОстатки.Количество),
	             |	СУММА(УГМК_ОперативныеОстатки.КоличествоМест),
	             |	ИСТИНА
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	             |ГДЕ
	             |	УГМК_ОперативныеОстатки.Активность
	             |	И УГМК_ОперативныеОстатки.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПриемкаГП)
	             |	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	             |	И УГМК_ОперативныеОстатки.ПаспортПартии = &СерияНоменклатуры
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ОперативныеОстатки.МестоУчета,
	             |	УГМК_ОперативныеОстатки.МаркаСплава,
	             |	УГМК_ОперативныеОстатки.ГруппаПродукции,
	             |	УГМК_ОперативныеОстатки.Номенклатура,
	             |	УГМК_ОперативныеОстатки.Характеристика,
	             |	УГМК_ОперативныеОстатки.Состояние,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	УГМК_ОперативныеОстатки.Тара
	             |
	             |ИМЕЮЩИЕ
	             |	СУММА(УГМК_ОперативныеОстатки.Количество) > 0
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ТипЗаписи";		 
	РезультатЗапроса = Запр.Выполнить().Выгрузить();
		
	Если РезультатЗапроса.Количество() > 0 тогда
		МинТип = РезультатЗапроса[ 0].ТипЗаписи;
		Инд = 1;
		Пока Инд <= РезультатЗапроса.Количество() цикл
			СтрокаР = РезультатЗапроса[ Инд];
			Если МинТип = СтрокаР.ТипЗаписи тогда
				Инд = Инд + 1;
			иначе
				РезультатЗапроса.Удалить( СтрокаР);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат( РезультатЗапроса);
		
КонецФункции

Процедура ПолучитьДанныепоШКСерии( РезультатЧтенияБирки, Серия, КоличествоСерии, СерияНоменклатурыПредставление) экспорт
	МассивДанных = Новый Массив;
	//УзелПодключения = Строка( УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы"));
	
	Запр = Новый Запрос;
	//Запр.УстановитьПараметр("ВыпускВОУ", УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ВыпускВОУ"));
	//Запр.УстановитьПараметр("ТипТары_Групповая", УГМК_СлужебныеФункции.ПолучитьНастройку("ТипТары_СерияСборнойПартии"));
	Запр.УстановитьПараметр("Серия", Серия);
	Запр.Текст = "ВЫБРАТЬ
	             |	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры
				 //|	УГМК_ЗначенияСвойств.Значение
	             |ИЗ
	             |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
				 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствСерий КАК УГМК_ЗначенияСвойств
				 //|		ПО (УГМК_ЗначенияСвойств.Объект = СерииНоменклатуры.Ссылка)
				 //|			И (УГМК_ЗначенияСвойств.Свойство = &ВыпускВОУ)
	             |ГДЕ
	             |	СерииНоменклатуры.Ссылка = &Серия";
				 //|	И НЕ УГМК_ЗначенияСвойств.Значение ЕСТЬ NULL
				 //|;
				 //|
				 //|////////////////////////////////////////////////////////////////////////////////
				 //|ВЫБРАТЬ
				 //|	ЛОЖЬ КАК ПоСвойствам,
				 //|	УГМК_ОперативныеОстаткиОстатки.МестоУчета,
				 //|	УГМК_ОперативныеОстаткиОстатки.МаркаСплава,
				 //|	УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции,
				 //|	УГМК_ОперативныеОстаткиОстатки.Номенклатура КАК Номенклатура,
				 //|	УГМК_ОперативныеОстаткиОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
				 //|	УГМК_ОперативныеОстаткиОстатки.Состояние,
				 //|	УГМК_ОперативныеОстаткиОстатки.ПаспортПартии КАК СерияНоменклатуры,
				 //|	УГМК_ОперативныеОстаткиОстатки.Тара КАК Тара,
				 //|	1 КАК Коэффициент,
				 //|	0 КАК Коэффициент1,
				 //|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения1,
				 //|	НЕОПРЕДЕЛЕНО КАК ПаспортПартии,
				 //|	УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК Количество,
				 //|	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток КАК Количество1,
				 //|	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток - УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК КоличествоТара,
				 //|	УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток КАК КоличествоМест
				 ////|	ВЫБОР
				 ////|		КОГДА УГМК_ОперативныеОстаткиОстатки.Тара.ТипТары = &ТипТары_Групповая
				 ////|			ТОГДА ИСТИНА
				 ////|		ИНАЧЕ ЛОЖЬ
				 ////|	КОНЕЦ КАК ЭтоГрупповаяТара
				 //|ИЗ
				 //|	РегистрНакопления.УГМК_ОперативныеОстатки.Остатки КАК УГМК_ОперативныеОстаткиОстатки
				 //|ГДЕ
				 //|	УГМК_ОперативныеОстаткиОстатки.ПаспортПартии = &Серия
				 //|	И УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток > 0";
	//Результаты = Запр.ВыполнитьПакет();
	//Если Результаты[ 1].Пустой() тогда // Остатков по серии нет в ОУ
	//	Если Результаты[ 0].Пустой() тогда // Серия принималась в УПП
	//		ТаблицаРезультатЗапроса = ЗаполнитьПоУПП( Серия);
	//	иначе
	//		ТаблицаРезультатЗапроса = ЗаполнитьПоПриемкеОУ( Серия);
	//	КонецЕсли;
	//иначе
	//	ТаблицаРезультатЗапроса = ЗаполнитьПоОстаткамОУ( Серия, Результаты[ 1].Выгрузить());
	//КонецЕсли;
	ВерсияЭтикетки = "004";
	
	СтруктураДаных = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки(ВерсияЭтикетки);
	Результаты = Запр.Выполнить();
	Если НЕ Результаты.Пустой() Тогда
		Выборка = Результаты.Выбрать();
		Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДаных, Выборка);
		СтруктураДаных.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		СтруктураДаных.СерияНоменклатурыПредставление = СерияНоменклатурыПредставление;
		СтруктураДаных.ПоСвойствам = Ложь;
		СтруктураДаных.Коэффициент1 = 0;
		СтруктураДаных.Количество = КоличествоСерии;
		МассивДанных.Добавить(СтруктураДаных);
		КонецЦикла;	
	Иначе
		СтруктураДаных.СерияНоменклатурыПредставление = СерияНоменклатурыПредставление;
		СтруктураДаных.ПоСвойствам = Ложь;
		СтруктураДаных.Коэффициент1 = 0;
		СтруктураДаных.Количество = КоличествоСерии;
		МассивДанных.Добавить(СтруктураДаных);
	КонецЕсли;	
	//Для каждого СтрокаРезультат из ТаблицаРезультатЗапроса Цикл
	//	СтруктураДаных = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки(ВерсияЭтикетки);
	//	ЗаполнитьЗначенияСвойств(СтруктураДаных, СтрокаРезультат);
	//	СтруктураДаных.СерияНоменклатуры = СтрокаРезультат.СерияНоменклатуры;
	//	СтруктураДаных.ПоСвойствам = Ложь;
	//	СтруктураДаных.Коэффициент1 = 0;
	//	МассивДанных.Добавить(СтруктураДаных);
	//КонецЦикла;
	
	ПроверитьТипыВДанныхБирки( МассивДанных, ВерсияЭтикетки);
	
	РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
	РезультатЧтенияБирки.Вставить("ДанныеБирки", МассивДанных);
КонецПроцедуры

Процедура ПолучитьДанныепоШКТары( РезультатЧтенияБирки, Тара, КоличествоТары = 0)
	МассивДанных = Новый Массив;
	//УзелПодключения = Строка( УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы"));
	
	Запр = Новый Запрос;
	//Запр.УстановитьПараметр("ВыпускВОУ", УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ВыпускВОУ"));
	//Запр.УстановитьПараметр("ТипТары_Групповая", УГМК_СлужебныеФункции.ПолучитьНастройку("ТипТары_СерияСборнойПартии"));
	Запр.УстановитьПараметр("Тара", Тара);
	Запр.Текст = "ВЫБРАТЬ
	             |	Тара.Ссылка КАК Тара
				 //|	УГМК_ЗначенияСвойств.Значение
	             |ИЗ
	             |	Справочник.УГМК_ТараТехнологическая КАК Тара
				 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствСерий КАК УГМК_ЗначенияСвойств
				 //|		ПО (УГМК_ЗначенияСвойств.Объект = СерииНоменклатуры.Ссылка)
				 //|			И (УГМК_ЗначенияСвойств.Свойство = &ВыпускВОУ)
	             |ГДЕ
	             |	Тара.Ссылка = &Тара";
				 //|	И НЕ УГМК_ЗначенияСвойств.Значение ЕСТЬ NULL
				 //|;
				 //|
				 //|////////////////////////////////////////////////////////////////////////////////
				 //|ВЫБРАТЬ
				 //|	ЛОЖЬ КАК ПоСвойствам,
				 //|	УГМК_ОперативныеОстаткиОстатки.МестоУчета,
				 //|	УГМК_ОперативныеОстаткиОстатки.МаркаСплава,
				 //|	УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции,
				 //|	УГМК_ОперативныеОстаткиОстатки.Номенклатура КАК Номенклатура,
				 //|	УГМК_ОперативныеОстаткиОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
				 //|	УГМК_ОперативныеОстаткиОстатки.Состояние,
				 //|	УГМК_ОперативныеОстаткиОстатки.ПаспортПартии КАК СерияНоменклатуры,
				 //|	УГМК_ОперативныеОстаткиОстатки.Тара КАК Тара,
				 //|	1 КАК Коэффициент,
				 //|	0 КАК Коэффициент1,
				 //|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения1,
				 //|	НЕОПРЕДЕЛЕНО КАК ПаспортПартии,
				 //|	УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК Количество,
				 //|	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток КАК Количество1,
				 //|	УГМК_ОперативныеОстаткиОстатки.Количество1Остаток - УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК КоличествоТара,
				 //|	УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток КАК КоличествоМест
				 ////|	ВЫБОР
				 ////|		КОГДА УГМК_ОперативныеОстаткиОстатки.Тара.ТипТары = &ТипТары_Групповая
				 ////|			ТОГДА ИСТИНА
				 ////|		ИНАЧЕ ЛОЖЬ
				 ////|	КОНЕЦ КАК ЭтоГрупповаяТара
				 //|ИЗ
				 //|	РегистрНакопления.УГМК_ОперативныеОстатки.Остатки КАК УГМК_ОперативныеОстаткиОстатки
				 //|ГДЕ
				 //|	УГМК_ОперативныеОстаткиОстатки.ПаспортПартии = &Серия
				 //|	И УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток > 0";
	//Результаты = Запр.ВыполнитьПакет();
	//Если Результаты[ 1].Пустой() тогда // Остатков по серии нет в ОУ
	//	Если Результаты[ 0].Пустой() тогда // Серия принималась в УПП
	//		ТаблицаРезультатЗапроса = ЗаполнитьПоУПП( Серия);
	//	иначе
	//		ТаблицаРезультатЗапроса = ЗаполнитьПоПриемкеОУ( Серия);
	//	КонецЕсли;
	//иначе
	//	ТаблицаРезультатЗапроса = ЗаполнитьПоОстаткамОУ( Серия, Результаты[ 1].Выгрузить());
	//КонецЕсли;
	ВерсияЭтикетки = "004";
	
	СтруктураДаных = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки(ВерсияЭтикетки);
	Результаты = Запр.Выполнить();
	Если НЕ Результаты.Пустой() Тогда
		Выборка = Результаты.Выбрать();
		Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДаных, Выборка);
		СтруктураДаных.Тара = Выборка.Тара;
		СтруктураДаных.ПоСвойствам = Ложь;
		СтруктураДаных.Коэффициент1 = 0;
		СтруктураДаных.Количество = КоличествоТары;
		МассивДанных.Добавить(СтруктураДаных);
		КонецЦикла;	
	КонецЕсли;	
	//Для каждого СтрокаРезультат из ТаблицаРезультатЗапроса Цикл
	//	СтруктураДаных = УГМК_ОперативныйУчет.ПолучитьИменаКолонокВерсииЭтикетки(ВерсияЭтикетки);
	//	ЗаполнитьЗначенияСвойств(СтруктураДаных, СтрокаРезультат);
	//	СтруктураДаных.СерияНоменклатуры = СтрокаРезультат.СерияНоменклатуры;
	//	СтруктураДаных.ПоСвойствам = Ложь;
	//	СтруктураДаных.Коэффициент1 = 0;
	//	МассивДанных.Добавить(СтруктураДаных);
	//КонецЦикла;
	
	ПроверитьТипыВДанныхБирки( МассивДанных, ВерсияЭтикетки);
	
	РезультатЧтенияБирки.Вставить("УИДЭтикетки", "");
	РезультатЧтенияБирки.Вставить("ДанныеБирки", МассивДанных);
КонецПроцедуры

Процедура ПроверитьТипыВДанныхБирки( МассивДанных, ВерсияЭтикетки = "005")
	Имена = Новый Структура;
	Имена.Вставить("ПоСвойствам", "Ложь");
	Имена.Вставить("РабочийЦентр", ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
	Имена.Вставить("Номенклатура", Неопределено);
	Имена.Вставить("МаркаСплава", Неопределено);
	Имена.Вставить("ГруппаПродукции", ПредопределенноеЗначение("Справочник.СК_ГруппыПродукции.ПустаяСсылка"));
	Имена.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	Имена.Вставить("СерияНоменклатуры", Неопределено);
	Имена.Вставить("Состояние", Неопределено);
	Имена.Вставить("Коэффициент", 0);
	Имена.Вставить("Коэффициент1", 0);
	Имена.Вставить("ЕдиницаИзмерения1", Неопределено);
	Имена.Вставить("ПаспортПартии", Неопределено);
	Имена.Вставить("Количество", 0);
	Имена.Вставить("Количество1", 0);
	Имена.Вставить("КоличествоМест", 0);
	Имена.Вставить("Тара", Неопределено);
	Имена.Вставить("КоличествоТара", 0);
	Имена.Вставить("Размер1", 0);
	Имена.Вставить("Размер2", 0);
	Имена.Вставить("Размер3", 0);
	Имена.Вставить("Размер4", 0);
	Имена.Вставить("Размер5", 0);
	Имена.Вставить("ДополнительнаяИнформация","");
	Имена.Вставить("Маркировка", "");
	Имена.Вставить("ОбъемПогонногоМетра", 0);
	
	
	Если ВерсияЭтикетки >= "005" тогда
		Имена.Вставить("Дополнительно","");
		Имена.Вставить("Назначение","");
	КонецЕсли;
	
	Для каждого СтрокаДанных из МассивДанных цикл
		Для каждого Элемент из Имена цикл
			Значение = СтрокаДанных[ Элемент.Ключ];
			Если (не ЗначениеЗаполнено( Значение)) и (Значение <> Элемент.Значение) тогда
				СтрокаДанных[ Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ШКСерии( ТекстДляКодирования, Серия = Неопределено, Количество = 0, СерияНоменклатурыПредставление = Неопределено) Экспорт 
    Перем НаименованиеСерии;
	
	РезультатПроверки = Ложь;
	КонецНаименованиеСерии = Найти(ТекстДляКодирования,":");
	Если КонецНаименованиеСерии > 1 Тогда
		НаименованиеСерии = Лев(ТекстДляКодирования, КонецНаименованиеСерии -1);
		СерияНоменклатурыПредставление = СокрЛП(НаименованиеСерии);
		КоличествоСерии = Сред(ТекстДляКодирования, КонецНаименованиеСерии + 1);
		Количество = Число(КоличествоСерии)/1000;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СерииНоменклатуры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		               |ГДЕ
		               |	СерииНоменклатуры.Наименование = &НаименованиеЛат
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СерииНоменклатуры.Ссылка
		               |ИЗ
		               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		               |ГДЕ
		               |	СерииНоменклатуры.Наименование = &НаименованиеРус";
		Запрос.Параметры.Вставить("НаименованиеЛат",НаименованиеСерии);
		Запрос.Параметры.Вставить("НаименованиеРус",УГМК_ОперативныйУчетКлиентСервер.ПреобразоватьСтроку_Лат_Рус(НаименованиеСерии));
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();			
			Если Выборка.Следующий() Тогда
				Серия = Выборка.Ссылка;
				РезультатПроверки = Истина;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СерияНоменклатурыПредставление) Тогда
				РезультатПроверки = Истина;
		//иначеЕсли УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияОперативногоУчета() тогда
		//	УзелПодключения = УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы");
		//	ТаблицаРезультатЗапроса = Неопределено;
		//	Если УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПолучитьТаблицуWEBСервисомКонсолидации( УзелПодключения, Запрос, ТаблицаРезультатЗапроса, Истина) тогда
		//		Если ТаблицаРезультатЗапроса.Количество() > 0 тогда
		//			Серия = ТаблицаРезультатЗапроса[ 0].Ссылка;
		//			РезультатПроверки = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Возврат РезультатПроверки;
КонецФункции

Функция ШКТары( ТекстДляКодирования, Тара = Неопределено, Количество = 0) Экспорт 
    Перем НаименованиеТары;
	
	РезультатПроверки = Ложь;
	КонецНаименованиеСерии = Найти(ТекстДляКодирования,":");
	Если КонецНаименованиеСерии > 1 Тогда
		КоличествоТары = Сред(ТекстДляКодирования, КонецНаименованиеСерии + 1);
		Количество = Число(КоличествоТары)/1000;
		НаименованиеТары = Лев(ТекстДляКодирования, КонецНаименованиеСерии -1);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УГМК_ТараТехнологическая.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.УГМК_ТараТехнологическая КАК УГМК_ТараТехнологическая
		               |ГДЕ
		               |	УГМК_ТараТехнологическая.Наименование = &Наименование";
		Запрос.Параметры.Вставить("Наименование",НаименованиеТары);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();			
			Если Выборка.Следующий() Тогда
				Тара = Выборка.Ссылка;
				РезультатПроверки = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Возврат РезультатПроверки;
КонецФункции

//****************************************** Печать и чтение Команды с ШК ********************************************************

Функция ДобавитьСтроку( СтрКоманды, знач ДопСтрока, знач Разделитель)
	СтрКоманды = СтрКоманды + ДопСтрока + Разделитель;
	
	Возврат( Найти( ДопСтрока, Разделитель) > 0);
КонецФункции

Функция СформироватьСтруктуруКоманды( ИдКоманды, ДанныеКоманды, ВерсияЭтикетки = "004") Экспорт
	//ОЦМ Мобильная
	Возврат "";
	//СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	//
	//ПростыеТипы = Новый Массив;
	//ПростыеТипы.Добавить( Тип( "Число"));
	//ПростыеТипы.Добавить( Тип( "Строка"));
	//ПростыеТипы.Добавить( Тип( "Дата"));
	//ПростыеТипы.Добавить( Тип( "Булево"));
	//ПростыеТипы.Добавить( Тип( "Неопределено"));
	//
	//Разделитель = ";";
	//Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	//ВсеДокументы = Документы.ТипВсеСсылки();
	//ВсеБП = БизнесПроцессы.ТипВсеСсылки();
	//
	//СтрКоманды = "###";
	//БылиРазделители = Ложь;
	//
	//БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( ИдКоманды), Разделитель);
	//БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( ВерсияЭтикетки), Разделитель);
	//
	//Для каждого Строка из ДанныеКоманды цикл
	//	Значение = Строка;
	//	ТипЗначения = ТипЗнч( Значение);
	//	
	//	Если ЗначениеЗаполнено( Значение) тогда
	//		БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)), Разделитель);
	//		
	//		Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//			БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( Значение), Разделитель);
	//		иначеЕсли ВсеДокументы.СодержитТип( ТипЗначения) или ВсеБП.СодержитТип( ТипЗначения) тогда
	//			БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( Значение), Разделитель);
	//		иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
	//			БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( Значение.УГМК_Код), Разделитель);
	//		иначе
	//			БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( Значение.Код), Разделитель);
	//		КонецЕсли;
	//	иначеЕсли ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//		БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, XMLСтрока( УГМК_ОперативныйУчет.ПолучитьИндексТипа( СписокТипов, Значение)), Разделитель);
	//		БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, "", Разделитель);
	//	иначе
	//		БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, "", Разделитель);
	//		БылиРазделители = БылиРазделители или ДобавитьСтроку( СтрКоманды, "", Разделитель);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если БылиРазделители тогда
	//	Сообщить( "Код команды не сформирован. Обнаружены недопустимые символы ("+Разделитель+")");
	//	СтрКоманды = "";
	//КонецЕсли;
	//
	//Возврат( СтрКоманды+Символы.ВК);
КонецФункции

Функция ПолучитьДанныеКоманды( Знач СтрокаКода) Экспорт
	//ОЦМ Мобильная
	ДанныеКоманды = Новый Массив;
	//Если не ЗначениеЗаполнено( СтрокаКода) тогда
	//	ДанныеКоманды.Добавить( -1);
	//	Возврат( ДанныеКоманды);
	//КонецЕсли;
	//
	//СтрокаКода = Сред( СтрокаКода, 4);
	//
	//ПростыеТипы = Новый Массив;
	//ПростыеТипы.Добавить( Тип( "Число"));
	//ПростыеТипы.Добавить( Тип( "Строка"));
	//ПростыеТипы.Добавить( Тип( "Дата"));
	//ПростыеТипы.Добавить( Тип( "Булево"));
	//ПростыеТипы.Добавить( Тип( "Неопределено"));
	//
	//Разделитель = ";";
	//Тип_ХарактеристикиНоменклатуры = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
	//ВсеДокументы = Документы.ТипВсеСсылки();
	//ВсеБП = БизнесПроцессы.ТипВсеСсылки();
	//
	//МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок( СтрокаКода, Разделитель);
	//
	//Инд = 0;
	//
	//ИдКоманды = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, Тип("Число"));
	//ДанныеКоманды.Добавить( ИдКоманды);
	//ВерсияЭтикетки = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, Тип("Строка"));
	//
	//СписокТипов = УГМК_ОперативныйУчет.ПолучитьТипыВерсииЭтикетки( ВерсияЭтикетки);
	//
	//ВсегоДанных = МассивПодстрок.Количество()-2;
	//Пока Инд <= ВсегоДанных цикл
	//	ИндексТипа = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, Тип("Число"));
	//	ТипЗначения = ПолучитьТипПоИндексу( СписокТипов, ИндексТипа);
	//	
	//	Если ПростыеТипы.Найти( ТипЗначения) <> Неопределено тогда
	//		Значение = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, ТипЗначения);
	//	иначеЕсли ТипЗначения = Тип_ХарактеристикиНоменклатуры тогда
	//		ЗначениеУГМК_Код = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, Тип("Строка"));
	//		Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеУГМК_Код, "УГМК_Код");
	//	иначеЕсли ВсеДокументы.СодержитТип( ТипЗначения) или ВсеБП.СодержитТип( ТипЗначения) тогда
	//		Значение = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, ТипЗначения);
	//	иначе
	//		ЗначениеКод = ПолучитьСледующееЗначениеИзМассива( МассивПодстрок, Инд, Тип("Строка"));
	//		Значение = НайтиЭлементСправочникаПоРеквизиту( ТипЗначения, ЗначениеКод, "Код");
	//	КонецЕсли;
	//	
	//	ДанныеКоманды.Добавить( Значение);
	//КонецЦикла;
	//
	Возврат( ДанныеКоманды);
КонецФункции

//**************************************************************************************************

Функция ПреобразоватьСтроку_Рус_Лат( Знач СтрокаРус) Экспорт
	Возврат( УГМК_ОперативныйУчетКлиентСервер.ПреобразоватьСтроку_Рус_Лат( СтрокаРус));
КонецФункции

Функция ПреобразоватьСтроку_Лат_Рус( Знач СтрокаЛат) Экспорт
	Возврат( УГМК_ОперативныйУчетКлиентСервер.ПреобразоватьСтроку_Лат_Рус( СтрокаЛат));
КонецФункции

//**************************************************************************************************

Функция ОсновнойСотрудникФизлица(Физлицо, ГоловнаяОрганизация,Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Физлицо",				Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиОрганизаций.Актуальность
	|			ТОГДА 3
	|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	РаботникиОрганизаций.Период КАК Период
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|			РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ГДЕ
	|			РаботникиОрганизаций.Сотрудник.Физлицо = &Физлицо
	|			И (РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|					ИЛИ &ГоловнаяОрганизация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаботникиОрганизаций.Сотрудник) КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	(СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			ИЛИ &ГоловнаяОрганизация В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Период УБЫВ,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОсновнойСотрудникФизлица

Функция ПолучитьДатуСмены(Смена,ДатаДок=неопределено) экспорт
	ДатаСмены = ?(ДатаДок=неопределено,НачалоДня(ТекущаяДата()),НачалоДня(ДатаДок));
	Если ЗначениеЗаполнено(Смена) Тогда
		ВремяНачалаСмены=дата('00010101');
		ВремяОкончанияСмены=дата('00010101');
		Если Смена.ПериодыСмены.Количество()>0 Тогда
			ВремяНачалаСмены=Смена.ПериодыСмены[0].ВремяНачала;
			ВремяОкончанияСмены=Смена.ПериодыСмены[Смена.ПериодыСмены.Количество()-1].ВремяОкончания;
		КонецЕсли;
		Если ВремяОкончанияСмены<ВремяНачалаСмены Тогда
			Если ТекущаяДата()<(НачалоДня(ТекущаяДата())+(ВремяНачалаСмены-НачалоДня(ВремяНачалаСмены))) Тогда
				ДатаСмены = ДатаСмены - (24*60*60)+(ВремяНачалаСмены-НачалоДня(ВремяНачалаСмены));
			Иначе
				ДатаСмены = ДатаСмены+(ВремяНачалаСмены-НачалоДня(ВремяНачалаСмены));
			КонецЕсли;
		Иначе
			ДатаСмены = ДатаСмены+(ВремяНачалаСмены-НачалоДня(ВремяНачалаСмены));
		КонецЕсли;
	КонецЕсли;
	возврат ДатаСмены;
КонецФункции


Процедура ДобавитьУникальноеПредставление( СтрокаПредставлений, Значение, Разделитель = ";") Экспорт
	Если ЗначениеЗаполнено( Значение) тогда
		СтрЗначение = Строка( Значение);
		Если Найти( ";"+СтрокаПредставлений+";", ";"+СтрЗначение+";") = 0 тогда
			Если ЗначениеЗаполнено( СтрокаПредставлений) тогда
				СтрокаПредставлений = СтрокаПредставлений + Разделитель;
			КонецЕсли;
			СтрокаПредставлений = СтрокаПредставлений + СтрЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Функция КомпактноеПредставлениеБирки( ТаблицаКодирования) Экспорт
	Перем Текст, ТекГруппа, РекРазмеры;
	
	Текст = "";
	ТекГруппа = Неопределено;
	РекРазмеры = "";
	
	НесколькоСтрок = ТаблицаКодирования.Количество() <> 1;
	НесколькоМарок = Ложь;
	ТМарка = Неопределено;
	
	Для каждого Строка из ТаблицаКодирования цикл
		Если ЗначениеЗаполнено( Строка.МаркаСплава) тогда
			Если ТМарка = Неопределено тогда
				ТМарка = Строка.МаркаСплава;
			иначеЕсли ТМарка <> Строка.МаркаСплава тогда
				НесколькоМарок = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка из ТаблицаКодирования цикл
		Если ТекГруппа <> Строка.ГруппаПродукции тогда
			ТекГруппа = Строка.ГруппаПродукции;
			
			Если ЗначениеЗаполнено( РекРазмеры) тогда
				Текст = Текст + РекРазмеры;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Текст) тогда
				Текст = Текст + "|";
			КонецЕсли;
			
			Если Строка.ПоСвойствам тогда
				Текст = Текст+КраткоеНаименованиеГруппы( ТекГруппа)+" ";
			КонецЕсли;
			
			РекРазмеры = "";
		КонецЕсли;
		
		Если не Строка.ПоСвойствам и ЗначениеЗаполнено( Строка.Номенклатура) тогда
			РекРазмеры = РекРазмеры + Строка( Строка.Номенклатура)+" ";
		КонецЕсли;
		Если не Строка.ПоСвойствам и НесколькоМарок и ЗначениеЗаполнено( Строка.МаркаСплава) тогда
			РекРазмеры = РекРазмеры + Строка( Строка.МаркаСплава)+" ";
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.ХарактеристикаНоменклатуры) тогда
			РекРазмеры = РекРазмеры + Строка( Строка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.Состояние) тогда
			РекРазмеры = РекРазмеры + " " + Строка.Состояние;
		КонецЕсли;
		
		ВесоваяЕдиница = Ложь;
		Если ЗначениеЗаполнено( Строка.ЕдиницаИзмерения1) и УГМК_СлужебныеФункции.ВесоваяЕдиницаИзмерения( Строка.ЕдиницаИзмерения1) тогда
			Если ЗначениеЗаполнено( Строка.Количество) и Строка.Количество <> Строка.Количество1 тогда
				Если ЗначениеЗаполнено( Строка.Коэффициент1) тогда
					РекРазмеры = РекРазмеры + " Засор.:"+Строка.Коэффициент1+"%";
				КонецЕсли;
				РекРазмеры = РекРазмеры + " Нетто:"+Строка( Строка.Количество);
				ВесоваяЕдиница = Истина;
			КонецЕсли;
		иначеЕсли НесколькоСтрок тогда
			РекРазмеры = РекРазмеры + " "+Строка( Строка.Количество);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Строка.Количество1) тогда
			Если ВесоваяЕдиница тогда
				РекРазмеры = РекРазмеры + " С_засор."
			иначе
				РекРазмеры = РекРазмеры + " ";
			КонецЕсли;
			РекРазмеры = РекРазмеры + Строка( Строка.Количество1)+Строка.ЕдиницаИзмерения1;
		КонецЕсли;
		
		Если НесколькоСтрок и ЗначениеЗаполнено( Строка.КоличествоМест) и (Строка.КоличествоМест <> 1) тогда
			РекРазмеры = РекРазмеры + " " + Формат( Строка.КоличествоМест, "ЧДЦ=0; ЧГ=0")+"шт";
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.КоличествоТара) тогда
			РекРазмеры = РекРазмеры + " Тара:"+Строка( Строка.КоличествоТара);
		КонецЕсли;
		
		РекРазмеры = РекРазмеры + "; ";
	КонецЦикла;
	
	Текст = СтрЗаменить( Текст+РекРазмеры, "  ", " ");
	//Текст = СтрЗаменить( Текст, ". ", ".");
	Текст = СтрЗаменить( Текст, Символы.НПП, "");
	
	Возврат( Текст);
КонецФункции


Функция КраткоеНаименованиеГруппы( ГруппаПродукции)
	ИмяГруппа = Строка( ГруппаПродукции);
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Заготовка", "Заг.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Цилиндрический", "Цил.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Черновое", "Черн.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Слиток", "Слит.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Плоский", "ПЛ");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "плоский", "ПЛ");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "Плоская", "ПЛ");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "плоская", "ПЛ");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "прутковая","прут.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "трубная", "труб.");
	ИмяГруппа = СтрЗаменить( ИмяГруппа, "плоское", "ПЛ");
	
	Возврат( ИмяГруппа);
КонецФункции
