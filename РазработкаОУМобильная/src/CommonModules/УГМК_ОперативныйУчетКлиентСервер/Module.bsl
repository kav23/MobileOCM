Процедура ПроверитьКоличествоТарыНаГруппах( ТабличнаяЧасть, ДополнениеИмени="") Экспорт
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	
	ЭкземплярыТары = Новый Массив;
	Для каждого СтрокаТЧ из ТабличнаяЧасть цикл
		Если ЗначениеЗаполнено( СтрокаТЧ[ ИменаКолонок.Тара]) и ЗначениеЗаполнено( СтрокаТЧ[ ИменаКолонок.КоличествоТара]) тогда
			Если ЭкземплярыТары.Найти( СтрокаТЧ[ ИменаКолонок.Тара]) = Неопределено тогда
				ЭкземплярыТары.Добавить( СтрокаТЧ[ ИменаКолонок.Тара]);
			иначе
				СтрокаТЧ[ ИменаКолонок.КоличествоТара] = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЗаполнитьРеквизитыСтроки( ТекущиеДанные, ИменаКолонок) Экспорт
	ТекущиеДанные[ ИменаКолонок.ДатаОперации] = ТекущаяДата();
	Если ТекущиеДанные[ ИменаКолонок.Коэффициент] = 0 тогда
		ТекущиеДанные[ ИменаКолонок.Коэффициент] = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчитатьДанныеСУчетомПогрешностиИТочности( Движение) Экспорт
	Знаков = УГМК_ОперативныйУчет.КоличествоЗнаковТочности( Движение.Точность);
	
	Движение.МинЗначениеТочность  = Окр( Движение.МинЗначениеПоказателя, Знаков);
	Движение.МаксЗначениеТочность = Окр( Движение.МаксЗначениеПоказателя, Знаков);
	
	Движение.МинЗначениеПогрешностьТочность  = Окр( Движение.МинЗначениеПоказателя  - Движение.ПогрешностьИсследования, Знаков);
	Движение.МаксЗначениеПогрешностьТочность = Окр( Движение.МаксЗначениеПоказателя + Движение.ПогрешностьИсследования, Знаков);
КонецПроцедуры

Процедура ЗаполнитьПоказательДиапазонСПогрешностью( ТекДанные) Экспорт
	Если ТекДанные.НормативВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.Остальное") тогда
		ТекДанные.ПоказательДиапазонСПогрешностью = "ост.";
	иначеЕсли ЗначениеЗаполнено( ТекДанные.ПогрешностьИсследования) тогда
		// Выводим представление диапазона БЕЗ округления
		ТекДанныеВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.ВИнтервале");
		ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеПоказателя, ТекДанные.МинЗначениеПоказателя-ТекДанные.ПогрешностьИсследования, ТекДанные.МаксЗначениеПоказателя+ТекДанные.ПогрешностьИсследования, 0, 0);
	иначе
		// Выводим представление значения  БЕЗ округления
		Если ТекДанные.МинЗначениеПоказателя = ТекДанные.МаксЗначениеПоказателя тогда
			ТекДанныеВидСравнения = ТекДанные.ВидСравнения;
			ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеПоказателя, ТекДанные.МинЗначениеПоказателя, ТекДанные.МаксЗначениеПоказателя, 0, 0);
		иначе
			ТекДанныеВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.ВИнтервале");
			ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеПоказателя, ТекДанные.МинЗначениеПоказателя, ТекДанные.МаксЗначениеПоказателя, 0, 0);
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено( ТекДанные.ПогрешностьИсследования) тогда
	//	// Выводим представление округленного диапазона
	//	ТекДанныеВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.ВИнтервале");
	//	ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеПогрешностьТочность, ТекДанные.МинЗначениеПогрешностьТочность, ТекДанные.МаксЗначениеПогрешностьТочность, 0, 0);
	//иначе
	//	// Выводим представление округленного значения
	//	Если ТекДанные.МинЗначениеТочность = ТекДанные.МаксЗначениеТочность тогда
	//		ТекДанныеВидСравнения = ТекДанные.ВидСравнения;
	//		ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеТочность, ТекДанные.МинЗначениеТочность, ТекДанные.МаксЗначениеТочность, 0, 0);
	//	иначе
	//		ТекДанныеВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.ВИнтервале");
	//		ТекДанные.ПоказательДиапазонСПогрешностью = УГМК_ОперативныйУчет.ПолучитьПредставлениеРезультата( ТекДанные.ВидРезультатаАнализа, ТекДанныеВидСравнения, ТекДанные.МинЗначениеТочность, ТекДанные.МинЗначениеТочность, ТекДанные.МаксЗначениеТочность, 0, 0);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры


Процедура ОпределитьСоответствиеНормативу( ТекДанные) Экспорт
	// Расчет округленных данных
	
	ПВХЗначениеИзСписка = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЗначениеИзСписка");
	ПВХПогрешность = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Погрешность");
	ПВХПоддиапазон = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон");
	ПВХЧислоВИнтервале = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЧислоВИнтервале");
	
	УГМК_ОперативныйУчетКлиентСервер.РасчитатьДанныеСУчетомПогрешностиИТочности( ТекДанные);
	УГМК_ОперативныйУчетКлиентСервер.ЗаполнитьПоказательДиапазонСПогрешностью( ТекДанные);
	
	Если ТекДанные.ПоказательНормаПолучена тогда
		Если ТекДанные.НормативВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.Остальное") тогда
			ТекДанные.СоответствуетНормативу = Истина;
		иначеЕсли ТекДанные.НормативВидСравнения = ПредопределенноеЗначение("Перечисление.УГМК_ВидСравнения.Заполнено") тогда
			ТекДанные.СоответствуетНормативу = Истина;
		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХПогрешность тогда
			ТекДанные.СоответствуетНормативу = ТекДанные.МинЗначениеТочность >= ТекДанные.ПоказательМинЗначение - ТекДанные.ПоказательМаксЗначение
			    							 И ТекДанные.МаксЗначениеТочность <= ТекДанные.ПоказательМинЗначение + ТекДанные.ПоказательМаксЗначение;
		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХЗначениеИзСписка тогда
			//Если ТипЗнч(ТекДанные.ЗначениеПоказателя) = Тип("СправочникСсылка.ЗначенияПоказателейАнализовНоменклатуры") И ТекДанные.ЗначениеПоказателя.УГМК_ТекстовоеЗначение = Истина Тогда
			Если ТипЗнч(ТекДанные.ЗначениеПоказателя) = Тип("СправочникСсылка.ЗначенияПоказателейАнализовНоменклатуры") И УГМК_ОперативныйУчетВызовСервера.Получить_ЗначениеПоказателя_УГМК_ТекстовоеЗначение(ТекДанные.ЗначениеПоказателя) = Истина Тогда
				ТекДанные.СоответствуетНормативу = ТекДанные.ЗначениеПоказателя = ТекДанные.НормативЗначение;
			Иначе
				ТекДанные.СоответствуетНормативу = (ТекДанные.МинЗначениеТочность  >= ТекДанные.ПоказательМинЗначение И ТекДанные.МинЗначениеТочность  <= ТекДанные.ПоказательМаксЗначение)
				     							 И (ТекДанные.МаксЗначениеТочность >= ТекДанные.ПоказательМинЗначение И ТекДанные.МаксЗначениеТочность <= ТекДанные.ПоказательМаксЗначение);
			КонецЕсли; 											 
		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХПоддиапазон тогда
			Если ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда
				ТекДанные.СоответствуетНормативу = (ТекДанные.МинЗначениеТочность  >= ТекДанные.ПоказательМинЗначение И ТекДанные.МинЗначениеТочность  <= ТекДанные.ПоказательМаксЗначение)
													И (ТекДанные.МаксЗначениеТочность >= ТекДанные.ПоказательМинЗначение И ТекДанные.МаксЗначениеТочность <= ТекДанные.ПоказательМаксЗначение);
			Иначе
				ТекДанные.СоответствуетНормативу = (ТекДанные.МинЗначениеТочность  >= ТекДанные.ПоказательМинЗначение )
													И (ТекДанные.МаксЗначениеТочность >= ТекДанные.ПоказательМинЗначение );
			КонецЕсли;
		иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХЧислоВИнтервале тогда
											 
			Если ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда
				ТекДанные.СоответствуетНормативу = ТекДанные.МинЗначениеТочность >= ТекДанные.ПоказательМинЗначение 
												 И ТекДанные.МаксЗначениеТочность <= ТекДанные.ПоказательМаксЗначение;
			иначе
				ТекДанные.СоответствуетНормативу = ТекДанные.МинЗначениеТочность >= ТекДанные.ПоказательМинЗначение; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( ТекДанные.ПогрешностьИсследования) тогда
			Если ТекДанные.ВидРезультатаАнализа = ПВХПогрешность тогда
				ТекДанные.СоответствуетНормативуПогрешность = ТекДанные.МинЗначениеПогрешностьТочность  >= ТекДанные.ПоказательМинЗначение - ТекДанные.ПоказательМаксЗначение
				    							 			И ТекДанные.МаксЗначениеПогрешностьТочность <= ТекДанные.ПоказательМинЗначение + ТекДанные.ПоказательМаксЗначение;
			иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХЗначениеИзСписка тогда
				Если ТипЗнч(ТекДанные.ЗначениеПоказателя) = Тип("СправочникСсылка.ЗначенияПоказателейАнализовНоменклатуры") И УГМК_ОперативныйУчетВызовСервера.Получить_ЗначениеПоказателя_УГМК_ТекстовоеЗначение(ТекДанные.ЗначениеПоказателя) = Истина Тогда
					ТекДанные.СоответствуетНормативуПогрешность = ТекДанные.ЗначениеПоказателя = ТекДанные.НормативЗначение;
				Иначе
					ТекДанные.СоответствуетНормативуПогрешность = (ТекДанные.МинЗначениеПогрешностьТочность  >= ТекДанные.ПоказательМинЗначение И ТекДанные.МинЗначениеПогрешностьТочность  <= ТекДанные.ПоказательМаксЗначение)
					     							 			И (ТекДанные.МаксЗначениеПогрешностьТочность >= ТекДанные.ПоказательМинЗначение И ТекДанные.МаксЗначениеПогрешностьТочность <= ТекДанные.ПоказательМаксЗначение);
				КонецЕсли;												
			иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХПоддиапазон тогда
				ТекДанные.СоответствуетНормативуПогрешность = (ТекДанные.МинЗначениеПогрешностьТочность  >= ТекДанные.ПоказательМинЗначение И ТекДанные.МинЗначениеПогрешностьТочность  <= ТекДанные.ПоказательМаксЗначение)
				     							 			И (ТекДанные.МаксЗначениеПогрешностьТочность >= ТекДанные.ПоказательМинЗначение И ТекДанные.МаксЗначениеПогрешностьТочность <= ТекДанные.ПоказательМаксЗначение);
			иначеЕсли ТекДанные.ВидРезультатаАнализа = ПВХЧислоВИнтервале тогда
				Если ЗначениеЗаполнено( ТекДанные.ПоказательМаксЗначение) тогда
					ТекДанные.СоответствуетНормативуПогрешность = ТекДанные.МинЗначениеПогрешностьТочность  >= ТекДанные.ПоказательМинЗначение 
													 			И ТекДанные.МаксЗначениеПогрешностьТочность <= ТекДанные.ПоказательМаксЗначение;
				иначе
					ТекДанные.СоответствуетНормативуПогрешность = ТекДанные.МинЗначениеПогрешностьТочность  >= ТекДанные.ПоказательМинЗначение;
				КонецЕсли;
			КонецЕсли;
		иначе
			ТекДанные.СоответствуетНормативуПогрешность = ТекДанные.СоответствуетНормативу;
		КонецЕсли;
	иначе
		ТекДанные.СоответствуетНормативу = Истина;
		ТекДанные.СоответствуетНормативуПогрешность = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКолонкиНатуральногоКлюча( ДобавитьКоличество = Ложь) Экспорт
	КлючНатуральный = Новый Массив;
	
	КлючНатуральный.Добавить("ПоСвойствам");
	КлючНатуральный.Добавить("Номенклатура");
	КлючНатуральный.Добавить("ХарактеристикаНоменклатуры");
	КлючНатуральный.Добавить("СерияНоменклатуры");
	КлючНатуральный.Добавить("Состояние");
	КлючНатуральный.Добавить("ПаспортПартии");
	КлючНатуральный.Добавить("Тара");
	
	КлючНатуральный.Добавить("Коэффициент");
	КлючНатуральный.Добавить("Коэффициент1");
	
	Если ДобавитьКоличество тогда
		КлючНатуральный.Добавить("Количество");
	КонецЕсли;
	
	Возврат( КлючНатуральный);
КонецФункции

Функция ПолучитьКолонкиКлючаПоСвойствам( ДобавитьКоличество = Ложь) Экспорт
	КлючПоСвойствам = Новый Массив;
	
	КлючПоСвойствам.Добавить("ПоСвойствам");
	КлючПоСвойствам.Добавить("МаркаСплава");
	КлючПоСвойствам.Добавить("ГруппаПродукции");
	КлючПоСвойствам.Добавить("ХарактеристикаНоменклатуры");
	КлючПоСвойствам.Добавить("СерияНоменклатуры");
	КлючПоСвойствам.Добавить("Состояние");
	КлючПоСвойствам.Добавить("ПаспортПартии");
	КлючПоСвойствам.Добавить("Тара");
	
	КлючПоСвойствам.Добавить("Коэффициент");
	КлючПоСвойствам.Добавить("Коэффициент1");
	
	Если ДобавитьКоличество тогда
		КлючПоСвойствам.Добавить("Количество");
	КонецЕсли;
	
	Возврат( КлючПоСвойствам)
КонецФункции

Процедура ДобавитьЕслиНетСписок( СписокСсылок, Значение1) Экспорт
	Если СписокСсылок.НайтиПоЗначению( Значение1) = Неопределено тогда
		СписокСсылок.Добавить( Значение1);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЕслиНетМассив( МассивЗначений, Значение1) Экспорт
	Если МассивЗначений.Найти( Значение1) = Неопределено тогда
		МассивЗначений.Добавить( Значение1);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЕслиНет( МассивЗначений, Значение1) Экспорт
	Если ТипЗнч( МассивЗначений) = Тип("СписокЗначений") тогда
		Если МассивЗначений.НайтиПоЗначению( Значение1) = Неопределено тогда
			МассивЗначений.Добавить( Значение1);
		КонецЕсли;
	иначе
		Если МассивЗначений.Найти( Значение1) = Неопределено тогда
			МассивЗначений.Добавить( Значение1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ИдентификаторыКомандСканера() Экспорт
	КомандыИД = Новый Соответствие;
	КомандыИД.Вставить( 0, "БыстроеПеремещение"); // в параметрах зафиксированы Склад, СкладПолучатель и Операция (Отправить\Получить)
	КомандыИД.Вставить( 1, "ДокументСНомеромИДатой"); // В параметрах Ссылка, Дата и Номер
	КомандыИД.Вставить( 2, "ЗакончитьРаботуСДокументом");
	
	Возврат( КомандыИД);
КонецФункции

Функция ЭтоКомандаСканера( СтрКоманды) Экспорт
	Возврат( Лев( СтрКоманды, 3) = "###");
КонецФункции

Процедура ПодготовитьШтрихкодКЧтению( Данные) Экспорт
	Данные = СтрЗаменить( Данные, Символы.ВК, ""); 
	Данные = СтрЗаменить( Данные, Символы.ПС, ""); 
КонецПроцедуры
	
Функция НеПереноситьДокументыПриКопированииРапорт() Экспорт
	Возврат( "Номер,Проведен,ПометкаУдаления,Ответственный,ОтветственныйПолучатель,ДокументОснование,ВидОперации,ДокументСмены,ВключенВОбмен,ИнформационнаяБазаСоздания,ДатаСмены,Сторно");
КонецФункции
	
Процедура ДобавитьРазделительСтрок( ТекСтрока, Знач Разделитель = "; ") Экспорт
	Если ЗначениеЗаполнено( ТекСтрока) тогда
		ТекСтрока = ТекСтрока + Разделитель;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНовыйКлючСтрокиИсточника( Данные, ИмяКлюча = "КлючСвязи") Экспорт

	Если Данные.Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		МаксКлюч = 0;
		Для каждого Стр из Данные цикл
			Если МаксКлюч < Стр[ ИмяКлюча] тогда
				МаксКлюч = Стр[ ИмяКлюча];
			КонецЕсли;
		КонецЦикла;
		МаксКлюч = МаксКлюч + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции

Процедура ПодгрузитьТекущееСвойствоДляРедактирования( ТекСвойство, ТабЧасть, ТабЧастьСвойств, ТабличнаяЧастьИнд = 6, КлючСвязи = "КлючСвязи") Экспорт
	ОтборТекущегоСвойства = Новый Структура("ТабличнаяЧасть,КлючСвязи,Свойство");
	ОтборТекущегоСвойства.ТабличнаяЧасть = ТабличнаяЧастьИнд;
	ОтборТекущегоСвойства.Свойство = ТекСвойство;
	
	Для каждого СтрокаМ из ТабЧасть цикл
		ОтборТекущегоСвойства.КлючСвязи = СтрокаМ[ КлючСвязи];
		ЗначениеТекСтроки = ТабЧастьСвойств.НайтиСтроки( ОтборТекущегоСвойства);
		Если ЗначениеТекСтроки.Количество() = 0 тогда
			СтрокаМ.ЗначениеСвойства = Неопределено;
		иначе
			СтрокаМ.ЗначениеСвойства = ЗначениеТекСтроки[0].Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСвойстваВТабличнойЧасти( ТекСвойство, ТабЧасть, ТабЧастьСвойств, ТабличнаяЧастьИнд = 6, КлючСвязи = "КлючСвязи") Экспорт
	ОтборТекущегоСвойства = Новый Структура("ТабличнаяЧасть,Свойство");
	ОтборТекущегоСвойства.ТабличнаяЧасть = ТабличнаяЧастьИнд;
	ОтборТекущегоСвойства.Свойство = ТекСвойство;
	
	ЗначениеТекСтроки = ТабЧастьСвойств.НайтиСтроки( ОтборТекущегоСвойства);
	Для Каждого СтрокаС из ЗначениеТекСтроки цикл
		ТабЧастьСвойств.Удалить( СтрокаС);
	КонецЦикла;
	
	ОтборТекущегоСвойства.Вставить("КлючСвязи",0);
	
	Для каждого СтрокаМ из ТабЧасть цикл
		НоваяСтрока = ТабЧастьСвойств.Добавить();
		НоваяСтрока.ТабличнаяЧасть = ТабличнаяЧастьИнд;
		НоваяСтрока.КлючСвязи = СтрокаМ[ КлючСвязи];
		НоваяСтрока.Свойство = ТекСвойство;
		НоваяСтрока.Значение = СтрокаМ.ЗначениеСвойства;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени="") Экспорт
	ИменаКолонок = Новый Структура;
	ИменаКолонок.Вставить("НомерСтроки","НомерСтроки");
	ИменаКолонок.Вставить("РабочийЦентр","РабочийЦентр");
	ИменаКолонок.Вставить("Группа","Группа");
	ИменаКолонок.Вставить("ТехнологическаяОперация","ТехнологическаяОперация");
	ИменаКолонок.Вставить("ВариантТехнологическойОперации","ВариантТехнологическойОперации");
	ИменаКолонок.Вставить("ОбработкаПартииЗавершена","ОбработкаПартииЗавершена");
	
	Если ДополнениеИмени = "Продукции" тогда
		ИменаКолонок.Вставить("Номенклатура","Продукция");
		ИменаКолонок.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаПродукции");
		ИменаКолонок.Вставить("СерияНоменклатуры","СерияПродукции");
		ИменаКолонок.Вставить("Допуск","ДопускИзготовления");
		ИменаКолонок.Вставить("ДополнительнаяОперацияДо","ДополнительнаяОперацияДо");
		ИменаКолонок.Вставить("ДополнительнаяОперацияПосле","ДополнительнаяОперацияПосле");
		ИменаКолонок.Вставить("Дополнительно","Дополнительно");
		ИменаКолонок.Вставить("Заказ","ЗаказПродукции");
		ИменаКолонок.Вставить("ЗаказВыпуска","ЗаказВыпускаПродукции");
		ИменаКолонок.Вставить("РежимРабочегоЦентра","РежимРабочегоЦентра");
	иначе
		ИменаКолонок.Вставить("Номенклатура","Номенклатура");
		ИменаКолонок.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаНоменклатуры");
		ИменаКолонок.Вставить("СерияНоменклатуры","СерияНоменклатуры");
		ИменаКолонок.Вставить("Допуск","ДопускЗаготовки");
		ИменаКолонок.Вставить("Заказ","Заказ");
		ИменаКолонок.Вставить("ЗаказВыпуска","ЗаказВыпуска");
	КонецЕсли;
	
	ИменаКолонок.Вставить("Состояние","Состояние"+ДополнениеИмени);
	ИменаКолонок.Вставить("Качество","Качество"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмеренияМест","ЕдиницаИзмеренияМест"+ДополнениеИмени);
	ИменаКолонок.Вставить("КоличествоМест","КоличествоМест"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения","ЕдиницаИзмерения"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения1","ЕдиницаИзмерения1"+ДополнениеИмени);
	ИменаКолонок.Вставить("ЕдиницаИзмерения1_Распределение","ЕдиницаИзмерения1_Распределение");
	ИменаКолонок.Вставить("Коэффициент","Коэффициент"+ДополнениеИмени);
	ИменаКолонок.Вставить("Количество","Количество"+ДополнениеИмени);
	ИменаКолонок.Вставить("Количество1","Количество1"+ДополнениеИмени);
	ИменаКолонок.Вставить("КоличествоТара","КоличествоТара"+ДополнениеИмени);
	ИменаКолонок.Вставить("КлючСвязи","КлючСвязи"+ДополнениеИмени);
	ИменаКолонок.Вставить("ДатаОперации","ДатаОперации"+ДополнениеИмени);
	ИменаКолонок.Вставить("Тара","Тара"+ДополнениеИмени);
	ИменаКолонок.Вставить("Маркировка","Маркировка"+ДополнениеИмени);
	ИменаКолонок.Вставить("ГруппаПродукции","ГруппаПродукции"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("Стандарт","Стандарт"+ДополнениеИмени);
	ИменаКолонок.Вставить("НДНаХимСостав","НДНаХимСостав"+ДополнениеИмени);
	ИменаКолонок.Вставить("МаркаСплава","МаркаСплава"+ДополнениеИмени);
	ИменаКолонок.Вставить("ПоСвойствам","ПоСвойствам"+ДополнениеИмени);
	ИменаКолонок.Вставить("ДополнительныйНД","ДополнительныйНД"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("ПаспортПартии","ПаспортПартии"+ДополнениеИмени);
	
	ИменаКолонок.Вставить("Коэффициент1","Коэффициент1"+ДополнениеИмени);
	ИменаКолонок.Вставить("Склад","Склад"+ДополнениеИмени);
	ИменаКолонок.Вставить("ТипУказанияМестоУчета","ТипУказанияМестоУчета"+ДополнениеИмени);
	Возврат( ИменаКолонок)
КонецФункции

//Функция ПолучитьПользователяПоНомеруКарты(СтандартКарты,Номер,Период) Экспорт
//	УГМК_ОперативныйУчетВызовСервера.ПолучитьПользователяПоНомеруКарты(СтандартКарты,Номер,Период);
//КонецФункции

//Перенесена в ОМ.УГМК_ОперативныйУчетВызовСервера
//Функция ПредставлениеОперативногоНаряда(ОперативныйНаряд) Экспорт
//	Представление="";
//	Бригадир=ОперативныйНаряд.Бригадир;
//	Если ЗначениеЗаполнено(Бригадир) Тогда
//		Представление=Представление+Бригадир.Наименование+" ";
//	КонецЕсли;

//	РабочийЦентр=ОперативныйНаряд.РабочийЦентр;
//	Если ЗначениеЗаполнено(РабочийЦентр) Тогда
//		Представление=Представление+"на """+РабочийЦентр.Наименование+"""";
//	КонецЕсли;
//	
//	Представление=Представление+Символы.ПС;
//	
//	Если ТипЗнч(ОперативныйНаряд)=Тип("ДокументСсылка.УГМК_ОперативныйНаряд") Тогда
//		//Представление=Представление+"("+ОперативныйНаряд.Исполнители.Количество()+" чел.)"; сделать запрос
//		Представление=Представление+" "+Формат(ОперативныйНаряд.Дата,?(ОперативныйНаряд.Дата>=НачалоДня(ТекущаяДата()),"ДФ=HH.mm","ДФ='dd MMM HH:mm'"));
//	Иначе	
//		Представление=Представление+"(новый)";
//	КонецЕсли;
//	
//	
//	Если ЗначениеЗаполнено(Представление) Тогда
//		Представление="Наряд: "+Представление;
//	КонецЕсли;
//	
//	Возврат Представление;
//КонецФункции

//Перенесена в ОМ.УГМК_ОперативныйУчетВызовСервера
//Функция ПолучитьОписаниеНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
//	Если ОперативныйНаряд=Неопределено Тогда
//		Текст="<p>Наряд не выбран</p>";
//	Иначе	
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Дата КАК Дата,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Подразделение.Наименование КАК Подразделение,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник.Наименование КАК Сотрудник,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Смена.Наименование КАК Смена
//			|ИЗ
//			|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников.СрезПоследних(, ) КАК УГМК_ОперативныеНарядыСотрудниковСрезПоследних
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников.СрезПоследних КАК УГМК_МестонахождениеСотрудниковСрезПоследних
//			|		ПО УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник = УГМК_МестонахождениеСотрудниковСрезПоследних.Сотрудник
//			|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.МестонахождениеСотрудника = ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
//			|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.Период <= УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Период)
//			|ГДЕ
//			|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд = &ОперативныйНаряд
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	Сотрудник";

//		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

//		Текст="";
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			Если Текст="" Тогда
//				Текст="<p>Наряд создан  <b>"+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ='ЧЧ:мм dd MMMM yyyy'")+"</b></p>";
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
//					Текст=Текст+"<p>Подразделение: <b>"+ВыборкаДетальныеЗаписи.Подразделение+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
//					Текст=Текст+"<p>Оборудование: <b>"+ВыборкаДетальныеЗаписи.РабочийЦентр+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
//					Текст=Текст+"<p>Бригадир: <b>"+ВыборкаДетальныеЗаписи.Бригадир+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
//					Текст=Текст+"<p>Смена: <b>"+ВыборкаДетальныеЗаписи.Смена+"</b></p>";
//				КонецЕсли;
//				Текст=Текст+"<p>Состав бригады:</p> <ol style='margin-left: 20'>";
//			КонецЕсли;
//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыборкаДетальныеЗаписи.Сотрудник+"</b></li>";
//		КонецЦикла;
//		Текст=Текст+"</ol>";
//		
//		Если ЗначениеЗаполнено(Сотрудники) Тогда
//			Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
//			Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
//				Для каждого Сотрудник Из Сотрудники Цикл
//					Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудник+"</b></li>";
//				КонецЦикла; 
//			Иначе
//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудники+"</b></li>";
//			КонецЕсли;
//			Текст=Текст+"</ol></font>";
//		КонецЕсли;
//	КонецЕсли;
//	
//	Описание=Новый ФорматированныйДокумент;
//	
//	Описание.УстановитьHTML(Текст,Новый Структура);
//	
//	Возврат Описание;
//КонецФункции

//Перенесена в ОМ.УГМК_ОперативныйУчетВызовСервера
//Функция ПолучитьОписаниеШаблонаНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
//	Если ОперативныйНаряд=Неопределено Тогда
//		Текст="<p>Наряд не выбран</p>";
//	Иначе	
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	УГМК_ОперативныйНаряд.Владелец.Наименование КАК Подразделение,
//			|	УГМК_ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
//			|	УГМК_ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
//			|	УГМК_ОперативныйНаряд.Смена.Наименование КАК Смена
//			|ИЗ
//			|	Справочник.УГМК_ОперативныйНаряд КАК УГМК_ОперативныйНаряд
//			|ГДЕ
//			|	УГМК_ОперативныйНаряд.Ссылка = &ОперативныйНаряд";

//		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

//		Текст="";
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			Если Текст="" Тогда
//				Текст="<p>Новый наряд</p>";
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
//					Текст=Текст+"<p>Подразделение: <b>"+ВыборкаДетальныеЗаписи.Подразделение+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
//					Текст=Текст+"<p>Оборудование: <b>"+ВыборкаДетальныеЗаписи.РабочийЦентр+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
//					Текст=Текст+"<p>Бригадир: <b>"+ВыборкаДетальныеЗаписи.Бригадир+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
//					Текст=Текст+"<p>Смена: <b>"+ВыборкаДетальныеЗаписи.Смена+"</b></p>";
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если ЗначениеЗаполнено(Сотрудники) Тогда
//			Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
//			Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
//				Для каждого Сотрудник Из Сотрудники Цикл
//					Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудник+"</b></li>";
//				КонецЦикла; 
//			Иначе
//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудники+"</b></li>";
//			КонецЕсли;
//			Текст=Текст+"</ol></font>";
//		КонецЕсли;
//	КонецЕсли;
//	
//	Описание=Новый ФорматированныйДокумент;
//	
//	Описание.УстановитьHTML(Текст,Новый Структура);
//	
//	Возврат Описание;
//КонецФункции

//Перенесена в ОМ.УГМК_ОперативныйУчетВызовСервера
//Функция ПолучитьОписаниеИсторииНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
//	Если ОперативныйНаряд=Неопределено Тогда
//		Текст="<p>Наряд не выбран</p>";
//	Иначе	
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	Начало.ОперативныйНаряд,
//			|	Начало.Подразделение КАК Подразделение,
//			|	Начало.Сотрудник КАК Сотрудник,
//			|	Начало.Период КАК НачалоПериода,
//			|	МИНИМУМ(Окончание.Период) КАК ОкончаниеПериода
//			|ПОМЕСТИТЬ ВТПериодыНарядов
//			|ИЗ
//			|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников КАК Начало
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОперативныеНарядыСотрудников КАК Окончание
//			|		ПО Начало.Сотрудник = Окончание.Сотрудник
//			//|			И Начало.ОперативныйНаряд <> Окончание.ОперативныйНаряд
//			|			И Начало.Период < Окончание.Период
//			|ГДЕ
//			|	Начало.ОперативныйНаряд = &ОперативныйНаряд
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	Начало.Сотрудник,
//			|	Начало.ОперативныйНаряд,
//			|	Начало.Подразделение,
//			|	Начало.Период
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ПериодыНарядов.ОперативныйНаряд КАК ОперативныйНаряд,
//			|	ПериодыНарядов.ОперативныйНаряд.Дата КАК Дата,
//			|	ПериодыНарядов.Подразделение.Наименование КАК Подразделение,
//			|	ПериодыНарядов.Сотрудник.Наименование КАК Сотрудник,
//			|	ПериодыНарядов.ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
//			|	ПериодыНарядов.ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
//			|	ПериодыНарядов.ОперативныйНаряд.Смена.Наименование КАК Смена,
//			|	ПериодыНарядов.НачалоПериода КАК НачалоПериода,
//			|	ВЫБОР
//			|		КОГДА ПериодыНарядов.ОкончаниеПериода ЕСТЬ NULL 
//			|			ТОГДА МИНИМУМ(Окончание.Период)
//			|		КОГДА МИНИМУМ(Окончание.Период) ЕСТЬ NULL 
//			|			ТОГДА ПериодыНарядов.ОкончаниеПериода
//			|		КОГДА МИНИМУМ(Окончание.Период) < ПериодыНарядов.ОкончаниеПериода
//			|			ТОГДА МИНИМУМ(Окончание.Период)
//			|		ИНАЧЕ ПериодыНарядов.ОкончаниеПериода
//			|	КОНЕЦ КАК ОкончаниеПериода
//			|ИЗ
//			|	ВТПериодыНарядов КАК ПериодыНарядов
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников КАК Окончание
//			|		ПО ПериодыНарядов.Сотрудник = Окончание.Сотрудник
//			|			И (Окончание.МестонахождениеСотрудника <> ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
//			|			И ПериодыНарядов.НачалоПериода < Окончание.Период
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ПериодыНарядов.Сотрудник,
//			|	ПериодыНарядов.ОперативныйНаряд,
//			|	ПериодыНарядов.Подразделение,
//			|	ПериодыНарядов.НачалоПериода,
//			|	ПериодыНарядов.ОкончаниеПериода
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	ОперативныйНаряд,
//			|	ПериодыНарядов.Сотрудник.Наименование,
//			|	НачалоПериода";
//			
//			

//		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

//		Текст="";
//		ТекущийСотрудник=Неопределено;
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			Если Текст="" Тогда
//				Текст="<p>Наряд создан  <b>"+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ='ЧЧ:мм dd MMMM yyyy'")+"</b></p>";
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
//					Текст=Текст+"<p>Подразделение: <b>"+ВыборкаДетальныеЗаписи.Подразделение+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
//					Текст=Текст+"<p>Оборудование: <b>"+ВыборкаДетальныеЗаписи.РабочийЦентр+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
//					Текст=Текст+"<p>Бригадир: <b>"+ВыборкаДетальныеЗаписи.Бригадир+"</b></p>";
//				КонецЕсли;
//				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
//					Текст=Текст+"<p>Смена: <b>"+ВыборкаДетальныеЗаписи.Смена+"</b></p>";
//				КонецЕсли;
//				Текст=Текст+"<p>Состав бригады:</p> <ol style='margin-left: 20'>";
//			КонецЕсли;
//			Если ТекущийСотрудник<>ВыборкаДетальныеЗаписи.Сотрудник Тогда
//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыборкаДетальныеЗаписи.Сотрудник+"</b>";
//			Иначе
//				Текст=Лев(Текст,СтрДлина(Текст)-5)+",";
//			КонецЕсли;
//			Текст=Текст+" <font size=""2"">"+Формат(ВыборкаДетальныеЗаписи.НачалоПериода,"ДФ='ЧЧ:мм dd MMM'")+" - "+Формат(ВыборкаДетальныеЗаписи.ОкончаниеПериода,"ДФ='ЧЧ:мм dd MMM'")+"</font></li>";
//			
//			ТекущийСотрудник=ВыборкаДетальныеЗаписи.Сотрудник;
//		КонецЦикла;
//		Текст=Текст+"</ol>";
//		
//		Если ЗначениеЗаполнено(Сотрудники) Тогда
//			Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
//			Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
//				Для каждого Сотрудник Из Сотрудники Цикл
//					Если ЗначениеЗаполнено(Сотрудник) Тогда
//						Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудник+"</b></li>";
//					КонецЕсли;
//				КонецЦикла; 
//			Иначе
//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+Сотрудники+"</b></li>";
//			КонецЕсли;
//			Текст=Текст+"</ol></font>";
//		КонецЕсли;
//	КонецЕсли;
//	
//	Описание=Новый ФорматированныйДокумент;
//		
//	Описание.УстановитьHTML(Текст,Новый Структура);
//	
//	Возврат Описание;
//КонецФункции

//Функция ПолучитьСписокОперативныхНарядов(Организация=Неопределено,ПодразделениеОрганизации=Неопределено,Ответственный=Неопределено) Экспорт
//	
//	УГМК_ОперативныйУчетВызовСервера.ПолучитьСписокОперативныхНарядов(Организация,ПодразделениеОрганизации,Ответственный);

//КонецФункции

Функция ПолучитьПользователяПоКарте(КодКарты) Экспорт
	
	УГМК_ОперативныйУчетВызовСервера.ПолучитьПользователяПоКарте(КодКарты);
	
КонецФункции

Функция ПолучитьОписаниеПервойОшибки( Знач ИнформацияОбОшибке) Экспорт
	Пока ИнформацияОбОшибке.Причина <> Неопределено цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	
	Возврат( ИнформацияОбОшибке.Описание);
КонецФункции

Процедура ЗаполнитьДатыМинМакс( ЭтотОбъект) Экспорт
	
	ЭтотОбъект.ДатаМин = '30010101';
	ЭтотОбъект.ДатаМакс = '00010101';
	Для каждого Строка из ЭтотОбъект.Материалы цикл
		Если ЗначениеЗаполнено( Строка.ДатаОперации) тогда
			Если ЭтотОбъект.ДатаМин > Строка.ДатаОперации тогда
				ЭтотОбъект.ДатаМин = Строка.ДатаОперации;
			КонецЕсли;
			Если ЭтотОбъект.ДатаМакс < Строка.ДатаОперации тогда
				ЭтотОбъект.ДатаМакс = Строка.ДатаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка из ЭтотОбъект.Продукция цикл
		Если ЗначениеЗаполнено( Строка.ДатаОперацииПродукции) тогда
			Если ЭтотОбъект.ДатаМин > Строка.ДатаОперацииПродукции тогда
				ЭтотОбъект.ДатаМин = Строка.ДатаОперацииПродукции;
			КонецЕсли;
			Если ЭтотОбъект.ДатаМакс < Строка.ДатаОперацииПродукции тогда
				ЭтотОбъект.ДатаМакс = Строка.ДатаОперацииПродукции;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЭтотОбъект.ДатаМин = '30010101' тогда
		ЭтотОбъект.ДатаМин = ЭтотОбъект.Дата;
	КонецЕсли;
	Если ЭтотОбъект.ДатаМакс = '00010101' тогда
		ЭтотОбъект.ДатаМакс = ЭтотОбъект.Дата;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСтрокиПослеЗаполнения_Продукция( Объект, НомерСтроки = Неопределено) Экспорт
	ТекущаяДатаОперации = ТекущаяДата();
	Для каждого Строка из Объект.Продукция цикл
		Если НомерСтроки = Неопределено или Строка.НомерСтроки = НомерСтроки тогда
			Строка.СкладПродукции = Неопределено;
			Строка.ДатаОперацииПродукции = ТекущаяДатаОперации;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьСтрокиПослеЗаполнения_Материалы( Объект, НомерСтроки = Неопределено) Экспорт
	ТекущаяДатаОперации = ТекущаяДата();
	Для каждого Строка из Объект.Материалы цикл
		Если НомерСтроки = Неопределено или Строка.НомерСтроки = НомерСтроки тогда
			Строка.Склад = Неопределено;
			Строка.ДатаОперации = ТекущаяДатаОперации;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПарамерыТабличногоДокумента( Т) Экспорт
	Т.КлючПараметровПечати = "Этикетка_101_76";
	
	Т.ИмяПринтера = "Zebra_101_76";
	Т.ИмяПараметровПечати = "Этикетка_101_76";
	Т.ВерхнийКолонтитул.Выводить = Ложь;
	Т.НижнийКолонтитул.Выводить = Ложь;
	Т.ПолеСверху = 0;
	Т.ПолеСлева = 0;
	Т.ПолеСнизу = 0;
	Т.ПолеСправа = 0;
	Т.РазмерКолонтитулаСверху = 0;
	Т.РазмерКолонтитулаСнизу = 0;
	Т.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Т.АвтоМасштаб = Ложь;
	Т.МасштабПечати = 100;
	
	Т.ИспользуемоеИмяФайла = "Этикетка_101_76";
	
	Т.ТолькоПросмотр = Истина;
КонецПроцедуры

Функция ДобавитьКонтрольныйСимволЕАН( Знач Кодировать, ДлинаКода) Экспорт
	Если ТипЗнч( Кодировать) = Тип("Число") тогда
		КодЕан = Кодировать;
		ВернутьЧисло = Истина;
	иначе
		КодЕан = Число( Кодировать);
		ВернутьЧисло = Ложь;
	КонецЕсли;
	
	Сумма0 = 0;
	Сумма1 = 0;
	Работаем0 = Истина;
	Для Пер = 1 по ДлинаКода-1 цикл
		Символ = Кодировать % 10;
		Кодировать = Цел( Кодировать / 10);
		Если Работаем0 тогда
			Сумма0 = Сумма0 + Символ;
		иначе
			Сумма1 = Сумма1 + Символ;
		КонецЕсли;
		Работаем0 = не Работаем0;
	КонецЦикла;
	
	Остаток = (Сумма0*3+Сумма1) % 10;
	Если Остаток = 0 тогда
		КонтрольныйСимвол = 0;
	иначе
		КонтрольныйСимвол = 10 - Остаток;
	КонецЕсли;
	
	Если ВернутьЧисло тогда
		Возврат( КодЕан*10+КонтрольныйСимвол);
	иначе
		Возврат( Формат( КодЕан*10+КонтрольныйСимвол,"ЧГ=0"));
	КонецЕсли;
КонецФункции

Функция ПолучитьЕАН( НомерПартии, ДопНомер=0, ПрефиксСтр="00", ДлинаКода=8) Экспорт
	Если ДлинаКода > 8 тогда
		СдвинутьРазрядов = ДлинаКода-СтрДлина( ПрефиксСтр)-1;
		ДопНомерСимволов = 2;
	иначе
		СдвинутьРазрядов = ДлинаКода-СтрДлина( ПрефиксСтр)-1;
		ДопНомерСимволов = 0;
	КонецЕсли;
	
	МаксимальноеЧисло = Pow( 10, СдвинутьРазрядов-ДопНомерСимволов)-1;
	СтрОш = "";
	Если НомерПартии < 0 или НомерПартии > МаксимальноеЧисло тогда
		СтрОш = СтрОш + "Можно кодировать числа от [1] до ["+МаксимальноеЧисло+"] ";
	КонецЕсли;
	
	Если ДлинаКода <= 8 тогда
		Если ДопНомер > 0 тогда
			СтрОш = СтрОш + "Дополнительный номер возможен только на Коде длиной 13 ";
		КонецЕсли;
	КонецЕсли;
	
	Попытка 
		Префикс = Число( ПрефиксСтр);
	исключение
		СтрОш = СтрОш + "Недопустимый префикс ["+ПрефиксСтр+"] - допустимы только цифры ";
	КонецПопытки;
	
	Если ЗначениеЗаполнено( СтрОш) тогда
		ВызватьИсключение( "ПолучитьЕАН: "+СтрОш);
	КонецЕсли;
	
	Кодировать = Префикс * Pow( 10, СдвинутьРазрядов) + НомерПартии;
	Если ДлинаКода > 8 тогда
		Кодировать = Кодировать + ДопНомер * Pow( 10, СдвинутьРазрядов-2);
	КонецЕсли;
	
	Возврат( ДобавитьКонтрольныйСимволЕАН( Кодировать, ДлинаКода));
КонецФункции

Функция ПрефиксТипаПартии( ОбъектСсылка) Экспорт
	ПрефиксТипа = "";
	ТипСсылки = ТипЗнч( ОбъектСсылка);
	Если ТипСсылки = Тип("БизнесПроцессСсылка.УГМК_Плавка") тогда
		ПрефиксТипа = "21";
	иначеЕсли ТипСсылки = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") тогда
		ПрефиксТипа = "22";
	иначеЕсли ТипСсылки = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") тогда
		ПрефиксТипа = "23";
	иначеЕсли ТипСсылки = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
		ПрефиксТипа = "24";
	КонецЕсли;
	
	Возврат( ПрефиксТипа);
КонецФункции

Функция ИмяТипаПартииПоПрефиксу( ПрефиксТипа) Экспорт
	ТипСсылки = Неопределено;
	Если ПрефиксТипа = "21" тогда
		ТипСсылки = "УГМК_Плавка";
	иначеЕсли ПрефиксТипа = "22" тогда
		ТипСсылки = "УГМК_ПаспортПартии";
	иначеЕсли ПрефиксТипа = "23" тогда
		ТипСсылки = "УГМК_ПаспортПартииСТК";
	иначеЕсли ПрефиксТипа = "24" тогда
		ТипСсылки = "УГМК_ПартияСырья";
	КонецЕсли;
	
	Возврат( ТипСсылки);
КонецФункции

Функция ПолучитьПредставлениеЗакодированнойПартии( Знач ЗначениеШК, ДопНомерВсегда=Ложь, ОтброситьЛидирующиеНоли=Истина) Экспорт
	ТекстШК = Формат( ЗначениеШК, "ЧГ=0");
	СимволТипа = Сред( ТекстШК, 2, 1);
	Контрольный = Прав( ТекстШК, 1);
	
	Если СтрДлина( ТекстШК) > 8 тогда
		ДополнениеНомера = Сред( ТекстШК, 3, 2);
		НомерПартии = Прав( "00000"+Сред( ТекстШК, 8, 5), 5);
	иначе
		ДополнениеНомера = "";
		НомерПартии = Прав( "00000"+Сред( ТекстШК, 3, 5), 5);
	КонецЕсли;
	
	Если ОтброситьЛидирующиеНоли тогда
		ОтброситьЛидирующиеНоли( НомерПартии);
	КонецЕсли;
	
	ПредставлениеПартии = СимволТипа+Контрольный+"-"+НомерПартии;
	Если ДопНомерВсегда или (ЗначениеЗаполнено( ДополнениеНомера) и ДополнениеНомера <> "00") Тогда
		ПредставлениеПартии = ПредставлениеПартии + "/"+ДополнениеНомера;
	КонецЕсли;
		
	Возврат( ПредставлениеПартии);
КонецФункции

Функция ПолучитьШтрихкодПоСтрокеВводаПартии( Знач СтрокаПартии, Длина=Неопределено) Экспорт
	Если СтрДлина( СтрокаПартии) > 8 тогда
		СтрокаШК = Лев( СтрокаПартии, 2)+Прав( СтрокаПартии, 2);
		СтрокаШК = СтрокаШК + "000" + Сред( СтрокаПартии, 4, 5)+Сред( СтрокаПартии, 3, 1);
	иначе
		СтрокаШК = Лев( СтрокаПартии, 2);
		СтрокаШК = СтрокаШК + Сред( СтрокаПартии, 4, 5)+Сред( СтрокаПартии, 3, 1);
	КонецЕсли;
	
	Возврат( СтрЗаменить( СтрокаШК, " ", "0"));
КонецФункции

Функция ПолучитьСтрокуВводаПоШтрихкодуПартии( Знач ЗначениеШК) Экспорт
	ТекстШК = Формат( ЗначениеШК, "ЧГ=0");
	ПрефиксСТипом = Лев( ТекстШК, 2);
	Контрольный = Прав( ТекстШК, 1);
	
	Если СтрДлина( ТекстШК) > 8 тогда
		ДополнениеНомера = Сред( ТекстШК, 3, 2);
		НомерПартии = Прав( "00000"+Сред( ТекстШК, 8, 5), 5);
	иначе
		ДополнениеНомера = "";
		НомерПартии = Прав( "00000"+Сред( ТекстШК, 3, 5), 5);
	КонецЕсли;
	
	Возврат( ПрефиксСТипом+Контрольный+НомерПартии+ДополнениеНомера);
КонецФункции

Процедура ОтброситьЛидирующиеНоли( Стр) Экспорт
	Пока Лев( Стр, 1) = "0" цикл
		Стр = Сред( Стр, 2);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДляПоискаИзШК( Данные) Экспорт
	ДляПоиска = "";
	
	Если СтрДлина( Данные) > 8 тогда
		ДляПоиска = Сред( Данные, 5, 8);
	иначе
		ДляПоиска = Сред( Данные, 3, 5);
	КонецЕсли;
	
	УГМК_ОперативныйУчетКлиентСервер.ОтброситьЛидирующиеНоли( ДляПоиска);
	
	Возврат( ДляПоиска);
КонецФункции

Функция НайтиДобавитьЭлементОтбора( Элементы, Поле1, ВидСравнения = Неопределено) Экспорт
	Перем Результат1;
	
	Результат1 = Неопределено;
	ТипЭлемент = Тип("ЭлементОтбораКомпоновкиДанных");
	
	Для Каждого ЭлементОтбора из Элементы цикл
		Если (ТипЗнч( ЭлементОтбора) = ТипЭлемент) и (ЭлементОтбора.ЛевоеЗначение = Поле1) тогда
			Результат1 = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат1 = Неопределено тогда
		Результат1 = Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		Результат1.ЛевоеЗначение = Поле1;
		Если ВидСравнения = Неопределено тогда
			Результат1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		иначе
			Результат1.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат1);
КонецФункции

Процедура ДобавитьБазовыеОтборы( ЭтаФорма, РазделительСохраненияНастроек = "", ОтборРабочийЦентр = "Авто", ОтборПодразделение = Неопределено) Экспорт
	
	Поле1 = Новый ПолеКомпоновкиДанных("ДатаНачалоДня");
	ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ЭтаФорма.Список.Отбор.Элементы, Поле1, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	Если ЭлементОтбора <> Неопределено тогда
		Если ЗначениеЗаполнено( ЭтаФорма.Дата) тогда
			ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Дата;
			ЭлементОтбора.Использование = Истина;
		иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = Новый ПолеКомпоновкиДанных("Смена");
	ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ЭтаФорма.Список.Отбор.Элементы, Поле1);
	Если ЭлементОтбора <> Неопределено тогда
		Если ЗначениеЗаполнено( ЭтаФорма.Смена) тогда
			ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Смена;
			ЭлементОтбора.Использование = Истина;
		иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЗначениеЗаполнено( ЭтаФорма.Номер);
		ЕстьНомер = Истина;
	Исключение
		ЕстьНомер = Ложь;
	КонецПопытки;
	
	Если ЕстьНомер тогда
		Поле1 = Новый ПолеКомпоновкиДанных("Номер");
		ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ЭтаФорма.Список.Отбор.Элементы, Поле1, ВидСравненияКомпоновкиДанных.Содержит);
		Если ЭлементОтбора <> Неопределено тогда
			Если ЗначениеЗаполнено( ЭтаФорма.Номер) тогда
				ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Номер;
				ЭлементОтбора.Использование = Истина;
			иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьПринудительно = Новый Массив;
	ДобавитьПринудительно.Добавить( ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	АвтоОтборЗначениеСписок( ЭтаФорма, РазделительСохраненияНастроек, "Склад", "СписокСкладов", ДобавитьПринудительно);
	
	Если ОтборРабочийЦентр = "Авто" тогда // автоопределение значений отбора
		ДобавитьПринудительно = Новый Массив;
		ДобавитьПринудительно.Добавить( ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
		АвтоОтборЗначениеСписок( ЭтаФорма, РазделительСохраненияНастроек, "РабочийЦентр", "СписокРабочихЦентров", ДобавитьПринудительно);
	иначе
		СписокРабочихЦентров = Неопределено;
		ТипОтборРабочийЦентр = ТипЗнч( ОтборРабочийЦентр);
		Если ТипОтборРабочийЦентр = Тип("СправочникСсылка.РабочиеЦентры") тогда
			СписокРабочихЦентров = Новый СписокЗначений;
			СписокРабочихЦентров.Добавить( ОтборРабочийЦентр);

			УГМК_ОперативныйУчетВызовСервера.ХранилищеОбщихНастроекСохранитьДляПользователя("АРМ_ОперативныйУчет"+РазделительСохраненияНастроек, "РабочийЦентр", ЭтаФорма.РабочийЦентр);
		ИначеЕсли ТипОтборРабочийЦентр = Тип("СписокЗначений") тогда
			СписокРабочихЦентров = ОтборРабочийЦентр;
		ИначеЕсли ТипОтборРабочийЦентр = Тип("Массив") или ТипОтборРабочийЦентр = Тип("ФиксированныйМассив") тогда
			СписокРабочихЦентров = Новый СписокЗначений;
			Для каждого Элемент из ОтборРабочийЦентр цикл
				СписокРабочихЦентров.Добавить( Элемент);
			КонецЦикла;
		КонецЕсли;
		
		Поле1 = Новый ПолеКомпоновкиДанных("РабочийЦентр");
		ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ЭтаФорма.Список.Отбор.Элементы, Поле1, ВидСравненияКомпоновкиДанных.Равно);
		Если ЭлементОтбора <> Неопределено тогда
			Если (СписокРабочихЦентров = Неопределено) или (СписокРабочихЦентров.Количество() = 0) тогда
				ЭлементОтбора.Использование = Ложь;
			иначеЕсли СписокРабочихЦентров.Количество() = 1 тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
				ЭлементОтбора.ПравоеЗначение = СписокРабочихЦентров[ 0].Значение;
				ЭлементОтбора.Использование = Истина;
			иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке; 
				ЭлементОтбора.ПравоеЗначение = СписокРабочихЦентров;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборПодразделение = "Авто" тогда
		ДобавитьПринудительно = Новый Массив;
		ДобавитьПринудительно.Добавить( ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
		АвтоОтборЗначениеСписок( ЭтаФорма, РазделительСохраненияНастроек, "Подразделение", "СписокПодразделений", ДобавитьПринудительно);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьБазовыеОтборы_ПриемкаГП( ЭтаФорма, ЕстьСмена) Экспорт
	Элементы = ЭтаФорма.Элементы;
	ПодразделениеОтбор = ЭтаФорма.ПодразделениеОтбор;
	СписокПодразделений = ЭтаФорма.СписокПодразделений;
	Дата = ЭтаФорма.Дата;
	
	Поле1 = Новый ПолеКомпоновкиДанных("ДатаНачалоДня");
	ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора(ЭтаФорма.Список.Отбор.Элементы, Поле1, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	Если ЭлементОтбора <> Неопределено тогда
		Если ЗначениеЗаполнено(Дата) тогда
			ЭлементОтбора.ПравоеЗначение = Дата;
			ЭлементОтбора.Использование = Истина;
		иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПолеП = Новый ПолеКомпоновкиДанных("Подразделение");
	Если ЗначениеЗаполнено( ПодразделениеОтбор) тогда
		Элементы.КнопкаВыборПодразделенияСписок.Заголовок = Строка( ПодразделениеОтбор);
		ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора(ЭтаФорма.Список.Отбор.Элементы, ПолеП, ВидСравненияКомпоновкиДанных.Равно);
		Если ЭлементОтбора <> Неопределено тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ПодразделениеОтбор;
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
	иначе
		Элементы.КнопкаВыборПодразделенияСписок.Заголовок = "";
		ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора(ЭтаФорма.Список.Отбор.Элементы, ПолеП, ВидСравненияКомпоновкиДанных.ВСписке);
		Если ЭлементОтбора <> Неопределено тогда
			Если СписокПодразделений.Количество() > 0 тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.ПравоеЗначение = СписокПодразделений;
				ЭлементОтбора.Использование = Истина;
			иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСмена тогда
		Смена = ЭтаФорма.Смена;
		Если ЭтаФорма.АвтоопределениеСмены = Ложь Тогда
			Поле1 = Новый ПолеКомпоновкиДанных("Смена");
			ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора(ЭтаФорма.Список.Отбор.Элементы, Поле1);
			Если ЭлементОтбора <> Неопределено тогда
				Если ЗначениеЗаполнено(Смена) тогда
					ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Смена;
					ЭлементОтбора.Использование = Истина;
				иначе
					ЭлементОтбора.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("График", ЭтаФорма.График);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура АвтоОтборЗначениеСписок( ЭтаФорма, РазделительСохраненияНастроек, ИмяРеквизита, ИмяРеквизитаСписка, ДобавитьПринудительно = Неопределено)
		
	МассивЗначений = Неопределено;
	ЕстьЗначение = Ложь;
	ЕстьСписокЗначений = Ложь;
	
	Попытка
		ЭтаФормаИмяРеквизита = ЭтаФорма[ ИмяРеквизита];
		ЗначениеЗаполнено( ЭтаФормаИмяРеквизита);
		ЕстьЗначение = Истина;
	исключение
		ЕстьЗначение = Ложь;
	КонецПопытки;
	
	Попытка
		ЭтаФорма[ ИмяРеквизитаСписка].Количество();
		ЕстьСписокЗначений = Истина;
	исключение
		ЕстьСписокЗначений = Ложь;
	КонецПопытки;
	
	Если ЕстьЗначение и ЗначениеЗаполнено( ЭтаФормаИмяРеквизита) тогда
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить( ЭтаФормаИмяРеквизита);
		УГМК_ОперативныйУчетВызовСервера.ХранилищеОбщихНастроекСохранитьДляПользователя("АРМ_ОперативныйУчет"+РазделительСохраненияНастроек, ИмяРеквизита, ЭтаФормаИмяРеквизита);
	иначеЕсли ЕстьСписокЗначений и (ЭтаФорма[ ИмяРеквизитаСписка].Количество() > 0) тогда
		МассивЗначений = ЭтаФорма[ ИмяРеквизитаСписка].ВыгрузитьЗначения();
	КонецЕсли;
	
	Если (МассивЗначений <> Неопределено) и (ДобавитьПринудительно <> Неопределено) тогда
		Для каждого Значение1 из ДобавитьПринудительно цикл 
			МассивЗначений.Добавить( Значение1);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьЗначение или ЕстьСписокЗначений тогда
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("Отбор"+ИмяРеквизита, МассивЗначений <> Неопределено);
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра(ИмяРеквизита, МассивЗначений);
	КонецЕсли;
КонецПроцедуры

// Заменены обработчики для Подписок
// "ПроверитьУстранениеПроблемыДокумента" и "ПроверитьУстранениеПроблемыОбъекта"
Процедура ПроверитьУстранениеПроблемыДокументаОбработкаПроведения( Источник, Отказ, РежимПроведения) Экспорт
	//ОЦМ Мобильная
	//
	//ОбменДаннымиСобытия.ПроверитьУстранениеПроблемыДокументаОбработкаПроведения( Источник, Отказ, РежимПроведения);
	//
КонецПроцедуры

Процедура ПроверитьУстранениеПроблемыОбъектаПриЗаписи( Источник, Отказ) Экспорт
	//ОЦМ Мобильная
	//
	//ОбменДаннымиСобытия.ПроверитьУстранениеПроблемыОбъектаПриЗаписи( Источник, Отказ);
	//
КонецПроцедуры
//***********************************************************************************

Функция ПолучитьПеремещаемоеОписаниеМеталла( ОписаниеМеталла) Экспорт
	ОписаниеМеталлаПеремещаемое = Новый Массив;
	Для каждого Строка из ОписаниеМеталла цикл
		ЭлементОписания = Новый Структура("Параметр,Значение");
		ЗаполнитьЗначенияСвойств( ЭлементОписания, Строка);
		ОписаниеМеталлаПеремещаемое.Добавить( ЭлементОписания);
	КонецЦикла;
	
	Возврат( Новый ФиксированныйМассив( ОписаниеМеталлаПеремещаемое));
КонецФункции

//***********************************************************************************

Функция ОпределитьТочность( ЗначениеЧисло) Экспорт
	ЗначениеСтрока = Формат( ЗначениеЧисло, "ЧРД=.; ЧГ=0");
	ДлинаСтроки = СтрДлина( ЗначениеСтрока);
	Поз = Найти( ЗначениеСтрока, ".");
	
	Точность = 0;
	Если Поз > 0 тогда
		Точность = ДлинаСтроки - Поз;
	КонецЕсли;
	
	Возврат( Точность);
КонецФункции

Функция КоличествоЗнаковТочности( Точность) Экспорт
	Знаков = 5;
	Если Точность = -1 тогда
		Знаков = 0;
	иначеЕсли Точность = 0 тогда
		Знаков = 5;
	иначе
		Знаков = Точность;
	КонецЕсли;
		
	Возврат( Знаков);
КонецФункции

Функция ОкруглитьЗначениеДоТочности( Значение, Точность) Экспорт
	Возврат( Окр( Значение, КоличествоЗнаковТочности( Точность)));
КонецФункции

Функция ФорматПоТочности( Точность) Экспорт
	СтрФормат = "ЧН=0; ЧГ=0";
	Если Точность <> 0 тогда
		СтрФормат = СтрФормат + "; ЧДЦ="+Строка( КоличествоЗнаковТочности( Точность));
	КонецЕсли;
	
	Возврат( СтрФормат);
КонецФункции

//***********************************************************************************

Процедура СертификацияНоменклатураПередЗаписьюОбъекта( ЭтотОбъект, ЕстьОписаниеМеталла = Истина) Экспорт
	//ОЦМ Мобильная
	//Перем Результат, ПодчиненныеДокументы;
	//
	//ПодчиненныеДокументы = Новый СписокЗначений;
	//УГМК_ОбщегоНазначенияККСервер.ПолучитьОграниченияСТК( ЭтотОбъект.Ссылка, ЭтотОбъект.Дата, Результат, ПодчиненныеДокументы);
	//Если ЗначениеЗаполнено( Результат) тогда
	//	ВызватьИсключение Результат;
	//КонецЕсли;
	//
	//Если ЕстьОписаниеМеталла тогда
	//	Если ЭтотОбъект.ПоСвойствам тогда
	//		ЭтотОбъект.Номенклатура = ЭтотОбъект.МаркаСплава;
	//	иначе
	//		ДанныеМеталла = УГМК_ОперативныйУчет.ПолучитьРеквизитыМеталла( ЭтотОбъект.Номенклатура);
	//		Если ДанныеМеталла <> Неопределено тогда
	//			ЭтотОбъект.МаркаСплава = ДанныеМеталла.МаркаСплаваПроизводство;
	//			ЭтотОбъект.ГруппаПродукции = ДанныеМеталла.ГруппаПродукции;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Функция ИзменитьПараметрКомпоновки( Элемент, Имя, Значение) Экспорт
	Изменить = Ложь;
	Параметр = Элемент.Параметры.Элементы.Найти( Имя);
	Если Параметр <> Неопределено тогда
		Если Параметр.Значение <> Значение тогда
			Элемент.Параметры.УстановитьЗначениеПараметра( Имя, Значение);
			Изменить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Изменить);
КонецФункции

Функция РеквизитыАвтосохранения() Экспорт
	РеквизитыАвтосохранения = Новый Структура;
	
	РеквизитыАвтосохранения.Вставить("Склад","Склад");
	РеквизитыАвтосохранения.Вставить("СкладПолучатель","СкладПолучатель");
	РеквизитыАвтосохранения.Вставить("РабочийЦентр","РабочийЦентр");
	
	Возврат( РеквизитыАвтосохранения);
КонецФункции

Процедура ФормаСпискаПартии_АвтоОтбор( ЭтаФорма, Команда, Значение = Неопределено) Экспорт
	ПолеСсылка1 = Новый ПолеКомпоновкиДанных("МаркаЗначение");
	ПолеСсылка2 = Новый ПолеКомпоновкиДанных("Архив");
	
	ЗаголовокКнопки = "";
	ЗаголовокПолей = "";
	
	ТипЭлементОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	ЗаголовокМарки = "";
	Для каждого ЭлементОтбора из ЭтаФорма.Список.Отбор.Элементы цикл
		Если ТипЗнч( ЭлементОтбора) = ТипЭлементОтбора и (ЭлементОтбора.ЛевоеЗначение = ПолеСсылка1 или ЭлементОтбора.ЛевоеЗначение = ПолеСсылка2) тогда
			Если Значение = Неопределено тогда
				ЭлементОтбора.Использование = не ЭлементОтбора.Использование;
			иначе
				ЭлементОтбора.Использование = Значение;
			КонецЕсли;
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеСсылка1 тогда
				ЗаголовокПолей = ЗаголовокПолей + ",Марка";
				ЗаголовокМарки = СтрЗаменить( Строка( ЭлементОтбора.ПравоеЗначение), "<Пустое значение>; ","");
			иначе
				ЗаголовокПолей = ЗаголовокПолей + ",в Работе";
			КонецЕсли;
			
			Если ЭлементОтбора.Использование тогда          
				ЗаголовокКнопки = "Отключить";
			иначе
				ЗаголовокКнопки = "Включить";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаголовокКнопки = "Включить" тогда
		ЭтаФорма.Заголовок = "Выведены: ВСЕ";
	иначе
		ЭтаФорма.Заголовок = "Выведены: в Работе";
		Если ЗначениеЗаполнено( ЗаголовокМарки) тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "; Марки:"+ЗаголовокМарки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ЗаголовокКнопки) тогда
		ЭтаФорма.Элементы.ОтборПоМарке.Заголовок = ЗаголовокКнопки+" отбор ("+Сред( ЗаголовокПолей, 2)+")";
	КонецЕсли;
КонецПроцедуры

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда 
//Функция ПодборТехнологическихОпераций(Данные=Неопределено,МенеджерВременныхТаблиц=Неопределено,Знач ДополнительныеПоля="",ПоляСортировки="",Период=Неопределено) Экспорт
//	ТекстДополнительныеПоля="";	
//	Если ДополнительныеПоля<>"" Тогда
//		Поз=Найти(ДополнительныеПоля,",");
//		Пока Поз>0 Цикл
//			ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+Лев(ДополнительныеПоля,Поз-1)+",";	
//			ДополнительныеПоля=Сред(ДополнительныеПоля,Поз+1);	
//			Поз=Найти(ДополнительныеПоля,",");
//		КонецЦикла; 
//		ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+ДополнительныеПоля+",";	
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Если МенеджерВременныхТаблиц=Неопределено Тогда
//		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Иначе
//		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	КонецЕсли;	
//	ЗависимостьОтМатериала=Новый Массив;
//	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаТехнологическуюОперацию);
//	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаВариантТехнологическойОперации);
//	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
//	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
//	Запрос.УстановитьПараметр("ЗависимостьОтМатериала", ЗависимостьОтМатериала);
//	ЗависимостьОтПродукции=Новый Массив;
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтТехнологическойОперации);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтВариантаТехнологическойОперации);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
//	Запрос.УстановитьПараметр("ЗависимостьОтПродукции", ЗависимостьОтПродукции);
//	
//	Если Данные<>Неопределено Тогда
//		Колонки=Данные.Колонки;
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	&ДополнительныеПоля,
//			|	Данные.Период КАК Период,
//			|	Данные.Группа КАК Группа,
//			|	Данные.ПоСвойствам КАК ПоСвойствам,
//			|	Данные.РабочийЦентр КАК РабочийЦентр,
//			|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
//			|	Данные.ВидОперации КАК ВидОперации,
//			|	Данные.ГруппаПродукции КАК ГруппаПродукции,
//			|	Данные.Номенклатура КАК Номенклатура,
//			|	Данные.Характеристика КАК Характеристика,
//			|	Данные.МаркаСплава КАК МаркаСплава,
//			|	Данные.Состояние КАК Состояние,
//			|	Данные.ПоСвойствамПродукции КАК ПоСвойствамПродукции,
//			|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
//			|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
//			|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
//			|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
//			|	Данные.СостояниеПродукции КАК СостояниеПродукции,
//			|	Данные.ПаспортПартииПродукции КАК ПаспортПартии,
//			|	Данные.КоличествоПродукции КАК Количество,
//			|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//			|ПОМЕСТИТЬ ВТДанные
//			|ИЗ
//			|	&Данные КАК Данные";
//			
//		//УГМК++ Пресников Ю.В. валилось при вызве из формы Отливка ОбъектИсполнителиЗаполнитьТО
//		Если Колонки.Найти("ВидОперации")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ВидОперации ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("ПаспортПартииПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ПаспортПартииПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("КоличествоПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоПродукции ",""""" ");
//		КонецЕсли;
//		//УГМК--
//		Если Колонки.Найти("Период")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Период ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("Группа")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Группа ","0 ");
//		КонецЕсли;
//		Если Колонки.Найти("ГруппаПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("Номенклатура")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Номенклатура ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("Характеристика")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Характеристика ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("МаркаСплава")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплава ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("Состояние")=Неопределено Тогда
//			//Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Состояние ","ЗНАЧЕНИЕ(Справочник.СК_Состояния.ПустаяСсылка) ");
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Состояние ",""""" ");
//		КонецЕсли;
//		//Если Колонки.Найти("ТипыРазмеров")=Неопределено Тогда
//		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТипыРазмеров ",""""" ");
//		//КонецЕсли;
//		//Если Колонки.Найти("ЗначенияРазмеров")=Неопределено Тогда
//		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЗначенияРазмеров ",""""" ");
//		//КонецЕсли;
//		Если Колонки.Найти("ГруппаПродукцииПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукцииПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("НоменклатураПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.НоменклатураПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("ХарактеристикаПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ХарактеристикаПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("МаркаСплаваПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплаваПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("СостояниеПродукции")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.СостояниеПродукции ",""""" ");
//		КонецЕсли;
//		Если Колонки.Найти("ЕдиницаИзмерения")=Неопределено Тогда
//			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЕдиницаИзмерения ",""""" ");
//		КонецЕсли;
//		//Если Колонки.Найти("ТипыРазмеровПродукции")=Неопределено Тогда
//		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТипыРазмеровПродукции ",""""" ");
//		//КонецЕсли;
//		//Если Колонки.Найти("ЗначенияРазмеровПродукции")=Неопределено Тогда
//		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЗначенияРазмеровПродукции ",""""" ");
//		//КонецЕсли;
//		
//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
//		Запрос.УстановитьПараметр("Данные", Данные);
//		Запрос.Выполнить();
//	КонецЕсли;	
//	
//	Если Период=Неопределено Тогда
//		Период=ТекущаяДата();
//	КонецЕсли; 
//	Запрос.УстановитьПараметр("Период", Период);
//	Запрос.Текст = 
//		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр КАК РабочийЦентр,
//		//|	Данные.ВидОперации КАК ВидОперации,
//		//|	Данные.РабочийЦентр КАК РабочийЦентрНастройки,
//		//|	Данные.ВидОперации КАК ВидОперацииНастройки,
//		//|	ЛОЖЬ КАК ЭтоГруппаЗаменяемости,
//		//|	0 КАК Приоритет
//		//|ПОМЕСТИТЬ ВТВсеНастройки
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	Данные.РабочийЦентр,
//		//|	ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка),
//		//|	ЛОЖЬ,
//		//|	1
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	ИСТИНА,
//		//|	2
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	Данные.РабочийЦентр,
//		//|	ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка),
//		//|	ИСТИНА,
//		//|	3
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка),
//		//|	Данные.ВидОперации,
//		//|	ЛОЖЬ,
//		//|	4
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|
//		//|ОБЪЕДИНИТЬ ВСЕ
//		//|
//		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		//|	Данные.РабочийЦентр,
//		//|	Данные.ВидОперации,
//		//|	ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка),
//		//|	ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка),
//		//|	ЛОЖЬ,
//		//|	5
//		//|ИЗ
//		//|	ВТДанные КАК Данные
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	ВсеНастройки.РабочийЦентр,
//		//|	ВсеНастройки.ВидОперации,
//		//|	МИНИМУМ(ВсеНастройки.Приоритет) КАК Приоритет
//		//|ПОМЕСТИТЬ ВТПриотитетНастройки
//		//|ИЗ
//		//|	ВТВсеНастройки КАК ВсеНастройки
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_НастройкаИзмененияСвойствНоменклатурыВПеределе КАК Настройка
//		//|		ПО (ВсеНастройки.ЭтоГруппаЗаменяемости
//		//|					И ВсеНастройки.РабочийЦентрНастройки = Настройка.РабочийЦентр
//		//|				ИЛИ НЕ ВсеНастройки.ЭтоГруппаЗаменяемости
//		//|					И ВсеНастройки.РабочийЦентрНастройки В (Настройка.РабочийЦентр.Состав.РабочийЦентр))
//		//|			И ВсеНастройки.ВидОперацииНастройки = Настройка.ВидОперации
//		//|
//		//|СГРУППИРОВАТЬ ПО
//		//|	ВсеНастройки.РабочийЦентр,
//		//|	ВсеНастройки.ВидОперации
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	ВсеНастройки.РабочийЦентр КАК РабочийЦентр,
//		//|	ВсеНастройки.ВидОперации КАК ВидОперации,
//		//|	МАКСИМУМ(Настройка.РабочийЦентр) КАК РабочийЦентрНастройки,
//		//|	Настройка.ВидОперации КАК ВидОперацииНастройки
//		//|ПОМЕСТИТЬ ВТПриоритетнаяНастройка
//		//|ИЗ
//		//|	ВТПриотитетНастройки КАК ПриотитетНастройки
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеНастройки КАК ВсеНастройки
//		//|		ПО ПриотитетНастройки.РабочийЦентр = ВсеНастройки.РабочийЦентр
//		//|			И ПриотитетНастройки.ВидОперации = ВсеНастройки.ВидОперации
//		//|			И ПриотитетНастройки.Приоритет = ВсеНастройки.Приоритет
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_НастройкаИзмененияСвойствНоменклатурыВПеределе КАК Настройка
//		//|		ПО (ВсеНастройки.ЭтоГруппаЗаменяемости
//		//|					И ВсеНастройки.РабочийЦентрНастройки = Настройка.РабочийЦентр
//		//|				ИЛИ НЕ ВсеНастройки.ЭтоГруппаЗаменяемости
//		//|					И ВсеНастройки.РабочийЦентрНастройки В (Настройка.РабочийЦентр.Состав.РабочийЦентр))
//		//|			И (ВсеНастройки.ВидОперацииНастройки = Настройка.ВидОперации)
//		//|
//		//|СГРУППИРОВАТЬ ПО
//		//|	ВсеНастройки.РабочийЦентр,
//		//|	ВсеНастройки.ВидОперации,
//		//|	Настройка.ВидОперации
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	Данные.РабочийЦентр КАК РабочийЦентр,
//		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
//		|	Данные.ВидОперации КАК ВидОперации,
//		|	Данные.ПоСвойствам КАК ПоСвойствам,
//		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
//		|	Данные.Номенклатура КАК Номенклатура,
//		|	Данные.Характеристика КАК Характеристика,
//		|	Данные.МаркаСплава КАК МаркаСплава,
//		|	Данные.Состояние КАК Состояние,
//		|	Данные.ПоСвойствамПродукции КАК ПоСвойствамПродукции,
//		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
//		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
//		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
//		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
//		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
//		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//		|	ЕСТЬNULL(Соответствие.ТехнологическаяОперация, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)) КАК ТехнологическаяОперация,
//		|	ЕСТЬNULL(Соответствие.ВариантТехнологическойОперации, ЗНАЧЕНИЕ(Справочник.УГМК_ВариантыТехнологическихОпераций.ПустаяСсылка)) КАК ВариантТехнологическойОперации,
//		|	ВЫБОР
//		|		КОГДА Соответствие.РабочийЦентр <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 5000000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА Соответствие.РежимРаботыРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка)
//		|			ТОГДА 1000000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА Соответствие.ВидОперации <> ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка)
//		|			ТОГДА 100000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталла.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
//		|			ТОГДА 10000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталлаПродукции.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
//		|			ТОГДА 50000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталла.Номенклатура <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 1000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталлаПродукции.Номенклатура <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 5000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталла.Характеристика <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 100
//		|		КОГДА ОписаниеМеталла.Размер1Минимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер1Максимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер2Минимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер2Максимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер3Минимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер3Максимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер4Минимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер4Максимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер5Минимальный <> 0
//		|				ИЛИ ОписаниеМеталла.Размер5Максимальный <> 0
//		|			ТОГДА 200
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталлаПродукции.Характеристика <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 500
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталла.МаркаСплава <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 10
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталлаПродукции.МаркаСплава <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 50
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталла.Состояние <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА ОписаниеМеталлаПродукции.Состояние <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 5
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Приоритет
//		|ПОМЕСТИТЬ ВТВсеСоответствия
//		|ИЗ
//		|	ВТДанные КАК Данные
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_НастройкаИзмененияСвойствНоменклатурыВПеределе КАК Настройка
//		|		ПО (Данные.РабочийЦентр = Настройка.РабочийЦентр
//		|				ИЛИ Настройка.РабочийЦентр = НЕОПРЕДЕЛЕНО
//		|				ИЛИ Данные.РабочийЦентр В (Настройка.РабочийЦентр.Состав.РабочийЦентр))
//		|			И (Данные.ВидОперации = Настройка.ВидОперации
//		|				ИЛИ Настройка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка))
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
//		|		ПО Данные.Характеристика = УГМК_ЗначенияРазмеров.Ссылка
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеровПродукции
//		|		ПО Данные.ХарактеристикаПродукции = УГМК_ЗначенияРазмеровПродукции.Ссылка
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводство
//		|		ПО Данные.МаркаСплава = УГМК_МаркаСплаваПроизводство.Ссылка
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводствоПродукции
//		|		ПО Данные.МаркаСплаваПродукции = УГМК_МаркаСплаваПроизводствоПродукции.Ссылка
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ИзменениеСвойствТехнологическойОперацией КАК Соответствие
//		|		ПО (Настройка.РабочийЦентр = Соответствие.РабочийЦентр)
//		|			И (Данные.РежимРабочегоЦентра = Соответствие.РежимРаботыРабочегоЦентра
//		|				ИЛИ Соответствие.РежимРаботыРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка))
//		|			И (Настройка.ВидОперации = Соответствие.ВидОперации)
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталла
//		|		ПО (ОписаниеМеталла.КлючОписанияМеталла = Соответствие.КлючОписанияМеталла)
//		|			И Данные.ПоСвойствам = ОписаниеМеталла.ПоСвойствам
//		|			И (НЕ Настройка.ИзменениеГруппыПродукции В (&ЗависимостьОтМатериала)
//		|				ИЛИ Данные.ГруппаПродукции = ОписаниеМеталла.ГруппаПродукции
//		|				ИЛИ ОписаниеМеталла.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка))
//		|			И (НЕ Настройка.ИзменениеНоменклатуры В (&ЗависимостьОтМатериала)
//		|				ИЛИ Данные.Номенклатура = ОписаниеМеталла.Номенклатура
//		|				ИЛИ ОписаниеМеталла.Номенклатура = НЕОПРЕДЕЛЕНО)
//		|			И (НЕ Настройка.ИзменениеХарактеристики В (&ЗависимостьОтМатериала)
//		|				ИЛИ Данные.Характеристика = ОписаниеМеталла.Характеристика
//		|				ИЛИ ОписаниеМеталла.Характеристика = НЕОПРЕДЕЛЕНО
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеров.Размер1 >= ОписаниеМеталла.Размер1Минимальный
//		|							И УГМК_ЗначенияРазмеров.Размер1 < ОписаниеМеталла.Размер1Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеров.Размер1 = ОписаниеМеталла.Размер1Минимальный
//		|							ИЛИ ОписаниеМеталла.Размер1Минимальный = 0)
//		|							И ОписаниеМеталла.Размер1Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеров.Размер2 >= ОписаниеМеталла.Размер2Минимальный
//		|							И УГМК_ЗначенияРазмеров.Размер2 < ОписаниеМеталла.Размер2Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеров.Размер2 = ОписаниеМеталла.Размер2Минимальный
//		|							ИЛИ ОписаниеМеталла.Размер2Минимальный = 0)
//		|							И ОписаниеМеталла.Размер2Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеров.Размер3 >= ОписаниеМеталла.Размер3Минимальный
//		|							И УГМК_ЗначенияРазмеров.Размер3 < ОписаниеМеталла.Размер3Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеров.Размер3 = ОписаниеМеталла.Размер3Минимальный
//		|							ИЛИ ОписаниеМеталла.Размер3Минимальный = 0)
//		|							И ОписаниеМеталла.Размер3Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеров.Размер4 >= ОписаниеМеталла.Размер4Минимальный
//		|							И УГМК_ЗначенияРазмеров.Размер4 < ОписаниеМеталла.Размер4Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеров.Размер4 = ОписаниеМеталла.Размер4Минимальный
//		|							ИЛИ ОписаниеМеталла.Размер4Минимальный = 0)
//		|							И ОписаниеМеталла.Размер4Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеров.Размер5 >= ОписаниеМеталла.Размер5Минимальный
//		|							И УГМК_ЗначенияРазмеров.Размер5 < ОписаниеМеталла.Размер5Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеров.Размер5 = ОписаниеМеталла.Размер5Минимальный
//		|							ИЛИ ОписаниеМеталла.Размер5Минимальный = 0)
//		|							И ОписаниеМеталла.Размер5Максимальный = 0))
//		|			И (НЕ Настройка.ИзменениеМаркиСплава В (&ЗависимостьОтМатериала)
//		|				ИЛИ Данные.МаркаСплава = ОписаниеМеталла.МаркаСплава
//		|				ИЛИ Данные.МаркаСплава В (ОписаниеМеталла.МаркаСплава.Коллекция.Значение)
//		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава = ОписаниеМеталла.МаркаСплава
//		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава В (ОписаниеМеталла.МаркаСплава.Коллекция.Значение)
//		|				ИЛИ ОписаниеМеталла.МаркаСплава = НЕОПРЕДЕЛЕНО)
//		|			И (НЕ Настройка.ИзменениеСостояния В (&ЗависимостьОтМатериала)
//		|				ИЛИ Данные.Состояние = ОписаниеМеталла.Состояние
//		|				ИЛИ ОписаниеМеталла.Состояние = НЕОПРЕДЕЛЕНО)
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталлаПродукции
//		|		ПО (ОписаниеМеталлаПродукции.КлючОписанияМеталла = Соответствие.КлючОписанияМеталлаПродукции)
//		|			И Данные.ПоСвойствамПродукции = ОписаниеМеталлаПродукции.ПоСвойствам
//		|			И (НЕ Настройка.ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
//		|				ИЛИ Данные.ГруппаПродукцииПродукции = ОписаниеМеталлаПродукции.ГруппаПродукции
//		|				ИЛИ ОписаниеМеталлаПродукции.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка))
//		|			И (НЕ Настройка.ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
//		|				ИЛИ Данные.НоменклатураПродукции = ОписаниеМеталлаПродукции.Номенклатура
//		|				ИЛИ ОписаниеМеталлаПродукции.Номенклатура = НЕОПРЕДЕЛЕНО)
//		|			И (НЕ Настройка.ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
//		|				ИЛИ Данные.ХарактеристикаПродукции = ОписаниеМеталлаПродукции.Характеристика
//		|				ИЛИ ОписаниеМеталлаПродукции.Характеристика = НЕОПРЕДЕЛЕНО
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеровПродукции.Размер1 >= ОписаниеМеталлаПродукции.Размер1Минимальный
//		|							И УГМК_ЗначенияРазмеровПродукции.Размер1 < ОписаниеМеталлаПродукции.Размер1Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеровПродукции.Размер1 = ОписаниеМеталлаПродукции.Размер1Минимальный
//		|							ИЛИ ОписаниеМеталлаПродукции.Размер1Минимальный = 0)
//		|							И ОписаниеМеталлаПродукции.Размер1Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеровПродукции.Размер2 >= ОписаниеМеталлаПродукции.Размер2Минимальный
//		|							И УГМК_ЗначенияРазмеровПродукции.Размер2 < ОписаниеМеталлаПродукции.Размер2Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеровПродукции.Размер2 = ОписаниеМеталлаПродукции.Размер2Минимальный
//		|							ИЛИ ОписаниеМеталлаПродукции.Размер2Минимальный = 0)
//		|							И ОписаниеМеталлаПродукции.Размер2Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеровПродукции.Размер3 >= ОписаниеМеталлаПродукции.Размер3Минимальный
//		|							И УГМК_ЗначенияРазмеровПродукции.Размер3 < ОписаниеМеталлаПродукции.Размер3Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеровПродукции.Размер3 = ОписаниеМеталлаПродукции.Размер3Минимальный
//		|							ИЛИ ОписаниеМеталлаПродукции.Размер3Минимальный = 0)
//		|							И ОписаниеМеталлаПродукции.Размер3Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеровПродукции.Размер4 >= ОписаниеМеталлаПродукции.Размер4Минимальный
//		|							И УГМК_ЗначенияРазмеровПродукции.Размер4 < ОписаниеМеталлаПродукции.Размер4Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеровПродукции.Размер4 = ОписаниеМеталлаПродукции.Размер4Минимальный
//		|							ИЛИ ОписаниеМеталлаПродукции.Размер4Минимальный = 0)
//		|							И ОписаниеМеталлаПродукции.Размер4Максимальный = 0)
//		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//		|						ИЛИ УГМК_ЗначенияРазмеровПродукции.Размер5 >= ОписаниеМеталлаПродукции.Размер5Минимальный
//		|							И УГМК_ЗначенияРазмеровПродукции.Размер5 < ОписаниеМеталлаПродукции.Размер5Максимальный
//		|						ИЛИ (УГМК_ЗначенияРазмеровПродукции.Размер5 = ОписаниеМеталлаПродукции.Размер5Минимальный
//		|							ИЛИ ОписаниеМеталлаПродукции.Размер5Минимальный = 0)
//		|							И ОписаниеМеталлаПродукции.Размер5Максимальный = 0))
//		|			И (НЕ Настройка.ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
//		|				ИЛИ Данные.МаркаСплаваПродукции = ОписаниеМеталлаПродукции.МаркаСплава
//		|				ИЛИ Данные.МаркаСплаваПродукции В (ОписаниеМеталлаПродукции.МаркаСплава.Коллекция.Значение)
//		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава = ОписаниеМеталлаПродукции.МаркаСплава
//		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В (ОписаниеМеталлаПродукции.МаркаСплава.Коллекция.Значение)
//		|				ИЛИ ОписаниеМеталлаПродукции.МаркаСплава = НЕОПРЕДЕЛЕНО)
//		|			И (НЕ Настройка.ИзменениеСостояния В (&ЗависимостьОтПродукции)
//		|				ИЛИ Данные.СостояниеПродукции = ОписаниеМеталлаПродукции.Состояние
//		|				ИЛИ ОписаниеМеталлаПродукции.Состояние = НЕОПРЕДЕЛЕНО)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВсеСоответствия.РабочийЦентр,
//		|	ВсеСоответствия.РежимРабочегоЦентра,
//		|	ВсеСоответствия.ВидОперации,
//		|	ВсеСоответствия.ПоСвойствам,
//		|	ВсеСоответствия.ГруппаПродукции,
//		|	ВсеСоответствия.Номенклатура,
//		|	ВсеСоответствия.Характеристика,
//		|	ВсеСоответствия.МаркаСплава,
//		|	ВсеСоответствия.Состояние,
//		|	ВсеСоответствия.ПоСвойствамПродукции,
//		|	ВсеСоответствия.ГруппаПродукцииПродукции,
//		|	ВсеСоответствия.НоменклатураПродукции,
//		|	ВсеСоответствия.ХарактеристикаПродукции,
//		|	ВсеСоответствия.МаркаСплаваПродукции,
//		|	ВсеСоответствия.СостояниеПродукции,
//		|	МАКСИМУМ(ВсеСоответствия.Приоритет) КАК Приоритет
//		|ПОМЕСТИТЬ ВТПриоритетСоответствия
//		|ИЗ
//		|	ВТВсеСоответствия КАК ВсеСоответствия
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВсеСоответствия.РабочийЦентр,
//		|	ВсеСоответствия.РежимРабочегоЦентра,
//		|	ВсеСоответствия.ВидОперации,
//		|	ВсеСоответствия.ПоСвойствам,
//		|	ВсеСоответствия.ГруппаПродукции,
//		|	ВсеСоответствия.Номенклатура,
//		|	ВсеСоответствия.Характеристика,
//		|	ВсеСоответствия.МаркаСплава,
//		|	ВсеСоответствия.Состояние,
//		|	ВсеСоответствия.ПоСвойствамПродукции,
//		|	ВсеСоответствия.ГруппаПродукцииПродукции,
//		|	ВсеСоответствия.НоменклатураПродукции,
//		|	ВсеСоответствия.ХарактеристикаПродукции,
//		|	ВсеСоответствия.МаркаСплаваПродукции,
//		|	ВсеСоответствия.СостояниеПродукции
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	&ДополнительныеПоля,
//		|	Данные.Период КАК Период,
//		|	Данные.Группа КАК Группа,
//		|	Данные.РабочийЦентр КАК РабочийЦентр,
//		|	Данные.ПоСвойствам,
//		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
//		|	Данные.ВидОперации КАК ВидОперации,
//		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
//		|	Данные.Номенклатура КАК Номенклатура,
//		|	Данные.Характеристика КАК Характеристика,
//		|	Данные.МаркаСплава КАК МаркаСплава,
//		|	Данные.Состояние КАК Состояние,
//		|	Данные.ПоСвойствамПродукции,
//		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
//		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
//		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
//		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
//		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
//		|	Данные.ПаспортПартии КАК ПаспортПартии,
//		|	ВсеСоответствия.ТехнологическаяОперация,
//		|	ВсеСоответствия.ВариантТехнологическойОперации,
//		|	Данные.Количество КАК Количество,
//		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//		|ПОМЕСТИТЬ ВТРезультатПодбора
//		|ИЗ
//		|	ВТДанные КАК Данные
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеСоответствия КАК ВсеСоответствия
//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетСоответствия КАК ПриоритетСоответствия
//		|			ПО ВсеСоответствия.Приоритет = ПриоритетСоответствия.Приоритет
//		|				И ВсеСоответствия.РабочийЦентр = ПриоритетСоответствия.РабочийЦентр
//		|				И ВсеСоответствия.РежимРабочегоЦентра = ПриоритетСоответствия.РежимРабочегоЦентра
//		|				И ВсеСоответствия.ВидОперации = ПриоритетСоответствия.ВидОперации
//		|				И ВсеСоответствия.ПоСвойствам = ПриоритетСоответствия.ПоСвойствам
//		|				И ВсеСоответствия.ГруппаПродукции = ПриоритетСоответствия.ГруппаПродукции
//		|				И ВсеСоответствия.Номенклатура = ПриоритетСоответствия.Номенклатура
//		|				И ВсеСоответствия.Характеристика = ПриоритетСоответствия.Характеристика
//		|				И ВсеСоответствия.МаркаСплава = ПриоритетСоответствия.МаркаСплава
//		|				И ВсеСоответствия.Состояние = ПриоритетСоответствия.Состояние
//		|				И ВсеСоответствия.ГруппаПродукцииПродукции = ПриоритетСоответствия.ГруппаПродукцииПродукции
//		|				И ВсеСоответствия.ГруппаПродукцииПродукции = ПриоритетСоответствия.ГруппаПродукцииПродукции
//		|				И ВсеСоответствия.НоменклатураПродукции = ПриоритетСоответствия.НоменклатураПродукции
//		|				И ВсеСоответствия.ХарактеристикаПродукции = ПриоритетСоответствия.ХарактеристикаПродукции
//		|				И ВсеСоответствия.МаркаСплаваПродукции = ПриоритетСоответствия.МаркаСплаваПродукции
//		|				И ВсеСоответствия.СостояниеПродукции = ПриоритетСоответствия.СостояниеПродукции
//		|		ПО Данные.РабочийЦентр = ВсеСоответствия.РабочийЦентр
//		|			И Данные.РежимРабочегоЦентра = ВсеСоответствия.РежимРабочегоЦентра
//		|			И Данные.ВидОперации = ВсеСоответствия.ВидОперации
//		|			И Данные.ПоСвойствам = ВсеСоответствия.ПоСвойствам
//		|			И Данные.ГруппаПродукции = ВсеСоответствия.ГруппаПродукции
//		|			И Данные.Номенклатура = ВсеСоответствия.Номенклатура
//		|			И Данные.Характеристика = ВсеСоответствия.Характеристика
//		|			И Данные.МаркаСплава = ВсеСоответствия.МаркаСплава
//		|			И Данные.Состояние = ВсеСоответствия.Состояние
//		|			И Данные.ПоСвойствамПродукции = ВсеСоответствия.ПоСвойствамПродукции
//		|			И Данные.ГруппаПродукцииПродукции = ВсеСоответствия.ГруппаПродукцииПродукции
//		|			И Данные.НоменклатураПродукции = ВсеСоответствия.НоменклатураПродукции
//		|			И Данные.ХарактеристикаПродукции = ВсеСоответствия.ХарактеристикаПродукции
//		|			И Данные.МаркаСплаваПродукции = ВсеСоответствия.МаркаСплаваПродукции
//		|			И Данные.СостояниеПродукции = ВсеСоответствия.СостояниеПродукции
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	&ДополнительныеПоля,
//		|	Данные.Период КАК Период,
//		|	Данные.Группа КАК Группа,
//		|	Данные.РабочийЦентр КАК РабочийЦентр,
//		|	Данные.ПоСвойствам,
//		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
//		|	Данные.ВидОперации КАК ВидОперации,
//		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
//		|	Данные.Номенклатура КАК Номенклатура,
//		|	Данные.Характеристика КАК Характеристика,
//		|	Данные.МаркаСплава КАК МаркаСплава,
//		|	Данные.Состояние КАК Состояние,
//		|	Данные.ПоСвойствамПродукции,
//		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
//		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
//		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
//		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
//		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
//		|	Данные.ПаспортПартии КАК ПаспортПартии,
//		|	Данные.ТехнологическаяОперация,
//		|	Данные.ВариантТехнологическойОперации,
//		|	Данные.Количество КАК Количество,
//		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//		|	Расценки.Расценка,
//		|	Расценки.НормаВремени,
//		|	Расценки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияРасценки,
//		|	Расценки.НормаВыработки,
//		|	Расценки.Трудоемкость,
//		|	ЕСТЬNULL(УГМК_КоэффициентыПересчетаЕдиницИзмерения.Коэффициент, 1) КАК КоэффициентПересчетаЕдиницИзмерения
//		|ИЗ
//		|	ВТРезультатПодбора КАК Данные
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_РасценкиТехнологическихОпераций.СрезПоследних(
//		|				&Период,
//		|				(ТехнологическаяОперация, ВариантТехнологическойОперации) В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						ВТРезультатПодбора.ТехнологическаяОперация,
//		|						ВТРезультатПодбора.ВариантТехнологическойОперации
//		|					ИЗ
//		|						ВТРезультатПодбора)) КАК Расценки
//		|		ПО Данные.ТехнологическаяОперация = Расценки.ТехнологическаяОперация
//		|			И Данные.ВариантТехнологическойОперации = Расценки.ВариантТехнологическойОперации
//		|			И (Расценки.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка))
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_КоэффициентыПересчетаЕдиницИзмерения КАК УГМК_КоэффициентыПересчетаЕдиницИзмерения
//		|		ПО (УГМК_КоэффициентыПересчетаЕдиницИзмерения.БазоваяЕдиницаИзмерения = Данные.ЕдиницаИзмерения)
//		|			И (УГМК_КоэффициентыПересчетаЕдиницИзмерения.ЕдиницаИзмерения = Расценки.ЕдиницаИзмерения)";
//		
//	Запрос.Текст = Запрос.Текст+?(ПоляСортировки="","","
//		|УПОРЯДОЧИТЬ ПО "+ПоляСортировки);	
//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
//	
//	Результат = Запрос.Выполнить();

//	Возврат Результат.Выгрузить();

//КонецФункции

//Функция ТехоперацияЗависитОтПродукции(РабочийЦентр,ВидОперации=Неопределено) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	//ЗависимостьОтМатериала=Новый Массив;
//	//ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаТехнологическуюОперацию);
//	//ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаВариантТехнологическойОперации);
//	//ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
//	//ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
//	//Запрос.УстановитьПараметр("ЗависимостьОтМатериала", ЗависимостьОтМатериала);
//	ЗависимостьОтПродукции=Новый Массив;
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтТехнологическойОперации);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтВариантаТехнологическойОперации);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
//	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
//	Запрос.УстановитьПараметр("ЗависимостьОтПродукции", ЗависимостьОтПродукции);
//	
//	Запрос.УстановитьПараметр("РабочийЦентр", РабочийЦентр);
//	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	&РабочийЦентр КАК РабочийЦентр,
//		|	&ВидОперации КАК ВидОперации
//		|ПОМЕСТИТЬ ВТДанные";
//	Запрос.Выполнить();
//	
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	Данные.РабочийЦентр КАК РабочийЦентр,
//		|	Данные.ВидОперации КАК ВидОперации,
//		|	Настройка.ИзменениеМаркиСплава,
//		|	Настройка.ИзменениеГруппыПродукции,
//		|	Настройка.ИзменениеНоменклатуры,
//		|	Настройка.ИзменениеХарактеристики,
//		|	Настройка.ИзменениеСостояния,
//		|	Настройка.ИзменениеТиповРазмеров,
//		|	Настройка.ИзменениеЗначенийРазмеров,
//		|	ВЫБОР
//		|		КОГДА Настройка.РабочийЦентр <> НЕОПРЕДЕЛЕНО
//		|			ТОГДА 5000000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ + ВЫБОР
//		|		КОГДА Настройка.ВидОперации <> ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка)
//		|			ТОГДА 100000
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Приоритет
//		|ПОМЕСТИТЬ ВТВсеСоответствия
//		|ИЗ
//		|	ВТДанные КАК Данные
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_НастройкаИзмененияСвойствНоменклатурыВПеределе КАК Настройка
//		|		ПО (Данные.РабочийЦентр = Настройка.РабочийЦентр
//		|				ИЛИ Настройка.РабочийЦентр = НЕОПРЕДЕЛЕНО
//		|				ИЛИ Данные.РабочийЦентр В (Настройка.РабочийЦентр.Состав.РабочийЦентр))
//		|			И (Данные.ВидОперации = Настройка.ВидОперации
//		|				ИЛИ Настройка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка))
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВсеСоответствия.РабочийЦентр,
//		|	ВсеСоответствия.ВидОперации,
//		|	МАКСИМУМ(ВсеСоответствия.Приоритет) КАК Приоритет
//		|ПОМЕСТИТЬ ВТПриоритетСоответствия
//		|ИЗ
//		|	ВТВсеСоответствия КАК ВсеСоответствия
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВсеСоответствия.РабочийЦентр,
//		|	ВсеСоответствия.ВидОперации
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВсеСоответствия.РабочийЦентр КАК РабочийЦентр,
//		|	ВсеСоответствия.ВидОперации КАК ВидОперации,
//		|	ВсеСоответствия.ИзменениеМаркиСплава,
//		|	ВсеСоответствия.ИзменениеГруппыПродукции,
//		|	ВсеСоответствия.ИзменениеНоменклатуры,
//		|	ВсеСоответствия.ИзменениеХарактеристики,
//		|	ВсеСоответствия.ИзменениеСостояния,
//		|	ВсеСоответствия.ИзменениеТиповРазмеров,
//		|	ВсеСоответствия.ИзменениеЗначенийРазмеров,
//		|	ВЫБОР
//		|		КОГДА ВсеСоответствия.ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеСостояния В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеТиповРазмеров В (&ЗависимостьОтПродукции)
//		|				ИЛИ ВсеСоответствия.ИзменениеЗначенийРазмеров В (&ЗависимостьОтПродукции)
//		|			ТОГДА ИСТИНА
//		|		ИНАЧЕ ЛОЖЬ
//		|	КОНЕЦ КАК ЗависитОтПродукции
//		|ИЗ
//		|	ВТВсеСоответствия КАК ВсеСоответствия
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетСоответствия КАК ПриоритетСоответствия
//		|		ПО ВсеСоответствия.Приоритет = ПриоритетСоответствия.Приоритет
//		|			И ВсеСоответствия.РабочийЦентр = ПриоритетСоответствия.РабочийЦентр
//		|			И ВсеСоответствия.ВидОперации = ПриоритетСоответствия.ВидОперации";
//	
//	Выб = Запрос.Выполнить().Выбрать();
//	ЗависитОтПродукции=Ложь;
//	Если Выб.Следующий() Тогда
//		ЗависитОтПродукции=Выб.ЗависитОтПродукции;
//	КонецЕсли;

//	Возврат ЗависитОтПродукции;

//КонецФункции
#КонецЕсли 

Функция ОбновитьТабличнуюЧастьДокумента( ТабЧасть, ИнформацияБирки, ДополнениеИмени = "") Экспорт
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	
	КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам();
	КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча();
	
	КлючПоСвойствамК = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
	КлючНатуральныйК = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
	
	ЕстьИзменения = Ложь;
	
	Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
		Если ЗначениеЗаполнено( Строка.Тара) тогда
			Если Строка.ПоСвойствам тогда
				КлючСтроки = КлючПоСвойствам;
			иначе
				КлючСтроки = КлючНатуральный;
			КонецЕсли;
		иначе
			Если Строка.ПоСвойствам тогда
				КлючСтроки = КлючПоСвойствамК;
			иначе
				КлючСтроки = КлючНатуральныйК;
			КонецЕсли;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		Для каждого КолонкаКлюча из КлючСтроки цикл
			ОтборСтрок.Вставить( ИменаКолонок[ КолонкаКлюча], Строка[ КолонкаКлюча]);
		КонецЦикла;
		
		СтрокиМ = ТабЧасть.НайтиСтроки( ОтборСтрок);
		НоваяСтрока = Неопределено;
		Если СтрокиМ.Количество() = 0 тогда
			НоваяСтрока = ТабЧасть.Добавить();
		ИначеЕсли СтрокиМ.Количество() = 1 и СтрокиМ[ 0][ ИменаКолонок.Количество] = 0 тогда
			НоваяСтрока = СтрокиМ[ 0];
		КонецЕсли;
		
		Если НоваяСтрока <> Неопределено тогда
			Для Каждого КолонкаЭлемент из ИменаКолонок цикл
				Если Строка.Свойство( КолонкаЭлемент.Ключ) тогда
					НоваяСтрока[ КолонкаЭлемент.Значение] = Строка[ КолонкаЭлемент.Ключ];
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока[ ИменаКолонок.ДатаОперации] = ТекущаяДата();
			НоваяСтрока[ ИменаКолонок.КлючСвязи] = УГМК_ОперативныйУчетКлиентСервер.ПолучитьНовыйКлючСтрокиИсточника( ТабЧасть, "КлючСвязи"+ДополнениеИмени);
			
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( ЕстьИзменения);
КонецФункции

Функция ПолучитьОтборДляШтрихкода( ТекущиеДанные, ДополнениеИмени, ПроверятьУникальностьСтроки=Ложь) Экспорт
	ОтборДляКодирования = Новый Структура;
	Если ТекущиеДанные <> Неопределено тогда
		КолонкиОтбора = Новый Массив;
		Если ЗначениеЗаполнено( ТекущиеДанные["Тара"+ДополнениеИмени]) тогда
			Если УГМК_СлужебныйПовторноеИспользование.ТараОпределяетМестоВПартии( ТекущиеДанные["Тара"+ДополнениеИмени]) тогда
				// Тара представляет собой "номер" в поставке.
				КолонкиОтбора.Добавить("Тара");
				КолонкиОтбора.Добавить("ПаспортПартии");
			иначе // Тара уникальна внутри документа (Короб, Шпуля и др.)
				КолонкиОтбора.Добавить("Тара");
			КонецЕсли;
		иначеЕсли ЗначениеЗаполнено( ТекущиеДанные["ПаспортПартии"+ДополнениеИмени]) тогда
			Если ТипЗнч( ТекущиеДанные["ПаспортПартии"+ДополнениеИмени]) = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
				КолонкиОтбора.Добавить("Количество");
				КолонкиОтбора.Добавить("КоличествоТара");
			КонецЕсли;
			КолонкиОтбора.Добавить("Тара");
			КолонкиОтбора.Добавить("ПаспортПартии");
		иначеЕсли ПроверятьУникальностьСтроки тогда
			КолонкиОтбора.Добавить("НомерСтроки");
		иначеЕсли ТекущиеДанные["ПоСвойствам"+ДополнениеИмени] тогда
			КолонкиОтбора = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
		иначе
			КолонкиОтбора = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
		КонецЕсли;
		
		ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
		Для каждого ИмяКолонки из КолонкиОтбора цикл
			ОтборДляКодирования.Вставить( ИменаКолонок[ ИмяКолонки], ТекущиеДанные[ ИменаКолонок[ ИмяКолонки]]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат( ОтборДляКодирования);
КонецФункции

Функция КлючСохраненияНастроек( Имя, Значение1="", Значение2="", Значение3="") Экспорт
	Перем КлючСохраненияНастроек;
	
	КлючСохраненияНастроек = Имя;
	Если Значение1 <> "" тогда
		КлючСохраненияНастроек = КлючСохраненияНастроек+"_"+Строка( Значение1);
	КонецЕсли;
	Если Значение2 <> "" тогда
		КлючСохраненияНастроек = КлючСохраненияНастроек+"_"+Строка( Значение2);
	КонецЕсли;
	Если Значение3 <> "" тогда
		КлючСохраненияНастроек = КлючСохраненияНастроек+"_"+Строка( Значение3);
	КонецЕсли;
	
	Возврат( КлючСохраненияНастроек);
КонецФункции

Функция ПроверитьУказаниеМестаУчета( Объект, ДополнениеИмени, ИмяСтороны = "") Экспорт
	СтрОш = "";
	
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	ТипУказанияМестоУчетаПродукции = Объект[ ИменаКолонок.ТипУказанияМестоУчета];
	Если ДополнениеИмени = "Продукции" тогда
		СкладПолучатель = Объект.СкладПолучатель;
		ПодразделениеПолучатель = Объект.ПодразделениеПолучатель;
		РабочийЦентр = Объект.РабочийЦентр;
	иначе
		СкладПолучатель = Объект.Склад;
		ПодразделениеПолучатель = Объект.Подразделение;
		РабочийЦентр = Объект.РабочийЦентр;
	КонецЕсли;
	
	Если (ТипУказанияМестоУчетаПродукции = 0) или (ТипУказанияМестоУчетаПродукции = 3) тогда
		Если не ЗначениеЗаполнено( СкладПолучатель) тогда
			СтрОш = СтрОш + " Не указан Склад"+ИмяСтороны;
		КонецЕсли;
	КонецЕсли;
	Если (ТипУказанияМестоУчетаПродукции = 1) или (ТипУказанияМестоУчетаПродукции = 3) тогда
		Если не ЗначениеЗаполнено( ПодразделениеПолучатель) тогда
			СтрОш = СтрОш + " Не указано Подразделение"+ИмяСтороны;
		КонецЕсли;
	КонецЕсли;
	Если ТипУказанияМестоУчетаПродукции = 2 тогда
		Если не ЗначениеЗаполнено( РабочийЦентр) тогда
			СтрОш = СтрОш + " Не указан Рабочий центр";
		КонецЕсли;
	КонецЕсли;
	
	Возврат( СтрОш);
КонецФункции

Функция ПолучитьПараметрыВызова_НеЧитаемаяБирка( Объект, ДополнениеИмени) Экспорт
	ПараметрыФормы = Новый Структура();
	Если ДополнениеИмени = "" тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ПоСвойствам", Объект.ПоСвойствам);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("ТипУказанияМестоУчета", Объект.ТипУказанияМестоУчета);
	иначеЕсли ДополнениеИмени = "Продукции" тогда
		ПараметрыФормы.Вставить("Склад", Объект.СкладПолучатель);
		ПараметрыФормы.Вставить("ПоСвойствам", Объект.ПоСвойствам);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеПолучатель);
		ПараметрыФормы.Вставить("ТипУказанияМестоУчета", Объект.ТипУказанияМестоУчетаПродукции);
	КонецЕсли;
	
	Возврат( ПараметрыФормы);
КонецФункции

Функция ПолучитьПараметрыВызова_ПодборПоОстаткам( Объект, ДополнениеИмени, ТолькоБезТары=Ложь) Экспорт
	ПараметрыФормы = Новый Структура();
	
	Если ДополнениеИмени = "" тогда
		ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипУказанияМестоУчета", Объект.ТипУказанияМестоУчета);
	иначеЕсли ДополнениеИмени = "Продукции" тогда
		ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеПолучатель);
		ПараметрыФормы.Вставить("Склад", Объект.СкладПолучатель);
		ПараметрыФормы.Вставить("ТипУказанияМестоУчета", Объект.ТипУказанияМестоУчетаПродукции);
	КонецЕсли;

	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоБезТары", ТолькоБезТары);
	
	Возврат( ПараметрыФормы);
КонецФункции

Функция ДокументЗапрещеноИзменять( Объект) Экспорт
	Возврат( Объект.Проведен и (не Объект.ФормироватьВременныеДвижения));
КонецФункции

Процедура УстановитьТолькоПросмотрЭлементов( Элементы, Имена, Значение) Экспорт
	СтруктураСИменами = Новый Структура( Имена);
	Для каждого Элемент из СтруктураСИменами цикл
		Элементы[ Элемент.Ключ].ТолькоПросмотр = Значение;
	КонецЦикла;
КонецПроцедуры

Функция ДанныеОповещениеВыбораФондов() Экспорт
	Возврат( Новый Структура("Продукция,
		|Номенклатура,
		|ХарактеристикаНоменклатуры,
		|СерияПродукции,
		|СерияНоменклатуры,
		|ЕдиницаИзмеренияМестПродукции,
		|ЕдиницаИзмерения,
		|КоличествоМестПродукции,
		|КоэффициентПродукции,
		|КоличествоПродукции,
		|ЗаказПродукции,
		|ЗаказВыпускаПродукции,
		|ЕдиницаИзмеренияМест,
		|КоличествоМест,
		|КачествоПродукции,
		|Качество,
		|ХарактеристикаПродукции,
		|ЗаказВыпуска,
		|Заказ,
		|Количество,
		|ЕдиницаИзмеренияПродукции,
		|Коэффициент,
		|СквознойНомер,
		|Дополнительно,
		|КлючОписанияМеталла"));
	КонецФункции
	
Функция Весы_РезультатОпросаАдреса( АдресВесов, Порт=80, Таймаут=5) Экспорт
	//ОЦМ Мобильная
	ТекДата = ТекущаяДата();
	
	Результат = Новый Структура;
	//Результат.Вставить("Вес",0);
	//Результат.Вставить("Тара",0);
	//Результат.Вставить("Ошибка","");
	//Результат.Вставить("ДанныеПолучены",Ложь);
	//Результат.Вставить("ОшибкаСообщение","");
	//
	//Попытка
	//    Соединение = Новый HTTPСоединение( АдресВесов, Порт,,,,Таймаут);  
	//	Заголовки = Новый Соответствие();
	//    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=Windows-1251");
	//    Запрос = Новый HTTPЗапрос("/ves", Заголовки);
	//	
	//    ОтветСервера = Соединение.Получить(Запрос);          // Ответ от контроллера
	//    ОтветВес = ОтветСервера.ПолучитьТелоКакСтроку();    // переводим в строку и получаем код странички

	//	Результат.Вес = Число( ОтветВес);
	//	
	//	Если Результат.Вес = 8888888 тогда
	//		Результат.Вес = 0;
	//		Результат.ОшибкаСообщение = "Нет связи с весами. Проверьте включены ли весы и попробуйте еще раз.";
	//		Результат.Вставить("Ошибка","8888888");
	//	иначеЕсли Результат.Вес = 9999999 тогда
	//		Результат.Вес = 0;
	//		Результат.ОшибкаСообщение = "Произошла ошибка при получении веса. Попробуйте еще раз.";
	//		Результат.Вставить("Ошибка","9999999");
	//	иначе
	//		Результат.ДанныеПолучены = Истина;
	//	КонецЕсли;
	//исключение
	//	Результат.ОшибкаСообщение = "Произошла ошибка связи при получении веса. Попробуйте еще раз.";
	//	Результат.Ошибка = Строка( ОписаниеОшибки());
	//КонецПопытки;
	//
	//#Если Сервер тогда
	//	Если ЗначениеЗаполнено( Результат.Ошибка) тогда
	//		ЗаписьЖурналаРегистрации("ОУ_Весы.Ошибка", УровеньЖурналаРегистрации.Ошибка,,,Результат.Ошибка+" ["+Результат.ОшибкаСообщение+"]");
	//	КонецЕсли;
	//#КонецЕсли
	//
	Возврат( Результат);
КонецФункции

//**************************************************************************************************

Функция ПреобразоватьСтроку_Рус_Лат( Знач СтрокаРус) Экспорт
	СтрокаЛат = "";
	ЕстьОшибка = Ложь;
	
	Пока не ПустаяСтрока( СтрокаРус) цикл
		СимволРус = Лев( СтрокаРус, 1);
		СтрокаРус = Сред( СтрокаРус, 2);
		СимволЛат = "";
		
		Если СимволРус >= "0" и СимволРус <= "9" тогда
			СимволЛат = СимволРус;
		иначеЕсли СимволРус = "К" тогда
			СимволЛат = "K";
		иначеЕсли СимволРус = "О" тогда
			СимволЛат = "O";
		иначеЕсли СимволРус = "Р" тогда
			СимволЛат = "P";
		иначеЕсли СимволРус = "У" тогда
			СимволЛат = "Y";
		иначеЕсли СимволРус = "Ц" тогда
			СимволЛат = "C";
		иначеЕсли СимволРус = "З" тогда
			СимволЛат = "Z";
		иначеЕсли СимволРус = "М" тогда
			СимволЛат = "M";
		иначеЕсли СимволРус = "Т" тогда
			СимволЛат = "T";
		иначеЕсли СимволРус = "S" тогда
			СимволЛат = "S";
		иначеЕсли СимволРус = "F" тогда
			СимволЛат = "F";
		иначеЕсли СимволРус = "_" тогда
			СимволЛат = "_";
		иначеЕсли СимволРус = "-" тогда
			СимволЛат = "-";
		иначе
			ЕстьОшибка = Истина;
			Сообщить("ПреобразоватьСтроку_Рус_Лат: Нет соответствия символа "+СимволРус);
		КонецЕсли;
		
		СтрокаЛат = СтрокаЛат + СимволЛат;
	КонецЦикла;
	
	Если ЕстьОшибка тогда
		Возврат( Неопределено);
	иначе
		Возврат( СтрокаЛат);
	КонецЕсли;
КонецФункции

Функция ПреобразоватьСтроку_Лат_Рус( Знач СтрокаЛат) Экспорт
	СтрокаРус = "";
	ЕстьОшибка = Ложь;
	
	Пока не ПустаяСтрока( СтрокаЛат) цикл
		СимволЛат = Лев( СтрокаЛат, 1);
		СтрокаЛат = Сред( СтрокаЛат, 2);
		СимволРус = "";
		
		Если СимволЛат >= "0" и СимволЛат <= "9" тогда
			СимволРус = СимволЛат;
		иначеЕсли СимволЛат = "K" тогда
			СимволРус = "К";
		иначеЕсли СимволЛат = "O" тогда
			СимволРус = "О";
		иначеЕсли СимволЛат = "P" тогда
			СимволРус = "Р";
		иначеЕсли СимволЛат = "Y" тогда
			СимволРус = "У";
		иначеЕсли СимволЛат = "C" тогда
			СимволРус = "Ц";
		иначеЕсли СимволЛат = "Z" тогда
			СимволРус = "З";
		иначеЕсли СимволЛат = "M" тогда
			СимволРус = "М";
		иначеЕсли СимволЛат = "T" тогда
			СимволРус = "Т";
		иначеЕсли СимволЛат = "S" тогда
			СимволРус = "S";
		иначеЕсли СимволЛат = "F" тогда
			СимволРус = "F";
		иначеЕсли СимволЛат = "_" тогда
			СимволРус = "_";
		иначеЕсли СимволЛат = "-" тогда
			СимволРус = "-";
		иначе
			ЕстьОшибка = Истина;
			Сообщить("ПреобразоватьСтроку_Лат_Рус: Нет соответствия символа "+СимволЛат);
		КонецЕсли;
		
		СтрокаРус = СтрокаРус + СимволРус;
	КонецЦикла;
	
	Если ЕстьОшибка тогда
		Возврат( Неопределено);
	иначе
		Возврат( СтрокаРус);
	КонецЕсли;
КонецФункции

//**************************************************************************************************
 
Функция ПолучитьОписаниеВыбраннойОснастки( Данные) Экспорт
	Результат = "";
	Если ЗначениеЗаполнено( Данные.Оснастка1) тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( Результат, "; ");
		Результат = Результат + "[1]: " + Строка( Данные.Оснастка1);
	КонецЕсли;
	Если ЗначениеЗаполнено( Данные.Оснастка2) тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( Результат, "; ");
		Результат = Результат + "[2]: " + Строка( Данные.Оснастка2);
	КонецЕсли;
	Если ЗначениеЗаполнено( Данные.Оснастка3) тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( Результат, "; ");
		Результат = Результат + "[3]: " + Строка( Данные.Оснастка3);
	КонецЕсли;
	
	Если ПустаяСтрока( Результат) тогда
		Результат = "< Оснастка >";
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

