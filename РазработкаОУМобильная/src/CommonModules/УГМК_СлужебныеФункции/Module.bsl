// получает настройку из регистра УГМК_Настройки
//
Функция ПолучитьНастройку( Имя, ПолучатьТолькоИзБазы = Ложь) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.ПолучитьНастройку( Имя, ПолучатьТолькоИзБазы));
КонецФункции

Функция ПолучитьЗначениеСвойства(Свойство = Неопределено, Объект = Неопределено) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.ПолучитьЗначениеСвойства( Свойство, Объект));
КонецФункции //ПолучитьЗначениеСвойства

Функция ЗначениеКатегорииОбъекта( Объект, НастройкаКатегория) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.ЗначениеКатегорииОбъекта( Объект, НастройкаКатегория));
КонецФункции

Функция ПолучитьНастройкуПользователя(ИмяНастройка) Экспорт
	
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Настройка =Неопределено;
	//Попытка
	//	Настройка		= ПланыВидовХарактеристик.УГМК_НастройкиПользователей[ИмяНастройка];
	//Исключение
	//	Настройка		= ПланыВидовХарактеристик.УГМК_НастройкиПользователей.НайтиПоНаименованию(ИмяНастройка);
	//КонецПопытки; 
	//Если Настройка<>Неопределено тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//	               |	УГМК_НастройкиПользователей.Значение,
	//	               |	ВЫБОР
	//	               |		КОГДА УГМК_НастройкиПользователей.Пользователь.Владелец = &Пользователь
	//	               |			ТОГДА 2
	//	               |		КОГДА УГМК_НастройкиПользователей.Пользователь.Владелец = &Профиль
	//	               |			ТОГДА 1
	//	               |		ИНАЧЕ 0
	//	               |	КОНЕЦ КАК Уровень
	//	               |ИЗ
	//	               |	РегистрСведений.УГМК_НастройкиПользователей КАК УГМК_НастройкиПользователей
	//	               |ГДЕ
	//	               |	(УГМК_НастройкиПользователей.Пользователь.Владелец = &Пользователь
	//	               |			ИЛИ УГМК_НастройкиПользователей.Пользователь.Владелец = &Профиль)
	//	               |	И УГМК_НастройкиПользователей.Настройка = &Настройка
	//	               |
	//	               |УПОРЯДОЧИТЬ ПО
	//	               |	Уровень УБЫВ
	//	               |АВТОУПОРЯДОЧИВАНИЕ";
	//	 Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	//	 Запрос.УстановитьПараметр("Профиль",ПараметрыСеанса.ТекущийПользователь.ПрофильПолномочийПользователя);
	//	 Запрос.УстановитьПараметр("Настройка",Настройка);
	//	 Выборка = Запрос.Выполнить().Выбрать();
	//	 Если Выборка.Следующий() тогда
	//		 Возврат Выборка.Значение;
	//	 иначе
	//		 Возврат Неопределено;			 
	//	 КонецЕсли;
	//КонецЕсли;
КонецФункции

Функция ДокументЗакрытДляРедактирования(Объект) Экспорт 
	
	Результат = Ложь;
	
	//Если РольДоступна("ПолныеПрава") Тогда
	//	// под полными правами можно все
	//	Возврат Результат;
	//КонецЕсли;
	
	ИмяОбъекта = Объект.Метаданные().Имя;
	тПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	тНастройка = ПолучитьНастройкуЗапретаРедактированияДокумента(ИмяОбъекта, тПользователь);
	
	//Если ЗначениеЗаполнено(тНастройка) И ЗначениеЗаполнено(тНастройка.ГраницаЗапретаИзменений) Тогда
	Если тНастройка.Количество() > 0 Тогда
		Если НЕ Объект.ЭтоНовый() Тогда // проверяем старую версию (можно ли менять)
			ПроверитьВерсиюДокумента(Объект.Ссылка, ИмяОбъекта, тНастройка, Результат);
		КонецЕсли;	
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкуЗапретаРедактированияДокумента(ИмяОбъекта, Пользователь = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УГМК_ЗапретИзмененияДанных.ИмяОбъекта,
	               |	УГМК_ЗапретИзмененияДанных.ИмяНастройки,
	               |	УГМК_ЗапретИзмененияДанных.Пользователь,
	               |	УГМК_ЗапретИзмененияДанных.ИД,
	               |	УГМК_ЗапретИзмененияДанных.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений,
	               |	УГМК_ЗапретИзмененияДанных.Отбор,
	               |	0 КАК ВидНастройки,
	               |	УГМК_ЗапретИзмененияДанных.Комментарий
	               |ИЗ
	               |	РегистрСведений.УГМК_ЗапретИзмененияДанных КАК УГМК_ЗапретИзмененияДанных
	               |ГДЕ
	               |	УГМК_ЗапретИзмененияДанных.Пользователь = &Пользователь
	               |	И УГМК_ЗапретИзмененияДанных.ИмяОбъекта = &ИмяОбъекта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УГМК_ЗапретИзмененияДанных.ИмяОбъекта,
	               |	УГМК_ЗапретИзмененияДанных.ИмяНастройки,
	               |	УГМК_ЗапретИзмененияДанных.Пользователь,
	               |	УГМК_ЗапретИзмененияДанных.ИД,
	               |	УГМК_ЗапретИзмененияДанных.ГраницаЗапретаИзменений,
	               |	УГМК_ЗапретИзмененияДанных.Отбор,
	               |	1,
	               |	УГМК_ЗапретИзмененияДанных.Комментарий
	               |ИЗ
	               |	РегистрСведений.УГМК_ЗапретИзмененияДанных КАК УГМК_ЗапретИзмененияДанных
	               |ГДЕ
	               |	УГМК_ЗапретИзмененияДанных.ИмяОбъекта = &ИмяОбъекта
	               |	И ВЫРАЗИТЬ(УГМК_ЗапретИзмененияДанных.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УГМК_ЗапретИзмененияДанных.ИмяОбъекта,
	               |	УГМК_ЗапретИзмененияДанных.ИмяНастройки,
	               |	УГМК_ЗапретИзмененияДанных.Пользователь,
	               |	УГМК_ЗапретИзмененияДанных.ИД,
	               |	УГМК_ЗапретИзмененияДанных.ГраницаЗапретаИзменений,
	               |	УГМК_ЗапретИзмененияДанных.Отбор,
	               |	2,
	               |	УГМК_ЗапретИзмененияДанных.Комментарий
	               |ИЗ
	               |	РегистрСведений.УГМК_ЗапретИзмененияДанных КАК УГМК_ЗапретИзмененияДанных
	               |ГДЕ
	               |	УГМК_ЗапретИзмененияДанных.ИмяОбъекта = &ИмяОбъекта
	               |	И УГМК_ЗапретИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидНастройки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Иначе 
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли; 
	
	// если нет прямой настройки по пользователю, надо учесть возможность настройки по группам пользователей (ВидНастройки = 1)
	// поэтому придется пробежать по всем и проверить на условие удовлетворению отбора
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Процедура ПроверитьВерсиюДокумента(ВерсияДокумента, ИмяОбъекта, Настройка, Отказ, РежимЗаписи = Неопределено)
	//ОЦМ Мобильная
	//
	//ДокументПроведен = ВерсияДокумента.Проведен ИЛИ ?(РежимЗаписи = Неопределено, ЛОЖЬ, РежимЗаписи = РежимЗаписиДокумента.Проведение);
	//Если Не ДокументПроведен Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка." + ИмяОбъекта));
	//ТЗ.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ВерсияДокумента.Метаданные().ДлинаНомера)));
	//ТЗ.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	//ТЗ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));

	//Реквизиты = Метаданные.Документы[ИмяОбъекта].Реквизиты;
	//Для каждого тРек Из Реквизиты Цикл
	//	ТЗ.Колонки.Добавить(тРек.Имя, тРек.Тип);
	//КонецЦикла;
	//нСтр = ТЗ.Добавить();
	//ЗаполнитьЗначенияСвойств(нСтр, ВерсияДокумента);
	//
	//Если Настройка.Количество() > 0 Тогда
	//	тВидНастройки = Настройка[0].ВидНастройки;		
	//КонецЕсли; 
	//
	//Для каждого тНастройка Из Настройка Цикл
	//	
	//	Если тНастройка.ВидНастройки <> тВидНастройки ИЛИ Отказ = Истина Тогда
	//		Прервать; // если настройки сделаны на каком то уровне, проверяем только их (для конкретного пользователя, группу пользователей, всех)
	//	КонецЕсли; 
	//	
	//	НастройкиПостроителя = тНастройка.Отбор.Получить();
	//			
	//	Построитель = Новый ПостроительОтчета;
	//	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	//	Если НЕ НастройкиПостроителя = Неопределено Тогда
	//		Построитель.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
	//	КонецЕсли;
	//	
	//	Построитель.Выполнить();
	//	
	//	Если НЕ Построитель.Результат.Пустой() Тогда
	//		// наш документ удовлятворяет отбору
	//		Если ТипЗнч(тНастройка.ГраницаЗапретаИзменений) = Тип("Дата") Тогда
	//			// установлена дата запрета
	//			Если НачалоДня(ВерсияДокумента.Дата) <= тНастройка.ГраницаЗапретаИзменений Тогда
	//				Отказ = Истина;
	//			КонецЕсли;
	//		ИначеЕсли ТипЗнч(тНастройка.ГраницаЗапретаИзменений) = Тип("Булево") Тогда
	//			//Истина - док по отбору закрыт для редактирования, ложь - открыт 
	//			Отказ = тНастройка.ГраницаЗапретаИзменений
	//		КонецЕсли; 
	//	КонецЕсли;
	//	
	//КонецЦикла; 
	//
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Функция ПрефиксДействуетДляОрганизации(Префикс, Организация) Экспорт
	Если ЗначениеЗаполнено(Префикс) и ЗначениеЗаполнено(Организация) тогда
		Если Префикс.Организации.Количество()=0 или
			Префикс.Организации.Найти(Организация,"Организация")<>Неопределено тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // ПрефиксДействуетДляОрганизации()

Процедура НайтиПрефиксПономерувФормеДокумента(ДокументОбъект) Экспорт
	//Поз = Найти(ДокументОбъект.Номер,"-");
	//Если Поз>0 и Не ЗначениеЗаполнено(ДокументОбъект.УГМК_Префикс) Тогда
	//	ДокументОбъект.УГМК_Префикс = Справочники.УГМК_ПрефиксыНакладных.НайтиПоРеквизиту("ОсобыйПрефикс",Сред(Номер,Поз-3,3));
	//КонецЕсли; 
	
КонецПроцедуры

Процедура УГМК_ДобавитьПрефиксДокумента(ДокументОбъект, Префикс, ДополнительныйПрефикс = Неопределено) Экспорт
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("УГМК_префикс")<>Неопределено тогда
		//Если УГМК_СлужебныеФункции.ПолучитьНастройку("ИспользоватьНумерациюСФПоДате")=Истина и типЗнч(ДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.УГМК_Префикс) тогда
			Префикс = Префикс + Прав("0000"+СокрЛП(ДокументОбъект.УГМК_Префикс.ОсобыйПрефикс),3)+"-";
		Иначе 
			Префикс = Префикс + "0000";
		КонецЕсли; 
	КонецЕсли; 
	
Конецпроцедуры

Процедура ПрефиксНакладнойПриИзменении(ДокументОбъект,Элемент=Неопределено) Экспорт
	ДокументОбъект.Номер = "";
	Если ЗначениеЗаполнено(ДокументОбъект.УГМК_Префикс.ОсобыйПостфикс) и ДокументОбъект.УГМК_Префикс.ЗаполнятьПостфикс тогда
		ДокументОбъект.УГМК_Постфикс = СокрЛП(ДокументОбъект.УГМК_Префикс.ОсобыйПостфикс);		
	КонецЕсли;
КонецПроцедуры

Функция НеобходимоПереопределитьПрефиксПриНумерацииДокументов(Знач ДокументОбъект = Неопределено) Экспорт 
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	// Переопределяем префикс только для документов "движения товаров" по ГП
	тМета = ДокументОбъект.Метаданные();
	Если тМета = Метаданные.Документы.ЗаказПокупателя
		ИЛИ тМета = Метаданные.Документы.КорректировкаЗаказаПокупателя
		ИЛИ тМета = Метаданные.Документы.ПеремещениеТоваров
		ИЛИ тМета = Метаданные.Документы.ПоступлениеТоваровУслуг
		ИЛИ тМета = Метаданные.Документы.РеализацияТоваровУслуг
		ИЛИ тМета = Метаданные.Документы.РезервированиеТоваров
		ИЛИ (тМета = Метаданные.Документы.СчетФактураВыданный и УГМК_СлужебныеФункции.УГМК_ДействуетНумерацияСФПоДате(ДокументОбъект.Дата)<>Истина)
		ИЛИ тМета = Метаданные.Документы.КорректировочныйСчетФактураВыданный
		ИЛИ тМета = Метаданные.Документы.tb_СогласованиеЦен
		ИЛИ тМета = Метаданные.Документы.tb_РаспоряжениеОбОтгрузке
		ИЛИ тМета = Метаданные.Документы.tb_ИзменениеЗаказаВыпущеннойПродукции
		Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Процедура УГМК_ПриНачалеРаботыСистемы() Экспорт
	
	//УГМК_НастройкаНаПользователя();
	УГМК_ВызовТиповогоИнтерфейса();	
	
	ПроверитьОшибкиОбмена();
	
КонецПроцедуры 

// Процедура выполняет вызов обработки типового интерфейса
Процедура УГМК_ВызовТиповогоИнтерфейса() Экспорт
	
	//Вызов типового интерфейса
 	ВызватьПриОткрытии  = ПолучитьНастройкуПользователя("ТиповойИнтерфейс_ВызватьПриОткрытии");
 
	Если ВызватьПриОткрытии = Истина Тогда
        ГоловнойЭлемент = ПолучитьНастройкуПользователя("ТиповойИнтерфейс_ГоловнойЭлемент");
		ТекОбъект = Обработки.УГМК_ТиповойИнтерфейс.Создать();
		ТекОбъект.ГоловнойЭлемент = ГоловнойЭлемент;
        ТекФорма = ТекОбъект.ПолучитьФорму();
		МаксСтрокДействий = ПолучитьНастройкуПользователя("ТиповойИнтерфейс_МаксСписокДействий");
		ТекФорма.МаксСтрокДействий = МаксСтрокДействий;
		ТекФорма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВладельцаНастройкиПользователяПоВладельцу(Владелец) Экспорт
	ТекВледелец = Справочники.УГМК_НастройкиПользователей.Выбрать(,Владелец);
	Если ТекВледелец.Следующий() тогда
		Возврат(ТекВледелец.Ссылка);
	КонецЕсли;
	Возврат(Справочники.УГМК_НастройкиПользователей.ПустаяСсылка());
КонецФункции // ВладелецНастройкиПользователя()

Процедура ПроверитьОшибкиОбмена(ЗакрыватьПредприятие = Истина, ОтправлятьПисьма = Истина) Экспорт 
	//ОЦМ Мобильная
//	
//	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.Ссылка КАК Настройка,
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.УзелИнформационнойБазы,
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.КоличествоМинут,
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.КоличествоДокументовОтложенногоПроведения,
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.ПроверятьВерсиюКонфигурации
//	               |ИЗ
//	               |	Справочник.УГМК_НастройкиПроверкиОбмена.НастройкиОпределенияОшибки КАК УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки
//	               |ГДЕ
//	               |	УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.Ссылка.ПометкаУдаления = ЛОЖЬ
//	               |	И УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.Ссылка.Действует = ИСТИНА
//	               |	И УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.Активна = ИСТИНА
//	               |	И УГМК_НастройкиПроверкиОбменаНастройкиОпределенияОшибки.Ссылка.Ответственный = &Ответственный
//	               |ИТОГИ ПО
//	               |	Настройка
//	               |АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.УстановитьПараметр("Ответственный", ТекПользователь);
//	
//	Результат = Запрос.Выполнить();
//	
//	Если Результат.Пустой() Тогда
//		Возврат
//	КонецЕсли; 
//	
//	ДатаПроверки = ТекущаяДата();
//	
//	ВыборкаНастройки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Пока ВыборкаНастройки.Следующий() Цикл
//	
//		ПакетПисем = Новый Массив;
//	
//		ОшибкиИтог = "";
//		
//		Выборка = ВыборкаНастройки.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			СтрОшибка = "";
//			СтрОшибкаРез = "";
//			
//			Если ТипЗнч(Выборка.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.УГМК_ОперативныйУчетДокументы") 
//				ИЛИ ТипЗнч(Выборка.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.УГМК_ОперативныйУчетНСИ")
//				ИЛИ ТипЗнч(Выборка.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.УГМК_ОперативныйУчетПолный") Тогда
//				ОбменЧерезВС = Истина;
//			Иначе
//				ОбменЧерезВС = Ложь;
//			КонецЕсли;
//			
//			// Сначала проверим выгрузку в узел
//			Запрос = Новый Запрос;
//			
//			Запрос.УстановитьПараметр("Дата", ДатаПроверки);
//			Запрос.УстановитьПараметр("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
//			
//			Если ОбменЧерезВС = Истина Тогда
//			
//				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				               |	ВЫБОР
//				               |		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
//				               |			ТОГДА ИСТИНА
//				               |		ИНАЧЕ ЛОЖЬ
//				               |	КОНЕЦ КАК РезультатПоследнейВыгрузки,
//				               |	СостоянияОбменовДанными.ДатаОкончания КАК ДатаПоследнейВыгрузки,
//				               |	1 КАК Признак,
//				               |	"""" КАК КомментарийКВыгрузкеДанных
//				               |ИЗ
//				               |	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
//				               |ГДЕ
//				               |	СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)";
//				
//			Иначе
//				
//				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				               |	ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейВыгрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейВыгрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.КомментарийКВыгрузкеДанных,
//				               |	1 КАК Признак
//				               |ИЗ
//				               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(
//				               |			&Дата,
//				               |			УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |				И РезультатПоследнейВыгрузки = ИСТИНА) КАК ИсторияОбменаДаннымиСрезПоследних
//				               |
//				               |ОБЪЕДИНИТЬ ВСЕ
//				               |
//				               |ВЫБРАТЬ
//				               |	ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейВыгрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейВыгрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.КомментарийКВыгрузкеДанных,
//				               |	2
//				               |ИЗ
//				               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(
//				               |			&Дата,
//				               |			УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |				И РезультатПоследнейВыгрузки <> НЕОПРЕДЕЛЕНО) КАК ИсторияОбменаДаннымиСрезПоследних
//				               |
//				               |УПОРЯДОЧИТЬ ПО
//				               |	Признак
//				               |АВТОУПОРЯДОЧИВАНИЕ";
//			
//			КонецЕсли; 
//			
//			Запрос.Текст = ТекстЗапроса;
//			
//			Результат = Запрос.Выполнить();
//			ВыборкаДетали = Результат.Выбрать();
//			
//			Если ВыборкаДетали.Следующий() Тогда 
//			
//				Если ВыборкаДетали.Признак = 1 Тогда // Последняя успешная выгрузка
//					ПрошлоМинут = Окр((ДатаПроверки - ВыборкаДетали.ДатаПоследнейВыгрузки) / 60, 0);
//					Если ПрошлоМинут > Выборка.КоличествоМинут Тогда // Все плохо
//						СтрОшибка = "Ошибка выгрузки в узел.
//						|С последней успешной выгрузки в узел прошло " + ПрошлоМинут + " мин. (" + ВыборкаДетали.ДатаПоследнейВыгрузки + ")";
//						Если ВыборкаДетали.Следующий() И ВыборкаДетали.РезультатПоследнейВыгрузки = Ложь И ЗначениеЗаполнено(ВыборкаДетали.КомментарийКВыгрузкеДанных) Тогда
//							// Выводим комментарии из последней (по времени) выгрузки
//							СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаДетали.КомментарийКВыгрузкеДанных;
//						КонецЕсли; 
//					КонецЕсли; 
//				Иначе // Успешных выгрузок не было вообще
//					СтрОшибка = "Ошибка выгрузки в узел.";
//					Если ЗначениеЗаполнено(ВыборкаДетали.КомментарийКВыгрузкеДанных) И ВыборкаДетали.РезультатПоследнейЗагрузки = Ложь Тогда
//						СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаДетали.КомментарийКВыгрузкеДанных;
//					КонецЕсли; 
//				КонецЕсли;
//				
//			Иначе
//				СтрОшибка = "Ошибка выгрузки в узел.";
//			КонецЕсли;
//			
//			СтрОшибкаРез = СтрОшибкаРез + ?(СтрОшибкаРез = "", "", Символы.ПС + Символы.ПС) + СтрОшибка;
//			СтрОшибка = "";
//			
//			// Проверяем загрузку из узла
//			Запрос = Новый Запрос;
//			
//			Запрос.УстановитьПараметр("Дата", ДатаПроверки);
//			Запрос.УстановитьПараметр("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
//			
//			Если ОбменЧерезВС = Истина Тогда
//				
//				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				               |	ВЫБОР
//				               |		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
//				               |			ТОГДА ИСТИНА
//				               |		ИНАЧЕ ЛОЖЬ
//				               |	КОНЕЦ КАК РезультатПоследнейЗагрузки,
//				               |	СостоянияОбменовДанными.ДатаОкончания КАК ДатаПоследнейЗагрузки,
//				               |	1 КАК Признак,
//				               |	"""" КАК КомментарийКЗагрузкеДанных
//				               |ИЗ
//				               |	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
//				               |ГДЕ
//				               |	СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)";
//				
//			Иначе
//			
//				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				               |	ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейЗагрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейЗагрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.КомментарийКЗагрузкеДанных,
//				               |	1 КАК Признак
//				               |ИЗ
//				               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(
//				               |			&Дата,
//				               |			УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |				И РезультатПоследнейЗагрузки = ИСТИНА) КАК ИсторияОбменаДаннымиСрезПоследних
//				               |
//				               |ОБЪЕДИНИТЬ ВСЕ
//				               |
//				               |ВЫБРАТЬ
//				               |	ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейЗагрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейЗагрузки,
//				               |	ИсторияОбменаДаннымиСрезПоследних.КомментарийКЗагрузкеДанных,
//				               |	2
//				               |ИЗ
//				               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(
//				               |			&Дата,
//				               |			УзелИнформационнойБазы = &УзелИнформационнойБазы
//				               |				И РезультатПоследнейЗагрузки <> НЕОПРЕДЕЛЕНО) КАК ИсторияОбменаДаннымиСрезПоследних
//				               |
//				               |УПОРЯДОЧИТЬ ПО
//				               |	Признак
//				               |АВТОУПОРЯДОЧИВАНИЕ";
//			
//			КонецЕсли;
//			
//			Запрос.Текст = ТекстЗапроса;
//			
//			Результат = Запрос.Выполнить();
//			ВыборкаДетали = Результат.Выбрать();
//			
//			Если ВыборкаДетали.Следующий() Тогда 
//			
//				Если ВыборкаДетали.Признак = 1 Тогда
//					
//					Если ОбменЧерезВС = Истина Тогда 
//						КоличествоОтложенныхДокументов = 0;
//					Иначе
//						Запрос = Новый Запрос;
//						Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//						|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтложенныеДвиженияДокументов.Документ) КАК КоличествоДокументов
//						|ИЗ
//						|	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
//						|ГДЕ
//						|	ОтложенныеДвиженияДокументов.УзелОбмена = &УзелОбмена";
//						
//						Запрос.УстановитьПараметр("УзелОбмена", Выборка.УзелИнформационнойБазы);
//						
//						Результат = Запрос.Выполнить();
//						ВыборкаОтложенныеДокументы = Результат.Выбрать();
//						
//						Если ВыборкаОтложенныеДокументы.Следующий() Тогда
//							КоличествоОтложенныхДокументов = ВыборкаОтложенныеДокументы.КоличествоДокументов;
//						Иначе
//							КоличествоОтложенныхДокументов = 0;
//						КонецЕсли;
//					КонецЕсли;
//					
//					ПрошлоМинут = Окр((ДатаПроверки - ВыборкаДетали.ДатаПоследнейЗагрузки) / 60, 0);
//					Если ПрошлоМинут > Выборка.КоличествоМинут Тогда // Все плохо
//						СтрОшибка = "Ошибка загрузки из узла.
//						|С последней успешной загрузки из узла прошло " + ПрошлоМинут + " мин. (" + ВыборкаДетали.ДатаПоследнейЗагрузки + ")";
//						Если ВыборкаДетали.Следующий() И ВыборкаДетали.РезультатПоследнейЗагрузки = Ложь  И ЗначениеЗаполнено(ВыборкаДетали.КомментарийКЗагрузкеДанных) Тогда
//							// Выводим комментарии из последней (по времени) загрузки
//							СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаДетали.КомментарийКЗагрузкеДанных;
//						КонецЕсли; 
//						Если КоличествоОтложенныхДокументов > Выборка.КоличествоДокументовОтложенногоПроведения Тогда
//							СтрОшибка = СтрОшибка + Символы.ПС + "В отложенном проведении находится " + КоличествоОтложенныхДокументов + " документов.";
//						КонецЕсли; 
//					Иначе 
//						
//						// Проверим количество документов в отложенном проведении
//						Если КоличествоОтложенныхДокументов > Выборка.КоличествоДокументовОтложенногоПроведения Тогда
//							СтрОшибка = СтрОшибка + Символы.ПС + "В отложенном проведении находится " + КоличествоОтложенныхДокументов + " документов.";
//						КонецЕсли; 
//						
//						СтрОшибкаРез = СтрОшибкаРез + ?(СтрОшибкаРез = "", "", Символы.ПС + Символы.ПС) + СтрОшибка;
//						СтрОшибка = "";
//						
//						// проверим результат загрузок в узел
//						тПланОбмена = Выборка.УзелИнформационнойБазы.Метаданные().Имя;
//						тКодПланаОбмена = Выборка.УзелИнформационнойБазы.Код;
//						
//						Запрос = Новый Запрос;
//						Запрос.Текст = 
//						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейЗагрузки,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейЗагрузки,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.КомментарийКЗагрузкеДанных,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.КоличествоОтложенныхДокументов,
//						|	1 КАК Признак
//						|ИЗ
//						|	РегистрСведений.УГМК_ИсторияОбменаДанными.СрезПоследних(
//						|			&Дата,
//						|			ПланОбменаПриемника = &ПланОбменаПриемника
//						|				И КодПланаОбменаПремника = &КодПланаОбменаПремника
//						|				И РезультатПоследнейЗагрузки = ИСТИНА) КАК УГМК_ИсторияОбменаДаннымиСрезПоследних
//						|
//						|ОБЪЕДИНИТЬ ВСЕ
//						|
//						|ВЫБРАТЬ
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.ДатаПоследнейЗагрузки,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.РезультатПоследнейЗагрузки,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.КомментарийКЗагрузкеДанных,
//						|	УГМК_ИсторияОбменаДаннымиСрезПоследних.КоличествоОтложенныхДокументов,
//						|	2
//						|ИЗ
//						|	РегистрСведений.УГМК_ИсторияОбменаДанными.СрезПоследних(
//						|			&Дата,
//						|			ПланОбменаПриемника = &ПланОбменаПриемника
//						|				И КодПланаОбменаПремника = &КодПланаОбменаПремника) КАК УГМК_ИсторияОбменаДаннымиСрезПоследних
//						|
//						|УПОРЯДОЧИТЬ ПО
//						|	Признак
//						|АВТОУПОРЯДОЧИВАНИЕ";
//						
//						Запрос.УстановитьПараметр("Дата", ДатаПроверки);
//						Запрос.УстановитьПараметр("ПланОбменаПриемника", тПланОбмена);
//						Запрос.УстановитьПараметр("КодПланаОбменаПремника", тКодПланаОбмена);
//						
//						Результат = Запрос.Выполнить();
//						ВыборкаПриемник = Результат.Выбрать();
//						
//						Если ВыборкаПриемник.Следующий() Тогда 
//						
//							Если ВыборкаПриемник.Признак = 1 Тогда
//								ПрошлоМинут = Окр((ДатаПроверки - ВыборкаПриемник.ДатаПоследнейЗагрузки) / 60, 0);
//								Если ПрошлоМинут > Выборка.КоличествоМинут Тогда // Все плохо
//									СтрОшибка = "Ошибка загрузки в узел.
//									|С последней успешной загрузки в узел прошло " + ПрошлоМинут + " мин. (" + ВыборкаПриемник.ДатаПоследнейЗагрузки + ")";
//									Если ВыборкаПриемник.Следующий() И ВыборкаПриемник.РезультатПоследнейЗагрузки = Ложь И ЗначениеЗаполнено(ВыборкаПриемник.КомментарийКЗагрузкеДанных) Тогда
//										СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаПриемник.КомментарийКЗагрузкеДанных;
//									КонецЕсли; 
//								КонецЕсли; 
//							Иначе // Успешных выгрузок не было вообще
//								СтрОшибка = "Ошибка загрузки в узел.";
//								Если ЗначениеЗаполнено(ВыборкаДетали.КомментарийКЗагрузкеДанных) И ВыборкаПриемник.РезультатПоследнейЗагрузки = Ложь Тогда
//									СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаДетали.КомментарийКЗагрузкеДанных;
//								КонецЕсли; 
//							КонецЕсли; 
//							Если ЗначениеЗаполнено(ВыборкаПриемник.КоличествоОтложенныхДокументов) И ВыборкаПриемник.КоличествоОтложенныхДокументов > Выборка.КоличествоДокументовОтложенногоПроведения Тогда
//								СтрОшибка = СтрОшибка + Символы.ПС + "В отложенном проведении узла находится " + ВыборкаПриемник.КоличествоОтложенныхДокументов + " документов.";
//							КонецЕсли;  

//						КонецЕсли;
//						
//					КонецЕсли; 
//					
//				Иначе // Успешных загрузок не было вообще
//					СтрОшибка = "Ошибка загрузки из узла.";
//					Если ЗначениеЗаполнено(ВыборкаДетали.КомментарийКВыгрузкеДанных) И ВыборкаДетали.РезультатПоследнейЗагрузки = Ложь Тогда
//						СтрОшибка = СтрОшибка + Символы.ПС + ВыборкаДетали.КомментарийКВыгрузкеДанных;
//					КонецЕсли; 
//				КонецЕсли; 
//				
//			КонецЕсли;
//			
//			СтрОшибкаРез = СтрОшибкаРез + ?(СтрОшибкаРез = "", "", Символы.ПС + Символы.ПС) + СтрОшибка;
//			
//			// Проверим версию конфигурации узла
//			Если Выборка.ПроверятьВерсиюКонфигурации = Истина Тогда
//				
//				СтрОшибка = "";
// 				тПланОбмена = Выборка.УзелИнформационнойБазы.Метаданные().Имя;
//				тКодПланаОбмена = Выборка.УзелИнформационнойБазы.Код;

//				Запрос = Новый Запрос;
//				Запрос.Текст = "ВЫБРАТЬ
//				               |	УГМК_ИсторияОбменаДаннымиСрезПоследних.ВерсияКонфигурации
//				               |ИЗ
//				               |	РегистрСведений.УГМК_ИсторияОбменаДанными.СрезПоследних(
//				               |			&Дата,
//				               |			ПланОбменаПриемника = &ПланОбменаПриемника
//				               |				И КодПланаОбменаПремника = &КодПланаОбменаПремника) КАК УГМК_ИсторияОбменаДаннымиСрезПоследних";
//		
//				Запрос.УстановитьПараметр("Дата", ДатаПроверки);
//				Запрос.УстановитьПараметр("ПланОбменаПриемника", тПланОбмена);
//				Запрос.УстановитьПараметр("КодПланаОбменаПремника", тКодПланаОбмена);
//				
//				Результат = Запрос.Выполнить();
//				ВыборкаВерсия = Результат.Выбрать();
//				
//				Если ВыборкаВерсия.Следующий() И ЗначениеЗаполнено(ВыборкаВерсия.ВерсияКонфигурации) Тогда 
//				
//					ВерсияКонфигурацииУзла	= ВыборкаВерсия.ВерсияКонфигурации;
//					ВерсияКонфигурацииИБ	= ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
//					Если ВерсияКонфигурацииИБ <> ВерсияКонфигурацииУзла Тогда
//						СтрОшибка = "Версия конфигурации узла " + ВерсияКонфигурацииУзла;
//						СтрОшибкаРез = СтрОшибкаРез + ?(СтрОшибкаРез = "", "", Символы.ПС + Символы.ПС) + СтрОшибка;
//					КонецЕсли; 
//				
//				КонецЕсли;
//				 
//			КонецЕсли; 
//			
//			Если ЗначениеЗаполнено(СтрОшибкаРез) Тогда
//				ОшибкиИтог = ОшибкиИтог + ?(ЗначениеЗаполнено(ОшибкиИтог), Символы.ПС + Символы.ПС, "") + "	Ошибки для узла: " + Выборка.УзелИнформационнойБазы + "	(" + ДатаПроверки + ")" + Символы.ПС + Символы.ПС + СтрОшибкаРез;
//			КонецЕсли; 
//			
//		КонецЦикла; 
//		
//		// Посылаем сообщение об ошибке
//		Если ЗначениеЗаполнено(ОшибкиИтог) Тогда
//			Если ОтправлятьПисьма = Истина Тогда
//				НовоеПисьмо = Новый Структура;
//				НовоеПисьмо.Вставить("ТемаПисьма", "Ошибки обмена");
//				НовоеПисьмо.Вставить("Получатели", ВыборкаНастройки.Настройка.АдресаРассылкиОшибок.ВыгрузитьКолонку("АдресДляОтправкиСообщенийОбОшибке"));
//				НовоеПисьмо.Вставить("ТекстПисьма", ОшибкиИтог);
//				НовоеПисьмо.Вставить("Имя", ВыборкаНастройки.Настройка.Наименование);
//				
//				ПакетПисем.Добавить(НовоеПисьмо);
//				
//			Иначе
//				Сообщить(ОшибкиИтог, СтатусСообщения.ОченьВажное);
//			КонецЕсли; 
//			
//		КонецЕсли;  
//		
//		Если ПакетПисем.Количество() > 0 Тогда
//			УчетнаяЗаписьОтправкиСообщенияОбОшибке = ВыборкаНастройки.Настройка.УчетнаяЗаписьОтправкиСообщенияОбОшибке;
//			УГМК_Сервер.ОтправитьПисьма(УчетнаяЗаписьОтправкиСообщенияОбОшибке, ПакетПисем);
//		КонецЕсли; 
//	
//	КонецЦикла;
//	
//	Если ЗакрыватьПредприятие Тогда
//#Если Клиент Тогда
//		ЗавершитьРаботуСистемы(Ложь);
//#КонецЕсли 		
//	КонецЕсли; 
//	
КонецПроцедуры

Функция РазрешитьМенятьПодразделение(Объект) Экспорт
	//ОЦМ Мобильная
		Возврат(Ложь);
	//Если РольДоступна("ПолныеПрава") или (УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя("РазрешитьМенятьПодразделениеВФинДокументах")=Истина) тогда	
	//	Возврат(Истина);
	//иначе
	//	Возврат(Ложь);
	//КонецЕсли;
КонецФункции

// вызывается из МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера
//
Процедура ПриОткрытииФормы(МетаданныеОбъекта, ФормаОбъекта) Экспорт 
	//ОЦМ Мобильная
	//
	//Попытка
	//	ДокументОбъект = ФормаОбъекта.ЭтотОбъект;
	//исключение
	//	Возврат;
	//КонецПопытки;
	//
	////+ УГМК_isn 28.04.2012 10:21:24
	//Если Не (РольДоступна("ПолныеПрава") или ПолучитьНастройкуПользователя("РазрешитьМенятьОтветственного")=Истина) тогда
	//	Элемент=ФормаОбъекта.ЭлементыФормы.Найти("Ответственный");
	//	Если Элемент<>Неопределено Тогда
	//		Элемент.Доступность=Ложь;
	//	КонецЕсли; 
	//КонецЕсли;
	//
	////Если Не (РольДоступна("ПолныеПрава") или ПолучитьНастройкуПользователя("РазрешитьМенятьПодразделение")=Истина) тогда
	//Если Не РазрешитьМенятьПодразделение(ДокументОбъект) тогда
	//	Элемент=ФормаОбъекта.ЭлементыФормы.Найти("ПодразделениеКомпании");
	//	Если Элемент<>Неопределено Тогда
	//		Элемент.Доступность=Ложь;
	//	КонецЕсли; 
	//	Элемент=ФормаОбъекта.ЭлементыФормы.Найти("ЦФО");
	//	Если Элемент<>Неопределено Тогда
	//		Элемент.Доступность=Ложь;
	//	КонецЕсли; 
	//	Элемент=ФормаОбъекта.ЭлементыФормы.Найти("Подразделение");
	//	Если Элемент<>Неопределено Тогда
	//		Элемент.Доступность=Ложь;
	//	КонецЕсли; 
	//КонецЕсли;
	//
	//Если ДокументОбъект.ЭтоНовый() и 
	//	ДокументОбъект.Метаданные().Реквизиты.Найти("УГМК_Префикс")<>Неопределено и 
	//	ДокументОбъект.Метаданные().Реквизиты.Найти("Организация")<>Неопределено и 
	//	Не ЗначениеЗаполнено(ДокументОбъект.УГМК_Префикс) и 
	//	Не ЗначениеЗаполнено(ДокументОбъект.Номер) и 
	//	ЗначениеЗаполнено(УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя("ПрефиксДокументовПоУмолчанию"))и
	//	УГМК_СлужебныеФункции.ПрефиксДействуетДляОрганизации(УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя("ПрефиксДокументовПоУмолчанию"), ДокументОбъект.Организация) тогда
	//	
	//	ДокументОбъект.УГМК_Префикс = УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя("ПрефиксДокументовПоУмолчанию");		
	//	
	//	УГМК_СлужебныеФункции.ПрефиксНакладнойПриИзменении(ДокументОбъект);
	//	
	//КонецЕсли;
	////- УГМК_isn 28.04.2012 10:21:24 
	//
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
//
// Возвращает Истина, если у Номенклатуры установлена категория из настройки с именем Номенклатура_НЕ_ПересчитыватьКолИКолМест
//
//
Функция НЕ_ПересчитыватьКолИКолМест( Номенклатура) Экспорт
	Возврат( ЗначениеКатегорииОбъекта( Номенклатура, "Номенклатура_НЕ_ПересчитыватьКолИКолМест"));
КонецФункции

Функция ПолучитьФормулуПересчетаЕдиниц( ЕдиницаИзмеренияМест, ЕдиницаИзмерения, ИмяРесурса)
	Менеджер = РегистрыСведений.УГМК_ФормулыПересчетаЕдиницИзмерения.СоздатьМенеджерЗаписи();
	Менеджер.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;
	Менеджер.ЕдиницаИзмерения = ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
	Менеджер.Прочитать();
	
	Формула = "";
	Если Менеджер.Выбран() тогда
		Формула = Менеджер[ ИмяРесурса];
	КонецЕсли;
	
	Возврат( Формула);
КонецФункции

Функция ПересчитатьПоФормулеЕдиницыИзмеренияМест_КоличествоМест( СтрокаТабличнойЧасти, ДокументОбъект, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	//ОЦМ Мобильная
		Возврат( Ложь);
	//Перем Результат;
	//
	//Если не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
	//	Возврат( Ложь);
	//иначеЕсли ТипЗнч( СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") тогда
	//	Возврат( Ложь);
	//иначеЕсли не ЗначениеЗаполнено( СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест) тогда
	//	Возврат( Ложь);
	//КонецЕсли;
	//
	//УГМК_ФормулаРасчетаКоличестваМест = СтрокаТабличнойЧасти.Номенклатура.УГМК_ФормулаРасчетаКоличестваМест;
	//Если не ЗначениеЗаполнено( УГМК_ФормулаРасчетаКоличестваМест) тогда
	//	УГМК_ФормулаРасчетаКоличестваМест = ПолучитьФормулуПересчетаЕдиниц( СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест, СтрокаТабличнойЧасти.ЕдиницаИзмерения, "УГМК_ФормулаРасчетаКоличестваМест");
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( УГМК_ФормулаРасчетаКоличестваМест) тогда
	//	Свойства = ПолучитьРазобранныеСвойстваОбъектов( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.СерияНоменклатуры);
	//	Попытка
	//		Выполнить( "Результат = "+УГМК_ФормулаРасчетаКоличестваМест);
	//	исключение
	//		Если РольДоступна("ПолныеПрава") тогда
	//			Сообщить( "ПересчитатьПоФормулеДопЕдиницыИзмерения_КоличествоМест: "+ОписаниеОшибки());
	//		КонецЕсли;
	//		Результат = 0;
	//	КонецПопытки;
	//	
	//	СтрокаТабличнойЧасти.КоличествоМест = Результат;
	//	Возврат( Истина);
	//иначе	
	//	Возврат( Ложь);
	//КонецЕсли;
КонецФункции

Функция ПересчитатьПоФормулеЕдиницыИзмеренияМест_Количество( СтрокаТабличнойЧасти, ДокументОбъект, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	//ОЦМ Мобильная
		Возврат( Ложь);
	//Перем Результат;
	//
	//Если не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
	//	Возврат( Ложь);
	//иначеЕсли ТипЗнч( СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") тогда
	//	Возврат( Ложь);
	//иначеЕсли не ЗначениеЗаполнено( СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест) тогда
	//	Возврат( Ложь);
	//КонецЕсли;
	//
	//УГМК_ФормулаРасчетаКоличества = СтрокаТабличнойЧасти.Номенклатура.УГМК_ФормулаРасчетаКоличества;
	//Если не ЗначениеЗаполнено( УГМК_ФормулаРасчетаКоличества) тогда
	//	УГМК_ФормулаРасчетаКоличества = ПолучитьФормулуПересчетаЕдиниц( СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест, СтрокаТабличнойЧасти.ЕдиницаИзмерения, "УГМК_ФормулаРасчетаКоличества");
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( УГМК_ФормулаРасчетаКоличества) тогда
	//	Свойства = ПолучитьРазобранныеСвойстваОбъектов( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.СерияНоменклатуры);
	//	Попытка
	//		Выполнить( "Результат = "+УГМК_ФормулаРасчетаКоличества);
	//	исключение
	//		Если РольДоступна("ПолныеПрава") тогда
	//			Сообщить( "ПересчитатьПоФормулеЕдиницыИзмеренияМест_Количество: "+ОписаниеОшибки());
	//		КонецЕсли;
	//		Результат = 0;
	//	КонецПопытки;
	//	
	//	СтрокаТабличнойЧасти.Количество = Результат;
	//	Возврат( Истина);
	//иначе	
	//	Возврат( Ложь);
	//КонецЕсли;
КонецФункции

Функция ПреобразоватьКИдентификатору( Знач Стр) Экспорт
	Стр = СтрЗаменить( Стр, " ", "");
	Стр = СтрЗаменить( Стр, ".", "");
	Стр = СтрЗаменить( Стр, ",", "");
	Стр = СтрЗаменить( Стр, "-", "");
	Стр = СтрЗаменить( Стр, "\", "");
	Стр = СтрЗаменить( Стр, "/", "");
	
	Возврат( Стр);
КонецФункции

Функция ПолучитьСтруктуруСвойствОбъекта( ОбъектСсылка) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Объект",ОбъектСсылка);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗначенияСвойствОбъектов.Свойство,
	             |	ЗначенияСвойствОбъектов.Значение КАК Значение,
	             |	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Объект = &Объект";
	Данные = Новый Структура;
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		Данные.Вставить( ПреобразоватьКИдентификатору( Результат.Наименование), Результат.Значение);
	КонецЦикла;
	
	Возврат( Данные)
КонецФункции

Функция ПолучитьСтруктуруВсехСвойствОбъекта( Объект, ПреобразовыватьКИдентификатору=Истина) Экспорт
	Запр = Новый Запрос;
	
	Запр.УстановитьПараметр("Объект", Объект);
	
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	СвойствоВид.Ссылка КАК ТипСвойства,
	             |	СвойствоВид.Наименование КАК НаименованиеСвойства,
	             |	ЗначенияСвойств.Значение КАК ЗначениеСвойства
	             |ИЗ
	             |	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойствоВид
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
	             |		ПО (ЗначенияСвойств.Свойство = СвойствоВид.Ссылка)
	             |ГДЕ
	             |	ЗначенияСвойств.Объект = &Объект";
	
	Свойства = Новый Соответствие;
	тз = Запр.Выполнить().Выгрузить();
	Для каждого Строка из тз цикл
		Имя = СокрЛП( Строка.НаименованиеСвойства);
		Если ПреобразовыватьКИдентификатору тогда
			Имя = ПреобразоватьКИдентификатору( Имя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Имя) тогда
			Свойства.Вставить( Имя, Строка.ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Свойства);
КонецФункции

Функция ПолучитьСоответствиеСвойстваОбъекта( ТзСвойств, ПреобразовыватьКИдентификатору=Истина) Экспорт
	Свойства = Новый Соответствие;
	
	Для каждого Строка из ТзСвойств цикл
		Имя = СокрЛП( Строка.НаименованиеСвойства);
		Если ПреобразовыватьКИдентификатору тогда
			Имя = ПреобразоватьКИдентификатору( Имя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Имя) тогда
			Свойства.Вставить( Имя, Строка.ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Свойства);
КонецФункции

Функция ПреобразоватьКЧислу( Зн) Экспорт
	Если ТипЗнч( Зн) = Тип( "Число") тогда
		Возврат( Зн);
	иначеЕсли ТипЗнч( Зн) = Тип( "Строка") тогда
		Попытка
			Возврат( Число( Зн));
		исключение
			Возврат( 0);
		КонецПопытки;
	иначеЕсли Справочники.ТипВсеСсылки().СодержитТип( ТипЗнч( Зн)) тогда
		Попытка
			Возврат( Число( Зн.Наименование));
		исключение
			Возврат( 0);
		КонецПопытки;
	иначе
		Возврат( 0);
	КонецЕсли;
КонецФункции

Функция ПолучитьВсеСвойстваНесколькихОбъектовВТаблицу( Объекты) Экспорт
	Перем Запр, тз;
	
	Типы = Новый Массив;
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Номер", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 3));
	Для каждого Значение из Объекты цикл
		НоваяСтрока = тз.Добавить();
		НоваяСтрока.Номер = тз.Количество();
		Тип = ТипЗнч( Значение);
		Если Типы.Найти( Тип) = Неопределено тогда
			Типы.Добавить( Тип);
		КонецЕсли;
	КонецЦикла;
	
	тз.Колонки.Добавить("Объект", Новый ОписаниеТипов( Типы));
	тз.ЗагрузитьКолонку( Объекты, "Объект");
	
	Запр = Новый Запрос;
	
	Запр.УстановитьПараметр("Таблица", тз);
	
	Запр.Текст = "ВЫБРАТЬ
	             |	Таблица.Номер,
	             |	Таблица.Объект
	             |ПОМЕСТИТЬ Таблица
	             |ИЗ
	             |	&Таблица КАК Таблица
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗначенияСвойствОбъектов.Свойство КАК ТипСвойства,
	             |	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСвойства,
	             |	ЗначенияСвойствОбъектов.Свойство.Наименование КАК НаименованиеСвойства,
	             |	Таблица.Номер КАК Номер
	             |ПОМЕСТИТЬ Данные
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	             |		ПО ЗначенияСвойствОбъектов.Объект = Таблица.Объект
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Объект В
	             |			(ВЫБРАТЬ
	             |				Таблица.Объект
	             |			ИЗ
	             |				Таблица КАК Таблица)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Данные.ТипСвойства,
	             |	Данные.ЗначениеСвойства,
	             |	Данные.НаименованиеСвойства,
	             |	Данные.Номер
	             |ИЗ
	             |	Данные КАК Данные
	             |ГДЕ
	             |	(Данные.ТипСвойства, Данные.Номер) В
	             |			(ВЫБРАТЬ
	             |				Данные.ТипСвойства,
	             |				МИНИМУМ(Данные.Номер) КАК Номер
	             |			ИЗ
	             |				Данные КАК Данные
	             |			СГРУППИРОВАТЬ ПО
	             |						Данные.ТипСвойства)";
				 
	
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Функция ПолучитьРазобранныеСвойстваОбъектов( Номенклатура, ХарактеристикаНоменклатуры=Неопределено, СерияНоменклатуры=Неопределено, КешСвойствОбъектов=Неопределено) Экспорт
	ПолучитьДанные = Новый Массив;
	Если ЗначениеЗаполнено( СерияНоменклатуры) тогда
		ПолучитьДанные.Добавить( СерияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено( ХарактеристикаНоменклатуры) тогда
		ПолучитьДанные.Добавить( ХарактеристикаНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено( Номенклатура) тогда
		ПолучитьДанные.Добавить( Номенклатура);
	КонецЕсли;
	
	Если ПолучитьДанные.Количество() > 0 тогда
		Если КешСвойствОбъектов = Неопределено тогда
			ДопСвойства = ПолучитьСоответствиеСвойстваОбъекта( ПолучитьВсеСвойстваНесколькихОбъектовВТаблицу( ПолучитьДанные));
		иначе
			Ключ = "#";
			Для каждого Объект из ПолучитьДанные цикл
				Ключ = Ключ + Объект.УникальныйИдентификатор()+"#";
			КонецЦикла;
			
			ДопСвойства = КешСвойствОбъектов.Получить( Ключ);
			Если ДопСвойства = Неопределено тогда
				ДопСвойства = ПолучитьСоответствиеСвойстваОбъекта( ПолучитьВсеСвойстваНесколькихОбъектовВТаблицу( ПолучитьДанные));
				КешСвойствОбъектов.Вставить( Ключ, ДопСвойства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопСвойства = Неопределено тогда
		ДопСвойства = Новый Массив;
	КонецЕсли;
	
	Возврат( ДопСвойства);
КонецФункции
 
Функция РассчитатьВес( ФормулаРасчетаВеса, Свойства, УдельныйВес) Экспорт
	Перем Результат;
	
	Если Не ЗначениеЗаполнено(ФормулаРасчетаВеса) Тогда
		Сообщить("Формула не задана");
		Возврат 0;
	КонецЕсли;
	
	Попытка
		Выполнить( "Результат = "+ФормулаРасчетаВеса);
	исключение
		Сообщить( ОписаниеОшибки());
		Результат = 0;
	КонецПопытки;
	
	Возврат( Результат);
КонецФункции

Функция ПосчитатьВесХарактеристики( Характеристика, Данные = Неопределено, ВыводитьСообщения = Истина) Экспорт
	Вес = 0;
	//ОЦМ Мобильная
	//Если не ЗначениеЗаполнено( Характеристика) тогда
	//	Возврат( Вес);
	//КонецЕсли;
	//
	//Если Данные = Неопределено тогда
	//	Данные = ПолучитьСтруктуруСвойствОбъекта( Характеристика);
	//КонецЕсли;
	//
	//Владелец = Характеристика.Владелец;
	//
	//ТипРазмера = УГМК_ПеренесенныеПроцедурыИФункции.СК_ПолучитьТипРазмера( Владелец.НоменклатураОЦМ_ск);
	//Если ЗначениеЗаполнено( ТипРазмера) тогда
	//	ФормулаРасчетаВеса = ТипРазмера.ФормулаРасчетаВеса;
	//	Если ЗначениеЗаполнено( ФормулаРасчетаВеса) тогда
	//		Вес = Окр( УГМК_СлужебныеФункции.РассчитатьВес( ФормулаРасчетаВеса, Данные, Владелец.НоменклатураОЦМ_ск.МаркаСплава.УдельныйВес));
	//	иначеЕсли ВыводитьСообщения тогда
	//		Сообщить("У типа размера ["+ТипРазмера+"] не найдена формула расчета веса.");
	//	КонецЕсли;
	//иначеЕсли ВыводитьСообщения тогда
	//	Сообщить("Не найден тип размера.");
	//КонецЕсли;
	
	Возврат( Вес);
КонецФункции

Функция НайтиСсылкиНоменклатурыПоГруппеИСплаву( Группа, знач МаркаСплава, СодержитВНаименовании="") Экспорт
	
	Если не ЗначениеЗаполнено( МаркаСплава) тогда
		МаркаСплава = Справочники.СК_МаркиСплавов.ПустаяСсылка();
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("ГруппаПродукции", Группа);
	Запр.УстановитьПараметр("МаркаСплава", МаркаСплава);
	Запр.УстановитьПараметр("ВидСплава", МаркаСплава.ВидСплава);
	Запр.УстановитьПараметр("СодержитВНаименовании", "%"+СодержитВНаименовании+"%");
	
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ПодходящаяНоменклатура.НоменклатураОЦМ,
	             |	ПодходящаяНоменклатура.НаименованиеОЦМ,
	             |	ПодходящаяНоменклатура.Номенклатура,
	             |	ПодходящаяНоменклатура.НаименованиеНоменклатура,
	             |	ПодходящаяНоменклатура.Приоритет,
	             |//Пусто	0 КАК ПриоритетНаименования
	             |//Заполнено	ВЫБОР
	             |//Заполнено		КОГДА ПодходящаяНоменклатура.НаименованиеОЦМ ПОДОБНО &СодержитВНаименовании
	             |//Заполнено				ИЛИ ПодходящаяНоменклатура.НаименованиеНоменклатура ПОДОБНО &СодержитВНаименовании
	             |//Заполнено			ТОГДА 0
	             |//Заполнено		ИНАЧЕ 1
	             |//Заполнено	КОНЕЦ КАК ПриоритетНаименования
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		СК_ПродукцияОЦМ.Ссылка КАК НоменклатураОЦМ,
	             |		СК_ПродукцияОЦМ.Наименование КАК НаименованиеОЦМ,
	             |		СК_ПродукцияОЦМ.Металлопрокат КАК Номенклатура,
	             |		СК_ПродукцияОЦМ.Металлопрокат.Наименование КАК НаименованиеНоменклатура,
	             |		ВЫБОР
	             |			КОГДА СК_ПродукцияОЦМ.МаркаСплава = &МаркаСплава
	             |				ТОГДА 0
	             |			КОГДА СК_ПродукцияОЦМ.МаркаСплава.ВидСплава = &ВидСплава
	             |				ТОГДА 10
	             |			ИНАЧЕ 20
	             |		КОНЕЦ КАК Приоритет
	             |	ИЗ
	             |		Справочник.СК_ПродукцияОЦМ КАК СК_ПродукцияОЦМ
	             |	ГДЕ
	             |		СК_ПродукцияОЦМ.ГруппаПродукции = &ГруппаПродукции
	             |		И (НЕ СК_ПродукцияОЦМ.Металлопрокат.ПометкаУдаления)) КАК ПодходящаяНоменклатура
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПриоритетНаименования,
	             |	ПодходящаяНоменклатура.Приоритет,
	             |	ПодходящаяНоменклатура.НаименованиеОЦМ";

	Если ЗначениеЗаполнено( СодержитВНаименовании) тогда
		Запр.Текст = СтрЗаменить( Запр.Текст, "//Заполнено", "");
	иначе	
		Запр.Текст = СтрЗаменить( Запр.Текст, "//Пусто", "");
	КонецЕсли;

	Результат = Запр.Выполнить().Выбрать();
	
	Возврат( Результат);
КонецФункции

Функция НайтиНоменклатуруОЦМПоГруппеИСплаву( Группа, МаркаСплава, СодержитВНаименовании="") Экспорт
	
	Результат = НайтиСсылкиНоменклатурыПоГруппеИСплаву( Группа, МаркаСплава, СодержитВНаименовании);
	Если Результат.Следующий() тогда
		Возврат( Результат.НоменклатураОЦМ);
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

Функция НайтиНоменклатуруПоГруппеИСплаву( Группа, МаркаСплава, СодержитВНаименовании="") Экспорт
	
	Результат = НайтиСсылкиНоменклатурыПоГруппеИСплаву( Группа, МаркаСплава, СодержитВНаименовании);
	Если Результат.Следующий() тогда
		Возврат( Результат.Номенклатура);
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

Функция ПолучитьНоменклатуру_Засор( ДляНоменклатуры, ГруппаЗасор=Неопределено) Экспорт
	Если ГруппаЗасор = Неопределено тогда
		ГруппаЗасор = УГМК_СлужебныеФункции.ПолучитьНастройку("СК_ГруппыПродукции_Засоренность");
	КонецЕсли;
	
	Возврат( НайтиНоменклатуруПоГруппеИСплаву( ГруппаЗасор, ДляНоменклатуры.НоменклатураОЦМ_ск.МаркаСплава));
КонецФункции

Функция ПолучитьНоменклатуру_Отход( ДляНоменклатуры, ГруппаОтход=Неопределено) Экспорт
	Если ГруппаОтход = Неопределено тогда
		ГруппаОтход = УГМК_СлужебныеФункции.ПолучитьНастройку("СК_ГруппыПродукции_Отход");
	КонецЕсли;
	
	Возврат( НайтиНоменклатуруПоГруппеИСплаву( ГруппаОтход, ДляНоменклатуры.НоменклатураОЦМ_ск.МаркаСплава));
КонецФункции

Функция ПолучитьНоменклатуру_Угар( ДляНоменклатуры, ГруппаУгар=Неопределено) Экспорт
	Если ГруппаУгар = Неопределено тогда
		ГруппаУгар = УГМК_СлужебныеФункции.ПолучитьНастройку("СК_ГруппыПродукции_Угар");
	КонецЕсли;
	
	Возврат( НайтиНоменклатуруПоГруппеИСплаву( ГруппаУгар, ДляНоменклатуры.НоменклатураОЦМ_ск.МаркаСплава));
КонецФункции

Функция ПолучитьНоменклатуру_Шлак( ДляНоменклатуры, ГруппаШлак=Неопределено) Экспорт
	Если ГруппаШлак = Неопределено тогда
		ГруппаШлак = УГМК_СлужебныеФункции.ПолучитьНастройку("СК_ГруппыПродукции_Шлак");
	КонецЕсли;
	
	Возврат( НайтиНоменклатуруПоГруппеИСплаву( ГруппаШлак, ДляНоменклатуры.НоменклатураОЦМ_ск.МаркаСплава));
КонецФункции

Функция ПолучитьНоменклатуру_КорректировкаБалансаМеталла( ДляНоменклатуры, ГруппаКорректировка=Неопределено) Экспорт
	Если ГруппаКорректировка = Неопределено тогда
		ГруппаКорректировка = УГМК_СлужебныеФункции.ПолучитьНастройку("СК_ГруппыПродукции_КорректировкаБалансаМеталла");
	КонецЕсли;
	
	Возврат( НайтиНоменклатуруПоГруппеИСплаву( ГруппаКорректировка, ДляНоменклатуры.НоменклатураОЦМ_ск.МаркаСплава));
КонецФункции

Функция ПараметрыВМассив( Пар1, Пар2=Неопределено, Пар3=Неопределено, Пар4=Неопределено, Пар5=Неопределено, ДобавитьНеопределено=Ложь) Экспорт
	Результат = Новый Массив;
	Результат.Добавить( Пар1);
	Если Пар2 <> Неопределено тогда
		Результат.Добавить( Пар2);
	КонецЕсли;
	Если Пар3 <> Неопределено тогда
		Результат.Добавить( Пар3);
	КонецЕсли;
	Если Пар4 <> Неопределено тогда
		Результат.Добавить( Пар4);
	КонецЕсли;
	Если Пар5 <> Неопределено тогда
		Результат.Добавить( Пар5);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Процедура ДобавитьСвойствоЕслиЕгоНет( Структ, Имя)
	Если не Структ.Свойство( Имя) тогда
		Структ.Вставить( Имя);
	КонецЕсли;
КонецПроцедуры

// Параметры Структура
//		Продукция 				- Входящий
//		ХарактеристикаПродукции - Входящий
//		ЕдиницаИзмерения
//		Коэффициент
//		Номенклатура
//		ХарактеристикаНоменклатуры
//		КоличествоПродукции
//		Количество
//		КоличествоОтходов
//		Спецификация  			- Входящий/Исходящий
//		Заказ  					- Входящий/Исходящий
//		ТочкаМаршрута
//		
Функция ПодобратьМатериалПоПараметрамИзготовления( Параметры, Дата, Подразделение) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата", Дата);
	Запр.УстановитьПараметр("Продукция", Параметры.Продукция);
	Запр.УстановитьПараметр("ХарактеристикаПродукции", Параметры.ХарактеристикаПродукции);
	Запр.УстановитьПараметр("ХарактеристикаПродукцииНаименование", Параметры.ХарактеристикаПродукции.Наименование);
	Запр.УстановитьПараметр("Подразделение", ПараметрыВМассив( Справочники.Подразделения.ПустаяСсылка(), Подразделение));
	Запр.УстановитьПараметр("Заказ", ПараметрыВМассив( Неопределено, Параметры.Заказ));
	//Запр.УстановитьПараметр("Спецификация", ПараметрыВМассив( Справочники.СпецификацииНоменклатуры.ПустаяСсылка(), Параметры.Спецификация));
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Период,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Номенклатура,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаНоменклатуры,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение КАК ПодразделениеПараметров,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Спецификация,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Спецификация КАК СпецификацияПараметров,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Заказ,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Заказ КАК ЗаказПараметров,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ЕдиницаИзмерения,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Коэффициент,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоПродукции,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Количество,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоОтходов,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ТочкаМаршрута,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ДопускИзготовления,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ДопускЗаготовки,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.БарКод,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоПрокату,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоТехЦепочке,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор
	             |ИЗ
	             |	РегистрСведений.УГМК_ПараметрыИзготовления.СрезПоследних(
	             |			&Дата,
	             |			Продукция = &Продукция
	             |				И ХарактеристикаПродукции.Наименование = &ХарактеристикаПродукцииНаименование
	             |				И Подразделение В (&Подразделение)
	             |				И Заказ В (&Заказ)) КАК УГМК_ПараметрыИзготовленияСрезПоследних";
				 
				 
	Результат = Запр.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 тогда
		Возврат( Ложь);
	КонецЕсли;
		
	Результат.Колонки.Добавить("Приоритет");
	Для каждого Строка из Результат цикл
		Приоритет = 0;
		Если Строка.ХарактеристикаПродукции <> Параметры.ХарактеристикаПродукции тогда
			Приоритет = Приоритет + 2;
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.Заказ) тогда
			Приоритет = Приоритет + 1000;
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.Спецификация) тогда
			Приоритет = Приоритет + 500;
		КонецЕсли;
		Если ЗначениеЗаполнено( Строка.Подразделение) тогда
			Приоритет = Приоритет + 100;
		КонецЕсли;
		
		Строка.Приоритет = Приоритет;
	КонецЦикла;
	
	Результат.Сортировать("Приоритет убыв, Период убыв, Регистратор убыв");
	
	ДобавитьСвойствоЕслиЕгоНет( Параметры, "ПодразделениеПараметров");
	ДобавитьСвойствоЕслиЕгоНет( Параметры, "СпецификацияПараметров");
	ДобавитьСвойствоЕслиЕгоНет( Параметры, "ЗаказПараметров");
	
	ЗаполнитьЗначенияСвойств( Параметры, Результат[ 0], "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Количество,КоличествоОтходов,КоличествоПродукции,ТочкаМаршрута,ДопускИзготовления,ДопускЗаготовки,БарКод,ОбъединениеПоПрокату,ОбъединениеПоТехЦепочке,ПодгруппаТрудоемкости");

	Возврат( Истина);
КонецФункции

Функция ПодобратьМатериалПоГруппеИСплаву( Параметры, Дата, Подразделение, ТочноПоПодразделению=Ложь, Сообщать=Истина) Экспорт
	Продукция = Параметры.Продукция;
	
	Если не (ЗначениеЗаполнено( Продукция) и ЗначениеЗаполнено( Продукция.НоменклатураОЦМ_ск) и ЗначениеЗаполнено( Продукция.НоменклатураОЦМ_ск.ГруппаПродукции) и ЗначениеЗаполнено( Продукция.НоменклатураОЦМ_ск.МаркаСплава)) тогда
		Возврат( Ложь);                                                        
	КонецЕсли;   
	
	НоменклатураОЦМ = Продукция.НоменклатураОЦМ_ск;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр( "ГруппаПродукции", НоменклатураОЦМ.ГруппаПродукции);
	Запр.УстановитьПараметр( "Подразделение", Подразделение);
	Если ТочноПоПодразделению тогда
		Запр.УстановитьПараметр( "ПриритетПодразделения", 0);
	иначе
		Запр.УстановитьПараметр( "ПриритетПодразделения", 100);
	КонецЕсли;
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Данные.ПриритетПодразделения КАК ПриритетПодразделения,
	             |	Данные.Материал,
	             |	Данные.Подразделение КАК Подразделение
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		0 КАК ПриритетПодразделения,
	             |		УГМК_СвязьГруппПродукции.Приоритет КАК Приоритет,
	             |		УГМК_СвязьГруппПродукции.Подразделение КАК Подразделение,
	             |		УГМК_СвязьГруппПродукции.Материал КАК Материал
	             |	ИЗ
	             |		РегистрСведений.УГМК_СвязьГруппПродукции КАК УГМК_СвязьГруппПродукции
	             |	ГДЕ
	             |		УГМК_СвязьГруппПродукции.ГруппаПродукции = &ГруппаПродукции
	             |		И УГМК_СвязьГруппПродукции.Подразделение = &Подразделение
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		1,
	             |		УГМК_СвязьГруппПродукции.Приоритет,
	             |		УГМК_СвязьГруппПродукции.Подразделение,
	             |		УГМК_СвязьГруппПродукции.Материал
	             |	ИЗ
	             |		РегистрСведений.УГМК_СвязьГруппПродукции КАК УГМК_СвязьГруппПродукции
	             |	ГДЕ
	             |		УГМК_СвязьГруппПродукции.ГруппаПродукции = &ГруппаПродукции
	             |		И УГМК_СвязьГруппПродукции.Подразделение <> &Подразделение) КАК Данные
	             |ГДЕ
	             |	Данные.ПриритетПодразделения <= &ПриритетПодразделения
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПриритетПодразделения,
	             |	Подразделение,
	             |	Данные.Приоритет УБЫВ";
	Результат = Запр.Выполнить();
	Если Результат.Пустой() тогда
		Если Сообщать тогда
			Сообщить("Не указано ни одного исходного материала для группы продукции "+НоменклатураОЦМ.ГруппаПродукции+" автоподбор не выполнен.");
		КонецЕсли;
		Возврат( Ложь);
	КонецЕсли;
	
	Выборка = Результат.Выбрать( ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() цикл
		Номенклатура = УГМК_СлужебныеФункции.НайтиНоменклатуруПоГруппеИСплаву( Выборка.Материал, НоменклатураОЦМ.МаркаСплава);
		Если ЗначениеЗаполнено( Номенклатура) тогда
			Параметры.Номенклатура = Номенклатура;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Истина);
КонецФункции

Функция ПолучитьВесТабличнойЧасти( ТабЧасть, ТаблицаПродукции = Неопределено, 
		КолонкиИзмерения = "ВидВыпуска,Заказ,Номенклатура,НоменклатурнаяГруппа,Спецификация,ЕдиницаИзмерения,Коэффициент", 
		КолонкиРесурсы = "Количество", КолонкаКоличество="Количество", КолонкаЕдИзм="ЕдиницаИзмерения") Экспорт
		
	Если ТипЗнч( ТабЧасть)  = Тип("ТаблицаЗначений") тогда
		ТаблицаПродукции = ТабЧасть.Скопировать(,КолонкиИзмерения+","+КолонкиРесурсы);
	иначе	
		ТаблицаПродукции = ТабЧасть.Выгрузить(,КолонкиИзмерения+","+КолонкиРесурсы);
	КонецЕсли;
	
	ТаблицаПродукции.Свернуть( КолонкиИзмерения, КолонкиРесурсы);
	
	ТаблицаПродукции.Колонки.Добавить("Количество_Вес", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 3));
	Для каждого Строка из ТаблицаПродукции цикл
		Строка.Количество_Вес = Окр( Строка[ КолонкаКоличество]*УГМК_СлужебныйПовторноеИспользование.ПолучитьВесЕдиницыИзмерения( Строка[ КолонкаЕдИзм]), 3);
	КонецЦикла;
	
	Возврат( ТаблицаПродукции.Итог("Количество_Вес"));
КонецФункции

Процедура УдалитьСтрокиСНоменклатурой( Источник, НоменклатураУгар, Имя="Номенклатура")
	Отбор = Новый Структура;
	Отбор.Вставить( Имя, НоменклатураУгар);
	
	ДляУдаления = Источник.НайтиСтроки( Отбор);
	Для каждого Строка из ДляУдаления цикл
		Источник.Удалить( Строка);
	КонецЦикла;
КонецПроцедуры

Функция ОтветственныеЛица(ОбъектПривязки, ДатаСреза, Организация=Неопределено) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	УсловиеОрганизации=Организация;
	Если УсловиеОрганизации=Неопределено тогда
		Если ТипЗнч(ОбъектПривязки)=Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			УсловиеОрганизации=ОбъектПривязки.Владелец;
		иначеЕсли ТипЗнч(ОбъектПривязки)=Тип("СправочникСсылка.Кассы") тогда
			УсловиеОрганизации=ОбъектПривязки.Владелец;
		иначеЕсли ТипЗнч(ОбъектПривязки)=Тип("СправочникСсылка.Склады") тогда
			УсловиеОрганизации=ОбъектПривязки.УГМК_Организация;
		КонецЕсли;
	КонецЕсли;	
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("СтруктурнаяЕдиница", ОбъектПривязки);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	
	
	ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	                      |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
	                      |	ВЫБОР
	                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	                      |			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
	                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	                      |				ИНАЧЕ """"
	                      |			КОНЕЦ + ВЫБОР
	                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	                      |				ИНАЧЕ """"
	                      |			КОНЕЦ
	                      |	КОНЕЦ КАК ФИОПолное,
	                      |	ВЫБОР
	                      |		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК Приоритет
	                      |ИЗ
	                      |	РегистрСведений.УГМК_ОтветственныеЛицаОрганизаций.СрезПоследних(
	                      |			&ДатаСреза,
	                      |			СтруктурнаяЕдиница = &Организация
	                      |				ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
	                      |		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОтветственноеЛицо,
	                      |	Приоритет
	                      |АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = ЗапросПоЛицам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока Выборка.СледующийПоЗначениюПоля("ОтветственноеЛицо") Цикл

		Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			Результат.Руководитель            = Выборка.ФИОПолное;
			Результат.РуководительДолжность   = Выборка.Должность;

		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
			Результат.Кассир                  = Выборка.ФИОПолное;

		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
			Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;
		//УГМК++ Будин А.Л. 19.01.2010 
		ИначеЕсли ТипЗнч(Выборка.ОтветственноеЛицо) = Тип("Строка") Тогда
			Результат.Вставить(СокрЛП(Выборка.ОтветственноеЛицо),Выборка.ФИОПолное);
			Результат.Вставить(СокрЛП(Выборка.ОтветственноеЛицо)+"Должность",Выборка.Должность);
		ИначеЕсли ТипЗнч(Выборка.ОтветственноеЛицо) = Тип("СправочникСсылка.УГМК_ОтветственныеЛицаОрганизаций") Тогда
			Результат.Вставить(СокрЛП(Выборка.ОтветственноеЛицо.Наименование),Выборка.ФИОПолное);
			Результат.Вставить(СокрЛП(Выборка.ОтветственноеЛицо.Наименование)+"Должность",Выборка.Должность);
		//УГМК--	

		КонецЕсли;

	КонецЦикла;


	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизаций()

/////////////////////////////////////////////////////////////////////////
#Если Клиент тогда
Функция ПроверитьМодифицированностьВФорме( Объект, Форма, Сообщение = "Для печати") Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Объект изменен. "+Сообщение+" его необходимо записать "+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Объект изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Попытка
				
				Если Проведен Тогда
	            	Результат  = Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				Иначе
					Результат = Форма.ЗаписатьВФорме();				
				КонецЕсли;
				
			Исключение
				Результат = Ложь;
			КонецПопытки;	

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

Процедура ПроверкаОсновнойФормыДокумента( Форма, ИмяТекущейФормы, Отказ, СтандартнаяОбработка) Экспорт
	Объект = Форма.ЭтотОбъект;
	ИмяОбъекта = Объект.Метаданные().Имя;
	
	Если Объект.ЭтоНовый() тогда
		ИмяФормы = УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя( "ИспользоватьФормуДокумента_"+ИмяОбъекта);
		Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
			ИмяФормы = ПолучитьНастройку("ИспользоватьФормуДокумента_"+ИмяОбъекта+"_ПоУмолчанию");
		КонецЕсли;  
	иначе
		ИмяФормы = УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя( "ИспользоватьФормуДокумента_"+ИмяОбъекта);
		Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
			ИмяФормы = ПолучитьНастройку("ИспользоватьФормуДокумента_"+ИмяОбъекта+"_ПоУмолчанию");
		КонецЕсли;  
	КонецЕсли;
	
	Если (ТипЗнч(ИмяФормы) = Тип("Строка")) и ЗначениеЗаполнено( ИмяФормы) и (ИмяФормы <> ИмяТекущейФормы) тогда
		Отказ = Истина;
		
		Объект.ДополнительныеСвойства.Вставить("УГМК_ПрограммноеОткрытиеФормы", Истина);
		
		НоваяФорма = Объект.ПолучитьФорму( ИмяФормы);
		НоваяФорма.ВладелецФормы = Форма.ВладелецФормы;
		НоваяФорма.КлючУникальности = Форма.КлючУникальности;
		НоваяФорма.ПараметрОбъектКопирования = Форма.ПараметрОбъектКопирования;
		НоваяФорма.ПараметрОснование = Форма.ПараметрОснование;
		НоваяФорма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ВыборОсновнойФормыДокумента( Форма, ИмяТекущейФормы, Знач МожетВыбрать, Отказ, СтандартнаяОбработка) Экспорт
	Объект = Форма.ЭтотОбъект;
	
	МожетВыбрать = ","+СокрЛП( МожетВыбрать)+",";
	ТипФормыОбычная = Метаданные.СвойстваОбъектов.ТипФормы.Обычная;
	
	ИмяДокумента = Объект.Метаданные().Имя;
	ФормыМета = Метаданные.Документы[ ИмяДокумента].Формы;
	СписокФорм = Новый СписокЗначений;
	Для каждого ФормаМета из ФормыМета цикл
		Если ФормаМета.ТипФормы <> ТипФормыОбычная тогда
			Продолжить;
		КонецЕсли;
		
		ФормаТест = Документы[ ИмяДокумента].ПолучитьФорму( ФормаМета.Имя);
		
		ЭтоФормаДокумента = ФормаТест.ЭлементыФормы.Найти("Дата") <> Неопределено;
		
		Если ЭтоФормаДокумента тогда
			Если (МожетВыбрать = ",*,") или (Найти( МожетВыбрать, ","+ФормаМета.Имя+",") > 0) тогда
				СписокФорм.Добавить( ФормаМета.Имя, ФормаМета.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокФорм.Количество() = 0 тогда
		Сообщить("ВыборОсновнойФормыДокумента: не указаны имена форм документа "+ИмяДокумента+" доступных для выбора.");
		Отказ = Истина;
	иначе
		Если СписокФорм.Количество() = 1 тогда
			Элемент = СписокФорм[ 0];
		иначе
			Элемент = СписокФорм.ВыбратьЭлемент("Открыть форму:");
		КонецЕсли;
	
		Если Элемент = Неопределено тогда
			Отказ = Истина;
		иначеЕсли Элемент.Значение <> ИмяТекущейФормы тогда
			Отказ = Истина;
			
			Объект.ДополнительныеСвойства.Вставить("УГМК_ПрограммноеОткрытиеФормы", Истина);
			НоваяФорма = Объект.ПолучитьФорму( Элемент.Значение);
			НоваяФорма.ВладелецФормы = Форма.ВладелецФормы;
			НоваяФорма.КлючУникальности = Форма.КлючУникальности;
			НоваяФорма.ПараметрОбъектКопирования = Форма.ПараметрОбъектКопирования;
			НоваяФорма.ПараметрОснование = Форма.ПараметрОснование;
			
			НоваяФорма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередОткрытием( Форма, ИмяТекущейФормы, Отказ, СтандартнаяОбработка, Знач ИмяРекв="ДокументОснование") Экспорт
	Перем Объект, УГМК_ПрограммноеОткрытиеФормы;
	
	Объект = Форма.ЭтотОбъект;
	
	ПроверитьУникальностьВводаНаОсновании( Объект, Форма.ПараметрОснование, Отказ, ИмяРекв);
	
	Если не Отказ тогда
		Объект.ДополнительныеСвойства.Свойство( "УГМК_ПрограммноеОткрытиеФормы", УГМК_ПрограммноеОткрытиеФормы);
		Если УГМК_ПрограммноеОткрытиеФормы = Истина тогда
			Возврат;
		КонецЕсли;
		
		ИмяОбъекта = Объект.Метаданные().Имя;
		
		МожетВыбрать = УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя( "МожетВыбиратьВидФормы_"+ИмяОбъекта);
		
		Если ЗначениеЗаполнено( МожетВыбрать) и (УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя( "ИспользоватьФормуДокумента_"+ИмяОбъекта+"Всегда") <> Истина) тогда
			ВыборОсновнойФормыДокумента( Форма, ИмяТекущейФормы, МожетВыбрать, Отказ, СтандартнаяОбработка);
		иначе
			ПроверкаОсновнойФормыДокумента( Форма, ИмяТекущейФормы, Отказ, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьЦветТекстаВСтроке( ОформлениеСтроки, Сторно) Экспорт
	Если Сторно тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	КонецЕсли;
КонецПроцедуры 

Процедура ДобавитьКРаспределениюТекущуюСтроку( ТекущиеДанные, ЭлементыФормыПродукция, Продукция, Распределение) Экспорт
	ОтборСтрокРаспределения = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,НоменклатурнаяГруппаНЗП,СтатьяЗатрат,ЗаказНЗП,СчетЗатрат,СчетЗатратНУ,ПодразделениеНЗП,ПодразделениеОрганизацииНЗП,ВидВыпуска,ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств( ОтборСтрокРаспределения, ТекущиеДанные);
	
	ОтборСтрокРаспределения.НоменклатурнаяГруппаНЗП = ТекущиеДанные.НоменклатурнаяГруппа;
	ОтборСтрокРаспределения.ЗаказНЗП = ТекущиеДанные.Заказ;
	
	СтрокиРаспределения = Распределение.НайтиСтроки( ОтборСтрокРаспределения);
	Распределить = ТекущиеДанные.Количество*ТекущиеДанные.Коэффициент;
	Для каждого СтрокаРаспределения из СтрокиРаспределения цикл
		Распределить = Распределить-СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент;
	КонецЦикла;

	Если Распределить = 0 тогда
		Предупреждение("Распределение строки "+Строка( ТекущиеДанные.НомерСтроки)+" уже выполнено.");
		Возврат;
	иначеЕсли не ВвестиЧисло( Распределить, "Распределить:") тогда
		Возврат;
	КонецЕсли;
	
	РаспределятьНаСтроки = Новый Массив;
	
	ТекущаяСтрокаПродукция = ЭлементыФормыПродукция.ТекущаяСтрока;
	Если ТекущаяСтрокаПродукция <> Неопределено тогда
		Ответ = Вопрос("Распределить на строку ["+ТекущаяСтрокаПродукция.НомерСтроки+"] "+ТекущаяСтрокаПродукция.Номенклатура, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да тогда
			РаспределятьНаСтроки.Добавить( ТекущаяСтрокаПродукция);
			БазаРаспределения = ТекущаяСтрокаПродукция.Количество*ТекущаяСтрокаПродукция.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Если РаспределятьНаСтроки.Количество() = 0 тогда
		Ответ = Вопрос("Распределить на отбор строк?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да тогда
			Возврат;
		КонецЕсли;
		
		ТабличноеПоле = ЭлементыФормыПродукция;
		БазаРаспределения = 0;
		Для каждого СтрокаПродукции из Продукция цикл
			Если ТабличноеПоле.ПроверитьСтроку( СтрокаПродукции) тогда
				РаспределятьНаСтроки.Добавить( СтрокаПродукции);
				БазаРаспределения = БазаРаспределения + СтрокаПродукции.Количество*СтрокаПродукции.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если БазаРаспределения = 0 тогда
		Предупреждение("Не найдена база распределения строки "+Строка( ТекущиеДанные.НомерСтроки)+". Установите отбор на таблице Продукция.");
		Возврат;
	КонецЕсли;
	
	УжеРаспределено = 0;
	ПоследнийИндекс = РаспределятьНаСтроки.Количество()-1; 
	Для Пер = 0 по ПоследнийИндекс цикл
		СтрокаПродукции = РаспределятьНаСтроки[ Пер];
		Если Пер = ПоследнийИндекс тогда
			ТекКол = Распределить - УжеРаспределено;
		иначе
			Коэфф = СтрокаПродукции.Количество*СтрокаПродукции.Коэффициент/БазаРаспределения;
			ТекКол = Окр( Распределить*Коэфф, 3);
		КонецЕсли;
		Если ТекКол <> 0 тогда
			НоваяСтрока = Распределение.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, ТекущиеДанные, "Количество,Коэффициент");
			ЗаполнитьЗначенияСвойств( НоваяСтрока, ОтборСтрокРаспределения);
			ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаПродукции, "НоменклатурнаяГруппа,Заказ,Спецификация");
			
			НоваяСтрока.Продукция = СтрокаПродукции.Номенклатура; 
			НоваяСтрока.ХарактеристикаПродукции = СтрокаПродукции.ХарактеристикаНоменклатуры; 
			НоваяСтрока.СерияПродукции = СтрокаПродукции.СерияНоменклатуры;

			НоваяСтрока.Количество = ТекКол/НоваяСтрока.Коэффициент;
			УжеРаспределено = УжеРаспределено + НоваяСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиЗначениеСвойстваПоТексту( Элемент, Текст, Значение, СтандартнаяОбработка, СвойствоВладелец) Экспорт
	Перем Запр, Результат, Строка, Ответ;
	
	СтандартнаяОбработка = Ложь;
	Если не ЗначениеЗаполнено( Текст) тогда
		Значение = "";
		Элемент.Значение = "";
		Возврат;
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Владелец", СвойствоВладелец);
	Запр.УстановитьПараметр("Наименование", Текст);
	Запр.УстановитьПараметр("Длина", СтрДлина( Текст));
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗначенияСвойствОбъектов.Ссылка
	             |ИЗ
	             |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Владелец = &Владелец
	             |	И ПОДСТРОКА(ЗначенияСвойствОбъектов.Наименование, 1, &Длина) = &Наименование";
	Результат = Запр.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 тогда
		Значение = Текст;
		Элемент.Значение = Текст;
	иначе
		Если Результат.Количество() = 1 тогда
			Строка = Результат[ 0];
		иначе
			Результат.Колонки.Ссылка.Ширина = 200;
			Строка = Результат.ВыбратьСтроку( "Укажите допуск");
		КонецЕсли;
		
		Если Строка <> Неопределено тогда
			Значение = Строка.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьВнешнююОбработкуОтчет( Значение) Экспорт
	Перем ОбработкаСпр;
	
	Тип = ТипЗнч( Значение);
	Если Тип = Тип( "СправочникСсылка.ВнешниеОбработки") тогда
		ОбработкаСпр = Значение;
	иначеЕсли Тип = Тип( "Строка") тогда
		ОбработкаСпр = Справочники.ВнешниеОбработки.НайтиПоКоду( Значение);
		Если не ЗначениеЗаполнено( ОбработкаСпр) тогда
			ОбработкаСпр = Справочники.ВнешниеОбработки.НайтиПоНаименованию( Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( ОбработкаСпр) тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОбработка = ?(ОбработкаСпр.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка, Истина, Ложь);
	ЭтоОтчет = ?(ОбработкаСпр.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет, Истина, Ложь);
	
	Если НЕ (ЭтоОбработка ИЛИ ЭтоОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ОбработкаСпр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Если ЭтоОбработка Тогда
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		Иначе
			Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
		КонецЕсли;
		
		Если Не Форма = Неопределено Тогда
			Форма.Открыть();
		Иначе
			Если ЭтоОбработка Тогда
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			Иначе
				ВнешнийОтчет = ВнешниеОтчеты.Создать(ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
		//УдалитьФайлы(ИмяФайла);
		
	Исключение
		
		Если ЭтоОбработка Тогда
			
			Предупреждение("Выбранный файл не является внешней обработкой.
						   |Либо, данная обработка не предназначена для
						   |запуска в этой конфигурации.");
		Иначе
			Предупреждение("Выбранный файл не является внешним отчетом.
						   |Либо, данный отчет не предназначена для
						   |запуска в этой конфигурации.");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыборПодразделений(Форма) Экспорт
	// Из за прав доступа убираем
	Отбор = Форма.СправочникСписок.Отбор;
	
	Подразделение = УГМК_СлужебныеФункции.СтруктурноеПодразделениеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Подразделение) тогда
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//			   |	Подразделения.Ссылка КАК Подразделение
		//			   |ИЗ
		//			   |	Справочник.Подразделения КАК Подразделения
		//			   |ГДЕ
		//			   |	Подразделения.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
		//Запрос.УстановитьПараметр("СтруктурноеПодразделение", Подразделение);
		//МассивПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		//Список = Новый СписокЗначений;
		//Список.ЗагрузитьЗначения(МассивПодразделений);
		//Отбор.ССылка.ВидСравнения  = ВидСравнения.ВСписке;
		//Отбор.Ссылка.Значение      = Список;
		//Отбор.ССылка.Использование = Истина;
		
		//Отбор.Ссылка.Значение      = Подразделение;
		//Отбор.ССылка.ВидСравнения  = ВидСравнения.ВИерархии;
		//Отбор.ССылка.Использование = Истина;
		
		Отбор.УГМК_Структурноеподразделение.Значение      = Подразделение;
		Отбор.УГМК_Структурноеподразделение.ВидСравнения  = ВидСравнения.ВИерархии;
		Отбор.УГМК_Структурноеподразделение.Использование = Истина;
	КонецЕсли;
	
	Отбор.УГМК_Действует.Значение      = Истина;
	Отбор.УГМК_Действует.ВидСравнения  = ВидСравнения.Равно;
	Отбор.УГМК_Действует.Использование = Истина;
	
КонецПроцедуры
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция НайтиЗначениеДопуска( ТЗ, ВидСвойства, ДопускСтрока) Экспорт
	Перем Строка, СпрСсылка;
	
	Если не ЗначениеЗаполнено( ДопускСтрока) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Строка = ТЗ.Найти( ДопускСтрока, "Значение");
	Если Строка = Неопределено тогда
		НовыйСпр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НовыйСпр.Владелец = ВидСвойства;
		НовыйСпр.Наименование = СокрЛП( ДопускСтрока);
		НовыйСпр.УстановитьНовыйКод();
		НовыйСпр.Записать();
		
		СпрСсылка = НовыйСпр.Ссылка;
	иначе
		СпрСсылка = Строка.Ссылка;
	КонецЕсли;
	
	Возврат( СпрСсылка);
КонецФункции

Функция СконвертироватьСтрокиВЗначенияСвойств( ВидСвойства, МассивСтрок) Экспорт
	Перем ТаблицаСтрок, НоваяСтрока, Запр, Результат, НовыйСпр, ТипСправочник, РезультатЗапр;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Ссылка");
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Значение", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( 100));
	
	ТипСправочник = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
	
	Для каждого Значение из МассивСтрок цикл
		Если не ЗначениеЗаполнено( Значение) тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч( Значение) = ТипСправочник тогда
			Если (Результат.Найти( Значение, "Значение") = Неопределено) тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Значение = Значение;
				НоваяСтрока.Ссылка = Значение;
			КонецЕсли;
		иначе
			Если (ТаблицаСтрок.Найти( Значение, "Значение") = Неопределено) тогда
				НоваяСтрока = ТаблицаСтрок.Добавить();
				НоваяСтрока.Значение = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСтрок.Количество() > 0 тогда
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("Данные", ТаблицаСтрок);
		Запр.УстановитьПараметр("ВидСвойства", ВидСвойства);
		Запр.Текст = "ВЫБРАТЬ
		             |	Данные.Значение
		             |ПОМЕСТИТЬ Данные
		             |ИЗ
		             |	&Данные КАК Данные
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	Данные.Значение,
		             |	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		             |ИЗ
		             |	Данные КАК Данные
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		             |		ПО Данные.Значение = ЗначенияСвойствОбъектов.Наименование
		             |			И (ЗначенияСвойствОбъектов.Владелец = &ВидСвойства)";
		РезультатЗапр = Запр.Выполнить().Выгрузить();
		Для каждого Строка из РезультатЗапр цикл
			Если не ЗначениеЗаполнено( Строка.Ссылка) тогда
				НовыйСпр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				НовыйСпр.Владелец = ВидСвойства;
				НовыйСпр.Наименование = СокрЛП( Строка.Значение);
				НовыйСпр.УстановитьНовыйКод();
				НовыйСпр.Записать();
				
				Строка.Ссылка = НовыйСпр.Ссылка;
			КонецЕсли;
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Значение = Строка.Значение;
			НоваяСтрока.Ссылка = Строка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьТаблицуКлючейПлавок() Экспорт
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Плавка", Новый ОписаниеТипов("БизнесПроцессСсылка.УГМК_Плавка"));
	тз.Колонки.Добавить("НомерСлитка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 2));
	
	Возврат( тз);
КонецФункции

Процедура ДобавитьСтрокуКТаблицеКлючейПлавок( ТаблицаПлавок, ПлавкаБП, НомерСлитка=0) Экспорт
	НоваяСтрока = ТаблицаПлавок.Добавить();
	НоваяСтрока.Плавка = ПлавкаБП;
	НоваяСтрока.НомерСлитка = НомерСлитка;
КонецПроцедуры

Функция СоздатьСериюНоменклатурыСПлавкой( Номенклатура, СсылкаБП, НомерСлитка=0) Экспорт
	Перем тз;
	
	Если ТипЗнч( СсылкаБП) = Тип( "ТаблицаЗначений") тогда
		тз = СсылкаБП;
	иначе
		тз = ПолучитьТаблицуКлючейПлавок();
		ДобавитьСтрокуКТаблицеКлючейПлавок( тз, СсылкаБП, НомерСлитка);
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("МассивПлавок", тз);
	Запр.УстановитьПараметр("Номенклатура", Номенклатура);
	Запр.УстановитьПараметр("КоличествоПлавок", тз.Количество());
	
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	СерииНоменклатурыУГМК_Плавки.Ссылка,
	             |	СУММА(1) КАК Совпадений,
	             |	СерииНоменклатурыУГМК_Плавки.Ссылка.Код КАК Код
	             |ПОМЕСТИТЬ ПодходящиеСерии
	             |ИЗ
	             |	Справочник.СерииНоменклатуры.УГМК_Плавки КАК СерииНоменклатурыУГМК_Плавки
	             |ГДЕ
	             |	СерииНоменклатурыУГМК_Плавки.Ссылка.Владелец = &Номенклатура
	             |	И (СерииНоменклатурыУГМК_Плавки.Плавка, СерииНоменклатурыУГМК_Плавки.НомерСлитка) В (&МассивПлавок)
	             |	И (НЕ СерииНоменклатурыУГМК_Плавки.Ссылка.ПометкаУдаления)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СерииНоменклатурыУГМК_Плавки.Ссылка,
	             |	СерииНоменклатурыУГМК_Плавки.Ссылка.Код
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ПодходящиеСерии.Ссылка,
	             |	ПодходящиеСерии.Совпадений,
	             |	ПодходящиеСерии.Код,
	             |	МАКСИМУМ(СерииНоменклатурыУГМК_Плавки.НомерСтроки) КАК НомерСтроки
	             |ПОМЕСТИТЬ ПодходящиеСерииСМаксимумом
	             |ИЗ
	             |	ПодходящиеСерии КАК ПодходящиеСерии
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры.УГМК_Плавки КАК СерииНоменклатурыУГМК_Плавки
	             |		ПО ПодходящиеСерии.Ссылка = СерииНоменклатурыУГМК_Плавки.Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПодходящиеСерии.Ссылка,
	             |	ПодходящиеСерии.Совпадений,
	             |	ПодходящиеСерии.Код
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ПодходящиеСерии.Ссылка
	             |ИЗ
	             |	ПодходящиеСерииСМаксимумом КАК ПодходящиеСерии
	             |ГДЕ
	             |	ПодходящиеСерии.Совпадений = &КоличествоПлавок
	             |	И ПодходящиеСерии.НомерСтроки = &КоличествоПлавок
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПодходящиеСерии.Код";
				 
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Возврат( Результат.Ссылка);
	КонецЕсли;
	
	Объект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	Объект.Владелец = Номенклатура;
	
	Для каждого Плавка из тз цикл
		СтрокаПлавки = Объект.УГМК_Плавки.Добавить();
		ЗаполнитьЗначенияСвойств( СтрокаПлавки, Плавка);
	КонецЦикла;
	
	Объект.Наименование = УГМК_СлужебныеФункции.СформироватьНаименованиеПоПлавкам( Объект.УГМК_Плавки);
	Объект.Записать();
	
	Сообщить("Создана серия "+Объект.Владелец+" ["+Объект.Код+"] "+Объект.Наименование);
	Возврат( Объект.Ссылка);
КонецФункции

Функция СоздатьПлавкуПоКлючу( КлючПлавки, ДатаПлавки) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//ПлавкаБПОбъект = БизнесПроцессы.УГМК_Плавка.СоздатьБизнесПроцесс();
	//ПлавкаБПОбъект.Дата = ДатаПлавки;
	//ПлавкаБПОбъект.НомерПечи = Лев( КлючПлавки, 2);
	//ПлавкаБПОбъект.НомерПлавки = Прав( КлючПлавки, 3);
	//ПлавкаБПОбъект.КлючПлавки = КлючПлавки;
	//ПлавкаБПОбъект.УстановитьНовыйНомер();
	//
	//ПлавкаБПОбъект.ОбменДанными.Загрузка = Истина;
	//ПлавкаБПОбъект.Записать();
	//Возврат( ПлавкаБПОбъект.Ссылка);
КонецФункции

Процедура РазобратьКлючПлавки( Знач КлючПлавки, Плавка, НомерСлитка=Неопределено) Экспорт
	Поз = Найти( КлючПлавки, "/");
	Если Поз = 0 тогда
		Плавка = КлючПлавки;
		НомерСлитка = 0;
	иначе
		Плавка = Лев( КлючПлавки, Поз-1);
		Попытка
			НомерСлитка = Число( Сред( КлючПлавки, Поз+1));
		исключение
			НомерСлитка = Сред( КлючПлавки, Поз+1);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция НайтиПлавкуПоКлючу( Знач КлючПлавки) Экспорт
	Перем КлючПлавкиПоиск;
	
	РазобратьКлючПлавки( КлючПлавки, КлючПлавкиПоиск);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("КлючПлавки", КлючПлавкиПоиск);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	             |	УГМК_Плавка.Ссылка
	             |ИЗ
	             |	БизнесПроцесс.УГМК_Плавка КАК УГМК_Плавка
	             |ГДЕ
	             |	УГМК_Плавка.КлючПлавки = &КлючПлавки
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_Плавка.Дата УБЫВ";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Возврат( Результат.Ссылка);
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

Функция Старая_ПолучтьТаблицуПодчиненных( Ссылка, Тип=Неопределено, Имя=Неопределено, Основание=Неопределено)
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка", Ссылка);
	
	СтрУсловие = "";
	Если ЗначениеЗаполнено( Тип) тогда
		СтрУсловие = СтрУсловие + "Подчиненные.Ссылка ССЫЛКА Документ."+Тип;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Имя) и ЗначениеЗаполнено( Основание) тогда
		Если ЗначениеЗаполнено( Имя) тогда
			СтрУсловие = СтрУсловие + " и ";
		КонецЕсли;
		
		СтрУсловие = СтрУсловие + "Подчиненные.Ссылка."+Имя+" = &Основание";
		Запр.УстановитьПараметр("Основание", Основание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Имя) тогда
		СтрУсловие = " где " + СтрУсловие;
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	СвязанныеДокументы.Ссылка
	             |ПОМЕСТИТЬ Подчиненные
	             |ИЗ
	             |	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Подчиненные.Ссылка КАК Ссылка,
	             |	ПРЕДСТАВЛЕНИЕ(Подчиненные.Ссылка) КАК ПредставлениеСсылка
	             |ИЗ
	             |	Подчиненные КАК Подчиненные
				 |"+СтрУсловие;
				 
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Функция ПолучтьТаблицуПодчиненных( Ссылка, Тип=Неопределено, Имя=Неопределено, Основание=Неопределено)
	//ОЦМ Мобильная
Возврат Неопределено;
	//Таблица = ПолныеПрава.ПолучитьВыборкуПоКритериюОтбора("СвязанныеДокументы", Ссылка);
	//Если Таблица.Количество() = 0 тогда
	//	Таблица.Колонки.Добавить( "ПредставлениеСсылка", Новый ОписаниеТипов( "Строка"));
	//	Возврат( Таблица);
	//КонецЕсли;
	//
	//Типы = Новый Массив;
	//Для Каждого Строка из Таблица цикл
	//	Тип1 = ТипЗнч( Строка.Ссылка);
	//	Если Типы.Найти( Тип1) = Неопределено тогда
	//		Типы.Добавить( Тип1);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СтрУсловие = "";
	//Если ЗначениеЗаполнено( Тип) тогда
	//	СтрУсловие = СтрУсловие + "Подчиненные.Ссылка ССЫЛКА Документ."+Тип;
	//	тТип = Тип("ДокументСсылка."+Тип);
	//	Если Типы.Найти(тТип) = Неопределено Тогда
	//		Типы.Добавить(тТип);
	//	КонецЕсли; 
	//КонецЕсли;
	//
	//
	//Подчиненные = Новый ТаблицаЗначений;
	//Подчиненные.Колонки.Добавить( "Ссылка", Новый ОписаниеТипов( Типы));
	//Для Каждого Строка из Таблица цикл
	//	НоваяСтрока = Подчиненные.Добавить();
	//	НоваяСтрока.Ссылка = Строка.Ссылка;
	//КонецЦикла;

	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("Подчиненные", Подчиненные);
	//
	//Если ЗначениеЗаполнено( Имя) и ЗначениеЗаполнено( Основание) тогда
	//	Если ЗначениеЗаполнено( Имя) тогда
	//		СтрУсловие = СтрУсловие + " и ";
	//	КонецЕсли;
	//	
	//	СтрУсловие = СтрУсловие + "Подчиненные.Ссылка."+Имя+" = &Основание";
	//	Запр.УстановитьПараметр("Основание", Основание);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено( Имя) тогда
	//	СтрУсловие = " где " + СтрУсловие;
	//КонецЕсли;
	//
	//Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//             |	Подчиненные.Ссылка как Ссылка
	//             |ПОМЕСТИТЬ Подчиненные
	//             |ИЗ
	//             |	&Подчиненные КАК Подчиненные
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	Подчиненные.Ссылка КАК Ссылка,
	//             |	ПРЕДСТАВЛЕНИЕ(Подчиненные.Ссылка) КАК ПредставлениеСсылка
	//             |ИЗ
	//             |	Подчиненные КАК Подчиненные
	//			 |"+СтрУсловие;
	//			 
	//Возврат( Запр.Выполнить().Выгрузить());
	//
КонецФункции

Функция ПроверитьУникальностьВводаНаОсновании( ЭтотОбъект, ПараметрОснование, Отказ, Знач Имя="ДокументОснование") Экспорт
	//ОЦМ Мобильная
		Возврат Неопределено;
	//Если не ЗначениеЗаполнено( ПараметрОснование) тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Мета = ЭтотОбъект.Метаданные();
	//Если Мета.Реквизиты.Найти( Имя) = Неопределено тогда
	//	Если Мета.Реквизиты.Найти( "УГМК_"+Имя) = Неопределено тогда
	//		Возврат Неопределено;
	//	иначе
	//		Имя = "УГМК_"+Имя;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Тз = ПолучтьТаблицуПодчиненных( ПараметрОснование.Ссылка, Мета.Имя, Имя);
	//Если Тз.Количество() = 0 тогда
	//	Возврат( Неопределено);
	//КонецЕсли;
	//
	//ФормаВыбора = ПолучитьОбщуюФорму("УГМК_ВыборСтрокиТаблицыЗначений");
	//ФормаВыбора.ТаблицаВыбора = Тз;

	//ФормаВыбора.ЭлементыФормы.ТаблицаВыбора.СоздатьКолонки();
	//ФормаВыбора.ЭлементыФормы.ТаблицаВыбора.Колонки.Ссылка.Видимость = Ложь;
	//ФормаВыбора.ТекстКнопкиВыбрать = "Открыть документ";
	//ФормаВыбора.ТекстКнопкиЗакрыть = "Ввести новый";
	//ФормаВыбора.ЭлементыФормы.Надпись1.Заголовок = "Найдены документы уже введенные на основании. Открыть существующий?";
	//Строка = ФормаВыбора.ОткрытьМодально();
	//Если Строка = Неопределено тогда
	//	Возврат( Неопределено);
	//КонецЕсли;
	//
	//Отказ = Истина;
	//Строка.Ссылка.ПолучитьФорму().Открыть();
	//Возврат( Строка.Ссылка);
КонецФункции

Функция ПредставлениеПлавкиСоСлитком( СтрокаПлавка, НомерСлитка=0, ТипСтрока=Неопределено) Экспорт
	Если ТипСтрока=Неопределено тогда
		ТипСтрока = Тип("Строка");
	КонецЕсли;
	
	Если ТипЗнч( СтрокаПлавка) = ТипСтрока тогда
		СтрПлавка = СтрокаПлавка;
	иначе
		СтрПлавка = СтрокаПлавка.КлючПлавки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( НомерСлитка) тогда
		СтрПлавка = СтрПлавка + "/"+НомерСлитка;
	КонецЕсли;
	
	Возврат( СтрПлавка);
КонецФункции

Функция СформироватьНаименованиеПоПлавкам( ТаблицаПлавок) Экспорт
	ТипСтрока = Тип("Строка");
	
	Стр = ", ";
	Для каждого Строка из ТаблицаПлавок цикл
		СтрПлавка = ПредставлениеПлавкиСоСлитком( Строка.Плавка, Строка.НомерСлитка, ТипСтрока);
		
		СтрПлавка = СтрПлавка + ", ";
		
		Если Найти( Стр, СтрПлавка) = 0 тогда
			Стр = Стр + СтрПлавка;
		КонецЕсли;
	КонецЦикла;
	
	Если Стр = ", " тогда
		Стр = "";
	иначе
		Стр = Сред( Стр, 3, СтрДлина( Стр)-4);
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

/////////////////////////////////////////////////////////////////////////

Функция ПолучитьПараметрыСтруктурногоПодразделения(Подразделение=Неопределено) Экспорт
	
	//Если НЕ ЗначениеЗаполнено(Подразделение) тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УГМК_СтруктурныеПодразделения.СтруктурноеПодразделение,
	               |	УГМК_СтруктурныеПодразделения.Действует,
	               |	УГМК_СтруктурныеПодразделения.ПрефиксДокументов,
	               |	УГМК_СтруктурныеПодразделения.ОрганизацияПереноса,
	               |	УГМК_СтруктурныеПодразделения.Контрагент,
	               |	УГМК_СтруктурныеПодразделения.Организация,
	               |	УГМК_СтруктурныеПодразделения.КПП,
	               |	УГМК_СтруктурныеПодразделения.КонтролирующееПодразделение
	               |ИЗ
	               |	РегистрСведений.УГМК_СтруктурныеПодразделения КАК УГМК_СтруктурныеПодразделения
	               |ГДЕ
	               |	УГМК_СтруктурныеПодразделения.СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |	И УГМК_СтруктурныеПодразделения.Действует";
	Если ЗначениеЗаполнено(Подразделение) тогда			   
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",Подразделение);
	иначе
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",Константы.УГМК_СтруктурноеПодразделение.Получить());
	КонецЕсли;
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Результат = Неопределено;
	иначе
		Табл= РезультатЗапроса.Выгрузить();
		Результат = Новый Структура();
		Для каждого Колонка Из Табл.Колонки Цикл
			Результат.Вставить(Колонка.Имя,Табл[0][Колонка.Имя]);
		КонецЦикла; 
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПолучитьПараметрСтруктурногоПодразделения()

Функция ТипЗначениеВСтрокуВнутр(Значение) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Возврат ЗначениеВСтрокуВнутр(ТипЗнч(Значение));
КонецФункции

Процедура УстановитьСтруктурноеПодразделениеПоУмолчанию(Объект,Отказ) Экспорт
	Если Не Отказ и Не ЗначениеЗаполнено(Объект.УГМК_Структурноеподразделение) и Не Объект.ЭтоГруппа тогда
		ТекущееПодразделение = Константы.УГМК_СтруктурноеПодразделение.Получить();
		Если Константы.УГМК_ИспользоватьРазделениеПоСтруктурнымПодразделениям.Получить()=Истина и 
			ЗначениеЗаполнено(ТекущееПодразделение) тогда 	
			Объект.УГМК_Структурноеподразделение=ТекущееПодразделение;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Функция СтруктурноеПодразделениеПоУмолчанию() Экспорт
	ТекущееПодразделение = Константы.УГМК_СтруктурноеПодразделение.Получить();
	Если Константы.УГМК_ИспользоватьРазделениеПоСтруктурнымПодразделениям.Получить()=Истина и 
		ЗначениеЗаполнено(ТекущееПодразделение) тогда 	
		Возврат(ТекущееПодразделение);
	иначе
		Возврат(Справочники.Подразделения.ПустаяСсылка());
	КонецЕсли;	
КонецФункции

Функция СтруктурноеПодразделениеПоОрганизации(Организация) Экспорт
		Возврат(Неопределено);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УГМК_СтруктурныеПодразделения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВЫБОР
	               |		КОГДА УГМК_СтруктурныеПодразделения.КонтролирующееПодразделение
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Уровень
	               |ИЗ
	               |	РегистрСведений.УГМК_СтруктурныеПодразделения КАК УГМК_СтруктурныеПодразделения
	               |ГДЕ
	               |	УГМК_СтруктурныеПодразделения.Действует
	               |	И УГМК_СтруктурныеПодразделения.Организация = &Организация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Уровень";
	Запрос.УстановитьПараметр("Организация",Организация);		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 тогда
		Возврат(РезультатЗапроса[0].СтруктурноеПодразделение);
	иначе
		Возврат(Неопределено);
	КонецЕсли;	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Функция ВесоваяЕдиницаИзмерения(Единица) Экспорт 
	
	Если ТипЗнч(Единица) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		тЕдиница = Единица;
	ИначеЕсли ТипЗнч(Единица) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		тЕдиница = Единица.ЕдиницаПоКлассификатору;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	тМассив = УГМК_СлужебныйПовторноеИспользование.ПолучитьВесовыеЕдиницыИзмерения();
	Возврат тМассив.Найти(тЕдиница) <> Неопределено
	
КонецФункции

Функция ЕдиницаИзмерения1Весовая( Организация, Объект) Экспорт
	ДействуетУправление_ЕдиницаИзмерения1 = УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетУправление_ЕдиницаИзмерения1") = Истина;
	
	ЕдиницаИзмерения1Весовая = Истина;
	Если ДействуетУправление_ЕдиницаИзмерения1 тогда
		Данные = Новый Структура("ГруппаПродукции", Объект.ГруппаПродукции); 
		УГМК_ОперативныйУчет.ПолучитьНастройкиТиповДляТаблицы( Данные, Организация, "ГруппаПродукции");
		
		Если не ЗначениеЗаполнено( Объект.ЕдиницаИзмерения1) тогда
			Если Данные.Результат = Неопределено или (не ЗначениеЗаполнено( Данные.Результат.ЕдиницаИзмерения1)) тогда
				Объект.ЕдиницаИзмерения1 = Объект.ЕдиницаИзмерения;
			иначе
				Объект.ЕдиницаИзмерения1 = Данные.Результат.ЕдиницаИзмерения1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Объект.ЕдиницаИзмерения1) и (не УГМК_СлужебныеФункции.ВесоваяЕдиницаИзмерения( Объект.ЕдиницаИзмерения1)) тогда
			ЕдиницаИзмерения1Весовая = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( ЕдиницаИзмерения1Весовая)
КонецФункции

Функция ВесоваяЕдиницаИзмеренияИлиХраненияОстатков(ЕдиницаИзмерения, ЕдиницаХраненияОстатков) Экспорт 
	
	Если ВесоваяЕдиницаИзмерения(ЕдиницаИзмерения) ИЛИ ЕдиницаИзмерения = ЕдиницаХраненияОстатков Тогда 
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕдиницыМест_ПолучитьКоэффициентПересчетаИзСправочника(ХарактеристикаНоменклатуры, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
    
	Запрос.Текст =   "ВЫБРАТЬ ПЕРВЫЕ 1
	|	УГМК_КоэффициентИзКГ.ХарактеристикаНоменклатуры,
	|	УГМК_КоэффициентИзКГ.ЕдиницаИзмерения,
	|	УГМК_КоэффициентИзКГ.Коэффициент,
	|	УГМК_КоэффициентИзКГ.Перерасчет
	|ИЗ
	|	Справочник.УГМК_КоэффициентИзКГ КАК УГМК_КоэффициентИзКГ
	|ГДЕ
	|	УГМК_КоэффициентИзКГ.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И УГМК_КоэффициентИзКГ.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И УГМК_КоэффициентИзКГ.ПометкаУдаления = ЛОЖЬ";
             
	РезЗапроса = Запрос.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.Коэффициент;	
	Иначе
		Возврат Неопределено;
    КонецЕсли;
	
КонецФункции

Функция ИспользоватьЕдиницуИзмеренияМест(Дата) Экспорт 
	
	ДатаЕдМест = УГМК_СлужебныеФункции.ПолучитьНастройку("ЕдиницаИзмеренияМест_ДатаНачалаИспользования");
	Если ЗначениеЗаполнено(ДатаЕдМест) И ТипЗнч(ДатаЕдМест) = Тип("Дата") Тогда
		Возврат ДатаЕдМест <= Дата;
	Иначе
		Возврат Ложь;
	КонецЕсли;  
	
КонецФункции

Процедура ПересчитатьЕдиницыИзмеренияМест_Количество( СтрокаТабличнойЧасти, ДокументОбъект, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	
	тСоотв = УГМК_СлужебныйПовторноеИспользование.ЕдиницыМест_ПересчитыватьКоличествоМест();
	
	Если тСоотв[МетаданныеДокумента] <> ВРег(ИмяТабличнойЧасти) Тогда 
		Возврат; // Пересчитываем количество только в определенных документах
	ИначеЕсли не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
		Возврат;
	иначеЕсли ТипЗнч( СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") тогда
		Возврат;
	иначеЕсли не ЗначениеЗаполнено( СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест) тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЕдиницыИзмеренияМест_КоличествоМест( СтрокаТабличнойЧасти, ДокументОбъект, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	
	тСоотв = УГМК_СлужебныйПовторноеИспользование.ЕдиницыМест_ПересчитыватьКоличествоМест();
	
	Если тСоотв[МетаданныеДокумента] <> ВРег(ИмяТабличнойЧасти) Тогда 
		Возврат; // Пересчитываем количество только в определенных документах
	ИначеЕсли не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
		Возврат;
	иначеЕсли ТипЗнч( СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") тогда
		Возврат;
	иначеЕсли не ЗначениеЗаполнено( СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест) тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) И ВесоваяЕдиницаИзмерения(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Ложь Тогда
		тКоэф = ЕдиницыМест_ПолучитьКоэффициентПересчетаИзСправочника(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		Если ВесоваяЕдиницаИзмерения(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) = Ложь Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков
		КонецЕсли; 
		Если ЗначениеЗаполнено(тКоэф) Тогда
			//СтрокаТабличнойЧасти.Коэффициент = тКоэф;
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество * тКоэф * СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент;
		КонецЕсли;  
	ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И ВесоваяЕдиницаИзмерения(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) = Ложь Тогда
		тКоэф = ЕдиницыМест_ПолучитьКоэффициентПересчетаИзСправочника(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест);
		Если ЗначениеЗаполнено(тКоэф) Тогда
			//СтрокаТабличнойЧасти.Коэффициент = тКоэф;
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / тКоэф;
		КонецЕсли;  
	Иначе
		// Обе единицы измерения весовые
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьДатуНачалаИспользованияЕдиницИзмеренияМест() Экспорт 
	
	ДатаЕдМест = УГМК_СлужебныеФункции.ПолучитьНастройку("ЕдиницаИзмеренияМест_ДатаНачалаИспользования");
	Если ЗначениеЗаполнено(ДатаЕдМест) И ТипЗнч("ДатаЕдМест") = Тип("Дата") Тогда
		Возврат ДатаЕдМест
	Иначе
		Возврат '00010101'
	КонецЕсли;  
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Функция ОтладочноеСообщение(ТекстСообщения_) Экспорт
	//ОЦМ Мобильная
	ТекстСообщения = ""+ТекущаяДата()+" "+ТекстСообщения_;
	//ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
	Сообщить(ТекстСообщения);
КонецФункции

Процедура ОтладочноеСообщениеПользователю( Знач ТекстСообщения, Статус = Неопределено, Заголовок = "", РасшифровкаСообщения = Неопределено, СтрокаРодитель = Неопределено, РаскрытьСообщение = Истина, ЭтоСообщениеОбОшибке = Ложь) Экспорт
	Если УГМК_СлужебныйПовторноеИспользование.ПолучитьНастройку("Отладка_СообщатьОшибки") = Истина тогда
		ОбщегоНазначения.Сообщение( ТекстСообщения, Статус, Заголовок, РасшифровкаСообщения, СтрокаРодитель, РаскрытьСообщение, ЭтоСообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтруктуруПараметровИзготовления() Экспорт
	Возврат( Новый Структура("Приоритет,Продукция,ХарактеристикаПродукции,Подразделение,Спецификация,Заказ,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,КоличествоПродукции,Количество,КоличествоОтходов,ТочкаМаршрута,ДопускИзготовления,ДопускЗаготовки,ПодгруппаТрудоемкости,ОбъединениеПоТехЦепочке,ОбъединениеПоПрокату,БарКод,НоменклатураПредставление,ХарактеристикаНоменклатурыПредставление,НормативПриемкиСТК"));
КонецФункции

Функция ПолучитьНаименованиеШаблонаПодгруппыТрудоемкости( РаботаемСПодгруппой) Экспорт
	Возврат( СокрЛП( РаботаемСПодгруппой)+" шаблон подгруппы трудоемкости");
КонецФункции

Функция МодифицироватьСпецификациюПоДаннымВыходныхИзделий( СпецификацияОбъект, ДатаЗаполнения=Неопределено, Подразделение=Неопределено) Экспорт
	Если ДатаЗаполнения = Неопределено тогда
		ДатаЗаполнения = ТекущаяДата();
	КонецЕсли;
	
	Если Подразделение = Неопределено тогда
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("ВыходноеИзделие");
	ДанныеЗаполнения.Колонки.Добавить("ПараметрыИзготовления");
	ДанныеЗаполнения.Колонки.Добавить("ДанныеНайдены");
	
	НайденыВсе = Истина;
	Для каждого Строка из СпецификацияОбъект.ВыходныеИзделия цикл
		НоваяСтрока = ДанныеЗаполнения.Добавить();
		НоваяСтрока.ВыходноеИзделие = Строка;
		НоваяСтрока.ПараметрыИзготовления = ПолучитьСтруктуруПараметровИзготовления();
		
		Параметры = НоваяСтрока.ПараметрыИзготовления;
		Параметры.Продукция = Строка.Номенклатура;
		Параметры.ХарактеристикаПродукции = Строка.ХарактеристикаНоменклатуры;
		Параметры.Спецификация = СпецификацияОбъект.Ссылка;
		
		НоваяСтрока.ДанныеНайдены = УГМК_СлужебныеФункции.ПодобратьМатериалПоПараметрамИзготовления( Параметры, ДатаЗаполнения, Подразделение);
		Если не НоваяСтрока.ДанныеНайдены тогда
			НайденыВсе = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если не НайденыВсе тогда
		СтрОш = "";
		Для каждого Строка из ДанныеЗаполнения цикл
			Если не Строка.ДанныеНайдены тогда
				СтрОш = СтрОш + "Строка ["+Строка( Строка.ВыходноеИзделие.НомерСтроки)+"] "+Строка( Строка.ВыходноеИзделие.Номенклатура)+Строка( Строка.ВыходноеИзделие.ХарактеристикаНоменклатуры)+";";
			КонецЕсли;
		КонецЦикла;
		
		Сообщить( "Не найдены параметры изготовления у продукции: "+СтрОш+Символы.ПС+
			"Укажите параметры изготовления (документ Нормы производства) и повторите заполнение.");
		Возврат( Ложь);
	КонецЕсли;
	
	ОчиститьОтНоменклатуры( СпецификацияОбъект.ИсходныеКомплектующие, Истина);
	ОчиститьОтНоменклатуры( СпецификацияОбъект.ВозвратныеОтходы, Ложь);
	
	Для каждого Строка из ДанныеЗаполнения цикл
		Параметры = Строка.ПараметрыИзготовления;
		ЕдиницаПродукции = Параметры.ЕдиницаИзмерения;
		
		СтрокаПродукции = Строка.ВыходноеИзделие;
		СтрокаПродукции.Количество = Параметры.КоличествоПродукции;
		СтрокаПродукции.ЕдиницаИзмерения = ЕдиницаПродукции;
		СтрокаПродукции.ТочкаМаршрута = Параметры.ТочкаМаршрута;
		
		СтрокаМатериала = СпецификацияОбъект.ИсходныеКомплектующие.Добавить();
		СтрокаМатериала.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		СтрокаМатериала.Номенклатура = Параметры.Номенклатура;
		СтрокаМатериала.ХарактеристикаНоменклатуры = Параметры.ХарактеристикаНоменклатуры;
		СтрокаМатериала.Количество = Параметры.Количество;
		СтрокаМатериала.ЕдиницаИзмерения = НайтиЕдиницуИзмеренияПоПараметрам( СтрокаМатериала.Номенклатура, ЕдиницаПродукции);
		СтрокаМатериала.СтатьяЗатрат = СтрокаМатериала.Номенклатура.СтатьяЗатрат;
		СтрокаМатериала.ВидВоспроизводства = СтрокаМатериала.Номенклатура.ВидВоспроизводства;
		СтрокаМатериала.ОсновноеСырье = Истина;
		СтрокаМатериала.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
		//СтрокаМатериала.КлючСвязи
		СтрокаМатериала.ТочкаМаршрута = Параметры.ТочкаМаршрута;
		
		СтрокаОтхода = СпецификацияОбъект.ВозвратныеОтходы.Добавить();
		СтрокаОтхода.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		СтрокаОтхода.Номенклатура = ПолучитьНоменклатуру_Отход( СтрокаПродукции.Номенклатура);
		СтрокаОтхода.Количество = Параметры.КоличествоОтходов;
		СтрокаОтхода.ЕдиницаИзмерения = НайтиЕдиницуИзмеренияПоПараметрам( СтрокаОтхода.Номенклатура, ЕдиницаПродукции);
		СтрокаОтхода.СтатьяЗатрат = СтрокаОтхода.Номенклатура.СтатьяЗатрат;
		СтрокаОтхода.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
		//СтрокаОтхода.КлючСвязи
		СтрокаОтхода.ТочкаМаршрута = Параметры.ТочкаМаршрута;
		
		Потери = СтрокаМатериала.Количество-СтрокаПродукции.Количество-СтрокаОтхода.Количество;
		Если Потери <> 0 тогда
			СтрокаОтхода = СпецификацияОбъект.ВозвратныеОтходы.Добавить();
			СтрокаОтхода.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			СтрокаОтхода.Номенклатура = ПолучитьНоменклатуру_Угар( СтрокаПродукции.Номенклатура);
			СтрокаОтхода.Количество = Потери;
			СтрокаОтхода.ЕдиницаИзмерения = НайтиЕдиницуИзмеренияПоПараметрам( СтрокаОтхода.Номенклатура, ЕдиницаПродукции);
			СтрокаОтхода.СтатьяЗатрат = СтрокаОтхода.Номенклатура.СтатьяЗатрат;
			СтрокаОтхода.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			//СтрокаОтхода.КлючСвязи = 
			СтрокаОтхода.ТочкаМаршрута = Параметры.ТочкаМаршрута; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Истина);
КонецФункции

Функция ПолучитьДействующийШаблонПодгруппыТрудоемкости( Подгруппа, Момент, Подразделение = Неопределено) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата",Момент);
	Запр.УстановитьПараметр("ВидНоменклатуры", УГМК_СлужебныеФункции.ПолучитьНастройку("ВидНоменклатуры_ШаблонСпецификации"));
	Запр.УстановитьПараметр("ПодгруппаТрудоемкости", Подгруппа);
	Запр.УстановитьПараметр("Подразделение", ?(Подразделение = Неопределено, Справочники.Подразделения.ПустаяСсылка(), Подразделение));
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	МАКСИМУМ(УГМК_ПараметрыИзготовленияСрезПоследних.Период) КАК Период,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция.Наименование КАК ШаблонНаименование,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |ПОМЕСТИТЬ Шаблоны
	             |ИЗ
	             |	РегистрСведений.УГМК_ПараметрыИзготовления.СрезПоследних(
	             |			&Дата,
	             |			Продукция.ВидНоменклатуры = &ВидНоменклатуры
	             |				И ПодгруппаТрудоемкости = &ПодгруппаТрудоемкости) КАК УГМК_ПараметрыИзготовленияСрезПоследних
	             |ГДЕ
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости = &ПодгруппаТрудоемкости
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция.Наименование,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	1 КАК Приритет,
	             |	ВнЗапрос.Регистратор,
	             |	ВнЗапрос.ПодгруппаТрудоемкости,
	             |	ВнЗапрос.Подразделение,
	             |	ВнЗапрос.Продукция,
	             |	ВнЗапрос.ХарактеристикаПродукции
	             |ПОМЕСТИТЬ Поприоритетам
	             |ИЗ
	             |	(ВЫБРАТЬ ПЕРВЫЕ 1
	             |		Шаблоны.Регистратор КАК Регистратор,
	             |		Шаблоны.ПодгруппаТрудоемкости КАК ПодгруппаТрудоемкости,
	             |		Шаблоны.Подразделение КАК Подразделение,
	             |		Шаблоны.Продукция КАК Продукция,
	             |		Шаблоны.ХарактеристикаПродукции КАК ХарактеристикаПродукции
	             |	ИЗ
	             |		Шаблоны КАК Шаблоны
	             |	ГДЕ
	             |		Шаблоны.Подразделение = &Подразделение
	             |	
	             |	УПОРЯДОЧИТЬ ПО
	             |		Шаблоны.Период УБЫВ,
	             |		Шаблоны.Регистратор УБЫВ) КАК ВнЗапрос
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	2,
	             |	ВнЗапрос.Регистратор,
	             |	ВнЗапрос.ПодгруппаТрудоемкости,
	             |	ВнЗапрос.Подразделение,
	             |	ВнЗапрос.Продукция,
	             |	ВнЗапрос.ХарактеристикаПродукции
	             |ИЗ
	             |	(ВЫБРАТЬ ПЕРВЫЕ 1
	             |		Шаблоны.Регистратор КАК Регистратор,
	             |		Шаблоны.ПодгруппаТрудоемкости КАК ПодгруппаТрудоемкости,
	             |		Шаблоны.Подразделение КАК Подразделение,
	             |		Шаблоны.Продукция КАК Продукция,
	             |		Шаблоны.ХарактеристикаПродукции КАК ХарактеристикаПродукции
	             |	ИЗ
	             |		Шаблоны КАК Шаблоны
	             |	
	             |	УПОРЯДОЧИТЬ ПО
	             |		Шаблоны.Период УБЫВ,
	             |		Шаблоны.Регистратор УБЫВ) КАК ВнЗапрос
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ ПЕРВЫЕ 1
	             |	Поприоритетам.Приритет КАК Приритет,
	             |	Поприоритетам.ПодгруппаТрудоемкости,
	             |	Поприоритетам.Подразделение,
	             |	Поприоритетам.Продукция,
	             |	Поприоритетам.ХарактеристикаПродукции
	             |ИЗ
	             |	Поприоритетам КАК Поприоритетам
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Приритет УБЫВ";
	Результат = Запр.Выполнить().Выбрать();
	ДляВозврата = Неопределено;
	Если Результат.Следующий() тогда
		ДляВозврата = Новый Структура("Продукция,ХарактеристикаПродукции,Подразделение");
		ДляВозврата.Продукция = Результат.Продукция;
		ДляВозврата.ХарактеристикаПродукции = Результат.ХарактеристикаПродукции;
		ДляВозврата.Подразделение = Результат.Подразделение;
	КонецЕсли;
	
	Возврат( ДляВозврата)
КонецФункции

Функция ОпределитьСпецификациюПоШаблонуПодгруппыТрудоемкости( Подгруппа, Момент, Подразделение = Неопределено, Знач УГМК_ТипСпецификации=Неопределено) Экспорт
	Если не ЗначениеЗаполнено( Подгруппа) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Результат = ПолучитьДействующийШаблонПодгруппыТрудоемкости( Подгруппа, Момент, Подразделение);
	Если Результат <> Неопределено тогда
		Возврат( УГМК_ОперативныйУчет.ОпределитьСпецификациюПоУмолчанию( Результат.Продукция, Результат.ХарактеристикаПродукции, Момент, Подразделение, УГМК_ТипСпецификации, Ложь));
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

Процедура УдалитьКолонку( Колонки, ИмяКолонки)
	Колонка = Колонки.Найти( ИмяКолонки);
	Если Колонка <> Неопределено тогда
		Колонки.Удалить( Колонка);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДеревоПодгруппТрудоемкости( ПодгруппаТрудоемкости=Неопределено, НачальнаяСтрока = Неопределено) Экспорт
	Перем Рез, Строка0, Строка1, Строка2, Строка3;
	
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ВЫРАЗИТЬ(ПОДСТРОКА(УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости, 1, 2) КАК СТРОКА(10)) КАК Группа,
	             |	ВЫРАЗИТЬ(ПОДСТРОКА(УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости, 1, 4) КАК СТРОКА(10)) КАК Подгруппа,
	             |	ВЫРАЗИТЬ(ПОДСТРОКА(УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости, 1, 6) КАК СТРОКА(10)) КАК Сплав,
	             |	УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости,
	             |	УГМК_ГруппыТрудоемкостиГалактики.НаименованиеПодгруппы
	             |ПОМЕСТИТЬ Данные
	             |ИЗ
	             |	РегистрСведений.УГМК_ГруппыТрудоемкостиГалактики КАК УГМК_ГруппыТрудоемкостиГалактики
	             |ГДЕ
	             |	ПОДСТРОКА(УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости, 6, 1) <> "" ""
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Данные.Группа КАК Группа,
	             |	НаименованиеГрупп.НаименованиеПодгруппы КАК ГруппаНаименование,
	             |	Данные.Подгруппа КАК Подгруппа,
	             |	НаименованиеПодгрупп.НаименованиеПодгруппы КАК ПодгруппаНаименование,
	             |	Данные.Сплав КАК Сплав,
	             |	НаименованиеСплав.НаименованиеПодгруппы КАК СплавНаименование,
	             |	Данные.ПодгруппаТрудоемкости КАК ПодгруппаТрудоемкости,
	             |	Данные.НаименованиеПодгруппы
	             |ИЗ
	             |	Данные КАК Данные
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГруппыТрудоемкостиГалактики КАК НаименованиеГрупп
	             |		ПО Данные.Группа = НаименованиеГрупп.ПодгруппаТрудоемкости
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГруппыТрудоемкостиГалактики КАК НаименованиеПодгрупп
	             |		ПО Данные.Подгруппа = НаименованиеПодгрупп.ПодгруппаТрудоемкости
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГруппыТрудоемкостиГалактики КАК НаименованиеСплав
	             |		ПО Данные.Сплав = НаименованиеСплав.ПодгруппаТрудоемкости
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			Данные.Сплав КАК Сплав,
	             |			СУММА(1) КАК Количество
	             |		ИЗ
	             |			Данные КАК Данные
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Данные.Сплав) КАК КоличествоПодгрупп
	             |		ПО Данные.ПодгруппаТрудоемкости = КоличествоПодгрупп.Сплав
	             |ГДЕ
	             |	(КоличествоПодгрупп.Количество ЕСТЬ NULL 
	             |			ИЛИ КоличествоПодгрупп.Количество = 1)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПодгруппаТрудоемкости
	             |ИТОГИ ПО
	             |	Группа,
	             |	Подгруппа,
	             |	Сплав";
				 
	Рез = Запр.Выполнить().Выгрузить( ОбходРезультатаЗапроса.ПоГруппировкам);
	Рез.Колонки.Вставить( 0, "Код",,"Код", 20);
	Рез.Колонки.Вставить( 1, "Наименование",,"Наименование", 50);
	Для каждого Строка0 из Рез.Строки цикл
		Для каждого Строка1 из Строка0.Строки цикл
			Для каждого Строка2 из Строка1.Строки цикл
				Для каждого Строка3 из Строка2.Строки цикл
					Строка0.Код = Строка3.Группа;
					Строка0.Наименование = Строка3.ГруппаНаименование;
					Строка1.Код = Строка3.Подгруппа;
					Строка1.Наименование = Строка3.ПодгруппаНаименование;
					Строка2.Код = Строка3.Сплав;
					Строка2.Наименование = Строка3.СплавНаименование;
					Строка3.Код = Строка3.ПодгруппаТрудоемкости;
					Строка3.Наименование = Строка3.НаименованиеПодгруппы;
					
					Если ПодгруппаТрудоемкости = Строка3.ПодгруппаТрудоемкости тогда
						НачальнаяСтрока = Строка3;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьКолонку( Рез.Колонки, "Группа");
	УдалитьКолонку( Рез.Колонки, "ГруппаНаименование");
	УдалитьКолонку( Рез.Колонки, "Подгруппа");
	УдалитьКолонку( Рез.Колонки, "ПодгруппаНаименование");
	УдалитьКолонку( Рез.Колонки, "Сплав");
	УдалитьКолонку( Рез.Колонки, "СплавНаименование");
	УдалитьКолонку( Рез.Колонки, "ПодгруппаТрудоемкости");
	УдалитьКолонку( Рез.Колонки, "НаименованиеПодгруппы");
	
	Возврат( Рез);
КонецФункции


Функция ПолучитьПараметрыИзготовленияДляПродукции( СтрокаТабличнойЧасти, НаДату=Неопределено, Подразделение=Неопределено, МинимальныйПриоритет=1000) Экспорт
	Если СтрокаТабличнойЧасти = Неопределено тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата", НаДату);
	Запр.УстановитьПараметр("Продукция", СтрокаТабличнойЧасти.Продукция);
	
	Характеристики = Новый Массив;
	Характеристики.Добавить( СтрокаТабличнойЧасти.ХарактеристикаПродукции);
	Характеристики.Добавить( Неопределено);
	Характеристики.Добавить( Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Запр.УстановитьПараметр("ХарактеристикаПродукции", СтрокаТабличнойЧасти.ХарактеристикаПродукции);
	Запр.УстановитьПараметр("ХарактеристикаПродукцииНаименование", СтрокаТабличнойЧасти.ХарактеристикаПродукции.Наименование);
	Запр.УстановитьПараметр("Характеристики", Характеристики);
	Если Подразделение = Неопределено тогда
		Запр.УстановитьПараметр("Подразделение", Справочники.Подразделения.ПолучитьСсылку());
	Иначе
		Запр.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено( СтрокаТабличнойЧасти.Заказ) тогда
		Запр.УстановитьПараметр("Заказ", СтрокаТабличнойЧасти.Заказ);
	иначе
		Запр.УстановитьПараметр("Заказ", Неопределено);
	КонецЕсли;
	Запр.УстановитьПараметр("Неопределено", Неопределено);

	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ВЫБОР
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = &ХарактеристикаПродукции
	             |			ТОГДА 1
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции.Наименование = &ХарактеристикаПродукцииНаименование
	             |			ТОГДА 1.5
	             |		ИНАЧЕ 2
	             |	КОНЕЦ КАК ПриоритетХарактеристики,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Период КАК Период,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Активность,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение КАК Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Спецификация,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Заказ КАК Заказ,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Номенклатура,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаНоменклатуры,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ЕдиницаИзмерения,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Коэффициент,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоПродукции,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Количество,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоОтходов,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ТочкаМаршрута,
	             |	ПРЕДСТАВЛЕНИЕ(УГМК_ПараметрыИзготовленияСрезПоследних.ДопускИзготовления) КАК ДопускИзготовления,
	             |	ПРЕДСТАВЛЕНИЕ(УГМК_ПараметрыИзготовленияСрезПоследних.ДопускЗаготовки) КАК ДопускЗаготовки,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоТехЦепочке,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоПрокату,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.БарКод,
	             |	УГМК_ГруппыТрудоемкостиГалактики.НаименованиеПодгруппы,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор КАК Регистратор,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор.МоментВремени КАК РегистраторМоментВремени,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Номенклатура.Представление КАК НоменклатураПредставление,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.НормативПриемкиСТК
	             |ИЗ
	             |	РегистрСведений.УГМК_ПараметрыИзготовления.СрезПоследних(
	             |			&Дата,
	             |			Активность
	             |				И (Спецификация = ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
	             |					ИЛИ Спецификация.УГМК_ТипСпецификации = ЗНАЧЕНИЕ(Справочник.УГМК_ТипыСпецификаций.ПустаяСсылка))
	             |				И Продукция = &Продукция
	             |				И (ХарактеристикаПродукции В (&Характеристики)
	             |					ИЛИ ХарактеристикаПродукции.Наименование = &ХарактеристикаПродукцииНаименование)) КАК УГМК_ПараметрыИзготовленияСрезПоследних
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ГруппыТрудоемкостиГалактики КАК УГМК_ГруппыТрудоемкостиГалактики
	             |		ПО УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости = УГМК_ГруппыТрудоемкостиГалактики.ПодгруппаТрудоемкости
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ПриоритетХарактеристики,
	             |	Период УБЫВ,
	             |	РегистраторМоментВремени УБЫВ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Подразделения.Ссылка
	             |ИЗ
	             |	Справочник.Подразделения КАК Подразделения
	             |ГДЕ
	             |	Подразделения.Ссылка В ИЕРАРХИИ(&Подразделение)";			 
	МассивРез = Запр.ВыполнитьПакет();
	Рез = МассивРез[ 0].Выгрузить();
	Подр = МассивРез[ 1].Выгрузить();
	ПустоеПодразделение = Справочники.Подразделения.ПустаяСсылка();
	
	КоэффициентИзмененияПриоритета = 1;
	
	Если Рез.Количество() = 0 тогда
		Результат = Неопределено;
	иначе
		Результат = Новый Структура("Приоритет,Продукция,ХарактеристикаПродукции,Подразделение,Спецификация,Заказ,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,КоличествоПродукции,Количество,КоличествоОтходов,ТочкаМаршрута,ДопускИзготовления,ДопускЗаготовки,ПодгруппаТрудоемкости,НаименованиеПодгруппы,ОбъединениеПоТехЦепочке,ОбъединениеПоПрокату,БарКод,НоменклатураПредставление,ХарактеристикаНоменклатурыПредставление,НормативПриемкиСТК");
		Рез.Колонки.Добавить("Приоритет");
		ПриоритетХарактеристики = Рез[ 0].ПриоритетХарактеристики;
		Для каждого Строка из Рез цикл
			Если Строка.ПриоритетХарактеристики <> ПриоритетХарактеристики тогда // уже обработаны строки с более подходящей Характеристикой
				Строка.Приоритет = 1000;
			иначеЕсли Подр.Найти( Строка.Подразделение) <> Неопределено тогда
				Если Строка.Заказ = СтрокаТабличнойЧасти.Заказ тогда
					Строка.Приоритет = 0;	// Совпадает Заказ и Подразделение
				иначеЕсли не ЗначениеЗаполнено( Строка.Заказ) тогда
					Строка.Приоритет = 20;	// БЕЗ Заказа и Совпадает Подразделение
				иначе
					Строка.Приоритет = 35;	// Любой Заказ и Совпадает Подразделение
				КонецЕсли;
			иначеЕсли Строка.Заказ = СтрокаТабличнойЧасти.Заказ тогда
				Строка.Приоритет = 10;  	// Совпадает Заказ и любое Подразделение
			иначеЕсли не (ЗначениеЗаполнено( Строка.Заказ) или ЗначениеЗаполнено( Строка.Подразделение)) тогда
				Строка.Приоритет = 25;      // БЕЗ Заказа и БЕЗ Подразделения
			иначеЕсли не ЗначениеЗаполнено( Строка.Заказ) тогда
				Строка.Приоритет = 30;      // БЕЗ Заказа и любое Подразделения
			иначе
				Строка.Приоритет = 36;		// Любой Заказ и Любое Подразделение
			КонецЕсли;
			Если Строка.ПриоритетХарактеристики = 1.5 тогда // Совпадает Номенклатура и Наименование Характеристики
				Строка.Приоритет = Строка.Приоритет * 5;
				КоэффициентИзмененияПриоритета = КоэффициентИзмененияПриоритета * 5;
			КонецЕсли;
			Если Строка.ПриоритетХарактеристики = 2 тогда // Совпадает Номенклатура и пустая Характеристика
				Строка.Приоритет = Строка.Приоритет * 10;
				КоэффициентИзмененияПриоритета = КоэффициентИзмененияПриоритета * 10;
			КонецЕсли;
		КонецЦикла;
		Рез.Сортировать("Приоритет, Период убыв");
		ЗаполнитьЗначенияСвойств( Результат, Рез[ 0]);
		
		Если Результат.Приоритет/КоэффициентИзмененияПриоритета > МинимальныйПриоритет Тогда
			Результат.Спецификация = Неопределено;
			Результат.Заказ = Неопределено;
			Результат.Номенклатура = Неопределено;
			Результат.ХарактеристикаНоменклатуры = Неопределено;
			Результат.ЕдиницаИзмерения = Неопределено;
			Результат.Коэффициент = Неопределено;
			Результат.КоличествоПродукции = Неопределено;
			Результат.Количество = Неопределено;
			Результат.КоличествоОтходов = Неопределено;
			Результат.ТочкаМаршрута = Неопределено;
			Результат.ДопускИзготовления = Неопределено;
			Результат.ДопускЗаготовки = Неопределено;
			Результат.ПодгруппаТрудоемкости = Неопределено;
			Результат.НоменклатураПредставление = Неопределено;
			Результат.ХарактеристикаНоменклатурыПредставление = Неопределено;
			Результат.НормативПриемкиСТК = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьПараметрыИзготовленияДляТаблицыПродукции( ТаблицаПродукции, Подразделение=Неопределено, НаДату=Неопределено, МинимальныйПриоритет=1000, Имена=Неопределено) Экспорт
	Если Имена = Неопределено тогда
		Имена = Новый Структура;
		Имена.Вставить("Продукция","Продукция");
		Имена.Вставить("ХарактеристикаПродукции","ХарактеристикаПродукции");
		Имена.Вставить("Заказ","Заказ");
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата", НаДату);
	
	Если ТаблицаПродукции.Колонки.Найти("ПараметрыИзготовления") = Неопределено тогда
		ТаблицаПродукции.Колонки.Добавить("ПараметрыИзготовления");
	КонецЕсли;
	
	ПараметрыПоиска = Новый ТаблицаЗначений;
	ПараметрыПоиска.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 5));
	ПараметрыПоиска.Колонки.Добавить("Продукция", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПараметрыПоиска.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//ПараметрыПоиска.Колонки.Добавить("ХарактеристикаПродукцииНаименование", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки( Метаданные.Справочники.ХарактеристикиНоменклатуры.ДлинаНаименования));
	ПараметрыПоиска.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя,ДокументСсылка.ЗаказНаПроизводство"));
	
	ИндексСтроки = 0;
	Для каждого Строка из ТаблицаПродукции цикл
		НоваяСтрока = ПараметрыПоиска.Добавить();
		НоваяСтрока.ИндексСтроки = ИндексСтроки;

		НоваяСтрока.Продукция = Строка[ Имена.Продукция];
		НоваяСтрока.ХарактеристикаПродукции = Строка[ Имена.ХарактеристикаПродукции];
		//НоваяСтрока.ХарактеристикаПродукцииНаименование = НоваяСтрока.ХарактеристикаПродукции.Наименование;
		
		Если ЗначениеЗаполнено( Строка[ Имена.Заказ]) тогда
			НоваяСтрока.Заказ = Строка[ Имена.Заказ];
		иначе
			НоваяСтрока.Заказ = Неопределено;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Запр.УстановитьПараметр("ПараметрыПоиска", ПараметрыПоиска);
	Если Подразделение = Неопределено тогда
		Запр.УстановитьПараметр("Подразделение", Справочники.Подразделения.ПолучитьСсылку());
	Иначе
		Запр.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ПараметрыПоиска.ИндексСтроки КАК ИндексСтроки,
	             |	ПараметрыПоиска.Продукция КАК Продукция,
	             |	ПараметрыПоиска.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	             |	ПараметрыПоиска.Заказ КАК Заказ
	             |ПОМЕСТИТЬ ПараметрыПоиска1
	             |ИЗ
	             |	&ПараметрыПоиска КАК ПараметрыПоиска
	             |
	             |;
	             |ВЫБРАТЬ
	             |	ПараметрыПоиска.ИндексСтроки КАК ИндексСтроки,
	             |	ПараметрыПоиска.Продукция КАК Продукция,
	             |	ПараметрыПоиска.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	             |	ПараметрыПоиска.ХарактеристикаПродукции.Наименование КАК ХарактеристикаПродукцииНаименование,
	             |	ПараметрыПоиска.Заказ КАК Заказ
	             |ПОМЕСТИТЬ ПараметрыПоиска
	             |ИЗ
	             |	ПараметрыПоиска1 КАК ПараметрыПоиска
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Продукция,
	             |	ХарактеристикаПродукции,
	             |	ХарактеристикаПродукцииНаименование,
	             |	Заказ
	             |;
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	ВЫБОР
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.Продукция ЕСТЬ NULL 
	             |			ТОГДА 2000
	             |		КОГДА ПараметрыПоиска.Заказ = УГМК_ПараметрыИзготовленияСрезПоследних.Заказ
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение = &Подразделение
				 |				И ПараметрыПоиска.ХарактеристикаПродукции = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |			ТОГДА 0
	             |		КОГДА ПараметрыПоиска.Заказ = УГМК_ПараметрыИзготовленияСрезПоследних.Заказ
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение = &Подразделение
				 |				И ПараметрыПоиска.ХарактеристикаПродукцииНаименование = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции.Наименование
	             |			ТОГДА 1
	             |		КОГДА ПараметрыПоиска.Заказ = УГМК_ПараметрыИзготовленияСрезПоследних.Заказ
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение <> &Подразделение
	             |			ТОГДА 10
	             |		КОГДА (УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = НЕОПРЕДЕЛЕНО
	             |				ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение = &Подразделение
	             |			ТОГДА 20
	             |		КОГДА (УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = НЕОПРЕДЕЛЕНО
	             |				ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	             |			ТОГДА 25
	             |		КОГДА (УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = НЕОПРЕДЕЛЕНО
	             |				ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	             |				И УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение <> &Подразделение
	             |			ТОГДА 30
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение = &Подразделение
	             |			ТОГДА 35
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение <> &Подразделение
	             |			ТОГДА 36
	             |		ИНАЧЕ 1000
	             |	КОНЕЦ * ВЫБОР
	             |		КОГДА ПараметрыПоиска.ХарактеристикаПродукции = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |			ТОГДА 1
	             |		КОГДА ПараметрыПоиска.Продукция = УГМК_ПараметрыИзготовленияСрезПоследних.Продукция
	             |				И ПараметрыПоиска.ХарактеристикаПродукцииНаименование = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции.Наименование
	             |			ТОГДА 2
	             |		КОГДА ПараметрыПоиска.Продукция = УГМК_ПараметрыИзготовленияСрезПоследних.Продукция
	             |				И (УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = НЕОПРЕДЕЛЕНО
	             |					ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	             |			ТОГДА 10
	             |		ИНАЧЕ 10000
	             |	КОНЕЦ КАК Приоритет,
	             |	ВЫБОР
	             |		КОГДА ПараметрыПоиска.ХарактеристикаПродукции = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |			ТОГДА 1
	             |		КОГДА ПараметрыПоиска.Продукция = УГМК_ПараметрыИзготовленияСрезПоследних.Продукция
	             |				И ПараметрыПоиска.ХарактеристикаПродукцииНаименование = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции.Наименование
	             |			ТОГДА 2
	             |		КОГДА ПараметрыПоиска.Продукция = УГМК_ПараметрыИзготовленияСрезПоследних.Продукция
	             |				И (УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = НЕОПРЕДЕЛЕНО
	             |					ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	             |			ТОГДА 10
	             |		ИНАЧЕ 10000
	             |	КОНЕЦ КАК КоэффициентИзмененияПриоритета,
	             |	ПараметрыПоиска.ИндексСтроки КАК ИндексСтроки,
	             |	ПараметрыПоиска.Продукция КАК Продукция,
	             |	ПараметрыПоиска.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	             |	ПараметрыПоиска.Заказ КАК Заказ,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Период,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор КАК Регистратор,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Регистратор.МоментВремени КАК РегистраторМоментВремени,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Активность,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция КАК ПродукцияСрез,
	             |	ВЫБОР
	             |		КОГДА УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = НЕОПРЕДЕЛЕНО
	             |			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	             |		ИНАЧЕ УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |	КОНЕЦ КАК ХарактеристикаПродукцииСрез,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение КАК Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Спецификация,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Заказ КАК ЗаказСрез,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Номенклатура,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаНоменклатуры,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ЕдиницаИзмерения,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Коэффициент,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоПродукции,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Количество,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.КоличествоОтходов,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ТочкаМаршрута,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ДопускИзготовления КАК ДопускИзготовления,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ДопускЗаготовки КАК ДопускЗаготовки,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ПодгруппаТрудоемкости,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоТехЦепочке,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ОбъединениеПоПрокату,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.БарКод
	             |ПОМЕСТИТЬ ВсеПараметры
	             |ИЗ
	             |	ПараметрыПоиска КАК ПараметрыПоиска
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ПараметрыИзготовления.СрезПоследних(
	             |				&Дата,
	             |				Продукция В
	             |					(ВЫБРАТЬ
	             |						ПараметрыПоиска.Продукция
	             |					ИЗ
	             |						ПараметрыПоиска КАК ПараметрыПоиска)) КАК УГМК_ПараметрыИзготовленияСрезПоследних
	             |		ПО ПараметрыПоиска.Продукция = УГМК_ПараметрыИзготовленияСрезПоследних.Продукция
	             |			И (ПараметрыПоиска.ХарактеристикаПродукцииНаименование = УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции.Наименование
	             |				ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = НЕОПРЕДЕЛЕНО
	             |				ИЛИ УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВсеПараметры.ИндексСтроки КАК ИндексСтроки,
	             |	ВсеПараметры.Приоритет КАК Приоритет,
	             |	ВсеПараметры.КоэффициентИзмененияПриоритета КАК КоэффициентИзмененияПриоритета,
	             |	ВсеПараметры.Продукция,
	             |	ВсеПараметры.ХарактеристикаПродукции,
	             |	ВсеПараметры.Заказ,
	             |	ВсеПараметры.Период КАК Период,
	             |	ВсеПараметры.Регистратор КАК Регистратор,
	             |	ВсеПараметры.РегистраторМоментВремени КАК РегистраторМоментВремени,
	             |	ВсеПараметры.Активность,
	             |	ВсеПараметры.ПродукцияСрез,
	             |	ВсеПараметры.ХарактеристикаПродукцииСрез,
	             |	ВсеПараметры.Подразделение,
	             |	ВсеПараметры.Спецификация,
	             |	ВсеПараметры.ЗаказСрез,
	             |	ВсеПараметры.Номенклатура,
	             |	ВсеПараметры.Номенклатура.Наименование КАК НоменклатураПредставление,
	             |	ВсеПараметры.ХарактеристикаНоменклатуры,
	             |	ВсеПараметры.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыПредставление,
	             |	ВсеПараметры.ЕдиницаИзмерения,
	             |	ВсеПараметры.Коэффициент,
	             |	ВсеПараметры.КоличествоПродукции,
	             |	ВсеПараметры.Количество,
	             |	ВсеПараметры.КоличествоОтходов,
	             |	ВсеПараметры.ТочкаМаршрута,
	             |	ПРЕДСТАВЛЕНИЕ(ВсеПараметры.ДопускИзготовления) КАК ДопускИзготовления,
	             |	ПРЕДСТАВЛЕНИЕ(ВсеПараметры.ДопускЗаготовки) КАК ДопускЗаготовки,
	             |	ВсеПараметры.ПодгруппаТрудоемкости,
	             |	ВсеПараметры.ОбъединениеПоТехЦепочке,
	             |	ВсеПараметры.ОбъединениеПоПрокату,
	             |	ВсеПараметры.БарКод
	             |ИЗ
	             |	ВсеПараметры КАК ВсеПараметры
	             |ГДЕ
	             |	(ВсеПараметры.Продукция, ВсеПараметры.ХарактеристикаПродукции, ВсеПараметры.Заказ, ВсеПараметры.Приоритет) В
	             |			(ВЫБРАТЬ
	             |				ВсеПараметры.Продукция,
	             |				ВсеПараметры.ХарактеристикаПродукции,
	             |				ВсеПараметры.Заказ,
	             |				МИНИМУМ(ВсеПараметры.Приоритет) КАК Приоритет
	             |			ИЗ
	             |				ВсеПараметры КАК ВсеПараметры
	             |			СГРУППИРОВАТЬ ПО
	             |						ВсеПараметры.Продукция,
	             |				ВсеПараметры.ХарактеристикаПродукции,
	             |				ВсеПараметры.Заказ)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ИндексСтроки,
	             |	Приоритет,
	             |	Период УБЫВ,
	             |	РегистраторМоментВремени УБЫВ
	             |ИТОГИ ПО
	             |	ИндексСтроки";
	

	Рез = Запр.Выполнить().Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Рез.Следующий() Цикл
		Выборка = Рез.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() тогда
			Строка = ТаблицаПродукции[ Выборка.ИндексСтроки];
			Если Выборка.Приоритет/Выборка.КоэффициентИзмененияПриоритета <= МинимальныйПриоритет тогда
				Результат = ПолучитьСтруктуруПараметровИзготовления();
				ЗаполнитьЗначенияСвойств( Результат, Выборка);
				Строка.ПараметрыИзготовления = Результат;
			иначеЕсли Выборка.Приоритет/Выборка.КоэффициентИзмененияПриоритета <= 1000 тогда
				Результат = ПолучитьСтруктуруПараметровИзготовления();
				ЗаполнитьЗначенияСвойств( Результат, Выборка, "Приоритет,Продукция,ХарактеристикаПродукции,Подразделение,ОбъединениеПоТехЦепочке,ОбъединениеПоПрокату,БарКод");
				Строка.ПараметрыИзготовления = Результат;
			иначе
				Строка.ПараметрыИзготовления = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( ТаблицаПродукции);
КонецФункции

Процедура ДобавитьПодгруппуТрудоемкостиКЗаголовку( Форма, Данные, Момент, Подразделение = Неопределено) Экспорт
	Перем ФормаЗаголовок, ПрефиксЗаголовка;
	
	ПрефиксЗаголовка = " ПТ: ";
	ФормаЗаголовок = Форма.Заголовок;
	Поз = Найти( ФормаЗаголовок, ПрефиксЗаголовка);
	Если Поз > 0 тогда
		ФормаЗаголовок = Лев( ФормаЗаголовок, Поз-1);
	КонецЕсли;
	
	Форма.Заголовок = ФормаЗаголовок;
	Если ЗначениеЗаполнено( Данные.Номенклатура) тогда
		Параметры = Новый Структура("Продукция,ХарактеристикаПродукции,Заказ");
		Параметры.Продукция = Данные.Номенклатура;
		Если ЗначениеЗаполнено( Данные.ХарактеристикаНоменклатуры) тогда
			Параметры.ХарактеристикаПродукции = Данные.ХарактеристикаНоменклатуры;
		иначе
			Параметры.ХарактеристикаПродукции = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		НайденыеПараметры = УГМК_СлужебныеФункции.ПолучитьПараметрыИзготовленияДляПродукции( Параметры, Момент, Подразделение);
		Если НайденыеПараметры <> Неопределено тогда
			Форма.Заголовок = ФормаЗаголовок + ПрефиксЗаголовка + НайденыеПараметры.ПодгруппаТрудоемкости+" "+НайденыеПараметры.НаименованиеПодгруппы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДопТребованияМеняющиеПараметрыИзготовления( НоваяСтрока, ДокументУстановкиНорм, ПропускатьДопТребования, ТЗИнфоТребования) Экспорт
	ДокументУстановкиНорм.УбратьДопТребованияНеМеняющиеПараметрыИзготовления( ТЗИнфоТребования, ПропускатьДопТребования);

	ТЗИнфоТребования.Сортировать("ВидДопТребования,ЗначениеДопТребования");
	
	ТекИнфоТребования = "";
	Для каждого Значение из ТЗИнфоТребования цикл
		Если Значение.ВидДопТребования.Наименование <> "" ИЛИ Значение.ЗначениеДопТребования <> "" Тогда
			ТекИнфоТребования = ТекИнфоТребования + Значение.ВидДопТребования.Наименование 
								+ ?(Значение.ЗначениеДопТребования = "", "", ": ")
								+ Значение.ЗначениеДопТребования + "; ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат( ТекИнфоТребования);
КонецФункции

Функция ПолучитьКлючХраненияДопПараметров( НоваяСтрока)
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Стр = ЗначениеВСтрокуВнутр( НоваяСтрока.Продукция)+"#"+ЗначениеВСтрокуВнутр( НоваяСтрока.ХарактеристикаПродукции)+"#";
	//
	//Если ЗначениеЗаполнено(  НоваяСтрока.Заказ) тогда
	//	Стр = Стр + ЗначениеВСтрокуВнутр( НоваяСтрока.Заказ);
	//КонецЕсли;
	//
	//Стр = Стр + "#";
	//
	//Возврат( Стр);
КонецФункции

Функция ПолучитьЗаказССовпадающимиДопТребованиями( НоваяСтрока, ДокументУстановкиНормМоментВремени, ПустоеПодразделение, ТекИнфоТребования, ДокументУстановкиНорм, ПропускатьДопТребования)
	Перем Запр, Заказы, ПолучитьПараметры;
	
	ПолучитьПараметры = Новый Структура( "Продукция,ХарактеристикаПродукции,ХарактеристикаПродукцииНаименование,Заказ",НоваяСтрока.Продукция,НоваяСтрока.ХарактеристикаПродукции,НоваяСтрока.ХарактеристикаПродукции.Наименование,Неопределено);
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Дата", ДокументУстановкиНормМоментВремени);
	Запр.УстановитьПараметр("Продукция", НоваяСтрока.Продукция);
	Запр.УстановитьПараметр("ХарактеристикаПродукции",НоваяСтрока.ХарактеристикаПродукции);
	Запр.УстановитьПараметр("ХарактеристикаПродукцииНаименование",НоваяСтрока.ХарактеристикаПродукции.Наименование);
	Запр.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Заказ,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Период,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Подразделение,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.Продукция,
	             |	УГМК_ПараметрыИзготовленияСрезПоследних.ХарактеристикаПродукции
	             |ИЗ
	             |	РегистрСведений.УГМК_ПараметрыИзготовления.СрезПоследних(
	             |			&Дата,
	             |			Продукция = &Продукция
	             |				И ХарактеристикаПродукции.Наименование = &ХарактеристикаПродукцииНаименование) КАК УГМК_ПараметрыИзготовленияСрезПоследних";
				 
	Заказы = Запр.Выполнить().Выгрузить();
	Заказы.Колонки.Добавить("Подходит");
	Заказы.ЗаполнитьЗначения( Ложь, "Подходит");
	Для каждого Строка из Заказы цикл
		ТекИнфоТребования1 = "";
		Если ЗначениеЗаполнено( Строка.Заказ) тогда
			ТЗИнфоТребования = УГМК_СлужебныеФункции.ПолучитьДопТребования( Строка.Заказ, Строка.Продукция, Строка.ХарактеристикаПродукции);
			ТекИнфоТребования1 = ПолучитьДопТребованияМеняющиеПараметрыИзготовления( Строка, ДокументУстановкиНорм, ПропускатьДопТребования, ТЗИнфоТребования);
			Строка.Подходит = ТекИнфоТребования = ТекИнфоТребования1;
		КонецЕсли;
	КонецЦикла;
	
	ПодходящийЗаказ = Неопределено;
	Заказы.Сортировать("Подходит убыв, Период Убыв");
	Если Заказы.Количество() > 0 и Заказы[0].Подходит тогда
		ПодходящийЗаказ = Заказы[0].Заказ;
	КонецЕсли;
	
	Возврат( ПодходящийЗаказ);
КонецФункции

Процедура ПолучитьПараметрыИзготовленияСУчетомДопТребований( Источник, Имена, ДатаСреза = Неопределено, Результат = Неопределено) Экспорт
	// с учетом доп требований
	//Возврат;
	
	//Документ для использования Экспортных процедур
	ДокументУстановкиНорм = Документы.УГМК_НормыПроизводства.СоздатьДокумент();
	ДокументУстановкиНорм.Дата = КонецДня( ДатаСреза);
	ДокументУстановкиНорм.УстановитьСсылкуНового( Документы.УГМК_НормыПроизводства.ПолучитьСсылку());
	
	ДокументУстановкиНормМоментВремени = ДокументУстановкиНорм.МоментВремени();
	
	ФормаДок = ДокументУстановкиНорм.ПолучитьФорму();
	
	ДокументУстановкиНорм.ЗаполнитьВидыДопСвойств( ФормаДок.ПропускатьДопТребования, ДокументУстановкиНорм.Категория_НеИзменяетПараметрыИзготовления);
	ПропускатьДопТребования = ФормаДок.ПропускатьДопТребования;
	
	ПустойЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	ПустоеПодразделение = Справочники.Подразделения.ПустаяСсылка();
	
	ИменаПолей = "НомерСтроки";
	Мета = ДокументУстановкиНорм.Метаданные();
	Для каждого Поле из Мета.ТабличныеЧасти.Изготовление.Реквизиты цикл
		ИменаПолей = ИменаПолей+","+Поле.Имя;
	КонецЦикла;
	ВыходГодногоПодгрупп = Новый Соответствие;
	
	Источник10 = Источник.СкопироватьКолонки();
	Источник10.Колонки.Добавить("_ТекИнфоТребования_");
	Источник10.Колонки.Добавить("_СтрокаИсточника_");
	Источник10.Колонки.Добавить("_СтрокаДокументаНорм_");
	
	ВсегоСтрок = Источник.Количество();
	Для Каждого Строка из Источник цикл
		#Если Клиент тогда
		Если ВсегоСтрок%50 = 0 тогда
			Состояние("ОбработатьДополнительныеПараметры (доп.требования) "+Строка( ВсегоСтрок));
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ВсегоСтрок = ВсегоСтрок - 1;
		
		ТЗИнфоТребования = УГМК_СлужебныеФункции.ПолучитьДопТребования( Строка[ Имена.Заказ], Строка[ Имена.Продукция], Строка[ Имена.ХарактеристикаПродукции]);
		Строка.ПредставлениеДопТребований = ПреобразоватьТаблицуДопТребованийВСтроку( ТЗИнфоТребования);
		
		НоваяСтрока = ДокументУстановкиНорм.Изготовление.Добавить();
		НоваяСтрока.Продукция = Строка[ Имена.Продукция];
		НоваяСтрока.ХарактеристикаПродукции = Строка[ Имена.ХарактеристикаПродукции];
		НоваяСтрока.Заказ = Строка[ Имена.Заказ];
		НоваяСтрока.ЕдиницаИзмерения = Строка[ Имена.ЕдиницаИзмерения];
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.КоличествоПродукции = Строка[ Имена.Количество];
		
		НоваяСтрока10 = Источник10.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрока10, Строка);
		
		НоваяСтрока10._ТекИнфоТребования_ = ПолучитьДопТребованияМеняющиеПараметрыИзготовления( НоваяСтрока, ДокументУстановкиНорм, ПропускатьДопТребования, ТЗИнфоТребования);
		НоваяСтрока10._СтрокаИсточника_ = Строка;
		НоваяСтрока10._СтрокаДокументаНорм_ = НоваяСтрока;
		
		Если не ЗначениеЗаполнено( НоваяСтрока10._ТекИнфоТребования_) тогда
			НоваяСтрока10[ Имена.Заказ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент тогда
	Состояние("Получение данных установленых на продукцию (точное соответствие)");
	#КонецЕсли
	УГМК_СлужебныеФункции.ПолучитьПараметрыИзготовленияДляТаблицыПродукции( Источник10, ПустоеПодразделение, КонецДня( ДокументУстановкиНорм.Дата)+1, 10, Имена);
	
	Источник30 = Источник10.СкопироватьКолонки();
	
	ВсегоСтрок = Источник10.Количество();
	Для каждого НоваяСтрока из Источник10 цикл
		#Если Клиент тогда
		Если ВсегоСтрок%50 = 0 тогда
			Состояние("ОбработатьДополнительныеПараметры (с учетом требований) "+Строка( ВсегоСтрок));
		КонецЕсли;
		#КонецЕсли
		ВсегоСтрок = ВсегоСтрок - 1;
		
		ПараметрыИзготовления = НоваяСтрока.ПараметрыИзготовления;
		СтрокаДокументаНорм = НоваяСтрока._СтрокаДокументаНорм_;
		
		Если (ПараметрыИзготовления = Неопределено) или (не ЗначениеЗаполнено( ПараметрыИзготовления.Номенклатура)) тогда // НЕ найден точный по заказу
			ПодходящийЗаказ = ПолучитьЗаказССовпадающимиДопТребованиями( СтрокаДокументаНорм, ДокументУстановкиНормМоментВремени, ПустоеПодразделение, НоваяСтрока._ТекИнфоТребования_, ДокументУстановкиНорм, ПропускатьДопТребования);
			Если ПодходящийЗаказ = Неопределено тогда
				Сообщить("не обнаружено подходящего Заказа для "+СтрокаДокументаНорм.Продукция+" ["+СтрокаДокументаНорм.ХарактеристикаПродукции+"] ("+НоваяСтрока._ТекИнфоТребования_+")");
			иначе
				НоваяСтрока30 = Источник30.Добавить();
				ЗаполнитьЗначенияСвойств( НоваяСтрока30, НоваяСтрока);
				НоваяСтрока30._СтрокаИсточника_ = НоваяСтрока;
				НоваяСтрока30[ Имена.Заказ] = ПодходящийЗаказ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент тогда
	Состояние("Получение данных установленых на продукцию с совпадающими доп.требованиями");
	#КонецЕсли
	УГМК_СлужебныеФункции.ПолучитьПараметрыИзготовленияДляТаблицыПродукции( Источник30, ПустоеПодразделение, КонецДня( ДокументУстановкиНорм.Дата)+1, 30, Имена);
	Для каждого НоваяСтрока30 из Источник30 цикл
		НоваяСтрока30._СтрокаИсточника_.ПараметрыИзготовления = НоваяСтрока30.ПараметрыИзготовления;
	КонецЦикла;
	Источник30 = Неопределено;
	
	ВыходГодногоПодгрупп = Новый Соответствие;
	СтрПодгруппа = "";
	
	Если Результат = Неопределено тогда
		Результат = "ДопускЗаготовки,ДопускИзготовления,ХарактеристикаНоменклатуры,ХарактеристикаНоменклатурыПредставление,ЕдиницаИзмерения,ТочкаМаршрута,ОбъединениеПоТехЦепочке,ЗаправочныйКоэффициент";
	КонецЕсли;
	
	РезультатСтрока = Ложь;
	Если ТипЗнч( Результат) = Тип("Строка") тогда
		РезультатСтрока = Истина;
		Результат = ВРЕГ(","+Результат+",");
		ЕстьЗаправочныйКоэффициент = Найти( Результат, ",ЗАПРАВОЧНЫЙКОЭФФИЦИЕНТ,") > 0;
		Если ЕстьЗаправочныйКоэффициент тогда
			Результат = СтрЗаменить( Результат, ",ЗАПРАВОЧНЫЙКОЭФФИЦИЕНТ,", ",");
		КонецЕсли;
		Пока Найти( Результат, ",,") > 0 цикл
			Результат = СтрЗаменить( Результат, ",,", ",");
		КонецЦикла;
		
		Результат = Сред( Результат, 2, СтрДлина( Результат)-2);
	иначе
		ЕстьЗаправочныйКоэффициент = Результат.Свойство( "ЗАПРАВОЧНЫЙКОЭФФИЦИЕНТ");
	КонецЕсли;
	
	ВсегоСтрок = Источник10.Количество();
	Для каждого СтрокаСПараметрами из Источник10 цикл
		#Если Клиент тогда
		Если ВсегоСтрок%50 = 0 тогда
			Состояние("Заполнение параметров "+СтрПодгруппа+" "+Строка( ВсегоСтрок));
		КонецЕсли;
		#КонецЕсли
		ВсегоСтрок = ВсегоСтрок - 1;
		
		Строка = СтрокаСПараметрами._СтрокаИсточника_;
		ПараметрыИзготовления = СтрокаСПараметрами.ПараметрыИзготовления;
				
		Если (ПараметрыИзготовления <> Неопределено) и (ПараметрыИзготовления.Номенклатура <> Неопределено) тогда
			Если ЗначениеЗаполнено( ПараметрыИзготовления.ПодгруппаТрудоемкости) тогда
				СтруктураПолей = ВыходГодногоПодгрупп.Получить( ПараметрыИзготовления.ПодгруппаТрудоемкости);
				Если СтруктураПолей = Неопределено тогда
					СтрПодгруппа = "Подгруппа "+ПараметрыИзготовления.ПодгруппаТрудоемкости;
					#Если Клиент тогда
					Состояние("Заполнение параметров "+СтрПодгруппа+" "+Строка( ВсегоСтрок));
					#КонецЕсли
					
					СтруктураПолей = Новый Структура( ИменаПолей);
					ЗаполнитьЗначенияСвойств( СтруктураПолей, ПараметрыИзготовления);
					//ДокументУстановкиНорм.ЗаменаВыходаГодногоПоПодгруппе( ДокументУстановкиНорм, СтруктураПолей);
					ДокументУстановкиНорм.ПодобратьМатериал( СтруктураПолей,,, Ложь, ПараметрыИзготовления);
					ВыходГодногоПодгрупп.Вставить( ПараметрыИзготовления.ПодгруппаТрудоемкости, СтруктураПолей);
				КонецЕсли;
				
				Если ЗначениеЗаполнено( СтруктураПолей.Спецификация) тогда
					ЗаполнитьЗначенияСвойств( ПараметрыИзготовления, СтруктураПолей, "Спецификация,КоличествоПродукции,Количество,КоличествоОтходов");
				КонецЕсли;
			КонецЕсли;
			
			Если РезультатСтрока тогда
				ЗаполнитьЗначенияСвойств( Строка, ПараметрыИзготовления, Результат);
				Если ЕстьЗаправочныйКоэффициент тогда
					Строка.ЗАПРАВОЧНЫЙКОЭФФИЦИЕНТ = ?(ЗначениеЗаполнено( ПараметрыИзготовления.Количество), ПараметрыИзготовления.Количество,1)/?(ЗначениеЗаполнено( ПараметрыИзготовления.КоличествоПродукции),ПараметрыИзготовления.КоличествоПродукции,1);
				КонецЕсли;
			иначе
				Результат.ПодгруппаТрудоемкости = ПараметрыИзготовления.ПодгруппаТрудоемкости;
				Результат.баркод = ПараметрыИзготовления.БарКод;
				Результат.ЗАПРАВОЧНЫЙКОЭФФИЦИЕНТ = ?(ЗначениеЗаполнено( ПараметрыИзготовления.Количество), ПараметрыИзготовления.Количество,1)/?(ЗначениеЗаполнено( ПараметрыИзготовления.КоличествоПродукции),ПараметрыИзготовления.КоличествоПродукции,1);
				Результат.ПРЕСС = ПараметрыИзготовления.ТочкаМаршрута;
				Результат.РазмерДопускНаДиаметрИДлину = ПараметрыИзготовления.ДопускИзготовления;
				Результат.ЗАГОТОВКА = ПараметрыИзготовления.ДопускЗаготовки;
				Результат.ПризнакОбъединенияПоТехнЦепочкам = ПараметрыИзготовления.ОбъединениеПоТехЦепочке;
				Результат.ПризнакОбъединенияПоПрокату = ПараметрыИзготовления.ОбъединениеПоПрокату;
				
				Если ЗначениеЗаполнено( ПараметрыИзготовления.ХарактеристикаНоменклатуры) тогда
					Результат.Слиток = ПараметрыИзготовления.ХарактеристикаНоменклатурыПредставление;
				иначе
					Результат.Слиток = "";
				КонецЕсли;
				
				Результат.ГруппаМЦ = Лев( Результат.ПодгруппаТрудоемкости,4);
				
				ЗаполнитьЗначенияСвойств( Строка, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Источник10 = Неопределено;
	
	#Если Клиент тогда
	Состояние("");
	#КонецЕсли
КонецПроцедуры

Функция ДопускДиаметра( СлитокДиаметр, Допуски) Экспорт
	Если не ЗначениеЗаполнено( СлитокДиаметр) тогда
		Возврат( 0);
	КонецЕсли;
	
	Допуск = 0;
	Для каждого Строка из Допуски цикл
		Если Строка.СлитокДиаметр > СлитокДиаметр Тогда
			Прервать;
		КонецЕсли;
		
		Допуск = Строка.Допуск;
	КонецЦикла;
	
	Возврат( Допуск);
КонецФункции

Функция КоличествоДляРасчетаСлитков( Строка, Имя) Экспорт
	Возврат( Строка[ Имя]);
	//Возврат( Макс( 0, Строка[ Имя]));
КонецФункции

Процедура ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, Имя, Заполнение = Неопределено) Экспорт
	Если не ПараметрыРасчета.Свойство( Имя) тогда
		ПараметрыРасчета.Вставить( Имя, Заполнение);
	иначе
		ПараметрыРасчета[ Имя] = Заполнение;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДопуск( Допуски, Диаметр, Допуск)
	НовСтрока = Допуски.Добавить();
	НовСтрока.СлитокДиаметр = Диаметр;
	НовСтрока.Допуск = Допуск;
КонецПроцедуры

Процедура ЗаполнитьДопускиДиаметровЦилиндрическихСлитков( Допуски) Экспорт
	ДобавитьДопуск( Допуски, 145, -6);
	ДобавитьДопуск( Допуски, 175, -6);
	ДобавитьДопуск( Допуски, 200, -7);
	ДобавитьДопуск( Допуски, 250, -8);
	ДобавитьДопуск( Допуски, 300, -8);
	ДобавитьДопуск( Допуски, 350, -10);
	ДобавитьДопуск( Допуски, 400, -10);
	ДобавитьДопуск( Допуски, 475, -10);
	ДобавитьДопуск( Допуски, 510, -10);
	ДобавитьДопуск( Допуски, 540, -10);
КонецПроцедуры

Процедура ЦилиндрическийВесСлиткаСУчетомКратности( ПараметрыРасчета, Допуски, Имя="КоличествоПродукции") Экспорт
	// Входящие параменты
	// "Слиток"
	// "КоличествоПродукции"
	// "УдельныйВес"
	// "ЗаправочныйКоэффициент"
	
	// Расчитывается
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "СлитокДиаметр", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "СлитокДлина", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "ВесСлитковЗаказ", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "СлитокДиаметрДопуск", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "ВесСлитка", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "КоличествоМестСлитковЗаказ", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "КоличествоМестСлитковИзготовление", 0);
	ПроверитьНаличиеКлючаСтруктуры( ПараметрыРасчета, "ВесСлитковИзготовление", 0);
	
	Строка = ПараметрыРасчета;
	
	ИмяСлитка = Врег( СокрЛП( Строка.Слиток));
	Поз = Найти( ИмяСлитка, "Х");
	Если Поз = 0 тогда
		Поз = Найти( ИмяСлитка, "X");
	КонецЕсли;
	
	Если Поз > 0 тогда
		Попытка
			Строка.СлитокДиаметр = Число( Лев( ИмяСлитка, Поз-1));
		исключение
		КонецПопытки;
		
		СтрДлина = Сред( ИмяСлитка, Поз+1);
		Поз = Найти( СтрДлина, " ");
		Если Поз > 0 тогда
			СтрДлина = Лев( СтрДлина, Поз-1);
		КонецЕсли;
		
		Попытка
			Строка.СлитокДлина = Число( СтрДлина);
		исключение
		КонецПопытки;
	КонецЕсли;
	
	Строка.ВесСлитковЗаказ = Окр( КоличествоДляРасчетаСлитков( Строка, Имя)*Строка.ЗаправочныйКоэффициент, 3);
	Если ЗначениеЗаполнено( Строка.СлитокДиаметр) и ЗначениеЗаполнено( Строка.СлитокДлина) тогда
		Строка.СлитокДиаметрДопуск = ДопускДиаметра( Строка.СлитокДиаметр, Допуски);
		Диаметр = Строка.СлитокДиаметр+Строка.СлитокДиаметрДопуск;
		Строка.ВесСлитка = Окр( Строка.УдельныйВес*3.14159265*Диаметр*Диаметр*Строка.СлитокДлина/4/1000000, 3);
	КонецЕсли;
	Если Строка.ВесСлитка <> 0 тогда
		Строка.КоличествоМестСлитковЗаказ = Окр( Строка.ВесСлитковЗаказ/Строка.ВесСлитка, 3);
		Если Строка.КоличествоМестСлитковЗаказ >= 0 тогда
			Строка.КоличествоМестСлитковИзготовление = Цел( Строка.КоличествоМестСлитковЗаказ+0.9999);
		иначе
			Строка.КоличествоМестСлитковИзготовление = Цел( Строка.КоличествоМестСлитковЗаказ-0.9999);
		КонецЕсли;
		Строка.ВесСлитковИзготовление = Окр( Строка.ВесСлитка*Строка.КоличествоМестСлитковИзготовление, 3);
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьОтНоменклатуры( ТабЧасть, ЭтоМатериалы)
	ДляУдаления = Новый Массив;
	Для каждого Строка из ТабЧасть цикл
		Если (не ЗначениеЗаполнено( Строка.ВидНорматива)) или (Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура) тогда
			ДляУдаления.Добавить( Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка из ДляУдаления цикл
		ТабЧасть.Удалить( Строка);
	КонецЦикла;
КонецПроцедуры

Функция НайтиЕдиницуИзмеренияПоПараметрам( ДляНоменклатуры, ЕдиницаПродукции)
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Владелец", ДляНоменклатуры);
	Запр.УстановитьПараметр("ЕдиницаПоКлассификатору", ЕдиницаПродукции.ЕдиницаПоКлассификатору);
	Запр.УстановитьПараметр("Коэффициент", ЕдиницаПродукции.Коэффициент);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЕдиницыИзмерения.Ссылка
	             |ИЗ
	             |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	             |ГДЕ
	             |	ЕдиницыИзмерения.Владелец = &Владелец
	             |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
	             |	И ЕдиницыИзмерения.Коэффициент = &Коэффициент
	             |	И (НЕ ЕдиницыИзмерения.ПометкаУдаления)";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Возврат( Результат.Ссылка);
	КонецЕсли;
	
	НовыйЭлемент = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств( НовыйЭлемент, ЕдиницаПродукции,,"Владелец,Код");
	НовыйЭлемент.УстановитьНовыйКод();
	НовыйЭлемент.Записать();
	
	Возврат( НовыйЭлемент.Ссылка);
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Процедуры и функции связанные с доп требованиями

// Режим
//		0 - Доп требования по номенклатуре и характеристике
//		1 - Общие доп требования
//		2 - Режим 0 и 1 вместе
Функция ПолучитьДопТребования(ЗаказПокупателя, Номенклатура = Неопределено, ХарактеристикаНоменклатуры = Неопределено, 
				Дата = '00010101', Знач Режим = 0, ПорядокУпорядочивания = "ВОЗР", ВидДопТребования = Неопределено, ВнутренняяИнформация = Ложь) Экспорт 
	
	Если ТипЗнч(Режим) <> Тип("Число") Тогда
		Режим = 0
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номенклатура) = Ложь Тогда
		Режим = 1
	КонецЕсли; 
	
	//Пресников
	Если не ЗначениеЗаполнено( ЗаказПокупателя) тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ЗаказСсылка");
		Результат.Колонки.Добавить("КлючСтроки");
		Результат.Колонки.Добавить("ВидДопТребования");
		Результат.Колонки.Добавить("ЗначениеДопТребования");
		Результат.Колонки.Добавить("ИдентификаторВидаДопТребования");
		Результат.Колонки.Добавить("Признак");
		
		Возврат( Результат);
	КонецЕсли;
	//Пресников
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ВидДопТребования) = Истина Тогда
		Если ТипЗнч(ВидДопТребования) = Тип("Строка") Тогда
			ТекстВидДопТребования = "ВидДопТребования.УГМК_Идентификатор = &Идентификатор";
			Запрос.УстановитьПараметр("Идентификатор", ВидДопТребования);
		Иначе
			ТекстВидДопТребования = "ВидДопТребования = &ВидДопТребования";
			Запрос.УстановитьПараметр("ВидДопТребования", ВидДопТребования);
		КонецЕсли; 
	Иначе
		Если ВнутренняяИнформация = Ложь Тогда // По умолчанию исключаем внутреннюю информацию
			ТекстВидДопТребования = "ЕСТЬNULL(ВидДопТребования.УГМК_ВнутренняяИнформация, ЛОЖЬ) = ЛОЖЬ"; 
		Иначе
			ТекстВидДопТребования = "ИСТИНА";
		КонецЕсли; 
	КонецЕсли;  
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ВидДопТребования,
	               |	ВложенныйЗапрос.ЗначениеДопТребования,
	               |	ВложенныйЗапрос.Признак,
	               |	ВложенныйЗапрос.ВидДопТребования.УГМК_Идентификатор КАК ИдентификаторВидаДопТребования
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		УГМК_ДопТребованияСрезПоследних.Актуальность КАК Актуальность,
	               |		УГМК_ДопТребованияСрезПоследних.ВидДопТребования КАК ВидДопТребования,
	               |		УГМК_ДопТребованияСрезПоследних.НомерДопТребования КАК НомерДопТребования,
	               |		УГМК_ДопТребованияСрезПоследних.ЗначениеДопТребования КАК ЗначениеДопТребования,
	               |		2 КАК Признак
	               |	ИЗ
	               |		РегистрСведений.УГМК_ДопТребования.СрезПоследних(
	               |				&Дата,
	               |				" + ТекстВидДопТребования + "
	               |					И (&Режим <> 1
	               |						И ЗаказПокупателя = &ЗаказПокупателя
	               |						И Номенклатура = &Номенклатура
	               |						И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	               |						И Документ.Проведен = ИСТИНА)) КАК УГМК_ДопТребованияСрезПоследних
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		УГМК_ДопТребованияСрезПоследних.Актуальность,
	               |		УГМК_ДопТребованияСрезПоследних.ВидДопТребования,
	               |		1000 + УГМК_ДопТребованияСрезПоследних.НомерДопТребования,
	               |		УГМК_ДопТребованияСрезПоследних.ЗначениеДопТребования,
	               |		1
	               |	ИЗ
	               |		РегистрСведений.УГМК_ДопТребования.СрезПоследних(
	               |				&Дата,
	               |				" + ТекстВидДопТребования + "
	               |					И (&Режим <> 0
	               |						И ЗаказПокупателя = &ЗаказПокупателя
	               |						И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |						И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |						И Документ.Проведен = ИСТИНА)) КАК УГМК_ДопТребованияСрезПоследних) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВложенныйЗапрос.Актуальность = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.Признак " + ПорядокУпорядочивания + ",
	               |	ВложенныйЗапрос.НомерДопТребования
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	
	Запрос.УстановитьПараметр("Режим", Режим);
	
 	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТаблицуДопТребованийВСтроку( ДопТребования, ПереводСтроки = Ложь, Знач ЯзыкДанных = Неопределено) Экспорт

	СтрокаДопТребований = "";
	
	Для Каждого тСтр Из ДопТребования Цикл
		
		ЕстьВидДТ = ЗначениеЗаполнено(тСтр.ВидДопТребования.Наименование);
		ЕстьЗначДТ = ЗначениеЗаполнено(тСтр.ЗначениеДопТребования);
		
		Если ЕстьВидДТ Тогда
			стрВидДопТребования = ПолучитьПредставлениеРекизитаПоЯзыкуДанных(тСтр.ВидДопТребования, "Наименование", ЯзыкДанных);
		КонецЕсли;
		
		Если ЕстьВидДТ И ЕстьЗначДТ Тогда
			СтрокаДопТребований = СтрокаДопТребований + ?(ПереводСтроки = Истина, Символы.ПС, "") + стрВидДопТребования + ": " + тСтр.ЗначениеДопТребования + "; ";
		ИначеЕсли ЕстьВидДТ Тогда 
			СтрокаДопТребований = СтрокаДопТребований + ?(ПереводСтроки = Истина, Символы.ПС, "") + стрВидДопТребования + "; ";
		ИначеЕсли ЕстьЗначДТ Тогда 
			СтрокаДопТребований = СтрокаДопТребований + ?(ПереводСтроки = Истина, Символы.ПС, "") + тСтр.ЗначениеДопТребования + "; ";
		КонецЕсли; 
		
	КонецЦикла;
	
	Пока Найти(СтрокаДопТребований, "  ") > 0 Цикл СтрокаДопТребований = СтрЗаменить(СтрокаДопТребований, "  ", " "); КонецЦикла; 
	
	Возврат СокрЛП(СтрокаДопТребований);
	
КонецФункции

// Режим
//		0 - Доп требования по номенклатуре и характеристике
//		1 - Общие доп требования
//		2 - Режим 0 и 1 вместе
Функция СформироватьНадписьДопТребования(ЗаказПокупателя, Номенклатура = Неопределено, ХарактеристикаНоменклатуры = Неопределено, Дата = '00010101', Режим = 0, ПереводСтроки = Ложь, Знач ЯзыкДанных = Неопределено) Экспорт 
	
	ДопТребования = ПолучитьДопТребования(ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Дата, Режим);
	
	Возврат(ПреобразоватьТаблицуДопТребованийВСтроку(ДопТребования, ПереводСтроки, ЯзыкДанных));
	
КонецФункции

Функция ПолучитьЯзыкДанныхПользователя() Экспорт 

	Возврат УГМК_СлужебныйПовторноеИспользование.ПолучитьЯзыкДанныхПользователя();

КонецФункции // ПолучитьЯзыкДанныхПользователя()
 
Функция ПолучитьПредставлениеРекизитаПоЯзыкуДанных(Объект, ИмяРеквизита, Знач ЯзыкДанных = Неопределено, ВозвращатьПустоеЕслиНеНайдено = Ложь) Экспорт 
	
	Если ЗначениеЗаполнено(ЯзыкДанных) = Ложь Тогда
		ЯзыкДанных = ПолучитьЯзыкДанныхПользователя();
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Попытка
		Ошибка = МетаданныеОбъекта.ТабличныеЧасти.Найти("УГМК_МногоязычныеПредставления") = Неопределено;
	Исключение
		Ошибка = Истина;
	КонецПопытки; 
	
	Если Ошибка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Многоязычный механизм не подключен для """ + Объект + """");
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Данные.Представление
	|ИЗ
	|	" + МетаданныеОбъекта.ПолноеИмя() + ".УГМК_МногоязычныеПредставления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &Ссылка
	|	И Данные.Язык = &Язык
	|	И Данные.ИмяРеквизита = &ИмяРеквизита";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Язык", ЯзыкДанных);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Представление;
	Иначе
		Если ВозвращатьПустоеЕслиНеНайдено <> Ложь Тогда
			Возврат ""
		Иначе
			Возврат ?(МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено ИЛИ ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита), Объект[ИмяРеквизита], "");
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Процедура ПолучитьСписокРежимовРедактированияНормПроизводства( СписокВыбора) Экспорт
	Если ТипЗнч( СписокВыбора) <> Тип("СписокЗначений") тогда
		СписокВыбора = Новый СписокЗначений;
	иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	
	СписокВыбора.Добавить("ПолныйДоступ","Полный доступ");
	СписокВыбора.Добавить("ТехОтдел","Технический отдел");
	СписокВыбора.Добавить("Технологи","Технологи");
	СписокВыбора.Добавить("ПДО","ПДО");
	СписокВыбора.Добавить("ОНТиЗ","ОНТиЗ");
	СписокВыбора.Добавить("Энергоцех","Энергоцех");
	СписокВыбора.Добавить(".","Только просмотр");
КонецПроцедуры

Процедура ОставитьДоступныеРежимыРедактирования( СписокВыбора) Экспорт
	СтрокаРежимов = ","+УГМК_СлужебныеФункции.ПолучитьНастройкуПользователя( "Доступные режимы редактирования норм производства")+",";
	Если СтрокаРежимов = ",," тогда
		СтрокаРежимов = ",.,";
	КонецЕсли;
	
	Всего = СписокВыбора.Количество()-1; 
	Для Поз = 0 по Всего цикл
		Элемент = СписокВыбора[ Всего-Поз];
		Если Найти( СтрокаРежимов, ","+Элемент.Значение+",") = 0 тогда
			СписокВыбора.Удалить( Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовУправления( Колонки, СтрокаИмен, Дост) Экспорт
	Перем СтрокаИменПоиск;
	
	СтрокаИменПоиск = ","+СтрокаИмен+",";
	
	Для Каждого Колонка из Колонки цикл
		Если (СтрокаИменПоиск = ",.ВСЕ.,") или (Найти( СтрокаИменПоиск, ","+Колонка.Имя+",") > 0) тогда
			Если Колонка.ЭлементУправления <> Неопределено тогда
				Колонка.ЭлементУправления.Доступность = Дост;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РаскраситьКолонкиПоДоступности( Колонки) Экспорт
	Для Каждого Колонка из Колонки цикл
		Если Колонка.ЭлементУправления <> Неопределено тогда
			Если Колонка.ЭлементУправления.Доступность тогда
				Колонка.ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
				Колонка.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
			иначе
				Колонка.ЦветФонаПоля = ЦветаСтиля.АльтернативныйЦветФонаПоля;
				Колонка.ЦветТекстаПоля = ЦветаСтиля.ТекстВторостепеннойНадписи;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтрокаИменКолонок( Колонки, Дост, Пропускать=",Дата,") Экспорт
	СтрИмен = "";
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.ЭлементУправления <> Неопределено тогда
			Если Колонка.ЭлементУправления.Доступность = Дост тогда
				Если Найти( Пропускать, ","+Колонка.Имя+",") = 0 тогда
					СтрИмен = СтрИмен + "," + Колонка.Имя;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено( СтрИмен) тогда
		СтрИмен = Сред( СтрИмен, 2);
	КонецЕсли;
	
	Возврат( СтрИмен);
КонецФункции

/////////////////////////////////////////////////////////////////////////

Функция ПолучитьТаблицуЗаказовПоСквозномуНомеру( Знач ВводСквозногоНомера, ПолучатьФонды = Истина, РДата = Неопределено) Экспорт
	Если не ЗначениеЗаполнено( ВводСквозногоНомера) тогда
		Возврат( Неопределено);
	КонецЕсли;
КонецФункции	

/////////////////////////////////////////////////////////////////////////
// Дополним таблицу заказов данными по заданиям на производство (заказ на производство и номер приемки)
//
Процедура  ДополнитьТаблицуЗаказовЗаданиямиНаВыпуск(ТаблицаЗаказов, Дата = Неопределено) Экспорт 
КонецПроцедуры
	
Процедура ЗаполнитьТаблицуСквозныхНомеров( ТаблицаДанны, ТаблицаТипирована = Ложь) Экспорт
КонецПроцедуры

Функция  ПоискТарыСТК(ДанныеСтроки) Экспорт
	Возврат Неопределено
КонецФункции

Функция ПолучитьСквознойНомерИзЗаказа(тСтрока, Заказ) Экспорт
	
			Запр = Новый Запрос;
			Запр.УстановитьПараметр("Ссылка", Заказ);
			Запр.УстановитьПараметр("Номенклатура", тСтрока.Номенклатура);
			Запр.УстановитьПараметр("ХарактеристикаНоменклатуры", тСтрока.ХарактеристикаНоменклатуры);
			
			Запр.Текст = "ВЫБРАТЬ Разрешенные
				 |ЗаказПокупателяТовары.Ссылка,
				 |ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяТовары.Ссылка),
				 |ЗаказПокупателяТовары.Номенклатура,
				 |ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяТовары.Номенклатура),
				 |ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
				 |ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяТовары.ХарактеристикаНоменклатуры),
				 |ЗаказПокупателяТовары.tb_НоменклатураID
				 |ИЗ
				 |Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
				 |ГДЕ
				 |ЗаказПокупателяТовары.Ссылка = &Ссылка
				 |И ЗаказПокупателяТовары.Номенклатура = &Номенклатура
				 |И ЗаказПокупателяТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
				 
				Результат = Запр.Выполнить().Выбрать();
				Пока Результат.Следующий() цикл
					Возврат(Результат.tb_НоменклатураID);
				КонецЦикла;
				Если Результат.Количество()=0 Тогда
					Возврат("");
				КонецЕсли;	
	
КонецФункции

Функция ПолучитьПоСерииШтук(Номенклатура, ХарактеристикаНоменклатуры ,СерияНоменклатуры, ЗаказПокупателя, ЕдиницаИзмерения)Экспорт 
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Если НЕ СерияНоменклатуры = неопределено Тогда
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);  
	КонецЕсли;
	Если НЕ ЗаказПокупателя = неопределено Тогда
    	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);    	
	КонецЕсли;
	Если НЕ ЕдиницаИзмерения = неопределено Тогда
    	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);    	
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(УГМК_УчетНеКГ.КоличествоКГ) КАК КоличествоКГ,
				   |	СУММА(УГМК_УчетНеКГ.Количество) КАК Количество,
				   |	УГМК_УчетНеКГ.Номенклатура,
				   |	УГМК_УчетНеКГ.ХарактеристикаНоменклатуры,
				   |	УГМК_УчетНеКГ.ЕдиницаИзмерения";
				   
				   Если НЕ СерияНоменклатуры = неопределено Тогда
						Запрос.Текст = Запрос.Текст + ",
						|	УГМК_УчетНеКГ.СерияНоменклатуры";
                   КонецЕсли;
				   Если НЕ ЗаказПокупателя = неопределено Тогда
						Запрос.Текст = Запрос.Текст + ",
						|	УГМК_УчетНеКГ.ЗаказПокупателя";
                   КонецЕсли;	
				   Если НЕ ЕдиницаИзмерения = неопределено Тогда
						Запрос.Текст = Запрос.Текст + ",
						|	УГМК_УчетНеКГ.ЕдиницаИзмерения";
                   КонецЕсли;	
                    
				   Запрос.Текст = Запрос.Текст + "
				   |ИЗ
				   |	РегистрСведений.УГМК_УчетНеКГ КАК УГМК_УчетНеКГ
				   |ГДЕ
				   |	УГМК_УчетНеКГ.Номенклатура = &Номенклатура
				   |	И УГМК_УчетНеКГ.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
				   
				   Если НЕ СерияНоменклатуры = неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
				  		 |	И УГМК_УчетНеКГ.СерияНоменклатуры = &СерияНоменклатуры";
                   КонецЕсли;
				   Если НЕ ЗаказПокупателя = неопределено Тогда
						Запрос.Текст = Запрос.Текст + " 
				  		 |	И УГМК_УчетНеКГ.ЗаказПокупателя = &ЗаказПокупателя";
                   КонецЕсли;	
				   Если НЕ ЕдиницаИзмерения = неопределено Тогда
						Запрос.Текст = Запрос.Текст + " 
				  		 |	И УГМК_УчетНеКГ.ЕдиницаИзмерения = &ЕдиницаИзмерения";
                   КонецЕсли;	
                   
				   Запрос.Текст = Запрос.Текст + "
				   |СГРУППИРОВАТЬ ПО
				   |	УГМК_УчетНеКГ.Номенклатура,
				   |	УГМК_УчетНеКГ.ХарактеристикаНоменклатуры,
				   |	УГМК_УчетНеКГ.ЕдиницаИзмерения";
				   
				   Если НЕ СерияНоменклатуры = неопределено Тогда
						Запрос.Текст = Запрос.Текст + ",
						|	УГМК_УчетНеКГ.СерияНоменклатуры";
				   КонецЕсли;	
				   Если НЕ ЗаказПокупателя = неопределено Тогда
						Запрос.Текст = Запрос.Текст + ",
						|	УГМК_УчетНеКГ.ЗаказПокупателя";
				   КонецЕсли;	
						   
	РезЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезЗапроса.Количество()=0 Тогда
		Возврат Неопределено;	
	Иначе
		Возврат РезЗапроса[0];
	КонецЕсли;
	
КонецФункции	

#Если Клиент Тогда
Процедура УстановитьОтборПоЗначению( СправочникСписок, УГМК_ГруппаСвойств) Экспорт
	Если УГМК_ГруппаСвойств <> Неопределено тогда
		Попытка
			ОтборГруппа = СправочникСписок.Отбор.УГМК_ГруппаСвойств;
		исключение
			СправочникСписок.Колонки.Добавить( УГМК_ГруппаСвойств);
			ОтборГруппа = СправочникСписок.Отбор.УГМК_ГруппаСвойств;
		КонецПопытки;
		
		ТипПараметра = ТипЗнч( УГМК_ГруппаСвойств);
		Если (ТипПараметра = Тип( "Массив")) тогда
			ОтборГруппа.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			ОтборГруппа.Значение.ЗагрузитьЗначения( УГМК_ГруппаСвойств);
		иначеЕсли (ТипПараметра = Тип( "СписокЗначений")) тогда
			ОтборГруппа.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			ОтборГруппа.Значение = УГМК_ГруппаСвойств;
		иначе
			ПараметрЭтоГруппа = Ложь;
			Попытка
				ПараметрЭтоГруппа = УГМК_ГруппаСвойств.ЭтоГруппа;
			Исключение
				ПараметрЭтоГруппа = Ложь;
			КонецПопытки;
			
			Если ПараметрЭтоГруппа тогда
				ОтборГруппа.ВидСравнения = ВидСравнения.ВИерархии;
			иначе
				ОтборГруппа.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
			ОтборГруппа.Значение = УГМК_ГруппаСвойств;
		КонецЕсли;
		ОтборГруппа.Использование = Истина;
	КонецЕсли;
КонецПроцедуры	
#КонецЕсли

Функция ПервоеНеПустое( Зн1, Зн2=Неопределено, Зн3=Неопределено, Зн4=Неопределено, Зн5=Неопределено) Экспорт
	Если ЗначениеЗаполнено( Зн1) тогда
		Возврат( Зн1);
	иначеЕсли ЗначениеЗаполнено( Зн2) тогда
		Возврат( Зн2);
	иначеЕсли ЗначениеЗаполнено( Зн3) тогда
		Возврат( Зн3);
	иначеЕсли ЗначениеЗаполнено( Зн4) тогда
		Возврат( Зн4);
	иначеЕсли ЗначениеЗаполнено( Зн5) тогда
		Возврат( Зн5);
	КонецЕсли;
	
	Возврат( Неопределено);
КонецФункции

Функция ПолучитьПредставлениеТипа( Значение, ТипОписания = 0) Экспорт
	Попытка
		Мета = Значение.Метаданные();
	исключение
		Возврат( Неопределено);
	КонецПопытки;

	Если Метаданные.Справочники.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "Справочник."+Мета.Имя;
		иначе
			ОписаниеИсточника = "Справочники."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.Документы.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "Документ."+Мета.Имя;
		иначе
			ОписаниеИсточника = "Документы."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.ПланыОбмена.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "ПланОбмена."+Мета.Имя;
		иначе
			ОписаниеИсточника = "ПланыОбмена."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "ПланВидовХарактеристик."+Мета.Имя;
		иначе
			ОписаниеИсточника = "ПланыВидовХарактеристик."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.ПланыСчетов.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "ПланСчетов."+Мета.Имя;
		иначе
			ОписаниеИсточника = "ПланыСчетов."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.ПланыВидовРасчета.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "ПланВидовРасчета."+Мета.Имя;
		иначе
			ОписаниеИсточника = "ПланыВидовРасчета."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.БизнесПроцессы.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "БизнесПроцесс."+Мета.Имя;
		иначе
			ОписаниеИсточника = "БизнесПроцессы."+Мета.Имя;
		КонецЕсли;
	иначеЕсли Метаданные.Задачи.Содержит( Мета) тогда
		Если ТипОписания = 0 тогда
			ОписаниеИсточника = "Задача."+Мета.Имя;
		иначе
			ОписаниеИсточника = "Задачи."+Мета.Имя;
		КонецЕсли;
	иначе
		Возврат( Неопределено);
	КонецЕсли;
	
	Возврат( ОписаниеИсточника);
КонецФункции

// ОписаниеИсточника - строка вида "Справочник.Контрагенты", "Документ.Ценообразование"
Функция ОбъектНеНайден( Значение, ОписаниеИсточника = Неопределено) Экспорт
	Если ОписаниеИсточника = Неопределено тогда
		ОписаниеИсточника = ПолучитьПредставлениеТипа( Значение);
	КонецЕсли;
	
	Если ОписаниеИсточника = Неопределено тогда
		Возврат( Истина);
	КонецЕсли;
		
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка", Значение);
	Запр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Объекты.Ссылка
	             |ИЗ
	             |	"+ОписаниеИсточника+" КАК Объекты
	             |ГДЕ
	             |	Объекты.Ссылка = &Ссылка";
	Результат = Запр.Выполнить();
	Возврат( Результат.Пустой());
КонецФункции

Функция ПолучитьОписаниеПервойОшибки( Знач ИнформацияОбОшибке) Экспорт
	Пока ИнформацияОбОшибке.Причина <> Неопределено цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	
	Возврат( ИнформацияОбОшибке.Описание);
КонецФункции

#Если Клиент Тогда
Процедура УГМК_СкопироватьСвойстваОснования( ЭтотОбъект, ФормаДокумента, ИмяРеквизитаОснования = "УГМК_ДокументОснование") Экспорт
	Если не ЗначениеЗаполнено( ЭтотОбъект[ ИмяРеквизитаОснования]) тогда
		Возврат;
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка);
	Запр.УстановитьПараметр("Основание", ЭтотОбъект[ ИмяРеквизитаОснования]);
	Запр.Текст = "ВЫБРАТЬ
	             |	СУММА(Данные.СвойствОбъекта) КАК СвойствОбъекта,
	             |	СУММА(Данные.СвойстваОснования) КАК СвойстваОснования
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗначенияСвойствОбъектов.Объект КАК Объект,
	             |		1 КАК СвойствОбъекта,
	             |		0 КАК СвойстваОснования
	             |	ИЗ
	             |		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |	ГДЕ
	             |		ЗначенияСвойствОбъектов.Объект = &Объект
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ЗначенияСвойствОбъектов.Объект,
	             |		0,
	             |		1
	             |	ИЗ
	             |		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |	ГДЕ
	             |		ЗначенияСвойствОбъектов.Объект = &Основание) КАК Данные";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Если ЗначениеЗаполнено( Результат.СвойстваОснования) и (не ЗначениеЗаполнено( Результат.СвойствОбъекта)) тогда
			Ответ = Вопрос("Скопировать свойства Основания "+Строка( ЭтотОбъект[ ИмяРеквизитаОснования]), РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да тогда
				СвойстваИЗначенияОснование = УГМК_СлужебныеФункции.ПрочитатьЗначенияСвойств( ЭтотОбъект[ ИмяРеквизитаОснования]);
				
				Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ЭтотОбъект.Ссылка);
				Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке( ЭтотОбъект.Ссылка);
				Форма.ОбъектОтбораЗначений   = ЭтотОбъект.Ссылка;
				Форма.ОбъектОтбораНазначений = ЭтотОбъект.Ссылка;
				Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
				
				УГМК_СлужебныеФункции.УстановитьСовпадающиеСвойстваВТаблице( Форма.ЭтотОбъект.СвойстваИЗначения, СвойстваИЗначенияОснование);
				ФормаОснование = Неопределено;
				Форма.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 
#КонецЕсли

Процедура УстановитьСовпадающиеСвойстваВТаблице( СвойстваИЗначения, ОбработкаЗаполнения_ЗначенияСвойств) Экспорт
	Для каждого Строка из СвойстваИЗначения цикл
		Строка1 = ОбработкаЗаполнения_ЗначенияСвойств.Найти( Строка.Свойство, "Свойство");
		Если Строка1 = Неопределено тогда
			Строка1 = ОбработкаЗаполнения_ЗначенияСвойств.Найти( Строка.Свойство.УГМК_Идентификатор, "Имя");
		КонецЕсли;
		
		Если Строка1 <> Неопределено тогда
			Строка.Значение = Строка1.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьЗначенияСвойств( Основание) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Объект", Основание);
	Запр.Текст = "ВЫБРАТЬ
	             |	ЗначенияСвойствОбъектов.Свойство,
	             |	ЗначенияСвойствОбъектов.Значение,
	             |	ЗначенияСвойствОбъектов.Свойство.УГМК_Идентификатор КАК Имя
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Объект = &Объект";
				 
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Функция ПолучитьТекстЗапросаДляПодбораПоФондам( Знач ТекстПолученияАналитики = "") Экспорт
	Если не ЗначениеЗаполнено( ТекстПолученияАналитики) тогда
		ТекстПолученияАналитики = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                          |	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
		                          |	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		                          |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		                          |	ВЫРАЗИТЬ(РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику КАК Документ.ЗаказНаПроизводство) КАК ЗаказПоставщику,
		                          |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток
		                          |ПОМЕСТИТЬ АналитикаЗаказаПокупателя
		                          |ИЗ
		                          |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&РДата, ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказНаПроизводство).Подразделение = &Подразделение {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (ЗаказПокупателя).* КАК Заказ, (ЗаказПоставщику).* КАК ЗаказНаПроизводство, (Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции).* КАК ГруппаПродукции, (Номенклатура.НоменклатураОЦМ_ск.МаркаСплава).* КАК Сплав, (Номенклатура.НоменклатураОЦМ_ск.Стандарт).* КАК ГОСТ, (Номенклатура.НоменклатураОЦМ_ск.МетодИзготовления).* КАК МетодИзготовления, (Номенклатура.НоменклатураОЦМ_ск.ФормаСечения).* КАК ФормаСечения, (Номенклатура.НоменклатураОЦМ_ск.ТочностьИзготовления).* КАК ТочностьИзготовления, (Номенклатура.НоменклатураОЦМ_ск.Состояние).* КАК Состояние, (Номенклатура.НоменклатураОЦМ_ск.Мерность).* КАК Мерность}) КАК РазмещениеЗаказовПокупателейОстатки
		                          |ГДЕ
		                          |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0
		                          |
		                          |ИНДЕКСИРОВАТЬ ПО
		                          |	Номенклатура,
		                          |	ХарактеристикаНоменклатуры,
		                          |	ЗаказПокупателя,
		                          |	ЗаказПоставщику";
	КонецЕсли;
	
	Возврат( ТекстПолученияАналитики +";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
		|ПОМЕСТИТЬ АналитикаТолькоЗаказыПокупателей
		|ИЗ
		|	АналитикаЗаказаПокупателя КАК РазмещениеЗаказовПокупателейОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.Номенклатура,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.ХарактеристикаНоменклатуры,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.ЗаказПокупателя,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.Свойство,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.Значение КАК Значение
		|ПОМЕСТИТЬ ЗначенияСвойствЗаказовПокупателей
		|ИЗ
		|	РегистрСведений.УГМК_ЗначенияСвойствЗаказовПокупателей.СрезПоследних(
		|			&РДата {(&РДата)},
		|			(Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						АналитикаЗаказаПокупателя.Номенклатура,
		|						АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|						АналитикаЗаказаПокупателя.ЗаказПокупателя
		|					ИЗ
		|						АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)
		|				И (Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.КодЦветаРаскраскиВСписках)
		|					ИЛИ Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.СквознойНомер))) КАК ЗначенияСвойствЗаказовПокупателейСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.Номенклатура,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.ХарактеристикаНоменклатуры,
		|	ЗначенияСвойствЗаказовПокупателейСрезПоследних.ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаданияНаВыпускОстатки.Номенклатура КАК Номенклатура,
		|	ЗаданияНаВыпускОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаданияНаВыпускОстатки.Заказ КАК Заказ,
		|	ЗаданияНаВыпускОстатки.УГМК_Важность КАК УГМК_Важность,
		|	ЗаданияНаВыпускОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	СУММА(ЗаданияНаВыпускОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ Задания
		|ИЗ
		|	РегистрНакопления.ЗаданияНаВыпуск.Остатки(
		|			&РДата_ЗаданийНаВыпуск,
		|			ЗаказНаПроизводство.Подразделение = &Подразделение
		|				И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В
		|					(ВЫБРАТЬ
		|						АналитикаЗаказаПокупателя.Номенклатура,
		|						АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|						АналитикаЗаказаПокупателя.ЗаказПокупателя
		|					ИЗ
		|						АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя) {(ЗаданиеНаПроизводство).* КАК ЗаданиеНаПроизводство}) КАК ЗаданияНаВыпускОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданияНаВыпускОстатки.Номенклатура,
		|	ЗаданияНаВыпускОстатки.ХарактеристикаНоменклатуры,
		|	ЗаданияНаВыпускОстатки.Заказ,
		|	ЗаданияНаВыпускОстатки.ЗаказНаПроизводство,
		|	ЗаданияНаВыпускОстатки.УГМК_Важность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Заказ,
		|	ЗаказНаПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатериалыВПроизводствеОстатки.Затрата КАК Затрата,
		|	МатериалыВПроизводствеОстатки.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
		|	СУММА(МатериалыВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	МатериалыВПроизводствеОстатки.Заказ КАК Заказ
		|ПОМЕСТИТЬ Взвешено
		|ИЗ
		|	РегистрНакопления.МатериалыВПроизводстве.Остатки(
		|			&РДата,
		|			Подразделение = &Подразделение
		|				И (Затрата, ХарактеристикаЗатраты, Заказ) В
		|					(ВЫБРАТЬ
		|						АналитикаЗаказаПокупателя.Номенклатура,
		|						АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|						АналитикаЗаказаПокупателя.ЗаказПокупателя
		|					ИЗ
		|						АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК МатериалыВПроизводствеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	МатериалыВПроизводствеОстатки.Затрата,
		|	МатериалыВПроизводствеОстатки.ХарактеристикаЗатраты,
		|	МатериалыВПроизводствеОстатки.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Затрата,
		|	ХарактеристикаЗатраты,
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва КАК ДокументРезерва,
		|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ НаСкладе
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|			&РДата,
		|			(Номенклатура, ХарактеристикаНоменклатуры, ДокументРезерва) В
		|				(ВЫБРАТЬ
		|					АналитикаЗаказаПокупателя.Номенклатура,
		|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|					АналитикаЗаказаПокупателя.ЗаказПокупателя
		|				ИЗ
		|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК ТоварыВРезервеНаСкладахОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
		|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвободныеОстаткиОстатки.Номенклатура,
		|	СвободныеОстаткиОстатки.ХарактеристикаНоменклатуры,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(СвободныеОстаткиОстатки.КоличествоОстаток)
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(
		|			&РДата,
		|			(Номенклатура, ХарактеристикаНоменклатуры) В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					АналитикаЗаказаПокупателя.Номенклатура,
		|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры
		|				ИЗ
		|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК СвободныеОстаткиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	СвободныеОстаткиОстатки.Номенклатура,
		|	СвободныеОстаткиОстатки.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ДокументРезерва
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НепроведенныеОПзС.Номенклатура,
		|	НепроведенныеОПзС.ХарактеристикаНоменклатуры,
		|	НепроведенныеОПзС.Заказ,
		|	СУММА(НепроведенныеОПзС.ВЦехе) КАК ВЦехе
		|ПОМЕСТИТЬ НепроведенныеОПзС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтчетПроизводстваЗаСменуПродукция.Номенклатура КАК Номенклатура,
		|		ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв КАК Заказ,
		|		ОтчетПроизводстваЗаСменуПродукция.Количество * ОтчетПроизводстваЗаСменуПродукция.Коэффициент КАК ВЦехе
		|	ИЗ
		|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
		|	ГДЕ
		|		ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен = ЛОЖЬ
		|		И ОтчетПроизводстваЗаСменуПродукция.Ссылка.ПометкаУдаления = ЛОЖЬ
		|		И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Подразделение = &Подразделение
		|		И ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство
		|		И ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
		|		И (ОтчетПроизводстваЗаСменуПродукция.Номенклатура, ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры, ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв) В
		|				(ВЫБРАТЬ
		|					АналитикаЗаказаПокупателя.Номенклатура,
		|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|					АналитикаЗаказаПокупателя.ЗаказПокупателя
		|				ИЗ
		|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК НепроведенныеОПзС
		|
		|СГРУППИРОВАТЬ ПО
		|	НепроведенныеОПзС.Номенклатура,
		|	НепроведенныеОПзС.ХарактеристикаНоменклатуры,
		|	НепроведенныеОПзС.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НепроведенныеОПзС.Номенклатура,
		|	НепроведенныеОПзС.ХарактеристикаНоменклатуры,
		|	НепроведенныеОПзС.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЗаказыПокупателейОбороты.КоличествоПриход) КАК КоличествоПриход,
		|	ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ЗаказыПокупателя
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Обороты(
		|			,
		|			&РДата,
		|			,
		|			(Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя) В
		|				(ВЫБРАТЬ
		|					АналитикаЗаказаПокупателя.Номенклатура,
		|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|					АналитикаЗаказаПокупателя.ЗаказПокупателя
		|				ИЗ
		|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК ЗаказыПокупателейОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейОбороты.ЗаказПокупателя,
		|	ЗаказыПокупателейОбороты.Номенклатура,
		|	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказПоставщику,
		|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
		|	ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказНаПроизводствоПродукция.Заказ КАК ЗаказПокупателя,
		|	МАКСИМУМ(ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления) КАК СК_ДатаИзготовления,
		|	МАКСИМУМ(ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления_Галактика) КАК СК_ДатаИзготовления_Галактика
		|ПОМЕСТИТЬ ДатыИзготовления
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = &Подразделение
		|	И (ЗаказНаПроизводствоПродукция.Номенклатура, ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры, ЗаказНаПроизводствоПродукция.Заказ, ЗаказНаПроизводствоПродукция.Ссылка) В
		|			(ВЫБРАТЬ
		|				АналитикаЗаказаПокупателя.Номенклатура,
		|				АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|				АналитикаЗаказаПокупателя.ЗаказПокупателя,
		|				АналитикаЗаказаПокупателя.ЗаказПоставщику
		|			ИЗ
		|				АналитикаЗаказаПокупателя КАК АналитикаЗаказаПокупателя)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаПроизводствоПродукция.Ссылка,
		|	ЗаказНаПроизводствоПродукция.Номенклатура,
		|	ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры,
		|	ЗаказНаПроизводствоПродукция.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ЗаказПокупателя,
		|	ЗаказПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления КАК ДАТАИСПОЛНЕНИЯ,
		|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления_Галактика КАК ДАТАИСПОЛНЕНИЯ_Галактика,
		|	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыНаПроизводствоОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя КАК Заказ,
		|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику КАК ЗаказНаПроизводство,
		|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА УГМК_ДопТребованияСрезПоследних.ЗначениеДопТребования ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Авиа,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(УГМК_ДопТребованияРаскраска.Значение, 0) КАК ЧИСЛО) КАК КодРаскраски,
		|	ВЫРАЗИТЬ(тСквознойНомер.Значение КАК СТРОКА(9)) КАК СквознойНомер
		|ПОМЕСТИТЬ ВложенныйЗапрос
		|ИЗ
		|	АналитикаЗаказаПокупателя КАК РазмещениеЗаказовПокупателейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(
		|				&РДата,
		|				ЗаказНаПроизводство.Подразделение = &Подразделение
		|					И (Номенклатура, ХарактеристикаНоменклатуры, ЗаказНаПроизводство) В
		|						(ВЫБРАТЬ
		|							АналитикаЗаказаПокупателя.Номенклатура,
		|							АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|							АналитикаЗаказаПокупателя.ЗаказПоставщику
		|						ИЗ
		|							АналитикаЗаказаПокупателя КАК АналитикаЗаказаПокупателя) {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (ЗаказНаПроизводство).* КАК ЗаказНаПроизводство, (Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции).* КАК ГруппаПродукции, (Номенклатура.НоменклатураОЦМ_ск.МаркаСплава).* КАК Сплав, (Номенклатура.НоменклатураОЦМ_ск.Стандарт).* КАК ГОСТ, (Номенклатура.НоменклатураОЦМ_ск.МетодИзготовления).* КАК МетодИзготовления, (Номенклатура.НоменклатураОЦМ_ск.ФормаСечения).* КАК ФормаСечения, (Номенклатура.НоменклатураОЦМ_ск.ТочностьИзготовления).* КАК ТочностьИзготовления, (Номенклатура.НоменклатураОЦМ_ск.Состояние).* КАК Состояние, (Номенклатура.НоменклатураОЦМ_ск.Мерность).* КАК Мерность}) КАК ЗаказыНаПроизводствоОстатки
		|		ПО (ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура)
		|			И (ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры)
		|			И (ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыИзготовления КАК ЗаказНаПроизводствоПродукция
		|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = ЗаказНаПроизводствоПродукция.Номенклатура
		|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры
		|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = ЗаказНаПроизводствоПродукция.ЗаказПокупателя
		|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = ЗаказНаПроизводствоПродукция.ЗаказПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ДопТребования.СрезПоследних(
		|				&РДата {(&РДата)},
		|				(Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя) В
		|						(ВЫБРАТЬ
		|							АналитикаЗаказаПокупателя.Номенклатура,
		|							АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|							АналитикаЗаказаПокупателя.ЗаказПокупателя
		|						ИЗ
		|							АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)
		|					И ВидДопТребования = &ВидДопТребования) КАК УГМК_ДопТребованияСрезПоследних
		|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = УГМК_ДопТребованияСрезПоследних.Номенклатура
		|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = УГМК_ДопТребованияСрезПоследних.ХарактеристикаНоменклатуры
		|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = УГМК_ДопТребованияСрезПоследних.ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствЗаказовПокупателей КАК УГМК_ДопТребованияРаскраска
		|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = УГМК_ДопТребованияРаскраска.Номенклатура
		|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = УГМК_ДопТребованияРаскраска.ХарактеристикаНоменклатуры
		|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = УГМК_ДопТребованияРаскраска.ЗаказПокупателя
		|			И (УГМК_ДопТребованияРаскраска.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.КодЦветаРаскраскиВСписках))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствЗаказовПокупателей КАК тСквознойНомер
		|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = тСквознойНомер.Номенклатура
		|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = тСквознойНомер.ХарактеристикаНоменклатуры
		|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = тСквознойНомер.ЗаказПокупателя
		|			И (тСквознойНомер.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.СквознойНомер))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Заказ,
		|	ЗаказНаПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДАТАИСПОЛНЕНИЯ,
		|	ВложенныйЗапрос.ДАТАИСПОЛНЕНИЯ_Галактика,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры.Размеры КАК Размеры,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Заказ,
		|	ВложенныйЗапрос.Заказ.Номер КАК ЗаказНомер,
		|	ВложенныйЗапрос.Заказ.Дата КАК ЗаказДата,
		|	ВложенныйЗапрос.Заказ.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
		|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
		|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВложенныйЗапрос.ЗаказНаПроизводство,
		|	ВложенныйЗапрос.ЗаказНаПроизводство КАК ЗаказВыпуска,
		|	ВложенныйЗапрос.ЗаказНаПроизводство.Номер КАК ЗаказВыпускаНомер,
		|	ВложенныйЗапрос.ЗаказНаПроизводство.Дата КАК ЗаказВыпускаДата,
		|	ВложенныйЗапрос.КоличествоОстаток,
		|	ЕСТЬNULL(Материалы.КоличествоОстаток, 0) КАК Взвесили,
		|	ЕСТЬNULL(Задания.КоличествоОстаток, 0) КАК КоличествоЗадали,
		|	Задания.УГМК_Важность КАК УГМК_Важность,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции КАК ГруппаПродукции,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.МаркаСплава КАК Сплав,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Стандарт КАК ГОСТ,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ДополнительныйНД КАК ДополнительныйНД,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.НДНаХимСостав КАК НДНаХимСостав,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.МетодИзготовления КАК МетодИзготовления,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ФормаСечения КАК ФормаСечения,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ТочностьИзготовления КАК ТочностьИзготовления,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Состояние КАК Состояние,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Мерность КАК Мерность,
		|	ВложенныйЗапрос.ЗаказНаПроизводство.Дата КАК ДатаЗаказаНаПроизводство,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.УсловноеОбозначение КАК УсловноеОбозначение,
		|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ОсобыеУсловия КАК ОсобыеУсловия,
		|	ВложенныйЗапрос.СквознойНомер КАК СквознойНомер,
		|	ЕСТЬNULL(НаСкладе.КоличествоОстаток, 0) КАК КоличествоНаСкладе,
		|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоПриход, 0) КАК Заказано,
		|	ЕСТЬNULL(НепроведенныеОПзС.ВЦехе, 0) КАК ВЦехе,
		|	ВложенныйЗапрос.Авиа КАК Авиа,
		|	ВложенныйЗапрос.КодРаскраски
		|{ВЫБРАТЬ
		|	ДАТАИСПОЛНЕНИЯ,
		|	ДАТАИСПОЛНЕНИЯ_Галактика,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Размеры,
		|	ХарактеристикаНоменклатурыНаименование,
		|	ЕдиницаИзмерения.*,
		|	Заказ.*,
		|	ЗаказНомер,
		|	ЗаказДата,
		|	Контрагент.*,
		|	ДоговорКонтрагента.*,
		|	ДоговорКонтрагентаВладелец,
		|	ДоговорКонтрагентаНомер,
		|	ЗаказНаПроизводство.*,
		|	ЗаказВыпуска.*,
		|	ЗаказВыпускаНомер,
		|	ЗаказВыпускаДата,
		|	КоличествоОстаток,
		|	УГМК_Важность,
		|	ГруппаПродукции.*,
		|	Сплав.*,
		|	ГОСТ.*,
		|	ДополнительныйНД.*,
		|	НДНаХимСостав.*,
		|	МетодИзготовления.*,
		|	ФормаСечения.*,
		|	ТочностьИзготовления.*,
		|	Состояние.*,
		|	Мерность.*,
		|	ДатаЗаказаНаПроизводство,
		|	СквознойНомер,
		|	Авиа,
		|	КодРаскраски}
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задания КАК Задания
		|		ПО ВложенныйЗапрос.Номенклатура = Задания.Номенклатура
		|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = Задания.ХарактеристикаНоменклатуры
		|			И ВложенныйЗапрос.Заказ = Задания.Заказ
		|			И ВложенныйЗапрос.ЗаказНаПроизводство = Задания.ЗаказНаПроизводство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Взвешено КАК Материалы
		|		ПО ВложенныйЗапрос.Номенклатура = Материалы.Затрата
		|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = Материалы.ХарактеристикаЗатраты
		|			И ВложенныйЗапрос.Заказ = Материалы.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ НаСкладе КАК НаСкладе
		|		ПО ВложенныйЗапрос.Номенклатура = НаСкладе.Номенклатура
		|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = НаСкладе.ХарактеристикаНоменклатуры
		|			И ВложенныйЗапрос.Заказ = НаСкладе.ДокументРезерва
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПокупателя КАК ЗаказыПокупателя
		|		ПО ВложенныйЗапрос.Номенклатура = ЗаказыПокупателя.Номенклатура
		|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = ЗаказыПокупателя.ХарактеристикаНоменклатуры
		|			И ВложенныйЗапрос.Заказ = ЗаказыПокупателя.ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ НепроведенныеОПзС КАК НепроведенныеОПзС
		|		ПО ВложенныйЗапрос.Номенклатура = НепроведенныеОПзС.Номенклатура
		|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = НепроведенныеОПзС.ХарактеристикаНоменклатуры
		|			И ВложенныйЗапрос.Заказ = НепроведенныеОПзС.Заказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СквознойНомер
		|АВТОУПОРЯДОЧИВАНИЕ");			
			
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
//			|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
//			|ПОМЕСТИТЬ АналитикаТолькоЗаказыПокупателей
//			|ИЗ
//			|	АналитикаЗаказаПокупателя КАК РазмещениеЗаказовПокупателейОстатки
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЗаказПокупателяТовары.tb_НоменклатураID КАК СквознойНомер,
//			|	ЗаказПокупателяТовары.Ссылка КАК ЗаказПокупателя,
//			|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
//			|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	ЗаказПокупателяТовары.Ссылка.Дата КАК Дата,
//			|	ЗаказПокупателяТовары.Ссылка КАК Ссылка
//			|ПОМЕСТИТЬ СквозныеНомера
//			|ИЗ
//			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
//			|ГДЕ
//			|	(ЗаказПокупателяТовары.Номенклатура, ЗаказПокупателяТовары.ХарактеристикаНоменклатуры, ЗаказПокупателяТовары.Ссылка) В
//			|			(ВЫБРАТЬ
//			|				АналитикаЗаказаПокупателя.Номенклатура,
//			|				АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|				АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|			ИЗ
//			|				АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)
//			|
//			|ОБЪЕДИНИТЬ ВСЕ
//			|
//			|ВЫБРАТЬ
//			|	ЗаказПокупателяТовары.tb_НоменклатураID,
//			|	ЗаказПокупателяТовары.Ссылка.ЗаказПокупателя,
//			|	ЗаказПокупателяТовары.Номенклатура,
//			|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
//			|	ЗаказПокупателяТовары.Ссылка.Дата,
//			|	ЗаказПокупателяТовары.Ссылка
//			|ИЗ
//			|	Документ.КорректировкаЗаказаПокупателя.Товары КАК ЗаказПокупателяТовары
//			|ГДЕ
//			|	(ЗаказПокупателяТовары.Номенклатура, ЗаказПокупателяТовары.ХарактеристикаНоменклатуры, ЗаказПокупателяТовары.Ссылка.ЗаказПокупателя) В
//			|			(ВЫБРАТЬ
//			|				АналитикаЗаказаПокупателя.Номенклатура,
//			|				АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|				АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|			ИЗ
//			|				АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)
//			|	И ЗаказПокупателяТовары.Количество > 0
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	ЗаказПокупателя,
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	Дата,
//			|	Ссылка
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	МАКСИМУМ(СквозныеНомера.Дата) КАК Дата,
//			|	СквозныеНомера.ЗаказПокупателя,
//			|	СквозныеНомера.Номенклатура,
//			|	СквозныеНомера.ХарактеристикаНоменклатуры
//			|ПОМЕСТИТЬ ПоследниеСквозныеНомера_Дата
//			|ИЗ
//			|	СквозныеНомера КАК СквозныеНомера
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	СквозныеНомера.ЗаказПокупателя,
//			|	СквозныеНомера.Номенклатура,
//			|	СквозныеНомера.ХарактеристикаНоменклатуры
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ПоследниеСквозныеНомера_Дата.Дата КАК Дата,
//			|	ПоследниеСквозныеНомера_Дата.ЗаказПокупателя КАК ЗаказПокупателя,
//			|	ПоследниеСквозныеНомера_Дата.Номенклатура КАК Номенклатура,
//			|	ПоследниеСквозныеНомера_Дата.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	МАКСИМУМ(СквозныеНомера.Ссылка) КАК Ссылка
//			|ПОМЕСТИТЬ ПоследниеСквозныеНомера
//			|ИЗ
//			|	ПоследниеСквозныеНомера_Дата КАК ПоследниеСквозныеНомера_Дата
//			|		ЛЕВОЕ СОЕДИНЕНИЕ СквозныеНомера КАК СквозныеНомера
//			|		ПО ПоследниеСквозныеНомера_Дата.Дата = СквозныеНомера.Дата
//			|			И ПоследниеСквозныеНомера_Дата.ЗаказПокупателя = СквозныеНомера.ЗаказПокупателя
//			|			И ПоследниеСквозныеНомера_Дата.Номенклатура = СквозныеНомера.Номенклатура
//			|			И ПоследниеСквозныеНомера_Дата.ХарактеристикаНоменклатуры = СквозныеНомера.ХарактеристикаНоменклатуры
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ПоследниеСквозныеНомера_Дата.Дата,
//			|	ПоследниеСквозныеНомера_Дата.ЗаказПокупателя,
//			|	ПоследниеСквозныеНомера_Дата.Номенклатура,
//			|	ПоследниеСквозныеНомера_Дата.ХарактеристикаНоменклатуры
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	ЗаказПокупателя,
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	ПоследниеСквозныеНомера.ЗаказПокупателя КАК ЗаказПокупателя,
//			|	ПоследниеСквозныеНомера.Номенклатура КАК Номенклатура,
//			|	ПоследниеСквозныеНомера.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	СквозныеНомера1.СквознойНомер КАК СквознойНомер
//			|ПОМЕСТИТЬ ПравильныеСквозныеНомера
//			|ИЗ
//			|	ПоследниеСквозныеНомера КАК ПоследниеСквозныеНомера
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СквозныеНомера КАК СквозныеНомера1
//			|		ПО ПоследниеСквозныеНомера.ЗаказПокупателя = СквозныеНомера1.ЗаказПокупателя
//			|			И ПоследниеСквозныеНомера.Номенклатура = СквозныеНомера1.Номенклатура
//			|			И ПоследниеСквозныеНомера.ХарактеристикаНоменклатуры = СквозныеНомера1.ХарактеристикаНоменклатуры
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	ЗаказПокупателя,
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЗаданияНаВыпускОстатки.Номенклатура КАК Номенклатура,
//			|	ЗаданияНаВыпускОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	ЗаданияНаВыпускОстатки.Заказ КАК Заказ,
//			|	ЗаданияНаВыпускОстатки.УГМК_Важность КАК УГМК_Важность,
//			|	ЗаданияНаВыпускОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
//			|	СУММА(ЗаданияНаВыпускОстатки.КоличествоОстаток) КАК КоличествоОстаток
//			|ПОМЕСТИТЬ Задания
//			|ИЗ
//			|	РегистрНакопления.ЗаданияНаВыпуск.Остатки(
//			|			&РДата_ЗаданийНаВыпуск,
//			|			(Номенклатура, ХарактеристикаНоменклатуры, Заказ) В
//			|				(ВЫБРАТЬ
//			|					АналитикаЗаказаПокупателя.Номенклатура,
//			|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|					АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|				ИЗ
//			|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя) {(ЗаданиеНаПроизводство).* КАК ЗаданиеНаПроизводство}) КАК ЗаданияНаВыпускОстатки
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ЗаданияНаВыпускОстатки.Номенклатура,
//			|	ЗаданияНаВыпускОстатки.ХарактеристикаНоменклатуры,
//			|	ЗаданияНаВыпускОстатки.Заказ,
//			|	ЗаданияНаВыпускОстатки.ЗаказНаПроизводство,
//			|	ЗаданияНаВыпускОстатки.УГМК_Важность
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	Заказ,
//			|	ЗаказНаПроизводство,
//			|	УГМК_Важность
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	МатериалыВПроизводствеОстатки.Затрата КАК Затрата,
//			|	МатериалыВПроизводствеОстатки.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
//			|	СУММА(МатериалыВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
//			|	МатериалыВПроизводствеОстатки.Заказ КАК Заказ
//			|ПОМЕСТИТЬ Взвешено
//			|ИЗ
//			|	РегистрНакопления.МатериалыВПроизводстве.Остатки(
//			|			&РДата,
//			|			Подразделение = &Подразделение
//			|				И (Затрата, ХарактеристикаЗатраты, Заказ) В
//			|					(ВЫБРАТЬ
//			|						АналитикаЗаказаПокупателя.Номенклатура,
//			|						АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|						АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|					ИЗ
//			|						АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК МатериалыВПроизводствеОстатки
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	МатериалыВПроизводствеОстатки.Затрата,
//			|	МатериалыВПроизводствеОстатки.ХарактеристикаЗатраты,
//			|	МатериалыВПроизводствеОстатки.Заказ
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Затрата,
//			|	ХарактеристикаЗатраты,
//			|	Заказ
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
//			|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва КАК ДокументРезерва,
//			|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
//			|ПОМЕСТИТЬ НаСкладе
//			|ИЗ
//			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
//			|			&РДата,
//			|			(Номенклатура, ХарактеристикаНоменклатуры, ДокументРезерва) В
//			|				(ВЫБРАТЬ
//			|					АналитикаЗаказаПокупателя.Номенклатура,
//			|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|					АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|				ИЗ
//			|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК ТоварыВРезервеНаСкладахОстатки
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
//			|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
//			|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
//			|
//			
////+ УГМК_isn 04.02.2016 18:46:05
//			|ОБЪЕДИНИТЬ ВСЕ
//			|
//			|ВЫБРАТЬ 
//			|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
//			|	СвободныеОстаткиОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	НЕОПРЕДЕЛЕНО КАК ДокументРезерва,
//			|	СУММА(СвободныеОстаткиОстатки.КоличествоОстаток) КАК КоличествоОстаток
//			|ИЗ
//			|	РегистрНакопления.СвободныеОстатки.Остатки(
//			|			&РДата,
//			|			(Номенклатура, ХарактеристикаНоменклатуры) В
//			|				(ВЫБРАТЬ
//			|					АналитикаЗаказаПокупателя.Номенклатура,
//			|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры
//			|				ИЗ
//			|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК СвободныеОстаткиОстатки
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	СвободныеОстаткиОстатки.Номенклатура,
//			|	СвободныеОстаткиОстатки.ХарактеристикаНоменклатуры
////- УГМК_isn 04.02.2016 18:46:05 
//			
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	ДокументРезерва
//			|;
//			
////+ УГМК_Ичетовкин 31.05.2010 18:19:33 
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	НепроведенныеОПзС.Номенклатура,
//			|	НепроведенныеОПзС.ХарактеристикаНоменклатуры,
//			|	НепроведенныеОПзС.Заказ,
//			|	СУММА(НепроведенныеОПзС.ВЦехе) КАК ВЦехе
//			|ПОМЕСТИТЬ НепроведенныеОПзС
//			|ИЗ
//			|(ВЫБРАТЬ 
//			|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
//			|	ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры,
//			|	ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв КАК Заказ,
//			|	ОтчетПроизводстваЗаСменуПродукция.Количество * ОтчетПроизводстваЗаСменуПродукция.Коэффициент КАК ВЦехе
//			|ИЗ
//			|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
//			|ГДЕ
//			//|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата <= &РДата
//			|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен = ЛОЖЬ
//			|	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.ПометкаУдаления = ЛОЖЬ
//			|	И ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство
//			|	И		(ОтчетПроизводстваЗаСменуПродукция.Номенклатура, ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры, ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв) В
//			|				(ВЫБРАТЬ
//			|					АналитикаЗаказаПокупателя.Номенклатура,
//			|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|					АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|				ИЗ
//			|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)
//			|	И ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
//			|	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Подразделение = &Подразделение) КАК НепроведенныеОПзС
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	НепроведенныеОПзС.Номенклатура,
//			|	НепроведенныеОПзС.ХарактеристикаНоменклатуры,
//			|	НепроведенныеОПзС.Заказ
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	Заказ
//			|;
////- УГМК_Ичетовкин 31.05.2010 18:19:36 
//			
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	СУММА(ЗаказыПокупателейОбороты.КоличествоПриход) КАК КоличествоПриход,
//			|	ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
//			|	ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
//			|	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
//			|ПОМЕСТИТЬ ЗаказыПокупателя
//			|ИЗ
//			|	РегистрНакопления.ЗаказыПокупателей.Обороты(
//			|			,
//			|			&РДата,
//			|			,
//			|			(Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя) В
//			|				(ВЫБРАТЬ
//			|					АналитикаЗаказаПокупателя.Номенклатура,
//			|					АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|					АналитикаЗаказаПокупателя.ЗаказПокупателя
//			|				ИЗ
//			|					АналитикаТолькоЗаказыПокупателей КАК АналитикаЗаказаПокупателя)) КАК ЗаказыПокупателейОбороты
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ЗаказыПокупателейОбороты.ЗаказПокупателя,
//			|	ЗаказыПокупателейОбороты.Номенклатура,
//			|	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	ЗаказПокупателя,
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказПоставщику,
//			|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
//			|	ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	ЗаказНаПроизводствоПродукция.Заказ КАК ЗаказПокупателя,
//			|	МАКСИМУМ(ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления) КАК СК_ДатаИзготовления,
//			|	МАКСИМУМ(ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления_Галактика) КАК СК_ДатаИзготовления_Галактика
//			|ПОМЕСТИТЬ ДатыИзготовления
//			|ИЗ
//			|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
//			|ГДЕ
//			|	(ЗаказНаПроизводствоПродукция.Номенклатура, ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры, ЗаказНаПроизводствоПродукция.Заказ, ЗаказНаПроизводствоПродукция.Ссылка) В
//			|			(ВЫБРАТЬ
//			|				АналитикаЗаказаПокупателя.Номенклатура,
//			|				АналитикаЗаказаПокупателя.ХарактеристикаНоменклатуры,
//			|				АналитикаЗаказаПокупателя.ЗаказПокупателя,
//			|				АналитикаЗаказаПокупателя.ЗаказПоставщику
//			|			ИЗ
//			|				АналитикаЗаказаПокупателя КАК АналитикаЗаказаПокупателя)
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ЗаказНаПроизводствоПродукция.Ссылка,
//			|	ЗаказНаПроизводствоПродукция.Номенклатура,
//			|	ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры,
//			|	ЗаказНаПроизводствоПродукция.Заказ
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	ЗаказПоставщику,
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	ЗаказПокупателя
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления КАК ДАТАИСПОЛНЕНИЯ,
//			|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления_Галактика КАК ДАТАИСПОЛНЕНИЯ_Галактика,
//			|	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
//			|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
//			|	ЗаказыНаПроизводствоОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя КАК Заказ,
//			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику КАК ЗаказНаПроизводство,
//			|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток,
//			|	ВЫБОР
//			|		КОГДА УГМК_ДопТребованияСрезПоследних.ЗначениеДопТребования ЕСТЬ NULL 
//			|			ТОГДА ЛОЖЬ
//			|		ИНАЧЕ ИСТИНА
//			|	КОНЕЦ КАК Авиа,			
//|	ВЫРАЗИТЬ(ЕСТЬNULL(УГМК_ДопТребованияРаскраска.Значение, 0) КАК ЧИСЛО) КАК КодРаскраски
//			|ПОМЕСТИТЬ ВложенныйЗапрос
//			|ИЗ
//			|	АналитикаЗаказаПокупателя КАК РазмещениеЗаказовПокупателейОстатки
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(&РДата, {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (ЗаказНаПроизводство).* КАК ЗаказНаПроизводство, (Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции).* КАК ГруппаПродукции, (Номенклатура.НоменклатураОЦМ_ск.МаркаСплава).* КАК Сплав, (Номенклатура.НоменклатураОЦМ_ск.Стандарт).* КАК ГОСТ, (Номенклатура.НоменклатураОЦМ_ск.МетодИзготовления).* КАК МетодИзготовления, (Номенклатура.НоменклатураОЦМ_ск.ФормаСечения).* КАК ФормаСечения, (Номенклатура.НоменклатураОЦМ_ск.ТочностьИзготовления).* КАК ТочностьИзготовления, (Номенклатура.НоменклатураОЦМ_ск.Состояние).* КАК Состояние, (Номенклатура.НоменклатураОЦМ_ск.Мерность).* КАК Мерность}) КАК ЗаказыНаПроизводствоОстатки
//			|		ПО (ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику)
//			|			И (ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура)
//			|			И (ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры)
//			|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыИзготовления КАК ЗаказНаПроизводствоПродукция
//			|		ПО РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = ЗаказНаПроизводствоПродукция.ЗаказПокупателя
//			|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = ЗаказНаПроизводствоПродукция.ЗаказПоставщику
//			|			И РазмещениеЗаказовПокупателейОстатки.Номенклатура = ЗаказНаПроизводствоПродукция.Номенклатура
//			|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказНаПроизводствоПродукция.ХарактеристикаНоменклатуры
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ДопТребования.СрезПоследних(&РДата {(&РДата)}, ВидДопТребования = &ВидДопТребования) КАК УГМК_ДопТребованияСрезПоследних
//			|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = УГМК_ДопТребованияСрезПоследних.Номенклатура
//			|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = УГМК_ДопТребованияСрезПоследних.ХарактеристикаНоменклатуры
//			|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = УГМК_ДопТребованияСрезПоследних.ЗаказПокупателя
//			|			И (УГМК_ДопТребованияСрезПоследних.ВидДопТребования = &ВидДопТребования)
//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствЗаказовПокупателей.СрезПоследних(&РДата {(&РДата)}, Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.КодЦветаРаскраскиВСписках)) КАК УГМК_ДопТребованияРаскраска
//|		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = УГМК_ДопТребованияРаскраска.Номенклатура
//|			И РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры = УГМК_ДопТребованияРаскраска.ХарактеристикаНоменклатуры
//|			И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя = УГМК_ДопТребованияРаскраска.ЗаказПокупателя
//			|ГДЕ
//			|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0
//			|	И ЗаказыНаПроизводствоОстатки.Подразделение = &Подразделение
//			|
////|СГРУППИРОВАТЬ ПО
////|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления,
////|	ЗаказНаПроизводствоПродукция.СК_ДатаИзготовления_Галактика,
////|	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
////|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
////|	ЗаказыНаПроизводствоОстатки.ЕдиницаИзмерения,
////|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
////|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику,
////|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,
////|	ВЫБОР
////|		КОГДА УГМК_ДопТребованияСрезПоследних.ЗначениеДопТребования ЕСТЬ NULL 
////|			ТОГДА ЛОЖЬ
////|		ИНАЧЕ ИСТИНА
////|	КОНЕЦ
////|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Номенклатура,
//			|	ХарактеристикаНоменклатуры,
//			|	Заказ,
//			|	ЗаказНаПроизводство
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//			|	ВложенныйЗапрос.ДАТАИСПОЛНЕНИЯ,
//			|	ВложенныйЗапрос.ДАТАИСПОЛНЕНИЯ_Галактика,
//			|	ВложенныйЗапрос.Номенклатура,
//			|	ВложенныйЗапрос.ХарактеристикаНоменклатуры.Размеры КАК Размеры,
//			|	ВложенныйЗапрос.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
//			|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
//			|	ВложенныйЗапрос.ЕдиницаИзмерения,
//			|	ВложенныйЗапрос.Заказ,
//			|	ВложенныйЗапрос.Заказ.Номер как ЗаказНомер,
//			|	ВложенныйЗапрос.Заказ.Дата как ЗаказДата,
//			|	ВложенныйЗапрос.Заказ.Контрагент КАК Контрагент,
//			|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
//			|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
//			|	ВложенныйЗапрос.Заказ.ДоговорКонтрагента КАК ДоговорКонтрагента,
//			|	ВложенныйЗапрос.ЗаказНаПроизводство,
//			|	ВложенныйЗапрос.ЗаказНаПроизводство КАК ЗаказВыпуска,
//			|	ВложенныйЗапрос.ЗаказНаПроизводство.Номер как ЗаказВыпускаНомер,
//			|	ВложенныйЗапрос.ЗаказНаПроизводство.Дата как ЗаказВыпускаДата,
//			|	ВложенныйЗапрос.КоличествоОстаток,
//			|	ЕСТЬNULL(Материалы.КоличествоОстаток, 0) КАК Взвесили,
//			|	ЕСТЬNULL(Задания.КоличествоОстаток, 0) КАК КоличествоЗадали,
//			|	Задания.УГМК_Важность КАК УГМК_Важность,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ГруппаПродукции КАК ГруппаПродукции,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.МаркаСплава КАК Сплав,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Стандарт КАК ГОСТ,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ДополнительныйНД КАК ДополнительныйНД,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.НДНаХимСостав КАК НДНаХимСостав,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.МетодИзготовления КАК МетодИзготовления,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ФормаСечения КАК ФормаСечения,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ТочностьИзготовления КАК ТочностьИзготовления,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Состояние КАК Состояние,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.Мерность КАК Мерность,
//			|	ВложенныйЗапрос.ЗаказНаПроизводство.Дата КАК ДатаЗаказаНаПроизводство,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.УсловноеОбозначение КАК УсловноеОбозначение,
//			|	ВложенныйЗапрос.Номенклатура.НоменклатураОЦМ_ск.ОсобыеУсловия КАК ОсобыеУсловия,
//			|	СквозныеНомера.СквознойНомер КАК СквознойНомер,
//			|	ЕСТЬNULL(НаСкладе.КоличествоОстаток, 0) КАК КоличествоНаСкладе,
//			|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоПриход, 0) КАК Заказано,
//			|	ЕСТЬNULL(НепроведенныеОПзС.ВЦехе, 0) КАК ВЦехе,
//			|	ВложенныйЗапрос.Авиа как Авиа,
//|	ВложенныйЗапрос.КодРаскраски
//			|{ВЫБРАТЬ
//			|	ДАТАИСПОЛНЕНИЯ,
//			|	ДАТАИСПОЛНЕНИЯ_Галактика,
//			|	Номенклатура.*,
//			|	ХарактеристикаНоменклатуры.*,
//			|	Размеры,
//			|	ХарактеристикаНоменклатурыНаименование,
//			|	ЕдиницаИзмерения.*,
//			|	Заказ.*, ЗаказНомер, ЗаказДата,
//			|	Контрагент.*,
//			|	ДоговорКонтрагента.*, ДоговорКонтрагентаВладелец,
//			|	ДоговорКонтрагентаНомер,
//			|	ЗаказНаПроизводство.*,
//			|	ЗаказВыпуска.*, ЗаказВыпускаНомер, ЗаказВыпускаДата,
//			|	КоличествоОстаток,
//			|	УГМК_Важность,
//			|	ГруппаПродукции.*,
//			|	Сплав.*,
//			|	ГОСТ.*,
//			|	ДополнительныйНД.*,
//			|	НДНаХимСостав.*,
//			|	МетодИзготовления.*,
//			|	ФормаСечения.*,
//			|	ТочностьИзготовления.*,
//			|	Состояние.*,
//			|	Мерность.*,
//			|	ДатаЗаказаНаПроизводство,
//			|	СквознойНомер,
//			|	Авиа,
//|	КодРаскраски.*}
//			|ИЗ
//			|	ВложенныйЗапрос КАК ВложенныйЗапрос
//			|		ЛЕВОЕ СОЕДИНЕНИЕ Задания КАК Задания
//			|		ПО ВложенныйЗапрос.Номенклатура = Задания.Номенклатура
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = Задания.ХарактеристикаНоменклатуры
//			|			И ВложенныйЗапрос.Заказ = Задания.Заказ
//			|			И ВложенныйЗапрос.ЗаказНаПроизводство = Задания.ЗаказНаПроизводство
//			|		ЛЕВОЕ СОЕДИНЕНИЕ Взвешено КАК Материалы
//			|		ПО ВложенныйЗапрос.Номенклатура = Материалы.Затрата
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = Материалы.ХарактеристикаЗатраты
//			|			И ВложенныйЗапрос.Заказ = Материалы.Заказ
//			|		ЛЕВОЕ СОЕДИНЕНИЕ ПравильныеСквозныеНомера КАК СквозныеНомера
//			|		ПО ВложенныйЗапрос.Номенклатура = СквозныеНомера.Номенклатура
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = СквозныеНомера.ХарактеристикаНоменклатуры
//			|			И ВложенныйЗапрос.Заказ = СквозныеНомера.ЗаказПокупателя
//			|		ЛЕВОЕ СОЕДИНЕНИЕ НаСкладе КАК НаСкладе
//			|		ПО ВложенныйЗапрос.Номенклатура = НаСкладе.Номенклатура
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = НаСкладе.ХарактеристикаНоменклатуры
//			|			И ВложенныйЗапрос.Заказ = НаСкладе.ДокументРезерва
//			|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПокупателя КАК ЗаказыПокупателя
//			|		ПО ВложенныйЗапрос.Номенклатура = ЗаказыПокупателя.Номенклатура
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = ЗаказыПокупателя.ХарактеристикаНоменклатуры
//			|			И ВложенныйЗапрос.Заказ = ЗаказыПокупателя.ЗаказПокупателя
//			|		ЛЕВОЕ СОЕДИНЕНИЕ НепроведенныеОПзС КАК НепроведенныеОПзС
//			|		ПО ВложенныйЗапрос.Номенклатура = НепроведенныеОПзС.Номенклатура
//			|			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = НепроведенныеОПзС.ХарактеристикаНоменклатуры
//			|			И ВложенныйЗапрос.Заказ = НепроведенныеОПзС.Заказ
//			|
//			|АВТОУПОРЯДОЧИВАНИЕ");			
КонецФункции

Функция ПродукцияМерная(Продукция) Экспорт 
	//ОЦМ Мобильная
	Возврат Неопределено;
	//тНоменклатураОЦМ = Неопределено;
	//Если ТипЗнч(Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	тНоменклатураОЦМ	= Продукция.НоменклатураОЦМ_ск;
	//ИначеЕсли ТипЗнч(Продукция) = Тип("СправочникСсылка.СК_ПродукцияОЦМ") Тогда
	//	тНоменклатураОЦМ	= Продукция;
	//ИначеЕсли ТипЗнч(Продукция) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
	//	тНоменклатураОЦМ	= Продукция.Владелец.НоменклатураОЦМ_ск;
	//КонецЕсли; 
	//
	//Если ЗначениеЗаполнено(тНоменклатураОЦМ) = Ложь Тогда
	//	Возврат Неопределено
	//КонецЕсли;  
	//
	//ТипРазмера = УГМК_ПеренесенныеПроцедурыИФункции.СК_ПолучитьТипРазмера(тНоменклатураОЦМ);
	//Если ЗначениеЗаполнено(ТипРазмера) тогда
	//	ВидРазмераОпределяющийВес	= ТипРазмера.ВидРазмераОпределяющийВес;
	//	Если ЗначениеЗаполнено(ВидРазмераОпределяющийВес) = Истина Тогда
	//		Возврат ТипРазмера.ВидыРазмеров.НайтиСтроки(Новый Структура("ВидРазмера", ВидРазмераОпределяющийВес)).Количество() > 0
	//	Иначе
	//		Возврат Неопределено // возможно попределение по значению реквизита мерности
	//	КонецЕсли;  
	//Иначе
	//	Возврат Неопределено
	//КонецЕсли;	
	
КонецФункции // ПродукцияМерная()

// Получение единицы измерения Номенклатуры по Классификатору
Функция ПолучитьЕдиницуПоКлассификатору(Номенклатура, ЕдиницаПоКлассификатору) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьПоследнийНомерПартии(Организация, Подразделение, Дата) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УГМК_ПоследниеПартииПоПодразделениям.Номер
	               |ИЗ
	               |	РегистрСведений.УГМК_ПоследниеПартииПоПодразделениям КАК УГМК_ПоследниеПартииПоПодразделениям
	               |ГДЕ
	               |	УГМК_ПоследниеПартииПоПодразделениям.Период = &Период
	               |	И УГМК_ПоследниеПартииПоПодразделениям.Подразделение = &Подразделение
	               |	И УГМК_ПоследниеПартииПоПодразделениям.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Период", НачалоГода(Дата));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Номер;
	Иначе
		Возврат 0;
	КонецЕсли;	 
	
КонецФункции
  
Функция ДанныеСвойствДокументаОУ( Источник)
	Данные = Новый Структура("Закрыт,Дата",Ложь,Источник.Дата);	
	
	Свойство_Закрыт = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_Закрыт");
	Свойство_ДатаПриемки = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ДатаПриемки");
	Для каждого СтрокаС из Источник.СвойстваСтрок цикл
		Если СтрокаС.Свойство = Свойство_Закрыт тогда
			Данные.Закрыт = СтрокаС.Значение;
		КонецЕсли;
		Если СтрокаС.Свойство = Свойство_ДатаПриемки тогда
			Данные.Дата= СтрокаС.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Данные);
КонецФункции

Процедура УдалитьСвойство( Источник,  Свойство)
	СтрокаС = Источник.СвойстваСтрок.Найти( Свойство, "Свойство");
	Если СтрокаС <> Неопределено тогда
		Источник.СвойстваСтрок.Удалить( СтрокаС);
	КонецЕсли;
КонецПроцедуры

Процедура ОтменитьЗакрытие( Источник)
	УдалитьСвойство( Источник, УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_Закрыт"));
	УдалитьСвойство( Источник, УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ДатаПриемки"));
КонецПроцедуры

Процедура ОтправитьВОУ( СсылкаДокумента) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка", ПланыОбмена.УГМК_ОперативныйУчетНСИ.ЭтотУзел());
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ОперативныйУчетНСИ.Ссылка
	             |ИЗ
	             |	ПланОбмена.УГМК_ОперативныйУчетНСИ КАК УГМК_ОперативныйУчетНСИ
	             |ГДЕ
	             |	УГМК_ОперативныйУчетНСИ.Ссылка <> &Ссылка";
				 
	Узлы = Запр.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Узлы.Количество() > 0 тогда
		ПланыОбмена.ЗарегистрироватьИзменения( Узлы, СсылкаДокумента);
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьЗаписьОбъекта( тДокументВыпуска, РежимЗаписи, РежимПроведения = Неопределено);
    СтрОшибка = "";
	
	Попытка
		Если РежимПроведения = Неопределено тогда
			тДокументВыпуска.Записать( РежимЗаписи);
		иначе
			тДокументВыпуска.Записать( РежимЗаписи, РежимПроведения);
		КонецЕсли;
	Исключение
		СтрОшибка = УГМК_СлужебныеФункции.ПолучитьОписаниеПервойОшибки( ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат( СтрОшибка);
КонецФункции

// Синхронизация документ-факта с документом выпуска
// Возращает:
//		Истина - если Источник изменен и отправлен обратно
//      Ложь   - источник не изменялся. 
Функция СинхронизироватьДокументФактСДокуметомВыпуска(ИсточникПараметр, ОбновлятьВсегда = Ложь) Экспорт
	ТипПараметр = ТипЗнч( ИсточникПараметр);
	
	ПараметрСсылка = Ложь;
	Если ТипПараметр = Тип("ДокументОбъект.УГМК_ДокументФакт") тогда
		Источник = ИсточникПараметр;
	иначеЕсли ТипПараметр = Тип("ДокументСсылка.УГМК_ДокументФакт") тогда
		Источник = ИсточникПараметр.ПолучитьОбъект();
		ПараметрСсылка = Истина;
	иначе
		Возврат( Ложь);
	КонецЕсли;
	
	ДатаНачала = УГМК_СлужебныеФункции.ПолучитьНастройку("ДатаНачалаПриемкиГотовойПродукцииВОУ");
	Если ЗначениеЗаполнено(ДатаНачала) = Ложь ИЛИ ТипЗнч(ДатаНачала) <> Тип("Дата") Тогда
		ДатаНачала = КонецГода( ТекущаяДата());
	КонецЕсли;
	
	ОбъектИзменен = Ложь;
	ОшибкаЗаписиПроведение = "";
	ОшибкаЗаписиОтмена = "";
	ОшибкаЗаписиЗапись = "";
	ДанныеСвойств = ДанныеСвойствДокументаОУ( Источник);
	
	Если Источник.ВидОперации = Справочники.УГМК_СостоянияЗаказа.ВзвешиваниеГП 
		И УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияРегламентированногоУчета()
		И ЗначениеЗаполнено(ДатаНачала) И (Источник.Дата >= ДатаНачала или ДанныеСвойств.Дата >= ДатаНачала) Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		Если (не ОбновлятьВсегда) и (Источник.ЭтоНовый() = Ложь) И (ОбщегоНазначения.ДанныеРазличаются(Источник, Источник.Ссылка.ПолучитьОбъект()) = Ложь) Тогда
			// Если объект не новый и изменений реквизитов не было
			Возврат( Ложь);
		КонецЕсли; 
		
		// Поиск/создание документа выпуска в базе регламентированного учета
		Если ЗначениеЗаполнено(Источник.ДокументОснование) = Истина И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			// Если заполнен реквизит и он нужного типа - получаем его
			тДокументВыпуска = Источник.ДокументОснование.ПолучитьОбъект();
		Иначе
			тСсылкаВыпуска = Неопределено;
			Если Источник.ЭтоНовый() Тогда
				// Если объект новый, возможно для него уже установлена ссылка (например, при обмене)
				тСсылкаДокументФакт = Источник.ПолучитьСсылкуНового();
				Если тСсылкаДокументФакт = Неопределено Тогда
					// Ссылка не установлена, устанавливаем принудительно
					тУникальныйИдентификатор = Новый УникальныйИдентификатор;
					Источник.УстановитьСсылкуНового(Документы.УГМК_ДокументФакт.ПолучитьСсылку(тУникальныйИдентификатор));
				Иначе
					// Ссылка установлена, ищем по УИДу документ выпуска
					тУникальныйИдентификатор = тСсылкаДокументФакт.УникальныйИдентификатор();
					тСсылкаВыпуска = Документы.ОтчетПроизводстваЗаСмену.ПолучитьСсылку(тУникальныйИдентификатор);
				КонецЕсли; 
			Иначе
				// Получаем УИД записанного объекта, ищем по УИДу документ выпуска
				тУникальныйИдентификатор = Источник.Ссылка.УникальныйИдентификатор();
				тСсылкаВыпуска = Документы.ОтчетПроизводстваЗаСмену.ПолучитьСсылку(тУникальныйИдентификатор);
			КонецЕсли; 
			Если тСсылкаВыпуска = Неопределено Тогда
				тДокументВыпуска = Неопределено;
			Иначе
				тДокументВыпуска = тСсылкаВыпуска.ПолучитьОбъект();
			КонецЕсли; 
			Если тДокументВыпуска = Неопределено Тогда
				// Документ выпуска не найден, создаем, устанавливаем УИД
				тДокументВыпуска = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
				тДокументВыпуска.УстановитьСсылкуНового(Документы.ОтчетПроизводстваЗаСмену.ПолучитьСсылку(тУникальныйИдентификатор));
			КонецЕсли; 
		КонецЕсли;  
		
		// Заполнение реквизитов документа
		тДокументВыпуска.ПометкаУдаления				= Источник.ПометкаУдаления;
		
		тДокументВыпуска.Организация					= Источник.Организация;
		тДокументВыпуска.Склад							= Источник.Склад;
		тДокументВыпуска.ОтражатьВБухгалтерскомУчете	= Ложь;
		тДокументВыпуска.ОтражатьВУправленческомУчете	= Истина;
		тДокументВыпуска.ОтражатьВНалоговомУчете		= Ложь;
		тДокументВыпуска.Ответственный					= Источник.Ответственный;
		тДокументВыпуска.Подразделение					= УГМК_ОперативныйУчетВызовСервера.ПолучитьПодразделениеВыпускаПоУчастку( Источник.Подразделение);
		тДокументВыпуска.ПодразделениеОрганизации		= Неопределено;
		тДокументВыпуска.УГМК_СторноДвижения			= Источник.Сторно;
		Если ДанныеСвойств.Закрыт = Истина тогда 
			тДокументВыпуска.Дата							= ДанныеСвойств.Дата;
			тДокументВыпуска.УГМК_ДокументЗакрыт			= Истина;
			тДокументВыпуска.УГМК_ДокументЗакрытСТК			= Истина;
		иначе
			тДокументВыпуска.Дата							= Источник.Дата;
			тДокументВыпуска.УГМК_ДатаВзвешивания			= Источник.Дата;
			тДокументВыпуска.УГМК_ДокументЗакрыт			= Ложь;
			тДокументВыпуска.УГМК_ДокументЗакрытСТК			= Ложь;
		КонецЕсли;
		
		тДокументВыпуска.ИспользоватьЗаказы = Истина;
		тДокументВыпуска.ИспользоватьМатериалы = Истина;
		тДокументВыпуска.АвтораспределениеМатериалов = Истина;
		тДокументВыпуска.ВводитьСтатьиЗатратПоСтрокам = Ложь;
		тДокументВыпуска.СтатьяЗатрат = УГМК_СлужебныеФункции.ПолучитьНастройку("ОПЗС_СтатьяЗатратУпаковка");
		
		Тара1 = Неопределено;
		Продукция1 = Неопределено;
		Если Источник.Продукция.Количество() > 0 тогда
			Продукция1 = Источник.Продукция[ 0];
		КонецЕсли;
		
		Если (Продукция1 <> Неопределено) и (ЗначениеЗаполнено( Продукция1.ЗаказПродукции)) тогда
			Если Продукция1.ЗаказПродукции.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка тогда
				тДокументВыпуска.Склад = УГМК_СлужебныеФункции.ПолучитьНастройку("ОПЗС_СкладВыпускаДС");
			иначе
				тДокументВыпуска.Склад = УГМК_СлужебныеФункции.ПолучитьНастройку("ОПЗС_СкладВыпуска");
			КонецЕсли;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено( тДокументВыпуска.Склад) тогда
			тДокументВыпуска.Склад = УГМК_СлужебныеФункции.ПолучитьНастройку("ОПЗС_СкладВыпуска");
		КонецЕсли;
		
		// Заполнение ТЧ Материалы
		тДокументВыпуска.Материалы.Очистить();
		тДокументВыпуска.УГМК_ВозвратнаяТара.Очистить();
		
		ЕстьУчетТары = УГМК_СлужебныеФункции.ПолучитьНастройку("ОПЗС_ВозможноУказаниеСхемыУпаковки") = Истина;
		
		Для каждого тСтрокаМатериалы Из Источник.Материалы Цикл
			Номенклатура = тСтрокаМатериалы.Номенклатура;
			КоличествоТары =  тСтрокаМатериалы.Количество;
			ВесТары =  тСтрокаМатериалы.Количество1;
			
			Если ЗначениеЗаполнено( Номенклатура) и ЗначениеЗаполнено( КоличествоТары) тогда
				Если ЕстьУчетТары тогда
					Если тСтрокаМатериалы.Группа = 9 тогда
						нСтрокаВозвратнаяТара = тДокументВыпуска.УГМК_ВозвратнаяТара.Добавить();
						Если Продукция1 <> Неопределено тогда
							нСтрокаВозвратнаяТара.СерияНоменклатуры = Продукция1.СерияПродукции;
						КонецЕсли;
						нСтрокаВозвратнаяТара.ВозвратнаяТара = Номенклатура;
						нСтрокаВозвратнаяТара.Количество = КоличествоТары;
					иначе
						нСтрокаМатериалы = тДокументВыпуска.Материалы.Добавить();
						нСтрокаМатериалы.Номенклатура				= Номенклатура;
						нСтрокаМатериалы.ЕдиницаИзмеренияМест		= тСтрокаМатериалы.ЕдиницаИзмеренияМест;
						нСтрокаМатериалы.ВидВыпуска					= Перечисления.ВидыВыпуска.Выпуск;
						нСтрокаМатериалы.КоличествоМест				= КоличествоТары;
						нСтрокаМатериалы.ЕдиницаИзмерения			= тСтрокаМатериалы.ЕдиницаИзмерения;
						нСтрокаМатериалы.Коэффициент				= тСтрокаМатериалы.Коэффициент;
						нСтрокаМатериалы.Количество					= КоличествоТары;
						нСтрокаМатериалы.ХарактеристикаНоменклатуры	= тСтрокаМатериалы.ХарактеристикаНоменклатуры;
						нСтрокаМатериалы.ЗаказВыпуска				= тСтрокаМатериалы.ЗаказВыпуска;
						нСтрокаМатериалы.УГМК_Вес                   = ВесТары;
						нСтрокаМатериалы.УГМК_УровеньТары           = тСтрокаМатериалы.Группа;
						
						Если не ЗначениеЗаполнено( нСтрокаМатериалы.ЕдиницаИзмерения) тогда
							нСтрокаМатериалы.ЕдиницаИзмерения = нСтрокаМатериалы.Номенклатура.ЕдиницаХраненияОстатков;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если (Тара1 = Неопределено) и (тСтрокаМатериалы.Группа = 1) тогда
					Тара1 = тСтрокаМатериалы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение ТЧ Продукция
		тДокументВыпуска.Продукция.Очистить();
		Для каждого тСтрокаПродукция Из Источник.Продукция Цикл
			нСтрокаПродукция = тДокументВыпуска.Продукция.Добавить();
			нСтрокаПродукция.Номенклатура				= тСтрокаПродукция.Продукция;
			нСтрокаПродукция.ХарактеристикаНоменклатуры	= тСтрокаПродукция.ХарактеристикаПродукции;
			нСтрокаПродукция.ЕдиницаИзмерения			= тСтрокаПродукция.ЕдиницаИзмеренияПродукции;
			нСтрокаПродукция.ВидВыпуска					= Перечисления.ВидыВыпуска.Выпуск;
			нСтрокаПродукция.ЕдиницаИзмеренияМест		= тСтрокаПродукция.ЕдиницаИзмерения1Продукции;
			нСтрокаПродукция.Заказ 						= тСтрокаПродукция.ЗаказПродукции;
			нСтрокаПродукция.Качество					= Справочники.Качество.Новый;
			нСтрокаПродукция.Количество					= тСтрокаПродукция.КоличествоПродукции;
			нСтрокаПродукция.КоличествоМест				= тСтрокаПродукция.Количество1Продукции;
			нСтрокаПродукция.Коэффициент				= тСтрокаПродукция.КоэффициентПродукции;
			нСтрокаПродукция.СерияНоменклатуры			= тСтрокаПродукция.СерияПродукции;
			нСтрокаПродукция.СтатусПартии				= Перечисления.СтатусыПартийТоваров.Продукция;
			нСтрокаПродукция.ЗаказВыпуска				= тСтрокаПродукция.ЗаказВыпускаПродукции;
			нСтрокаПродукция.ЗаказРезерв				= тСтрокаПродукция.ЗаказПродукции;
				
			Если не ЗначениеЗаполнено( нСтрокаПродукция.ЕдиницаИзмерения) тогда
				нСтрокаПродукция.ЕдиницаИзмерения = нСтрокаПродукция.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
			Если ЗначениеЗаполнено( нСтрокаПродукция.КоличествоМест) и (не ЗначениеЗаполнено( нСтрокаПродукция.ЕдиницаИзмеренияМест)) тогда
				нСтрокаПродукция.ЕдиницаИзмеренияМест = нСтрокаПродукция.Номенклатура.ЕдиницаИзмеренияМест;
			КонецЕсли;
			
			нСтрокаПродукция.КлючСвязи					= тСтрокаПродукция.КлючСвязиПродукции;
			нСтрокаПродукция.НаправлениеВыпуска         = Перечисления.НаправленияВыпуска.НаСклад;
			нСтрокаПродукция.СтатусПартии         		= Перечисления.СтатусыПартийТоваров.Продукция;
			
			нСтрокаПродукция.УГМК_КоличествоШтук        = тСтрокаПродукция.КоличествоМестПродукции;
			
			Если ЗначениеЗаполнено( тСтрокаПродукция.ПаспортПартииПродукции) тогда
				нСтрокаПродукция.СТК						= тСтрокаПродукция.ПаспортПартииПродукции.Номер;
				нСтрокаПродукция.УГМК_ПаспортПартии			= тСтрокаПродукция.ПаспортПартииПродукции;
			иначе
				нСтрокаПродукция.СТК						= "";
				нСтрокаПродукция.УГМК_ПаспортПартии			= Неопределено;
			КонецЕсли;
			
			Если Тара1 <> Неопределено тогда
				нСтрокаПродукция.Упаковка					= Тара1.Номенклатура;
				нСтрокаПродукция.КоличествоТары				= Тара1.КоличествоМест;
			иначе
				нСтрокаПродукция.Упаковка					= Неопределено;
			КонецЕсли;
			нСтрокаПродукция.ВесТары = Источник.Материалы.Итог("Количество1");
			нСтрокаПродукция.Брутто = тСтрокаПродукция.Количество1Продукции;
			
			//нСтрокаПродукция.ЗаданиеНаПроизводство = ;
			//нСтрокаПродукция.УГМК_НомерПриемки = ;
			//нСтрокаПродукция.УГМК_ЯчейкаСклада = ;
			//нСтрокаПродукция.СК_СТК_ИД = ;
			//нСтрокаПродукция.tb_Обечайка = ;
			//нСтрокаПродукция.ОпытнаяПартия = ;
			//нСтрокаПродукция.УГМК_Важность = ;
		КонецЦикла; 
		
		тДокументВыпуска.ДополнительныеСвойства.Вставить("УГМК_АвтосозданиеОбменОУ", Истина);
		тДокументВыпуска.ДополнительныеСвойства.Вставить("УГМК_ИзменениеДатВыпуска", Истина);
			
		Если тДокументВыпуска.Проведен тогда
			// Проведенный документ снимаем с Проведения, чтобы Сохранилось новое состояние даже если НЕполучится провести
			ОшибкаЗаписиОтмена = ВыполнитьЗаписьОбъекта( тДокументВыпуска, РежимЗаписиДокумента.ОтменаПроведения);
		иначе
			ОшибкаЗаписиЗапись = ВыполнитьЗаписьОбъекта( тДокументВыпуска, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Источник.Проведен и НЕ (ЗначениеЗаполнено( ОшибкаЗаписиОтмена) или ЗначениеЗаполнено( ОшибкаЗаписиЗапись)) тогда
			ОшибкаЗаписиПроведение = ВыполнитьЗаписьОбъекта( тДокументВыпуска, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		СтрДополнительно = Источник.Дополнительно;
		Если ЗначениеЗаполнено( ОшибкаЗаписиОтмена) или ЗначениеЗаполнено( ОшибкаЗаписиЗапись) или ЗначениеЗаполнено( ОшибкаЗаписиПроведение) тогда
			СтрДополнительно = Строка( тДокументВыпуска.Номер)+" от "+Формат( тДокументВыпуска.Дата, "ДФ=dd.MM.yyyy")+" Не удалось создать (обновить) документ.";
			
			Если ЗначениеЗаполнено( ОшибкаЗаписиОтмена) тогда
				СтрДополнительно = СтрДополнительно +Символы.ПС+ "Отмена проведения:"+ОшибкаЗаписиОтмена;
			КонецЕсли;
			Если ЗначениеЗаполнено( ОшибкаЗаписиЗапись) тогда
				СтрДополнительно = СтрДополнительно +Символы.ПС+ "Запись:"+ОшибкаЗаписиЗапись;
			КонецЕсли;
			Если ЗначениеЗаполнено( ОшибкаЗаписиПроведение) тогда
				СтрДополнительно = СтрДополнительно +Символы.ПС+ "Проведение:"+ОшибкаЗаписиПроведение;
			КонецЕсли;
		иначе
			СтрДополнительно = "";
		КонецЕсли;
		
		Если (ДанныеСвойств.Закрыт = Истина) и ЗначениеЗаполнено( СтрДополнительно) тогда
			ОтменитьЗакрытие( Источник);
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		Если СтрДополнительно <> Источник.Дополнительно тогда
			Источник.Дополнительно = СтрДополнительно;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		// Заполняем реквизит документа
		Если Источник.ДокументОснование <> тДокументВыпуска.Ссылка Тогда
			Источник.ДокументОснование = тДокументВыпуска.Ссылка;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбъектИзменен тогда
		Если ПараметрСсылка тогда
			Источник.ОбменДанными.Загрузка = Истина;
			Источник.Записать( РежимЗаписиДокумента.Запись);
			ОтправитьВОУ( Источник.Ссылка);
		иначеЕсли Источник.ЭтоНовый() тогда
			ОтправитьВОУ( Источник.ПолучитьСсылкуНового());
		иначе
			ОтправитьВОУ( Источник.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( ОбъектИзменен);
КонецФункции
