Функция ХарактеристикаНачалоВыбора( Номенклатура, СтандартнаяОбработка, ИмяРеквизита, ДанныеФормы) Экспорт
	//ОЦМ Мобильная
	ТипНоменклатуры = ТипЗнч( Номенклатура);
	
	Организация = Неопределено;
	ДанныеФормы.Свойство("Организация",Организация);
	
	Если ТипНоменклатуры = Тип("СправочникСсылка.СК_ТипыРазмеров") тогда
		ОбразецТипаХарактеристики = УГМК_СлужебныйПовторноеИспользование.ПолучитьОбразецТипаРеквизита( Номенклатура, ИмяРеквизита,Организация);
	иначеЕсли ТипНоменклатуры = Тип("СправочникСсылка.Номенклатура") и Номенклатура.ВестиУчетПоХарактеристикам тогда
		Если ИмяРеквизита = "Характеристика" тогда
			ОбразецТипаХарактеристики = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		иначеЕсли ИмяРеквизита = "Серия" тогда
			ОбразецТипаХарактеристики = Справочники.СерииНоменклатуры.ПустаяСсылка();
		иначеЕсли ИмяРеквизита = "Состояние" тогда
			ОбразецТипаХарактеристики = Справочники.СК_Состояния.ПустаяСсылка();
		КонецЕсли;
	иначе 
		ГруппаПродукции = УГМК_ОперативныйУчет.ПолучитьГруппуПродукцииПоЗначению( Номенклатура);
		ОбразецТипаХарактеристики = УГМК_СлужебныйПовторноеИспользование.ПолучитьОбразецТипаРеквизита( ГруппаПродукции, ИмяРеквизита, Организация);
	КонецЕсли;
		
	Если ОбразецТипаХарактеристики = Неопределено тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Типы = Новый Массив;
	Типы.Добавить( ТипЗнч( ОбразецТипаХарактеристики));
	ОписаниеТипов = Новый ОписаниеТипов( Типы);
	
	ЭлементЗначение = Неопределено;
	ДанныеФормы.Свойство("ЭлементЗначение",ЭлементЗначение);
	ЭлементЗначение = ОписаниеТипов.ПривестиЗначение( ЭлементЗначение);
	
	Мета = ОбразецТипаХарактеристики.Метаданные();
	
	ВладелецОбразцаТипов = Неопределено;
	Если Мета.Владельцы.Количество() > 0 тогда 
		ВладелецОбразцаТипов = ОбразецТипаХарактеристики.Владелец;
	КонецЕсли;
	
	Если (не ЗначениеЗаполнено( ВладелецОбразцаТипов)) и (ТипЗнч( ОбразецТипаХарактеристики) = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров")) тогда
		ВладелецОбразцаТипов = УГМК_ПеренесенныеПроцедурыИФункции.СК_ПолучитьТипРазмераПоПараметрам( ГруппаПродукции);
	КонецЕсли;
	
	Если ТипЗнч( ВладелецОбразцаТипов) = ТипНоменклатуры и (не ЗначениеЗаполнено( ВладелецОбразцаТипов)) тогда
		ВладелецОбразцаТипов = Номенклатура;
	иначеЕсли ТипНоменклатуры = Тип("СправочникСсылка.СК_ПродукцияОЦМ") и ТипЗнч( ВладелецОбразцаТипов) = Тип("СправочникСсылка.Номенклатура") тогда
		ВладелецОбразцаТипов = Номенклатура.Металлопрокат;
	КонецЕсли;
	
	Результат = Новый Структура("ВладелецОбразцаТипов, МетаИмя, Значение", ВладелецОбразцаТипов, Мета.Имя, ЭлементЗначение);
	
	Возврат( Результат);
КонецФункции

Функция ПривестиЗначениеПоНастройке( ТекущееЗначение, МетаИмя, ЗначениеНастройки, ВладелецОбразцаТипов, ПустоеЗначение) Экспорт
	Результат = ТекущееЗначение;
	
	Мета = Метаданные.Справочники[ МетаИмя];
	Если ТипЗнч( ТекущееЗначение) <> Тип( "СправочникСсылка."+МетаИмя) тогда
		Результат = ПустоеЗначение;
	иначеЕсли (Мета.Владельцы.Количество() > 0) и (ТекущееЗначение.Владелец <> ВладелецОбразцаТипов) тогда
		Результат = Справочники[ МетаИмя].НайтиПоНаименованию( ТекущееЗначение.Наименование, Истина,,ВладелецОбразцаТипов);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Процедура ПолучитьОтчетПоАнализамПартии( тОтчет, ВариантСсылка) Экспорт
	ВариантСсылка = Неопределено;
	
	тОтчет = Справочники.ПроизвольныеОтчеты.НайтиПоНаименованию("Результаты лаб. иссл(регистратор)", Истина);
	Если ЗначениеЗаполнено(тОтчет) И тОтчет.ЭтоГруппа = Ложь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СохраненныеНастройки.Ссылка
			|ИЗ
			|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
			|ГДЕ
			|	СохраненныеНастройки.Наименование = &Наименование
			|	И СохраненныеНастройки.ТипНастройки = &ТипНастройки
			|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";

		Запрос.УстановитьПараметр("Наименование", "Основной");
		Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", тОтчет);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВариантСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьОтчетПоОстаткамОперативныйУчет( тОтчет, ВариантСсылка) Экспорт
	ВариантСсылка = Неопределено;
	
	тОтчет = Справочники.ПроизвольныеОтчеты.НайтиПоНаименованию("Оперативные остатки", Истина);
	Если ЗначениеЗаполнено(тОтчет) И тОтчет.ЭтоГруппа = Ложь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СохраненныеНастройки.Ссылка
			|ИЗ
			|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
			|ГДЕ
			|	СохраненныеНастройки.Наименование = &Наименование
			|	И СохраненныеНастройки.ТипНастройки = &ТипНастройки
			|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";

		Запрос.УстановитьПараметр("Наименование", "Основной");
		Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", тОтчет);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВариантСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВесТары( Знач ОбъектТара) Экспорт
	Результат = 0;
	Если ЗначениеЗаполнено( ОбъектТара) тогда
		Запр = Новый Запрос;
		Запр.Текст = "ВЫБРАТЬ
		             |	УГМК_ВесТехнологическойТарыСрезПоследних.КоличествоТара
		             |ИЗ
		             |	РегистрСведений.УГМК_ВесТехнологическойТары.СрезПоследних(, Тара = &Тара) КАК УГМК_ВесТехнологическойТарыСрезПоследних";
		Запр.УстановитьПараметр("Тара",ОбъектТара);
		РезультатЗ = Запр.Выполнить().Выбрать();
		Если РезультатЗ.Следующий() тогда
			Результат = РезультатЗ.КоличествоТара;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Процедура УдалитьЗначениеКлюча( КлючПоСвойствам, Знач Имя, Знач Удалить) Экспорт
	Если Удалить тогда
		Поз = КлючПоСвойствам.Найти( Имя);
		Если Поз <> Неопределено тогда
			КлючПоСвойствам.Удалить( Поз);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Аналог ОбновитьТабличнуюЧастьДокумента
Процедура ДобавитьСтрокиКТабличнойЧасти( ТабЧасть, Знач ВыбранноеЗначение, Знач ДополнениеИмени) Экспорт
	Перем Значение, ХранилищеТаблицаПартий;
	
	ВыбранноеЗначение.Свойство("ХранилищеТаблицаПартий", ХранилищеТаблицаПартий);
	
	ТаблицаПартий = ХранилищеТаблицаПартий.Получить();
	Если ЗначениеЗаполнено( ТаблицаПартий) Тогда
		ИменаКолонок = УГМК_ОперативныйУчет.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
		КлассификаторЕдИзм_Килограмм = УГМК_СлужебныеФункции.ПолучитьНастройку("КлассификаторЕдИзм_Килограмм");
		
		КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам();
		КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча();
		
		ЕстьКоэффициент = ТаблицаПартий.Колонки.Найти( ИменаКолонок.Коэффициент) = Неопределено;
		УдалитьЗначениеКлюча( КлючПоСвойствам, "Коэффициент", ЕстьКоэффициент);
		УдалитьЗначениеКлюча( КлючНатуральный, "Коэффициент", ЕстьКоэффициент);
		
		ЕстьКоэффициент1 = ТаблицаПартий.Колонки.Найти( ИменаКолонок.Коэффициент1) = Неопределено;
		УдалитьЗначениеКлюча( КлючПоСвойствам, "Коэффициент1", ЕстьКоэффициент1);
		УдалитьЗначениеКлюча( КлючНатуральный, "Коэффициент1", ЕстьКоэффициент1);
		
		Для Каждого СтрокаПодбора Из ТаблицаПартий Цикл
			Если СтрокаПодбора.ПоСвойствам тогда
				КлючСтроки = КлючПоСвойствам;
			иначе
				КлючСтроки = КлючНатуральный;
			КонецЕсли;
			
			ОтборСтрок = Новый Структура;
			Для каждого КолонкаКлюча из КлючСтроки цикл
				ОтборСтрок.Вставить( ИменаКолонок[ КолонкаКлюча], СтрокаПодбора[ КолонкаКлюча]);
			КонецЦикла;
			
			СтрокиМ = ТабЧасть.НайтиСтроки( ОтборСтрок);
			
			Если СтрокиМ.Количество() = 0 тогда
				НоваяСтрока = ТабЧасть.Добавить();
			иначе
				НоваяСтрока = СтрокиМ[ 0];
			КонецЕсли;
			
			НоваяСтрока[ ИменаКолонок.ПоСвойствам] = СтрокаПодбора.ПоСвойствам;
			
			НоваяСтрока[ ИменаКолонок.Номенклатура] = СтрокаПодбора.Номенклатура;
			НоваяСтрока[ ИменаКолонок.ХарактеристикаНоменклатуры] = СтрокаПодбора.ХарактеристикаНоменклатуры;
			НоваяСтрока[ ИменаКолонок.Состояние] = СтрокаПодбора.Состояние;
			
			НоваяСтрока[ ИменаКолонок.МаркаСплава] = СтрокаПодбора.МаркаСплава;
			НоваяСтрока[ ИменаКолонок.ГруппаПродукции] = СтрокаПодбора.ГруппаПродукции;
			Если ТипЗнч(СтрокаПодбора.ПаспортПартии)=Тип("СправочникСсылка.СерииНоменклатуры") Тогда
				НоваяСтрока[ ИменаКолонок.СерияНоменклатуры] = СтрокаПодбора.ПаспортПартии;
			Иначе
				НоваяСтрока[ ИменаКолонок.ПаспортПартии] = СтрокаПодбора.ПаспортПартии;
			КонецЕсли;
			НоваяСтрока[ ИменаКолонок.Тара] = СтрокаПодбора.Тара;
			НоваяСтрока[ ИменаКолонок.КоличествоТара] = СтрокаПодбора.КоличествоТара;
			НоваяСтрока[ ИменаКолонок.Количество] = СтрокаПодбора.Количество;
			НоваяСтрока[ ИменаКолонок.Количество1] = СтрокаПодбора.Количество1;
			НоваяСтрока[ ИменаКолонок.КоличествоМест] = СтрокаПодбора.КоличествоМест;
			
			НоваяСтрока[ ИменаКолонок.Склад] = СтрокаПодбора.МестоУчета;
			Если не ЗначениеЗаполнено( НоваяСтрока[ ИменаКолонок.КлючСвязи]) тогда
				НоваяСтрока[ ИменаКолонок.КлючСвязи] = УГМК_ОперативныйУчетКлиентСервер.ПолучитьНовыйКлючСтрокиИсточника( ТабЧасть, ИменаКолонок.КлючСвязи);
			КонецЕсли;
			
			УГМК_ОперативныйУчетКлиентСервер.ПроверитьЗаполнитьРеквизитыСтроки( НоваяСтрока, ИменаКолонок);
			
			Номенклатура = НоваяСтрока[ ИменаКолонок.Номенклатура];
			Если не ЗначениеЗаполнено( НоваяСтрока[ ИменаКолонок.ЕдиницаИзмерения]) тогда
				Если ТипЗнч( Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда
					НоваяСтрока[ ИменаКолонок.ЕдиницаИзмерения] = Номенклатура.ЕдиницаХраненияОстатков;
				иначе
					НоваяСтрока[ ИменаКолонок.ЕдиницаИзмерения] = КлассификаторЕдИзм_Килограмм;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоТочкаУчета() Экспорт
		//ОЦМ Мобильная
	Возврат Ложь;
	//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//
	//ЭтоТочкаУчета = Ложь;
	//Если ЗначениеЗаполнено( РабочееМесто) тогда
	//	ЭтоТочкаУчета = РабочееМесто.УГМК_ЭтоТочкаУчета и (ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);
	//КонецЕсли;
	//
	//Возврат( ЭтоТочкаУчета);
КонецФункции

Процедура ОбработатьШрифтыФормы( УпрФорма, Знач ГруппыКнопок = Неопределено, ВысотаКнопокВПанелях = 2) Экспорт
	ЭтоТочкаУчета = УГМК_ОперативныйУчетВызовСервера.ЭтоТочкаУчета();
	
	МассивГруппКнопок = Новый Массив;
	Если ГруппыКнопок <> Неопределено тогда
		Для каждого ГруппаИмя из ГруппыКнопок цикл
			МассивГруппКнопок.Добавить( УпрФорма.Элементы.Найти( ГруппаИмя.Ключ));
		КонецЦикла;
	КонецЕсли;
	
	//Если УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияОперативногоУчета() тогда
		ШрифтЭлементов = ШрифтыСтиля.ШрифтТекста;
		ШрифтКнопок = ШрифтыСтиля.ШрифтТекста;
		ШрифтТаблиц = ШрифтыСтиля.ШрифтТекста;
		Если ЭтоТочкаУчета тогда
			ШрифтЭлементов = ШрифтыСтиля.УГМК_ШрифтТочкиУчета;
			ШрифтКнопок = Новый Шрифт( ШрифтЭлементов,, 13);
			//ШрифтТаблиц = Новый Шрифт( ШрифтЭлементов,, 12);
			ШрифтТаблиц = ШрифтЭлементов;
		КонецЕсли;
		
		ТипПолеФормы = Тип("ПолеФормы");
		ТипТаблицаФормы = Тип("ТаблицаФормы");
		ТипКнопкаФормы = Тип("КнопкаФормы");
		ТипДекорация = Тип("ДекорацияФормы");
		Для каждого ЭлементФ из УпрФорма.Элементы цикл
			ТипЭлементФ = ТипЗнч( ЭлементФ);
			Если ТипЭлементФ = ТипПолеФормы тогда
				Если ЭлементФ.Вид = ВидПоляФормы.ПолеВвода тогда
					ЭлементФ.Шрифт = ШрифтЭлементов;
					ЭлементФ.ШрифтЗаголовка = ШрифтЭлементов;
				иначеЕсли ЭлементФ.Вид = ВидПоляФормы.ПолеФлажка тогда
					ЭлементФ.ШрифтЗаголовка = ШрифтЭлементов;
				иначеЕсли ЭлементФ.Вид = ВидПоляФормы.ПолеПереключателя тогда
					ЭлементФ.Шрифт = ШрифтЭлементов;
				иначеЕсли ЭлементФ.Вид = ВидПоляФормы.ПолеНадписи тогда
					ЭлементФ.Шрифт = ШрифтЭлементов;
					ЭлементФ.ШрифтЗаголовка = ШрифтЭлементов;
					ЭлементФ.ШрифтПодвала = ШрифтЭлементов;
				КонецЕсли;
			иначеЕсли ТипЭлементФ = ТипДекорация тогда
				ЭлементФ.Шрифт = ШрифтЭлементов;
			иначеЕсли ТипЭлементФ = ТипТаблицаФормы тогда
				ЭлементФ.Шрифт = ШрифтТаблиц;
				Если ЭтоТочкаУчета тогда
					Для каждого КолонкаПоля из ЭлементФ.ПодчиненныеЭлементы цикл
						ТипКолонкиПоля = Тип( КолонкаПоля);
						
						ЭтоОтветственный = Найти( КолонкаПоля.Имя, "Ответственный") + Найти( КолонкаПоля.Имя, "Состояние") + Найти( КолонкаПоля.Имя, "Автом");
						Если (ЭтоОтветственный = 0) 
						   и (ТипКолонкиПоля = ТипПолеФормы) 
						   и (КолонкаПоля.Вид = ВидПоляФормы.ПолеВвода или КолонкаПоля.Вид = ВидПоляФормы.ПолеНадписи) тогда
							КолонкаПоля.АвтоВысотаЯчейки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			иначеЕсли ТипЭлементФ = ТипКнопкаФормы тогда
				Если ЭтоТочкаУчета и (МассивГруппКнопок.Найти( ЭлементФ.Родитель) <> Неопределено) тогда
					Если ЗначениеЗаполнено( ВысотаКнопокВПанелях) тогда
						ЭлементФ.Высота = ВысотаКнопокВПанелях;
					КонецЕсли;
					ЭлементФ.Шрифт = ШрифтЭлементов;
				иначе
					ЭлементФ.Шрифт = ШрифтКнопок;
				КонецЕсли;
				//Сделаем кнопку пометки на удаление - невидимой, а создать шириной 20
				Если ЭлементФ.Имя="СписокСоздать" Тогда
					ЭлементФ.Ширина=20;
				КонецЕсли;
				Если ЭлементФ.Имя="УстановитьПометкуУдаления1" Тогда
					ЭлементФ.Видимость=Ложь;
				КонецЕсли;
				//****
			КонецЕсли;
		КонецЦикла;
	//КонецЕсли;
	
	Если ЭтоТочкаУчета тогда 
		Если (УпрФорма.Элементы.Найти("СписокУвеличитель") <> Неопределено) тогда
			УпрФорма.Элементы.СписокУвеличитель.Шрифт = Новый Шрифт( УпрФорма.Элементы.СписокУвеличитель.Шрифт,,20);
		КонецЕсли;
		Если (УпрФорма.Элементы.Найти("СписокУвеличитель1") <> Неопределено) тогда
			УпрФорма.Элементы.СписокУвеличитель1.Шрифт = Новый Шрифт( УпрФорма.Элементы.СписокУвеличитель1.Шрифт,,20);
		КонецЕсли;
		Если (УпрФорма.Элементы.Найти("СписокУвеличитель2") <> Неопределено) тогда
			УпрФорма.Элементы.СписокУвеличитель2.Шрифт = Новый Шрифт( УпрФорма.Элементы.СписокУвеличитель2.Шрифт,,20);
		КонецЕсли;
		Если (УпрФорма.Элементы.Найти("СписокУвеличитель3") <> Неопределено) тогда
			УпрФорма.Элементы.СписокУвеличитель3.Шрифт = Новый Шрифт( УпрФорма.Элементы.СписокУвеличитель3.Шрифт,,20);
		КонецЕсли;
		Если (УпрФорма.Элементы.Найти("СписокУвеличитель4") <> Неопределено) тогда
			УпрФорма.Элементы.СписокУвеличитель4.Шрифт = Новый Шрифт( УпрФорма.Элементы.СписокУвеличитель4.Шрифт,,20);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиДействиеФормы( Знач ЭтоТочкаУчета, Знач ИмяРеквизита, ЭтаФорма, Знач Заголовок = "<<") Экспорт
	Если Заголовок = "< Ввести" тогда
		Заголовок = "<<";
	КонецЕсли;

	ЭлементФ = ЭтаФорма.Элементы[ ИмяРеквизита];
	ЭлементК = ЭтаФорма.Элементы["Кнопка"+ИмяРеквизита+"Выбрать"];
	
	Если ЭтоТочкаУчета тогда
		ИмяКоманды = ИмяРеквизита+"НачалоВыбора_Доп";
		НоваяКоманда = ЭтаФорма.Команды.Найти( ИмяКоманды);
		Если НоваяКоманда = Неопределено тогда
			НоваяКоманда = ЭтаФорма.Команды.Добавить( ИмяКоманды);
		КонецЕсли;
		
		НоваяКоманда.Действие = ЭлементФ.ПолучитьДействие("НачалоВыбора");
		НоваяКоманда.Заголовок = Заголовок;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		ЭлементК.ИмяКоманды = НоваяКоманда.Имя;
		
		ЭлементФ.КнопкаВыбора = Ложь;
		ЭлементК.Видимость = Истина;
	иначе
		ЭлементФ.КнопкаВыбора = Истина;
		ЭлементК.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСледующийНомер( Знач ТекДата, Знач Организация, Знач ИмяТипа, ДляПоиска = Неопределено, ИмяНомера = "ДляПоиска") Экспорт
	Запр = Новый Запрос;
	ДопУсловие = "";
	Если ДляПоиска <> Неопределено тогда
		Для каждого Элемент из ДляПоиска цикл
			ДопУсловие = ДопУсловие +" И УГМК_ПартияСырья."+Элемент.Ключ + " = &"+Элемент.Ключ;
			Запр.УстановитьПараметр( Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запр.УстановитьПараметр("Дата1", ДобавитьМесяц( ТекДата, -1));
	Запр.УстановитьПараметр("Дата2", ДобавитьМесяц( ТекДата, 1));
	Запр.УстановитьПараметр("Организация",Организация);
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_ПартияСырья.*
	             |ИЗ
	             |	БизнесПроцесс."+ИмяТипа+" КАК УГМК_ПартияСырья
	             |ГДЕ
	             |	УГМК_ПартияСырья.Дата МЕЖДУ &Дата1 И &Дата2
	             |	И НЕ УГМК_ПартияСырья.ПометкаУдаления
	             |	И УГМК_ПартияСырья.Организация = &Организация "+ДопУсловие+"
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УГМК_ПартияСырья.Дата убыв, УГМК_ПартияСырья."+ИмяНомера+" УБЫВ";
	
	РезультатСтруктура = Новый Структура("Ссылка");
	МетаРеквизиты = Метаданные.БизнесПроцессы[ ИмяТипа].Реквизиты;
	Для каждого Рекв из МетаРеквизиты цикл
		РезультатСтруктура.Вставить( Рекв.Имя); 
	КонецЦикла;
	
	РезультатЗ = Запр.Выполнить().Выбрать();
	Если РезультатЗ.Следующий() тогда
		ЗаполнитьЗначенияСвойств( РезультатСтруктура, РезультатЗ);
	КонецЕсли;
	
	Возврат( РезультатСтруктура);
КонецФункции

Функция ПолучитьПредставлениеПартии( Знач Партия, ДобавитьТип = Истина) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.ПолучитьПредставлениеПартии( Партия, ДобавитьТип));
КонецФункции

Функция ПолучитьПредставлениеЗаказа( Знач Заказ) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.ПолучитьПредставлениеЗаказа( Заказ));
КонецФункции

Процедура ПолучитьПредставленияПартий( ПартииДляПредставления, ДобавитьТип = Истина) Экспорт
	МассивСсылок = Новый Массив;
	
	Для каждого Элемент из ПартииДляПредставления цикл
		МассивСсылок.Добавить( Элемент.Ключ);
	КонецЦикла;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",МассивСсылок);
	Запр.Текст = "ВЫБРАТЬ
	             |	БП.Ссылка,
	             |	БП.Номер,
	             |	БП.ДляПоиска,
	             |	БП.ДляПредставления,
	             |	ПРЕДСТАВЛЕНИЕ(БП.Ссылка) КАК ПредставлениеСсылка
	             |ИЗ
	             |	БизнесПроцесс.УГМК_Плавка КАК БП
	             |ГДЕ
	             |	БП.Ссылка В(&Ссылка)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	БП.Ссылка,
	             |	БП.Номер,
	             |	БП.ДляПоиска,
	             |	БП.ДляПредставления,
	             |	ПРЕДСТАВЛЕНИЕ(БП.Ссылка)
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПаспортПартии КАК БП
	             |ГДЕ
	             |	БП.Ссылка В(&Ссылка)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	БП.Ссылка,
	             |	БП.Номер,
	             |	БП.ДляПоиска,
	             |	БП.ДляПредставления,
	             |	ПРЕДСТАВЛЕНИЕ(БП.Ссылка)
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПартияСырья КАК БП
	             |ГДЕ
	             |	БП.Ссылка В(&Ссылка)
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	БП.Ссылка,
	             |	БП.Номер,
	             |	БП.ДляПоиска,
	             |	БП.ДляПредставления,
	             |	ПРЕДСТАВЛЕНИЕ(БП.Ссылка)
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПаспортПартииСТК КАК БП
	             |ГДЕ
	             |	БП.Ссылка В(&Ссылка)";
				 
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		ТекДобавитьТип = ДобавитьТип;
		Если ЗначениеЗаполнено( Результат.ДляПредставления) тогда
			РезультатСтр = Результат.ДляПредставления;
		иначе
			РезультатСтр = Результат.ПредставлениеСсылка;
			ТекДобавитьТип = Ложь;
		КонецЕсли;
		
		Если ТекДобавитьТип тогда
			ТипПартии = ТипЗнч( Результат.Ссылка);
			Если ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
				РезультатСтр = РезультатСтр + " (Сырья)";
			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") тогда
				РезультатСтр = РезультатСтр + " (Партия)";
			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") тогда
				РезультатСтр = РезультатСтр + " (СТК)";
			иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_Плавка") тогда
				РезультатСтр = РезультатСтр + " (Плавка)";
			КонецЕсли;
		КонецЕсли;
		
		ПартииДляПредставления.Вставить( Результат.Ссылка, РезультатСтр);
	КонецЦикла;
КонецПроцедуры

Функция ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте() Экспорт 
	Возврат Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
КонецФункции	

Функция ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте() Экспорт
	Возврат Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
КонецФункции

Функция Получить_ИдентификаторТипаАнализа( Знач ТипАнализа) Экспорт
	Результат = Неопределено;
	Если ЗначениеЗаполнено( ТипАнализа) тогда
		Результат = ТипАнализа.УГМК_Идентификатор;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ЭтоАдминистратор() Экспорт
	Возврат( ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит( Метаданные.Роли.ПравоАдминистрирования));
КонецФункции

Функция ПолучитьСписокТиповТехоснасток( Знач РабочийЦентр, Знач УГМК_ТипТехоснастки = Неопределено) Экспорт
	СписокТипТехоснастки = Новый СписокЗначений;
	
	ДополнитьМассивЗначениями( СписокТипТехоснастки, УГМК_ТипТехоснастки);
	
	Если ЗначениеЗаполнено( РабочийЦентр) тогда
		РЦ = РабочийЦентр.УГМК_ТипыТехоснасток;
		Для каждого Строка из РЦ цикл
			СписокТипТехоснастки.Добавить( Строка.УГМК_ТипТехоснастки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат( СписокТипТехоснастки);
КонецФункции

Функция НадоДобавить( РабочиеЦентры, Значение, ЭтоСписокЗначений)
	Результат = Истина;
	
	Если ЭтоСписокЗначений тогда
		Результат = РабочиеЦентры.НайтипоЗначению( Значение) = Неопределено;
	иначе
		Результат = РабочиеЦентры.Найти( Значение) = Неопределено;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Процедура ДополнитьМассивЗначениями( РабочиеЦентры, Знач Значение) Экспорт
	ТипЗнчЗначение = ТипЗнч( Значение);
	
	ЭтоСписокЗначений = ТипЗнч( РабочиеЦентры) = Тип("СписокЗначений");
	
	Если (ТипЗнчЗначение = Тип("Массив")) или (ТипЗнчЗначение = Тип("ФиксированныйМассив")) тогда
		Для каждого Зн из Значение цикл
			Если ЗначениеЗаполнено( Зн) и НадоДобавить( РабочиеЦентры, Зн, ЭтоСписокЗначений) тогда
				РабочиеЦентры.Добавить( Зн);
			КонецЕсли;
		КонецЦикла;
	иначеЕсли (ТипЗнчЗначение = Тип("Структура")) или (ТипЗнчЗначение = Тип("СписокЗначений")) тогда
		Для каждого Зн из Значение цикл
			Если ЗначениеЗаполнено( Зн.Значение) и НадоДобавить( РабочиеЦентры, Зн.Значение, ЭтоСписокЗначений) тогда
				РабочиеЦентры.Добавить( Зн.Значение);
			КонецЕсли;
		КонецЦикла;
	иначеЕсли ЗначениеЗаполнено( Значение) и НадоДобавить( РабочиеЦентры, Значение, ЭтоСписокЗначений) тогда
		РабочиеЦентры.Добавить( Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЗначенияСвойства( Знач ОбъектЗСсылка, Знач Свойство, Знач ТекущийАвтомобиль) Экспорт
	Если ЗначениеЗаполнено( ТекущийАвтомобиль) тогда
		Менеджер = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Менеджер.Активность = Истина;
		Менеджер.Объект = ОбъектЗСсылка;
		Менеджер.Свойство = Свойство;
		Менеджер.Значение = ТекущийАвтомобиль;
		Менеджер.Записать();
	иначе
		Менеджер = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Менеджер.Объект = ОбъектЗСсылка;
		Менеджер.Свойство = Свойство;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() тогда
			Менеджер.Удалить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЭтоКонфигурацияОперативногоУчета() Экспорт
	Возврат( Метаданные.Имя = "ОперативныйУчет");
КонецФункции

Функция ЭтоКонфигурацияРегламентированногоУчета() Экспорт
	Возврат( Метаданные.Имя = "УправлениеПроизводственнымПредприятием");
КонецФункции

Процедура КорректировкаДоступности( ДоступныМатериалы, ДоступнаПродукция, Знач ЗависимостиДоступности, Знач МатериалыКоличество, Знач ПродукцияКоличество) Экспорт
	//ОЦМ Мобильная
	//Перем ТолькоПросмотр, ДокументСмены, ВидОперации;
	//
	//ЗависимостиДоступности.Свойство( "ТолькоПросмотр", ТолькоПросмотр);
	//ЗависимостиДоступности.Свойство( "ДокументСмены", ДокументСмены);
	//ЗависимостиДоступности.Свойство( "ВидОперации", ВидОперации);
	//
	//Если ТолькоПросмотр = Истина тогда
	//	ДоступныМатериалы = Ложь;
	//	ДоступнаПродукция = Ложь;
	//иначеЕсли ЗначениеЗаполнено( ДокументСмены) тогда
	//	ДоступныМатериалы = Ложь;
	//	ДоступнаПродукция = Ложь;
	//иначеЕсли (ВидОперации = Справочники.УГМК_СостоянияЗаказа.Перемещение) и (ПродукцияКоличество > 0) и (УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетКонтрольИзмененияОтправкиВПеремещении") = Истина) тогда
	//	ДоступныМатериалы = Ложь;
	//иначеЕсли ВидОперации = Справочники.УГМК_СостоянияЗаказа.ИнвентаризацияТары тогда
	//	Если РольДоступна("УГМК_ТараТехнологическаяРедактирование") тогда
	//		ДоступныМатериалы = Истина;
	//		ДоступнаПродукция = Истина;
	//	иначе
	//		ДоступныМатериалы = Ложь;
	//		ДоступнаПродукция = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

// ************************** логирование и обработка штрихкодов сканера ******************
Функция БиркаОбработанаФормой( Знач Данные, Знач РабочееМесто, Знач ПользовательОбработки, Знач ВремяОбработки)
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("РабочееМесто",РабочееМесто);
	Запр.УстановитьПараметр("ПользовательРегистрации",ПользовательОбработки);
	Запр.УстановитьПараметр("ВремяОбработки",ВремяОбработки-3);
	
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_ДанныеКомандСканера.ВремяРегистрации КАК ВремяРегистрации,
	             |	УГМК_ДанныеКомандСканера.ДополнительныйРазделитель КАК ДополнительныйРазделитель,
	             |	УГМК_ДанныеКомандСканера.ДанныеСканера
	             |ИЗ
	             |	РегистрСведений.УГМК_ДанныеКомандСканера КАК УГМК_ДанныеКомандСканера
	             |ГДЕ
	             |	УГМК_ДанныеКомандСканера.РабочееМесто = &РабочееМесто
	             |	И УГМК_ДанныеКомандСканера.ТипСодержимого = 3
	             |	И УГМК_ДанныеКомандСканера.ПользовательРегистрации = &ПользовательРегистрации
	             |	И УГМК_ДанныеКомандСканера.ВремяОбработки >= &ВремяОбработки
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ВремяРегистрации УБЫВ,
	             |	ДополнительныйРазделитель УБЫВ";
				 
				 
	Если Лев( Данные, 1) = "_" тогда
		Данные = "AgFTS2/0iI3BTqDV67a9oKcN"+Сред( Данные, 2);
	КонецЕсли;
	
	БиркаОбработанаФормой = Ложь;
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ДанныеСканера = Результат.ДанныеСканера.Получить();
		
		Если Лев( ДанныеСканера, 1) = "_" тогда
			ДанныеСканера = "AgFTS2/0iI3BTqDV67a9oKcN"+Сред( ДанныеСканера, 2);
		КонецЕсли;
		
		БиркаОбработанаФормой = ДанныеСканера = Данные;
	КонецЕсли;
	
	Возврат( БиркаОбработанаФормой);
КонецФункции

Процедура ЗаписатьЛогШтрихкодов( Знач Источник, Знач Событие, Знач Данные) Экспорт
	//ОЦМ Мобильная
	//Перем ИнформацияБирки;
	//
	//ТипСодержимого = -1;
	//РазделительСодержимого = 0;
	//ЭтоВзвешивание=Ложь;
	//СтруктураДанных=Новый Структура;
	//
	//СсылкаИзКода = УГМК_ОперативныйУчет.ВосстановитьСсылкуИзШтрихкода( Данные);
	//Если СсылкаИзКода <> Неопределено тогда
	//	ТипСодержимого = 1;
	//	ТипСсылки = ТипЗнч( СсылкаИзКода);
	//	Если ТипСсылки = Тип("СправочникСсылка.УГМК_Весы") тогда
	//		//получим вес
	//		СтруктураРезультата = УГМК_ОперативныйУчетКлиентСервер.Весы_РезультатОпросаАдреса( СокрЛП(СсылкаИзКода.Адрес));
	//		Если СтруктураРезультата.ДанныеПолучены тогда
	//			ЭтоВзвешивание=Истина;
	//			ТипСодержимого = 4;
	//			СтруктураДанных.Вставить("Весы",СсылкаИзКода);
	//			СтруктураДанных.Вставить("Количество",СтруктураРезультата.Вес);
	//		КонецЕсли;
	//		//****
	//	КонецЕсли;
	//иначеЕсли УГМК_ОперативныйУчетКлиентСервер.ЭтоКомандаСканера( Данные) тогда
	//	ТипСодержимого = 2;
	//	ДанныеКоманды = УГМК_ОперативныйУчет.ПолучитьДанныеКоманды( Данные);
	//	РазделительСодержимого = ДанныеКоманды[ 0];
	//иначеЕсли УГМК_ОперативныйУчет.ШКСерии( Данные) Тогда
	//	ТипСодержимого = 5;
	//иначеЕсли УГМК_ОперативныйУчет.ПрочитатьСтрокуЭтикетки( Данные, ИнформацияБирки) тогда
	//	ТипСодержимого = 3;
	//КонецЕсли;
	//
	//НачатьТранзакцию();
	//
	//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//ПользовательРегистрации = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//ВремяРегистрации = ТекущаяДата();
	//
	//Если (ТипСодержимого = 3) или (ТипСодержимого = 5) тогда
	//	Если БиркаОбработанаФормой( Данные, РабочееМесто, ПользовательРегистрации, ВремяРегистрации) тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("РабочееМесто",РабочееМесто);
	//Запр.УстановитьПараметр("ВремяРегистрации",ВремяРегистрации);
	//Запр.Текст = "ВЫБРАТЬ
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто,
	//             |	УГМК_ДанныеКомандСканера.ВремяРегистрации,
	//             |	МАКСИМУМ(УГМК_ДанныеКомандСканера.ДополнительныйРазделитель) КАК ДополнительныйРазделитель
	//             |ИЗ
	//             |	РегистрСведений.УГМК_ДанныеКомандСканера КАК УГМК_ДанныеКомандСканера
	//             |ГДЕ
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто = &РабочееМесто
	//             |	И УГМК_ДанныеКомандСканера.ВремяРегистрации = &ВремяРегистрации
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто,
	//             |	УГМК_ДанныеКомандСканера.ВремяРегистрации";
	//
	//ДополнительныйРазделитель = 0;
	//Результат = Запр.Выполнить().Выбрать();
	//Если Результат.Следующий() тогда
	//	ДополнительныйРазделитель = ДополнительныйРазделитель + 1;
	//КонецЕсли;
	//
	//МенеджерЗаписи = РегистрыСведений.УГМК_ДанныеКомандСканера.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Активность = Истина;
	//МенеджерЗаписи.РабочееМесто = РабочееМесто;
	//МенеджерЗаписи.ВремяРегистрации = ВремяРегистрации;
	//МенеджерЗаписи.ДополнительныйРазделитель = ДополнительныйРазделитель;
	//Если ЭтоВзвешивание Тогда
	//	МенеджерЗаписи.ДанныеСканера = Новый ХранилищеЗначения( СтруктураДанных);
	//Иначе
	//	МенеджерЗаписи.ДанныеСканера = Новый ХранилищеЗначения( Данные);
	//КонецЕсли;
	//МенеджерЗаписи.ТипСодержимого = ТипСодержимого;
	//МенеджерЗаписи.РазделительСодержимого = РазделительСодержимого;
	//МенеджерЗаписи.ПользовательРегистрации = ПользовательРегистрации;
	//МенеджерЗаписи.Записать();
	//
	//ЗафиксироватьТранзакцию();
	//Если ЭтоВзвешивание Тогда
	//	//мигание
	//	Попытка
	//		Соединение = Новый HTTPСоединение(СокрЛП(СсылкаИзКода.Адрес),80,,,,5);  
	//		Заголовки = Новый Соответствие();
	//		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded; charset=Windows-1251");
	//		Запрос = Новый HTTPЗапрос("/alert", Заголовки);
	//		ОтветСервера = Соединение.Получить(Запрос);          // Ответ от контроллера
	//	исключение
	//	КонецПопытки;
	//	//****
	//КонецЕсли;
КонецПроцедуры

Процедура ШтрихкодБиркиОбработан( Знач Данные) Экспорт
	//ОЦМ Мобильная
	//Перем ИнформацияБирки;
	//
	//НачатьТранзакцию();
	//
	//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//ВремяРегистрации = ТекущаяДата();
	//
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("РабочееМесто",РабочееМесто);
	//Запр.УстановитьПараметр("ВремяРегистрации",ВремяРегистрации);
	//Запр.Текст = "ВЫБРАТЬ
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто,
	//             |	УГМК_ДанныеКомандСканера.ВремяРегистрации,
	//             |	МАКСИМУМ(УГМК_ДанныеКомандСканера.ДополнительныйРазделитель) КАК ДополнительныйРазделитель
	//             |ИЗ
	//             |	РегистрСведений.УГМК_ДанныеКомандСканера КАК УГМК_ДанныеКомандСканера
	//             |ГДЕ
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто = &РабочееМесто
	//             |	И УГМК_ДанныеКомандСканера.ВремяРегистрации = &ВремяРегистрации
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	УГМК_ДанныеКомандСканера.РабочееМесто,
	//             |	УГМК_ДанныеКомандСканера.ВремяРегистрации";
	//
	//ДополнительныйРазделитель = 0;
	//Результат = Запр.Выполнить().Выбрать();
	//Если Результат.Следующий() тогда
	//	ДополнительныйРазделитель = ДополнительныйРазделитель + 1;
	//КонецЕсли;
	//
	//МенеджерЗаписи = РегистрыСведений.УГМК_ДанныеКомандСканера.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Активность = Истина;
	//МенеджерЗаписи.РабочееМесто = РабочееМесто;
	//МенеджерЗаписи.ВремяРегистрации = ВремяРегистрации;
	//МенеджерЗаписи.ДополнительныйРазделитель = ДополнительныйРазделитель;
	//МенеджерЗаписи.ДанныеСканера = Новый ХранилищеЗначения( Данные);
	//МенеджерЗаписи.ТипСодержимого = 3;
	//МенеджерЗаписи.ПользовательРегистрации = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//МенеджерЗаписи.ПользовательОбработки = МенеджерЗаписи.ПользовательРегистрации; 
	//МенеджерЗаписи.ВремяОбработки = ВремяРегистрации; 
	//МенеджерЗаписи.Записать();

	//ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ПолучитьДанныеСканера( Знач РабочееМесто, Знач ВремяРегистрации, Знач ДополнительныйРазделитель) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("РабочееМесто",РабочееМесто);
	Запр.УстановитьПараметр("ВремяРегистрации",ВремяРегистрации);
	Запр.УстановитьПараметр("ДополнительныйРазделитель",ДополнительныйРазделитель);
	
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДанныеКомандСканера.РабочееМесто,
	             |	УГМК_ДанныеКомандСканера.ВремяРегистрации,
	             |	УГМК_ДанныеКомандСканера.ДополнительныйРазделитель,
	             |	УГМК_ДанныеКомандСканера.ДанныеСканера,
	             |	УГМК_ДанныеКомандСканера.ТипСодержимого,
	             |	УГМК_ДанныеКомандСканера.ПользовательРегистрации,
	             |	УГМК_ДанныеКомандСканера.ПользовательОбработки,
	             |	УГМК_ДанныеКомандСканера.ВремяОбработки,
	             |	УГМК_ДанныеКомандСканера.Отменено
	             |ИЗ
	             |	РегистрСведений.УГМК_ДанныеКомандСканера КАК УГМК_ДанныеКомандСканера
	             |ГДЕ
	             |	УГМК_ДанныеКомандСканера.РабочееМесто = &РабочееМесто
	             |	И УГМК_ДанныеКомандСканера.ВремяРегистрации = &ВремяРегистрации
	             |	И УГМК_ДанныеКомандСканера.ДополнительныйРазделитель = &ДополнительныйРазделитель";
				 
	Результат = Новый Структура("ДанныеСканера,ТипСодержимого,ПользовательРегистрации,ПользовательОбработки,ВремяОбработки,Отменено");
	РезультатЗ = Запр.Выполнить().Выбрать();
	Если РезультатЗ.Следующий() тогда
		ЗаполнитьЗначенияСвойств( Результат, РезультатЗ);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Процедура ЗафиксироватьОбработкуШтрихкодов( Знач ВремяРегистрации, Знач ДополнительныйРазделитель, Знач Отменено) Экспорт
	//ОЦМ Мобильная
	//НачатьТранзакцию();
	//
	//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//ПользовательОбработки = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//ВремяОбработки = ТекущаяДата();
	//
	//МенеджерЗаписи = РегистрыСведений.УГМК_ДанныеКомандСканера.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.РабочееМесто = РабочееМесто;
	//МенеджерЗаписи.ВремяРегистрации = ВремяРегистрации;
	//МенеджерЗаписи.ДополнительныйРазделитель = ДополнительныйРазделитель;
	//МенеджерЗаписи.Прочитать();
	//Если МенеджерЗаписи.Выбран() тогда
	//	МенеджерЗаписи.ПользовательОбработки = ПользовательОбработки;
	//	МенеджерЗаписи.ВремяОбработки = ВремяОбработки;
	//	МенеджерЗаписи.Отменено = Отменено;
	//	МенеджерЗаписи.Записать();
	//КонецЕсли;
	//
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

// ****************************************************************************************

Функция ПолучитьГруппуНумерацииПоИмениТипа( ИмяТипа) Экспорт
	ГруппаНумерации = Неопределено;
	
	Если ИмяТипа = "УГМК_РезультатАнализа" тогда
		ГруппаНумерации = "Анализы";
	иначеЕсли ИмяТипа = "УГМК_ЗаявкаНаАнализ" тогда
		ГруппаНумерации = "Анализы";
	иначеЕсли ИмяТипа = "УГМК_СертификацияРезультат" тогда
		ГруппаНумерации = "СертификацияРезультат";
	иначеЕсли ИмяТипа = "УГМК_СертификацияСертификат" тогда
		ГруппаНумерации = "Сертификат";
	КонецЕсли;
	
	Возврат( ГруппаНумерации);
КонецФункции

Функция ВычислитьРазностьДат( Знач ТипОбъекта, Знач ДокументОбъектДата, Знач НачальнаяДатаДокумента) Экспорт
	РазностьДат = 0;
	
	Мета = Метаданные.НайтиПоТипу( ТипОбъекта);
	ПериодСменыНомера = Мета.ПериодичностьНомера;
	ГруппаНумерации = УГМК_ОперативныйУчетВызовСервера.ПолучитьГруппуНумерацииПоИмениТипа( Мета.Имя);
	
	ФорматДаты = УГМК_ОперативныйУчет.ВестиНумерациюДокументовОперативногоУчетаПоДате( ГруппаНумерации);
	Если ЗначениеЗаполнено( ФорматДаты) и (Формат( НачальнаяДатаДокумента, "ДФ="+ФорматДаты) <> Формат( ДокументОбъектДата, "ДФ="+ФорматДаты)) тогда
		РазностьДат = 1;
		
	иначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъектДата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъектДата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъектДата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъектДата);

	КонецЕсли;
	
	Возврат( РазностьДат);
КонецФункции

// ****************************************************************************************

Функция ПолучитьНомераСтрокРасходений( Знач ТаблицаМатериалы, Знач ТаблицаПродукция, Знач ПроверятьМеста = Ложь) Экспорт
	
	КонтрольТЗ = ТаблицаМатериалы.Скопировать( ,"Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Состояние,Качество,ПаспортПартии,Тара,МаркаСплава,ГруппаПродукции,Количество,Коэффициент,Количество1,КоличествоМест");
	Если не ПроверятьМеста тогда
		КонтрольТЗ.ЗаполнитьЗначения( 0, "КоличествоМест");
	КонецЕсли;
	
	Для каждого СтрокаМ из КонтрольТЗ цикл
		СтрокаМ.Количество = СтрокаМ.Количество * СтрокаМ.Коэффициент;
		СтрокаМ.Количество1 = СтрокаМ.Количество1 * СтрокаМ.Коэффициент;
	КонецЦикла;
	Для каждого СтрокаП из ТаблицаПродукция цикл
		НоваяСтрока = КонтрольТЗ.Добавить();
		НоваяСтрока.Номенклатура = СтрокаП.Продукция;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаП.ХарактеристикаПродукции;
		НоваяСтрока.СерияНоменклатуры = СтрокаП.СерияПродукции;
		НоваяСтрока.Состояние = СтрокаП.СостояниеПродукции;
		НоваяСтрока.Качество = СтрокаП.КачествоПродукции;
		НоваяСтрока.ПаспортПартии = СтрокаП.ПаспортПартииПродукции;
		НоваяСтрока.Тара = СтрокаП.ТараПродукции;
		НоваяСтрока.МаркаСплава = СтрокаП.МаркаСплаваПродукции;
		НоваяСтрока.ГруппаПродукции = СтрокаП.ГруппаПродукцииПродукции;
		НоваяСтрока.Количество = -СтрокаП.КоличествоПродукции * СтрокаП.КоэффициентПродукции;
		НоваяСтрока.Количество1 = -СтрокаП.Количество1Продукции * СтрокаП.КоэффициентПродукции;
		Если ПроверятьМеста тогда
			НоваяСтрока.КоличествоМест = -СтрокаП.КоличествоМестПродукции;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Состояние,Качество,ПаспортПартии,Тара,МаркаСплава,ГруппаПродукции","Количество,Количество1,КоличествоМест");
	
	ОтбиратьПоКолонкамМ = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Состояние,Качество,ПаспортПартии,Тара,МаркаСплава,ГруппаПродукции");
	ОтбиратьПоКолонкамП = Новый Структура("Продукция,ХарактеристикаПродукции,СерияПродукции,СостояниеПродукции,КачествоПродукции,ПаспортПартииПродукции,ТараПродукции,МаркаСплаваПродукции,ГруппаПродукцииПродукции");
	
	НомераСтрокРасходенийМ = Новый Массив;
	НомераСтрокРасходенийП = Новый Массив;
	
	Для каждого СтрокаМ из КонтрольТЗ цикл
		Если (СтрокаМ.Количество <> 0) или (СтрокаМ.Количество1 <> 0) или (СтрокаМ.КоличествоМест <> 0) тогда

			ЗаполнитьЗначенияСвойств( ОтбиратьПоКолонкамМ, СтрокаМ);
			СтрокиРасхождений = ТаблицаМатериалы.НайтиСтроки( ОтбиратьПоКолонкамМ);
			
			Для каждого СтрокаР из СтрокиРасхождений цикл
				Если НомераСтрокРасходенийМ.Найти( СтрокаР.НомерСтроки) = Неопределено тогда
					НомераСтрокРасходенийМ.Добавить( СтрокаР.НомерСтроки);
				КонецЕсли;
			КонецЦикла;
			
			ОтбиратьПоКолонкамП.Продукция = СтрокаМ.Номенклатура;
			ОтбиратьПоКолонкамП.ХарактеристикаПродукции = СтрокаМ.ХарактеристикаНоменклатуры;
			ОтбиратьПоКолонкамП.СерияПродукции = СтрокаМ.СерияНоменклатуры;
			ОтбиратьПоКолонкамП.СостояниеПродукции = СтрокаМ.Состояние;
			ОтбиратьПоКолонкамП.КачествоПродукции = СтрокаМ.Качество;
			ОтбиратьПоКолонкамП.ПаспортПартииПродукции = СтрокаМ.ПаспортПартии;
			ОтбиратьПоКолонкамП.ТараПродукции = СтрокаМ.Тара;
			ОтбиратьПоКолонкамП.МаркаСплаваПродукции = СтрокаМ.МаркаСплава;
			ОтбиратьПоКолонкамП.ГруппаПродукцииПродукции = СтрокаМ.ГруппаПродукции;
			
			СтрокиРасхождений = ТаблицаПродукция.НайтиСтроки( ОтбиратьПоКолонкамП);
			
			Для каждого СтрокаР из СтрокиРасхождений цикл
				Если НомераСтрокРасходенийП.Найти( СтрокаР.НомерСтроки) = Неопределено тогда
					НомераСтрокРасходенийП.Добавить( СтрокаР.НомерСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НомераСтрокРасходений = Новый Структура;
	НомераСтрокРасходений.Вставить("Материалы", НомераСтрокРасходенийМ);
	НомераСтрокРасходений.Вставить("Продукция", НомераСтрокРасходенийП);
	Возврат( НомераСтрокРасходений);
КонецФункции

Процедура УстановитьПодразделениеПоСкладу( Объект, Знач ИмяСклад, Знач ИмяПодразделение, Знач ПроверитьНомер, Знач ТекущийСклад, Знач ТекущееПодразделение) Экспорт
	Перем ТекСклад;
	
	ТекСклад = Объект[ ИмяСклад];
	
	Если ЗначениеЗаполнено( ТекСклад) и ЗначениеЗаполнено( ТекСклад.Подразделение) тогда
		Если Объект[ ИмяПодразделение] <> ТекСклад.Подразделение тогда
			Объект[ ИмяПодразделение] = ТекСклад.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьНомер тогда
		Если Не ПустаяСтрока( Объект.Номер) и (УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( ТекущийСклад) <> УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( Объект.Склад)) Тогда
			Объект.Номер = "";
		иначеЕсли Не ПустаяСтрока( Объект.Номер) и (УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( ТекущееПодразделение) <> УГМК_ОперативныйУчет.ПрефиксНумерацииДокументовПодразделения( Объект.Подразделение)) Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаОУ_ПриСозданииНаСервере( ТекФорма, ИмяСпискаДокументов = "Список") Экспорт
	УГМК_ОперативныйУчет.ПрименитьУсловноеОформлениеФормаОУ( ТекФорма.УсловноеОформление, ТекФорма.Элементы[ ИмяСпискаДокументов]);
	КнопкаОтменитьПроведение = ТекФорма.Элементы.Найти("ОтменитьПроведениеДокумента");
	Если КнопкаОтменитьПроведение <> Неопределено тогда
		КнопкаОтменитьПроведение.Видимость = Ложь;
	КонецЕсли;
	
	ТекФорма.Заголовок = ТекФорма.СформироватьЗаголовокФормы();
КонецПроцедуры

Функция ДокументСозданВТекущейИБ( ИнформационнаяБазаСоздания) Экспорт
	Возврат((ИнформационнаяБазаСоздания = Метаданные.Имя) или (ПустаяСтрока( ИнформационнаяБазаСоздания) и Метаданные.Имя = "УправлениеПроизводственнымПредприятием"));
КонецФункции

Функция РеквизитыСторнирующегоДокумента( СсылкаДокумент) Экспорт
	Перем Реквизиты, Результат;
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата");
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДокументФакт.Ссылка,
	             |	УГМК_ДокументФакт.Номер,
	             |	УГМК_ДокументФакт.Дата
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |ГДЕ
	             |	УГМК_ДокументФакт.ДокументОснование = &ДокументОснование
	             |	И УГМК_ДокументФакт.Сторно
	             |	И УГМК_ДокументФакт.Проведен";
	Запр.УстановитьПараметр("ДокументОснование",СсылкаДокумент);
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ЗаполнитьЗначенияСвойств( Реквизиты, Результат);
	КонецЕсли;
	
	Возврат( Реквизиты);
КонецФункции

Процедура ФормаОУ_ОбновитьЗаголовокОбъект( ТекФорма) Экспорт
	Перем ЭтотОбъект, СтрЗаголовок, Реквизиты;
	
	ЭтотОбъект = ТекФорма.Объект;

	СтрЗаголовок = ТекФорма.СформироватьЗаголовокФормы();
	Если ЭтотОбъект.Проведен тогда
		СтрЗаголовок = СтрЗаголовок + " (проведен)";
	иначеЕсли ЭтотОбъект.ПометкаУдаления тогда
		СтрЗаголовок = СтрЗаголовок + " (удален)";
	КонецЕсли;
	
	Если ЭтотОбъект.Сторно тогда
		Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов( ЭтотОбъект.ДокументОснование,"Номер");
		
		СтрЗаголовок = "Отмена."+Реквизиты.Номер+"."+СтрЗаголовок;
		ТекФорма.ТолькоПросмотр = Истина;
	иначе
		Реквизиты = РеквизитыСторнирующегоДокумента( ЭтотОбъект.Ссылка);
		Если ЗначениеЗаполнено( Реквизиты.Номер) тогда
			СтрЗаголовок = "Отменен."+Реквизиты.Номер+"."+СтрЗаголовок;
			ТекФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

	ТекФорма.Заголовок = СокрЛП( СтрЗаголовок);
КонецПроцедуры

Процедура ФормаОУ_ПереходКОбъекту( ТекФорма) Экспорт
	Перем ЭтотОбъект;
	
	ЭтотОбъект = ТекФорма.Объект;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) И ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.УГМК_ДокументФакт") Тогда 
		ДокОстатков = ПолучитьПоследнийДокуметОстатков("УГМК_ОперативныеОстатки", ЭтотОбъект.Дата);
		Если ЗначениеЗаполнено(ДокОстатков.Ссылка) Тогда
			ТекФорма.ТолькоПросмотр = Истина;
		ИначеЕсли (не ДокументСозданВТекущейИБ( ЭтотОбъект.ИнформационнаяБазаСоздания) или ЗначениеЗаполнено( ЭтотОбъект.ДокументСмены)) тогда
			ТекФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНезависимаяФорма = Неопределено;
	ТекФорма.Параметры.Свойство("ЭтоНезависимаяФорма", ЭтоНезависимаяФорма);
	Если ЭтоНезависимаяФорма <> Истина тогда
		ЭтоНезависимаяФорма = Ложь;
	КонецЕсли;
	
	Элементы = ТекФорма.Элементы;
	Если (Элементы.Найти("Закрыть") <> Неопределено) и
		 (Элементы.Найти("ПерейтиКСписку") <> Неопределено) тогда
		 
		Если ЭтоНезависимаяФорма тогда
			Элементы.Закрыть.Видимость = Истина;
			Элементы.ПерейтиКСписку.Видимость = Ложь;
		иначе
			Элементы.Закрыть.Видимость = Ложь;
			Элементы.ПерейтиКСписку.Видимость = Истина;
	    КонецЕсли;
	КонецЕсли;

	Если (Элементы.Найти("Закрыть1") <> Неопределено) и
		 (Элементы.Найти("ПерейтиКСписку1") <> Неопределено) тогда
		 
		Если ЭтоНезависимаяФорма тогда
			Элементы.Закрыть1.Видимость = Истина;
			Элементы.ПерейтиКСписку1.Видимость = Ложь;
		иначе
			Элементы.Закрыть1.Видимость = Ложь;
			Элементы.ПерейтиКСписку1.Видимость = Истина;
	    КонецЕсли;
	КонецЕсли;

	ФормаОУ_ОбновитьЗаголовокОбъект( ТекФорма);
	
	ТекФорма.Модифицированность = Ложь;
КонецПроцедуры

//+ УГМК_isn 09.09.2014 16:22:02
Функция ПолучитьПоследнийДокуметОстатков(ИмяРегистраНакопления, Период = '00010101') Экспорт 
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Ссылка");
	СтруктураРезультат.Вставить("Дата");
	
	// Проверка убрана, т.к. документ есть во всех Конфигурациях
	//Если Метаданные.НайтиПоПолномуИмени("Документ.УГМК_ОстаткиОбороты") <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		
		//Пресников Ю.В. В этом варианте запрос занимает первые строки в замере производительности.
		//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//			   |	тРегистрНакопления.Регистратор КАК Ссылка,
		//			   |	тРегистрНакопления.Период КАК Дата
		//			   |ИЗ
		//			   |	РегистрНакопления." + ИмяРегистраНакопления + " КАК тРегистрНакопления
		//			   |ГДЕ
		//			   |	тРегистрНакопления.Регистратор ССЫЛКА Документ.УГМК_ОстаткиОбороты
		//			   |	И тРегистрНакопления.Регистратор.ПометкаУдаления = ЛОЖЬ
		//			   |	И тРегистрНакопления.Период > &Период
		//			   |
		//			   |УПОРЯДОЧИТЬ ПО
		//			   |	тРегистрНакопления.Период УБЫВ";
		//
		//Результат = Запрос.Выполнить();
		
		//Переделаный вариант - замер получше
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	УГМК_ОстаткиОбороты.Ссылка КАК Ссылка,
		               |	УГМК_ОперативныеОстатки.Период КАК Дата,
		               |	УГМК_ОстаткиОбороты.Проведен
		               |ИЗ
		               |	Документ.УГМК_ОстаткиОбороты КАК УГМК_ОстаткиОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистраНакопления + " КАК УГМК_ОперативныеОстатки
		               |		ПО (УГМК_ОперативныеОстатки.Регистратор = УГМК_ОстаткиОбороты.Ссылка) И УГМК_ОперативныеОстатки.НомерСтроки = 1
		               |ГДЕ
		               |	НЕ УГМК_ОстаткиОбороты.ПометкаУдаления
		               |	И УГМК_ОперативныеОстатки.Период > &Период

		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период УБЫВ";		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
		КонецЕсли;
	//КонецЕсли;
	
	Возврат СтруктураРезультат
	
КонецФункции

Функция НепустыеТабличныеЧастиДокументФакта(ДокФакт) Экспорт 
	
	ТЧ = Метаданные.Документы.УГМК_ДокументФакт.ТабличныеЧасти;
	ТекстВложенногоЗапроса = "";
	Для каждого текТЧ Из ТЧ Цикл
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + ?(ТекстВложенногоЗапроса = "", "", "
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		") + "ВЫБРАТЬ
		|		""" + текТЧ.Имя + """ КАК ИмяТЧ
		|	ИЗ
		|		Документ.УГМК_ДокументФакт." + текТЧ.Имя + " КАК ТЧ
		|	ГДЕ
		|		ТЧ.НомерСтроки = 1
		|		И ТЧ.Ссылка = &Ссылка";
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ИмяТЧ
	|ИЗ
	|	(" + ТекстВложенногоЗапроса + ") КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Ссылка", ДокФакт);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
//- УГМК_isn 09.09.2014 16:22:02 

Функция ПолучитьИмяСклада( ДляВидаОперации, ДопИмяРеквизита) Экспорт
	ИмяСклад = ДляВидаОперации[ "СкладОперативныхОстатков"+ДопИмяРеквизита];
	
	Если не ЗначениеЗаполнено( ИмяСклад) тогда
		ИмяСклад = "Склад";
	КонецЕсли;
	
	Если Лев( ИмяСклад, 1) = "$" тогда // $Склад - Явное указание поля без учета стороны отправлено\получено
		ИмяСклад = Сред( ИмяСклад, 2);
		Если ИмяСклад = "$" тогда // $$ это признак автовычисления МестаУчета
			ИмяСклад = ИмяСклад + ДопИмяРеквизита;
		КонецЕсли;
	иначе
		ИмяСклад = ИмяСклад + ДопИмяРеквизита;
	КонецЕсли;
	
	Возврат( ИмяСклад);
КонецФункции

Функция ПолучитьМестоУчетаПоИмени( ДанныеДокумента, ВыборкаСтрокТовары, ИмяСклад) Экспорт
	Перем МестоУчета, ДополнениеИмени;
	
	Если ВыборкаСтрокТовары <> Неопределено тогда
		МестоУчета = ВыборкаСтрокТовары.РабочийЦентр;
	КонецЕсли;
	Если не ЗначениеЗаполнено( МестоУчета) тогда
		МестоУчета = ДанныеДокумента.РабочийЦентр;
	КонецЕсли;
	Если не ЗначениеЗаполнено( МестоУчета) и (ВыборкаСтрокТовары <> Неопределено) тогда
		МестоУчета = ВыборкаСтрокТовары.Склад;
	КонецЕсли;
	Если не ЗначениеЗаполнено( МестоУчета) тогда
		ДополнениеИмени = "";
		Если Лев( ИмяСклад, 1) = "$" тогда
			ДополнениеИмени = Сред( ИмяСклад, 2);
		КонецЕсли;
		
		МестоУчета = ДанныеДокумента["Склад"+ДополнениеИмени];
	КонецЕсли;
	Если не ЗначениеЗаполнено( МестоУчета) тогда
		ДополнениеИмени = "";
		Если Лев( ИмяСклад, 1) = "$" тогда
			ДополнениеИмени = Сред( ИмяСклад, 2);
		КонецЕсли;
		
		МестоУчета = ДанныеДокумента["Подразделение"+ДополнениеИмени];
	КонецЕсли;
	
	Возврат( МестоУчета);
КонецФункции

Процедура ДополнитьТабличнуюЧастьПродукцииОстатками( ТабЧасть, МестоУчета, ГраницаОстатков, ОчищатьКоличества, ДопОтбор = Неопределено, ЗаполнятьОстатки = Ложь, РасширенныйРежим = Ложь) Экспорт
	Запр = Новый Запрос();
	Запр.УстановитьПараметр("МестоУчета", МестоУчета);
	Запр.УстановитьПараметр("Граница", ГраницаОстатков);
	
	СтрДопОтбор = "";
	Если ДопОтбор <> Неопределено тогда
		ТипМассив = Тип("Массив");
		
		Для каждого ЭлементО из ДопОтбор цикл
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрДопОтбор, " И ");
			Значения = ЭлементО.Значения;
			Если ТипЗнч( Значения) = ТипМассив тогда
				СтрДопОтбор = СтрДопОтбор + ЭлементО.Ключ+" в (&"+ЭлементО.Ключ+")";
			иначе
				СтрДопОтбор = СтрДопОтбор + ЭлементО.Ключ+" = &"+ЭлементО.Ключ+"";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ
	             |	Данные.ПоСвойствамПродукции,
	             |	Данные.МестоУчета,
	             |	Данные.МаркаСплаваПродукции,
	             |	Данные.ГруппаПродукцииПродукции,
	             |	Данные.Продукция,
	             |	Данные.ХарактеристикаПродукции,
	             |	Данные.СостояниеПродукции,
	             |	Данные.ТараПродукции,
	             |	Данные.ПаспортПартииПродукции,
	             |	Данные.ПаспортПартииПродукции как СерияПродукции,
	             |	СУММА(Данные.КоличествоПродукции) КАК КоличествоПродукции,
	             |	СУММА(Данные.Количество1Продукции) КАК Количество1Продукции,
	             |	СУММА(Данные.КоличествоМестПродукции) КАК КоличествоМестПродукции
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВЫБОР
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура = НЕОПРЕДЕЛЕНО
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.СК_МаркиСплавов
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.УГМК_МаркаСплаваПроизводство
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ КАК ПоСвойствамПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.МестоУчета КАК МестоУчета,
	             |		УГМК_ОперативныеОстаткиОстатки.МаркаСплава КАК МаркаСплаваПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции КАК ГруппаПродукцииПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Номенклатура КАК Продукция,
	             |		УГМК_ОперативныеОстаткиОстатки.Характеристика КАК ХарактеристикаПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Состояние КАК СостояниеПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Тара КАК ТараПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.ПаспортПартии КАК ПаспортПартииПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК КоличествоПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Количество1Остаток КАК Количество1Продукции,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток КАК КоличествоМестПродукции
	             |	ИЗ
	             |		РегистрНакопления.УГМК_ОперативныеОстаткиНеПодтвержденные.Остатки(&Граница, МестоУчета = &МестоУчета "+СтрДопОтбор+") КАК УГМК_ОперативныеОстаткиОстатки
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ВЫБОР
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура = НЕОПРЕДЕЛЕНО
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.СК_МаркиСплавов
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.УГМК_МаркаСплаваПроизводство
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ,
	             |		УГМК_ОперативныеОстаткиОстатки.МестоУчета,
	             |		УГМК_ОперативныеОстаткиОстатки.МаркаСплава,
	             |		УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Номенклатура,
	             |		УГМК_ОперативныеОстаткиОстатки.Характеристика,
	             |		УГМК_ОперативныеОстаткиОстатки.Состояние,
	             |		УГМК_ОперативныеОстаткиОстатки.Тара,
	             |		УГМК_ОперативныеОстаткиОстатки.ПаспортПартии,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток,
	             |		УГМК_ОперативныеОстаткиОстатки.Количество1Остаток,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток
	             |	ИЗ
	             |		РегистрНакопления.УГМК_ОперативныеОстатки.Остатки(&Граница, МестоУчета = &МестоУчета "+СтрДопОтбор+") КАК УГМК_ОперативныеОстаткиОстатки) КАК Данные
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Данные.ПоСвойствамПродукции,
	             |	Данные.МестоУчета,
	             |	Данные.МаркаСплаваПродукции,
	             |	Данные.ГруппаПродукцииПродукции,
	             |	Данные.Продукция,
	             |	Данные.ХарактеристикаПродукции,
	             |	Данные.СостояниеПродукции,
	             |	Данные.ТараПродукции,
	             |	Данные.ПаспортПартииПродукции";
				 
	Отбор1 = Новый Структура("ПоСвойствамПродукции,МаркаСплаваПродукции,ГруппаПродукцииПродукции,ХарактеристикаПродукции,СостояниеПродукции,ПаспортПартииПродукции,ТараПродукции");
	Отбор2 = Новый Структура("ПоСвойствамПродукции,Продукция,ХарактеристикаПродукции,СостояниеПродукции,ПаспортПартииПродукции,ТараПродукции");
	
	Отбор1_Серия = Новый Структура("ПоСвойствамПродукции,МаркаСплаваПродукции,ГруппаПродукцииПродукции,ХарактеристикаПродукции,СостояниеПродукции,СерияПродукции,ТараПродукции");
	Отбор2_Серия = Новый Структура("ПоСвойствамПродукции,Продукция,ХарактеристикаПродукции,СостояниеПродукции,СерияПродукции,ТараПродукции");
	Если РасширенныйРежим тогда
		Отбор1.Вставить("Продукция");
		Отбор2 = Отбор1;
		
		Отбор1_Серия.Вставить("Продукция");
		Отбор2_Серия = Отбор1;
	КонецЕсли;
	
	ПропуститьКолонки = "";
	Если ОчищатьКоличества тогда
		ПропуститьКолонки = "КоличествоПродукции,Количество1Продукции,КоличествоМестПродукции";
	КонецЕсли;
	
	Если ЗаполнятьОстатки тогда
		Для каждого Строка из ТабЧасть цикл
			Строка.ЕстьРасхождения = Истина;
		КонецЦикла;
		
		ОбработаныСтроки = Новый Массив;
	КонецЕсли;
	
	ТипСерия = Тип("СправочникСсылка.СерииНоменклатуры");
	
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		Если ТипЗнч( Результат.ПаспортПартииПродукции) = ТипСерия тогда
			Если Результат.ПоСвойствамПродукции тогда
				ОтборПоиска = Отбор1_Серия;
			иначе
				ОтборПоиска = Отбор2_Серия;
			КонецЕсли;
		иначе
			Если Результат.ПоСвойствамПродукции тогда
				ОтборПоиска = Отбор1;
			иначе
				ОтборПоиска = Отбор2;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств( ОтборПоиска, Результат);
		
		СтрокиПродукции = ТабЧасть.НайтиСтроки( ОтборПоиска);
		Если СтрокиПродукции.Количество() = 0 тогда
			НоваяСтрока = ТабЧасть.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, Результат,,ПропуститьКолонки);
		иначе
			НоваяСтрока = СтрокиПродукции[ 0];
		КонецЕсли;
		
		Если ЗаполнятьОстатки и (ОбработаныСтроки.Найти( НоваяСтрока) = Неопределено) тогда
			ОбработаныСтроки.Добавить( НоваяСтрока);
		КонецЕсли;
		
		Если ЗаполнятьОстатки тогда
			НоваяСтрока.КоличествоОстаток = Результат.КоличествоПродукции;
			НоваяСтрока.Количество1Остаток = Результат.Количество1Продукции;
			
			НоваяСтрока.ЕстьРасхождения = НоваяСтрока.КоличествоПродукции <> НоваяСтрока.КоличествоОстаток или НоваяСтрока.Количество1Продукции <> НоваяСтрока.Количество1Остаток;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьОстатки тогда
		Для каждого Строка из ТабЧасть цикл
			Если ОбработаныСтроки.Найти( Строка) = Неопределено тогда
				Если Строка.КоличествоПродукции = 0 и Строка.Количество1Продукции = 0 и Строка.КоличествоМестПродукции = 0 тогда
					Строка.ЕстьРасхождения = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьТабличнуюЧастьМатериалыОстатками( ТабЧасть, МестоУчета, ГраницаОстатков, ОчищатьКоличества, ДопОтбор = Неопределено, ЗаполнятьОстатки = Ложь, РасширенныйРежим = Ложь) Экспорт
	Запр = Новый Запрос();
	Запр.УстановитьПараметр("МестоУчета", МестоУчета);
	Запр.УстановитьПараметр("Граница", ГраницаОстатков);
	
	СтрДопОтбор = "";
	Если ДопОтбор <> Неопределено тогда
		ТипМассив = Тип("Массив");
		
		Для каждого ЭлементО из ДопОтбор цикл
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрДопОтбор, " И ");
			Значения = ЭлементО.Значения;
			Если ТипЗнч( Значения) = ТипМассив тогда
				СтрДопОтбор = СтрДопОтбор + ЭлементО.Ключ+" в (&"+ЭлементО.Ключ+")";
			иначе
				СтрДопОтбор = СтрДопОтбор + ЭлементО.Ключ+" = &"+ЭлементО.Ключ+"";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ
	             |	Данные.ПоСвойствам,
	             |	Данные.МестоУчета,
	             |	Данные.МаркаСплава,
	             |	Данные.ГруппаПродукции,
	             |	Данные.Номенклатура,
	             |	Данные.ХарактеристикаНоменклатуры,
	             |	Данные.Состояние,
	             |	Данные.Тара,
	             |	Данные.ПаспортПартии,
	             |	Данные.ПаспортПартии как СерияНоменклатуры,
	             |	СУММА(Данные.Количество) КАК Количество,
	             |	СУММА(Данные.Количество1) КАК Количество1,
	             |	СУММА(Данные.КоличествоМест) КАК КоличествоМест
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВЫБОР
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура = НЕОПРЕДЕЛЕНО
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.СК_МаркиСплавов
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.УГМК_МаркаСплаваПроизводство
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ КАК ПоСвойствам,
	             |		УГМК_ОперативныеОстаткиОстатки.МестоУчета КАК МестоУчета,
	             |		УГМК_ОперативныеОстаткиОстатки.МаркаСплава КАК МаркаСплава,
	             |		УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции КАК ГруппаПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	             |		УГМК_ОперативныеОстаткиОстатки.Характеристика КАК ХарактеристикаНоменклатуры,
	             |		УГМК_ОперативныеОстаткиОстатки.Состояние КАК Состояние,
	             |		УГМК_ОперативныеОстаткиОстатки.Тара КАК Тара,
	             |		УГМК_ОперативныеОстаткиОстатки.ПаспортПартии КАК ПаспортПартии,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток КАК Количество,
	             |		УГМК_ОперативныеОстаткиОстатки.Количество1Остаток КАК Количество1,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток КАК КоличествоМест
	             |	ИЗ
	             |		РегистрНакопления.УГМК_ОперативныеОстаткиНеПодтвержденные.Остатки(&Граница, МестоУчета = &МестоУчета "+СтрДопОтбор+") КАК УГМК_ОперативныеОстаткиОстатки
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ВЫБОР
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура = НЕОПРЕДЕЛЕНО
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.СК_МаркиСплавов
	             |				ТОГДА ИСТИНА
	             |			КОГДА УГМК_ОперативныеОстаткиОстатки.Номенклатура ССЫЛКА Справочник.УГМК_МаркаСплаваПроизводство
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ,
	             |		УГМК_ОперативныеОстаткиОстатки.МестоУчета,
	             |		УГМК_ОперативныеОстаткиОстатки.МаркаСплава,
	             |		УГМК_ОперативныеОстаткиОстатки.ГруппаПродукции,
	             |		УГМК_ОперативныеОстаткиОстатки.Номенклатура,
	             |		УГМК_ОперативныеОстаткиОстатки.Характеристика,
	             |		УГМК_ОперативныеОстаткиОстатки.Состояние,
	             |		УГМК_ОперативныеОстаткиОстатки.Тара,
	             |		УГМК_ОперативныеОстаткиОстатки.ПаспортПартии,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток,
	             |		УГМК_ОперативныеОстаткиОстатки.Количество1Остаток,
	             |		УГМК_ОперативныеОстаткиОстатки.КоличествоМестОстаток
	             |	ИЗ
	             |		РегистрНакопления.УГМК_ОперативныеОстатки.Остатки(&Граница, МестоУчета = &МестоУчета "+СтрДопОтбор+") КАК УГМК_ОперативныеОстаткиОстатки) КАК Данные
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Данные.ПоСвойствам,
	             |	Данные.МестоУчета,
	             |	Данные.МаркаСплава,
	             |	Данные.ГруппаПродукции,
	             |	Данные.Номенклатура,
	             |	Данные.ХарактеристикаНоменклатуры,
	             |	Данные.Состояние,
	             |	Данные.Тара,
	             |	Данные.ПаспортПартии";
				 
	Отбор1 = Новый Структура("ПоСвойствам,МаркаСплава,ГруппаПродукции,ХарактеристикаНоменклатуры,Состояние,ПаспортПартии,Тара");
	Отбор2 = Новый Структура("ПоСвойствам,Номенклатура,ХарактеристикаНоменклатуры,Состояние,ПаспортПартии,Тара");
	
	Отбор1_Серия = Новый Структура("ПоСвойствам,МаркаСплава,ГруппаПродукции,ХарактеристикаНоменклатуры,Состояние,СерияНоменклатуры,Тара");
	Отбор2_Серия = Новый Структура("ПоСвойствам,Номенклатура,ХарактеристикаНоменклатуры,Состояние,СерияНоменклатуры,Тара");
	Если РасширенныйРежим тогда
		Отбор1.Вставить("Продукция");
		Отбор2 = Отбор1;
		
		Отбор1_Серия.Вставить("Продукция");
		Отбор2_Серия = Отбор1;
	КонецЕсли;
	
	ПропуститьКолонки = "";
	Если ОчищатьКоличества тогда
		ПропуститьКолонки = "Количество,Количество1,КоличествоМест";
	КонецЕсли;
	
	Если ЗаполнятьОстатки тогда
		Для каждого Строка из ТабЧасть цикл
			Строка.ЕстьРасхождения = Истина;
		КонецЦикла;
		
		ОбработаныСтроки = Новый Массив;
	КонецЕсли;
	
	ТипСерия = Тип("СправочникСсылка.СерииНоменклатуры");
	
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		Если ТипЗнч( Результат.ПаспортПартии) = ТипСерия тогда
			Если Результат.ПоСвойствам тогда
				ОтборПоиска = Отбор1_Серия;
			иначе
				ОтборПоиска = Отбор2_Серия;
			КонецЕсли;
		иначе
			Если Результат.ПоСвойствам тогда
				ОтборПоиска = Отбор1;
			иначе
				ОтборПоиска = Отбор2;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств( ОтборПоиска, Результат);
		
		СтрокиМ = ТабЧасть.НайтиСтроки( ОтборПоиска);
		Если СтрокиМ.Количество() = 0 тогда
			НоваяСтрока = ТабЧасть.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, Результат,,ПропуститьКолонки);
		иначе
			НоваяСтрока = СтрокиМ[ 0];
		КонецЕсли;
		
		Если ЗаполнятьОстатки и (ОбработаныСтроки.Найти( НоваяСтрока) = Неопределено) тогда
			ОбработаныСтроки.Добавить( НоваяСтрока);
		КонецЕсли;
		
		Если ЗаполнятьОстатки тогда
			НоваяСтрока.КоличествоОстаток = Результат.Количество;
			НоваяСтрока.Количество1Остаток = Результат.Количество1;
			
			НоваяСтрока.ЕстьРасхождения = НоваяСтрока.Количество <> НоваяСтрока.КоличествоОстаток или НоваяСтрока.Количество1 <> НоваяСтрока.Количество1Остаток;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьОстатки тогда
		Для каждого Строка из ТабЧасть цикл
			Если ОбработаныСтроки.Найти( Строка) = Неопределено тогда
				Если Строка.Количество = 0 и Строка.Количество1 = 0 и Строка.КоличествоМест = 0 тогда
					Строка.ЕстьРасхождения = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСоответствиеОперации( Объект, ВидОперации) Экспорт
	Если (Объект.ВидОперации <> ВидОперации) или 
		 (Объект.СписокПродукции <> Объект.ВидОперации.СписокПродукции) тогда
		Объект.ВидОперации = ВидОперации;
		Объект.СписокПродукции = ВидОперации.СписокПродукции;
	КонецЕсли;
КонецПроцедуры

Процедура Форма_ПереходКСписку( Форма, Объект, ПроверитьПоля = Неопределено) Экспорт
	Если ПроверитьПоля = Неопределено тогда
		ПроверитьПоля = Новый Структура("Смена");
	КонецЕсли;
	
	Для каждого Элемент из ПроверитьПоля цикл
		ИмаПоляФ = Элемент.Ключ;
		ИмаПоляО = Элемент.Значение;
		Если не ЗначениеЗаполнено( ИмаПоляО) тогда
			ИмаПоляО = ИмаПоляФ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Форма[ ИмаПоляФ]) и  Форма[ ИмаПоляФ] <> Объект[ ИмаПоляО] тогда
			Форма[ ИмаПоляФ] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ДоступныМатериалы = Истина;
	Форма.ДоступнаПродукция = Истина;
	
	Форма.ТолькоПросмотр = Ложь;
	
	Форма.Заголовок = Форма.СформироватьЗаголовокФормы();
КонецПроцедуры

Функция ПолучитьШК_Партии( ОбъектСсылка, ПрефиксТипаПартии, ДлинаКода=8) Экспорт
	Попытка
		Если ЗначениеЗаполнено( ОбъектСсылка.ДляПоиска) тогда
			ДляПоиска = Число( ОбъектСсылка.ДляПоиска);
		иначе
			ДляПоиска = 0;
		КонецЕсли;
	исключение
		ВызватьИсключение( "Возможно кодирование только Партий с числовым номером.");
	КонецПопытки;
	
	Возврат( Формат( УГМК_ОперативныйУчетКлиентСервер.ПолучитьЕАН( ДляПоиска, 0, ПрефиксТипаПартии, ДлинаКода), "ЧГ=0"));
КонецФункции

Функция ПолучитьДляПоискаИзПартии( СсылкаОтбор) Экспорт
	Возврат( СсылкаОтбор.ДляПоиска);
КонецФункции

Функция ПолучитьПартиюПоШК( Данные) Экспорт
	НайденаяПартия = Неопределено;
	ИмяТипа = УГМК_ОперативныйУчетКлиентСервер.ИмяТипаПартииПоПрефиксу( Лев( Данные, 2));
	
	Если ЗначениеЗаполнено( ИмяТипа) Тогда
		ДляПоиска = УГМК_ОперативныйУчетКлиентСервер.ПолучитьДляПоискаИзШК( Данные);
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("ДляПоиска",ДляПоиска);
		Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		             |	Объект1.Ссылка,
		             |	Объект1.Дата КАК Дата
		             |ИЗ
		             |	БизнесПроцесс."+ИмяТипа+" КАК Объект1
		             |ГДЕ
		             |	Объект1.ДляПоиска = &ДляПоиска
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Дата УБЫВ";
		Результат = Запр.Выполнить().Выбрать();
		Если Результат.Следующий() тогда
			НайденаяПартия = Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( НайденаяПартия)
КонецФункции

Процедура ФормаСпискаПартии_ПриСозданииНаСервере( ЭтаФорма, ИмяТипа, ПараметрыВ, Отказ) Экспорт
	//ОЦМ Мобильная
	//Перем ПараметрыПодразделение, ТекущийПользователь, ПараметрыРЦ;
	//
	//СписокПараметры = ЭтаФорма.Список.Параметры;
	//ПараметрыЭлементы = СписокПараметры.Элементы;
	//Если ПараметрыЭлементы.Найти("СвойствоМарка") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("СвойствоМарка",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_МаркаСплава"));
	//КонецЕсли;
	//Если ПараметрыЭлементы.Найти("СвойствоГодность") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("СвойствоГодность",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_РезультатСертификации"));
	//КонецЕсли;
	//Если ПараметрыЭлементы.Найти("СвойствоСоответствуетТП") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("СвойствоСоответствуетТП",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_СоответствуетТП"));
	//КонецЕсли;
	//Если ПараметрыЭлементы.Найти("СвойствоЕстьФормирование") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("СвойствоЕстьФормирование",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_ЕстьФормирование"));
	//КонецЕсли;
	//Если ПараметрыЭлементы.Найти("НеСоотв") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("НеСоотв",Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеСоответствует);
	//КонецЕсли;
	//Если ПараметрыЭлементы.Найти("РежимАудита") <> Неопределено тогда 
	//	СписокПараметры.УстановитьЗначениеПараметра("РежимАудита",УГМК_СлужебныеФункции.ПолучитьНастройку("Настройка_ПоказыватьТолькоГодные"));
	//КонецЕсли;
	//
	//Если УГМК_СлужебныеФункции.ПолучитьНастройку("ОперацииСПартиямиВыполняетСТК") <> Истина тогда
	//	Возврат;
	//КонецЕсли;

	//ПараметрыВ.Свойство("ТекущийПользователь", ТекущийПользователь);
	//Если ТекущийПользователь = Неопределено тогда
	//	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//КонецЕсли;
	//
	//ПараметрыВ.Свойство("Подразделение", ПараметрыПодразделение);
	//Если ПараметрыПодразделение = Неопределено тогда
	//	ПараметрыПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( ТекущийПользователь, "ОсновноеПодразделение");
	//КонецЕсли;
	//
	//ПараметрыВ.Свойство("ПараметрыРЦ", ПараметрыРЦ);
	//Если ПараметрыРЦ = Неопределено тогда
	//	ПараметрыРЦ = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//КонецЕсли;
	//
	//СписокНастроек = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( ТекущийПользователь, ПараметрыПодразделение, ПараметрыРЦ, ИмяТипа+"_Редактирование", Ложь);
	//Если СписокНастроек.Количество() = 0 или (не ЗначениеЗаполнено( СписокНастроек[ 0].Значение)) тогда
	//	ЭтаФорма.Элементы.Список.ИзменятьСоставСтрок = Ложь;
	//	ЭтаФорма.Элементы.Список.ТолькоПросмотр = Истина;
	//КонецЕсли;
	//
	////Сообщить("Список "+ИмяТипа);
КонецПроцедуры

Процедура ДобавитьПроизводственныеМарки( ЗначениеОтбора, МаркаСплава)
	Организации = Новый Массив;
	Организации.Добавить( Справочники.Организации.ПустаяСсылка());
	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Организации.Добавить( УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( ТекущийПользователь, "ОсновнаяОрганизация"));
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("МаркаСплава",МаркаСплава);
	Запр.УстановитьПараметр("Организация",Организации);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_МаркаСплаваПроизводство.Ссылка
	             |ИЗ
	             |	Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводство
	             |ГДЕ
	             |	УГМК_МаркаСплаваПроизводство.МаркаСплава = &МаркаСплава
	             |	И УГМК_МаркаСплаваПроизводство.Организация В(&Организация)";
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		ЗначениеОтбора.Добавить( Результат.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура ФормаСпискаПартии_УстановитьАвтоОтборы( ЭтаФорма, Отказ) Экспорт
	ЭтаФорма.Элементы.ОтборПоМарке.Видимость = Ложь;
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	МаркаСплава = Неопределено;
	ЭтаФорма.Параметры.Свойство( "МаркаСплава", МаркаСплава);
	Если ЗначениеЗаполнено( МаркаСплава) тогда
		ТипПараметра = ТипЗнч( МаркаСплава);
		ЗначениеОтбора = Новый СписокЗначений;
		ЗначениеОтбора.Добавить( Неопределено);
		Если ТипПараметра = Тип("СправочникСсылка.УГМК_МаркаСплаваПроизводство") тогда
			ЗначениеОтбора.Добавить( МаркаСплава);
		иначеЕсли ТипПараметра = Тип("СправочникСсылка.СК_МаркиСплавов") тогда
			ЗначениеОтбора.Добавить( МаркаСплава);
			ДобавитьПроизводственныеМарки( ЗначениеОтбора, МаркаСплава);
		иначе
			Возврат;
		КонецЕсли;
		
		Поле = Новый ПолеКомпоновкиДанных("МаркаЗначение");
		
		ЭлементОтбора = ЭтаФорма.Список.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение = Поле;
		ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
	
	Поле = Новый ПолеКомпоновкиДанных("Архив");
	
	ЭлементОтбора = ЭтаФорма.Список.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Поле;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Ложь;
		
	ЭтаФорма.Элементы.ОтборПоМарке.Видимость = Истина;
	УГМК_ОперативныйУчетКлиентСервер.ФормаСпискаПартии_АвтоОтбор( ЭтаФорма, Неопределено, Истина);
КонецПроцедуры

Процедура ФормаПартии_ПриСозданииНаСервере( ЭтаФорма, ИмяТипа, ПараметрыВ, Отказ) Экспорт
	//ОЦМ Мобильная
	//Перем ПараметрыПодразделение, ТекущийПользователь, ПараметрыРЦ;
	//
	//Если УГМК_СлужебныеФункции.ПолучитьНастройку("ОперацииСПартиямиВыполняетСТК") <> Истина тогда
	//	Возврат;
	//КонецЕсли;

	//ПараметрыВ.Свойство("ТекущийПользователь", ТекущийПользователь);
	//Если ТекущийПользователь = Неопределено тогда
	//	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//КонецЕсли;
	//
	//ПараметрыВ.Свойство("Подразделение", ПараметрыПодразделение);
	//Если ПараметрыПодразделение = Неопределено тогда
	//	ПараметрыПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( ТекущийПользователь, "ОсновноеПодразделение");
	//КонецЕсли;
	//
	//ПараметрыВ.Свойство("ПараметрыРЦ", ПараметрыРЦ);
	//Если ПараметрыРЦ = Неопределено тогда
	//	ПараметрыРЦ = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//КонецЕсли;
	//
	//СписокНастроек = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( ТекущийПользователь, ПараметрыПодразделение, ПараметрыРЦ, ИмяТипа+"_Редактирование", Ложь);
	//Если СписокНастроек.Количество() = 0 или (не ЗначениеЗаполнено( СписокНастроек[ 0].Значение)) тогда
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//КонецЕсли;
	//
	////Сообщить("Форма "+ИмяТипа);
КонецПроцедуры

Функция СпособПроверкиИзмененийОперативныхДокументов() Экспорт
	Возврат( УГМК_СлужебныеФункции.ПолучитьНастройку("СпособПроверкиИзмененийОперативныхДокументов"));
КонецФункции

Функция МожетПроводитьСторно() Экспорт
	Если УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетОграничениеПроведенияСторноОУ") = Истина тогда
		МожетПроводитьСторно = Ложь;
		СписокНст = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь"), Неопределено, Неопределено, "МожетПроводитьСторно");
		Если СписокНст.Количество() > 0 тогда
			МожетПроводитьСторно = СписокНст[ 0].Значение = Истина;
		КонецЕсли;
	иначе
		МожетПроводитьСторно = Истина;
	КонецЕсли;
	
	Возврат( МожетПроводитьСторно);
КонецФункции

Функция ПроверкаВозможностиСторно( СторнируемаяСсылка, ТекущийДокумент = Неопределено) Экспорт
	Ссылка = СторнируемаяСсылка;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",Ссылка);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДокументФакт.Ссылка,
	             |	УГМК_ДокументФакт.ПометкаУдаления,
	             |	УГМК_ДокументФакт.Проведен,
	             |	УГМК_ДокументФакт.Сторно
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |ГДЕ
	             |	УГМК_ДокументФакт.Ссылка = &Ссылка";
	
	СтрОш = "";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		Если Результат.Проведен тогда
			Если Результат.Сторно тогда
				СтрОш = "Документ Отмены (Сторно) не может быть отменен. Повторите (скопируйте) первоначальный документ.";
			КонецЕсли;
		иначеЕсли Результат.ПометкаУдаления тогда
			СтрОш = "Документ уже помечен на удаление.";
		КонецЕсли;
	иначе
		СтрОш = "Документ "+Ссылка+" отсутствет в Информационной базе.";
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( СтрОш) тогда
		Запр.УстановитьПараметр("ДокументОснование",Ссылка);
		Запр.УстановитьПараметр("ТекущийДокумент",ТекущийДокумент);
		Запр.Текст = "ВЫБРАТЬ
		             |	УГМК_ДокументФакт.Ссылка,
		             |	ПРЕДСТАВЛЕНИЕ(УГМК_ДокументФакт.Ссылка) КАК СсылкаПредставление
		             |ИЗ
		             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
		             |ГДЕ
		             |	УГМК_ДокументФакт.Сторно
		             |	И НЕ УГМК_ДокументФакт.ПометкаУдаления
		             |	И УГМК_ДокументФакт.ДокументОснование = &ДокументОснование
		             |	И УГМК_ДокументФакт.Ссылка <> &ТекущийДокумент";
		Результат = Запр.Выполнить().Выбрать();
		Если Результат.Следующий() тогда
			СтрОш = СтрОш + "Документ уже отменен ["+Результат.СсылкаПредставление+"]";
		КонецЕсли;
	КонецЕсли;
	
	Возврат( СтрОш);
КонецФункции

Процедура ПолучитьДокументыДляСторнирования( СсылкаИсходная, ДокументыДляСторнирования, ОбработаныДокументы = Неопределено)
	Перем Запр, РезультатЗ, Обработаны, Обработан;
	
	Если ОбработаныДокументы = Неопределено тогда
		ОбработаныДокументы = Новый Массив;
	иначеЕсли ОбработаныДокументы.Найти( СсылкаИсходная) <> Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЗависимыеОперации = Новый Массив;
	ЗависимыеОперации.Добавить( УГМК_СлужебныеФункции.ПолучитьНастройку("СостояниеЗаказа_Разбраковка"));
	
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДокументФакт.Ссылка,
	             |	УГМК_ДокументФакт.Проведен,
	             |	УГМК_ДокументФакт.ДокументОснование,
	             |	УГМК_ДокументФакт.Сторно КАК Сторно
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |ГДЕ
	             |	НЕ УГМК_ДокументФакт.ПометкаУдаления
	             |	И (УГМК_ДокументФакт.Ссылка = &СсылкаИсходная
	             |			ИЛИ УГМК_ДокументФакт.ВидОперации В (&ВидОперации)
	             |				И УГМК_ДокументФакт.ДокументОснование = &СсылкаИсходная)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Сторно";
				 
	Запр.УстановитьПараметр("ВидОперации",ЗависимыеОперации);
	Запр.УстановитьПараметр("СсылкаИсходная",СсылкаИсходная);
	
	РезультатЗ = Запр.Выполнить().Выбрать();
	Пока РезультатЗ.Следующий() цикл
		Если ОбработаныДокументы.Найти( РезультатЗ.Ссылка) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатЗ.Сторно тогда
			Если ДокументыДляСторнирования.Получить( РезультатЗ.ДокументОснование) <> Неопределено тогда
				ДокументыДляСторнирования.Удалить( РезультатЗ.ДокументОснование);
			КонецЕсли;
		иначе
			ДокументыДляСторнирования.Вставить( РезультатЗ.Ссылка, РезультатЗ.Проведен);
			Если РезультатЗ.Ссылка <> СсылкаИсходная тогда
				ПолучитьДокументыДляСторнирования( РезультатЗ.Ссылка, ДокументыДляСторнирования, ОбработаныДокументы);
			КонецЕсли;
		КонецЕсли;
		
		ОбработаныДокументы.Добавить( РезультатЗ.Ссылка);
	КонецЦикла;
КонецПроцедуры

Функция СторноДокумента( СсылкаИсходная, Причина = "", ПроверятьВозможность = Истина) Экспорт
	Если ПроверятьВозможность тогда
		СтрОш = ПроверкаВозможностиСторно( СсылкаИсходная);
		
		Если ЗначениеЗаполнено( СтрОш) тогда
			Возврат( СтрОш);
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	СтрОш = "";
	ДокументыДляСторнирования = Новый Соответствие; 
	ПолучитьДокументыДляСторнирования( СсылкаИсходная, ДокументыДляСторнирования);
	Для каждого ЭлементСоответствия из ДокументыДляСторнирования цикл
		Ссылка = ЭлементСоответствия.Ключ;
		СсылкаПроведен = ЭлементСоответствия.Значение;
		
		Если СсылкаПроведен тогда
			Если ЗначениеЗаполнено( Причина) тогда
				ДокИсходный = Ссылка.ПолучитьОбъект();
				Если ЗначениеЗаполнено( ДокИсходный.Комментарий) тогда
					ДокИсходный.Комментарий = ДокИсходный.Комментарий + " ";
				КонецЕсли;
				ДокИсходный.Комментарий = ДокИсходный.Комментарий + "Причина сторно: "+Причина;
				ДокИсходный.Записать( РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ДокСторно = Документы.УГМК_ДокументФакт.СоздатьДокумент();
			ДокСторно.Дата = ТекущаяДата();
			ДокСторно.ДокументОснование = Ссылка;
			ДокСторно.Ответственный = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
			ДокСторно.ОтветственныйПолучатель = ДокСторно.Ответственный;
			ДокСторно.Сторно = Истина;
			Если ЗначениеЗаполнено( Причина) тогда
				ДокСторно.Комментарий = "Причина сторно: "+Причина;
			КонецЕсли;
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОш, Символы.ПС);
			Если МожетПроводитьСторно() тогда
				ДокСторно.Записать( РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				СтрОш = СтрОш + "Документ Отмены (Сторно)"+ДокСторно+" проведен.";
			иначе
				ДокСторно.Записать( РежимЗаписиДокумента.Запись);
				СтрОш = СтрОш + "Недостаточно прав на Проведение Отмены (Сторно). Документ "+ДокСторно+" записан. Обратитесь к сотруднику с правами на Сторнирование.";
			КонецЕсли;
		иначе
			ДокИсходный = Ссылка.ПолучитьОбъект();
			ДокИсходный.УстановитьПометкуУдаления( Истина);
			
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОш, Символы.ПС);
			СтрОш = СтрОш + "Документ "+ДокИсходный+" помечен на удаление.";
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат( СтрОш);
КонецФункции

Функция СостояниеОсновногоОкна(Состояние=Неопределено) Экспорт
	Если Состояние<>Неопределено Тогда
		ПараметрыСеанса.СостояниеОсновногоОкна=Состояние;
	Иначе
		Состояние=ПараметрыСеанса.СостояниеОсновногоОкна;
	КонецЕсли;
	
    Возврат Состояние;
КонецФункции

Функция УстановитьБлокировкуДляОбслуживания( НачалоДействияБлокировки, Длительность = 30) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Блокировка = Новый БлокировкаСеансов;
	//Блокировка.Начало           = НачалоДействияБлокировки;
	//Блокировка.Конец            = НачалоДействияБлокировки+(Длительность*60);
	////УГМК_Кунилов А.В. перевод для Сербии
	////Блокировка.Сообщение        = "Обслуживание информационной базы."; 
	//Блокировка.Сообщение        = НСтр("ru = 'Обслуживание информационной базы.'; sr = 'Servisne informacije baza.'"); 
	////УГМК_Кунилов А.В. перевод для Сербии
	//Блокировка.Установлена      = Истина;
	//Блокировка.КодРазрешения    = "КодРазрешения";
	//
	//УстановитьБлокировкуСеансов(Блокировка);
	//
	//Возврат( Строка( Блокировка.Начало)+" - "+Строка( Блокировка.Конец));
КонецФункции

Процедура ЗаписатьЗаписьЖурналаРегистрации( ИмяСобытия, Сообщение, УровеньСтр="Примечание", Данные=Неопределено) Экспорт 
	//ОЦМ Мобильная
	//Если УровеньСтр = "Информация" тогда
	//	Уровень = УровеньЖурналаРегистрации.Информация;
	//иначеЕсли УровеньСтр = "Ошибка" тогда
	//	Уровень = УровеньЖурналаРегистрации.Ошибка;
	//иначеЕсли УровеньСтр = "Предупреждение" тогда
	//	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	//иначе
	//	Уровень = УровеньЖурналаРегистрации.Примечание;
	//КонецЕсли;                                        
	//
	//ЗаписьЖурналаРегистрации( ИмяСобытия, Уровень,,, Сообщение);
КонецПроцедуры

Процедура ЗаявкаНаАнализВыполнена( ПараметрКоманды) Экспорт
	Документы.УГМК_ЗаявкаНаАнализ.ЗаявкаВыполнена( ПараметрКоманды);
КонецПроцедуры

Функция ПроверкаТабличнойЧасти_Анализы( Анализы, НомерОбразцаОбязателен) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//ПВХ = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры;
	//СтрОшибкиДокумента = "";
	//
	//Для Каждого СтрокаТЧ Из Анализы Цикл
	//	СтрОш = "";
	//	СтрНомерСтроки = "Cтрока № " + СтрокаТЧ.НомерСтроки+": ";
	//	
	//	Если (СтрокаТЧ.НомерОбразца = 0) И (НомерОбразцаОбязателен или (не СтрокаТЧ.БезЗаявки)) Тогда
	//		СтрОш = СтрОш + "Нет номера образца,"; 
	//	КонецЕсли;
	//	Если не ЗначениеЗаполнено( СтрокаТЧ.ПоказательАнализа) Тогда
	//		СтрОш = СтрОш + "Нет Показателя анализа,"; 
	//	КонецЕсли;
	//	
	//	Если не ЗначениеЗаполнено( СтрокаТЧ.ЕдиницаИзмерения) и ЗначениеЗаполнено( СтрокаТЧ.ПоказательАнализа) тогда
	//		СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.ПоказательАнализа.ЕдиницаИзмерения;
	//	КонецЕсли;
	//	
	//	ВидРезультата = СтрокаТЧ.ПоказательАнализа.ВидРезультатаАнализа;
	//	
	//	Если ВидРезультата = ПВХ.ЗначениеИзСписка Тогда
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗначениеПоказателя) Тогда
	//			СтрОш = СтрОш + "Нет значения показателя,";
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВидРезультата = ПВХ.Поддиапазон Тогда
	//		
	//		Если СтрокаТЧ.ЗначениеПоказателя = Неопределено Тогда
	//			СтрОш = СтрОш + "Не указано начало диапазона,";
	//		КонецЕсли;
	//		
	//		Если СтрокаТЧ.МаксЗначениеПоказателя = Неопределено Тогда
	//			СтрОш = СтрОш + "Не указан конец диапазона,";
	//		КонецЕсли;
	//		
	//		Если СтрокаТЧ.ЗначениеПоказателя <> Неопределено
	//			И СтрокаТЧ.МаксЗначениеПоказателя <> Неопределено
	//			И СтрокаТЧ.МаксЗначениеПоказателя < СтрокаТЧ.ЗначениеПоказателя Тогда
	//			СтрОш = СтрОш + "Конец диапазона должен быть больше начала диапазона,";
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( СтрОш) тогда
	//		СтрОшибкиДокумента = СтрОшибкиДокумента + СтрНомерСтроки + СтрОш+Символы.ПС;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат( СтрОшибкиДокумента);
КонецФункции

Процедура СертификацияНоменклатураПриИзменении( Объект, ХарактеристикаНоменклатурыВыбор, ЕстьЗначения = Истина) Экспорт
	//ОЦМ Мобильная
	//Если ЗначениеЗаполнено( ХарактеристикаНоменклатурыВыбор) тогда
	//	Объект.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатурыВыбор;
	//	ХарактеристикаНоменклатурыВыбор = Неопределено;
	//КонецЕсли;
	//
	//ДанныеМеталла = УГМК_ОперативныйУчет.ПолучитьРеквизитыМеталла( Объект.Номенклатура);
	//Если ДанныеМеталла <> Неопределено тогда
	//	Объект.МаркаСплава = ДанныеМеталла.МаркаСплаваПроизводство;
	//	Объект.ГруппаПродукции = ДанныеМеталла.ГруппаПродукции;
	//	
	//	Если ЗначениеЗаполнено( ДанныеМеталла.Стандарт) тогда
	//		Объект.НормативныйДокумент = ДанныеМеталла.Стандарт;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено( ДанныеМеталла.ДополнительныйНД) тогда
	//		Объект.НормативныйДокументДоп = ДанныеМеталла.ДополнительныйНД;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//УГМК_ОбщегоНазначенияККСервер.ЗаполнитьОписаниеМеталлаНаСервере( Объект, ЕстьЗначения);
КонецПроцедуры

Функция ПроверитьВхождениеПартий( ОбразованыПартии, Подробно = Истина) Экспорт
	Перем ОбразованыПартииМассив;
	
	Если ТипЗнч(ОбразованыПартии) = Тип("Массив") тогда
		ОбразованыПартииМассив = ОбразованыПартии;
	иначеЕсли ЗначениеЗаполнено( ОбразованыПартии) тогда
		ОбразованыПартииМассив = Новый Массив;
		ОбразованыПартииМассив.Добавить( ОбразованыПартии);
	иначе
		Возврат("");
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Исходная", ОбразованыПартииМассив);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ИсходныеПартииСрезПоследних.Образована,
	             |	УГМК_ИсходныеПартииСрезПоследних.Образована.Дата КАК Дата,
	             |	УГМК_ИсходныеПартииСрезПоследних.Образована.ДляПредставления КАК ДляПредставления,
	             |	УГМК_ИсходныеПартииСрезПоследних.Регистратор.Номер КАК РегистраторНомер,
	             |	УГМК_ИсходныеПартииСрезПоследних.Регистратор.Дата КАК РегистраторДата
	             |ИЗ
	             |	РегистрСведений.УГМК_ИсходныеПартии.СрезПоследних(, Исходная В (&Исходная)) КАК УГМК_ИсходныеПартииСрезПоследних
	             |ГДЕ
	             |	УГМК_ИсходныеПартииСрезПоследних.Действует";
	СтрОшибка = "";
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшибка, ", ");
		Если Подробно тогда
			СтрОшибка = СтрОшибка + Результат.ДляПредставления+" от "+Формат( Результат.Дата, "ДФ=dd.MM.yyyy")+
				" (Документ "+Результат.РегистраторНомер+" от "+Формат( Результат.РегистраторДата, "ДФ=dd.MM.yyyy")+")";
		иначе
			СтрОшибка = СтрОшибка + Результат.ДляПредставления+" от "+Формат( Результат.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено( СтрОшибка) тогда
		СтрОшибка = "Партия использована в: "+СтрОшибка;
	КонецЕсли;
	
	Возврат( СтрОшибка);
КонецФункции

Функция ХранилищеОбщихНастроекЗагрузитьДляПользователя( КлючОбъекта, КлючНастроек, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	//ОЦМ Мобильная
	//Если ИмяПользователя = Неопределено тогда
	//	ИмяПользователя = Строка( глЗначениеПеременной("глТекущийПользователь"));
	//КонецЕсли;
	
	Результат = Неопределено;
	//Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
	//	УстановитьПривилегированныйРежим( Истина);
	//	Результат = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);
	//	Если Результат = Неопределено тогда
	//		Результат = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек);
	//	КонецЕсли;
	//	УстановитьПривилегированныйРежим( Ложь);
	//КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Процедура ХранилищеОбщихНастроекСохранитьДляПользователя(КлючОбъекта, КлючНастроек = Неопределено, Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	//ОЦМ Мобильная
	//Если ИмяПользователя = Неопределено тогда
	//	ИмяПользователя = Строка( глЗначениеПеременной("глТекущийПользователь"));
	//КонецЕсли;
	//
	//Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////#Если Сервер тогда

	//УстановитьПривилегированныйРежим( Истина);
	//ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя);
	//УстановитьПривилегированныйРежим( Ложь);
	//
	////#КонецЕсли
	//
КонецПроцедуры

Процедура ПереключитьТекущегоПользователя( ТекущийПользователь) Экспорт
	//ОЦМ Мобильная
	//УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	//ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	//
	//ОбновитьПовторноИспользуемыеЗначения();
	//
	//ЗаписьЖурналаРегистрации("Сеанс.СменаТекущегоПользователя", УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, "Новый пользователь: "+ТекущийПользователь,"Смена пользователя");
	//УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ПолучитьСписокОперативныхНарядов(Организация=Неопределено,ПодразделениеОрганизации=Неопределено,Ответственный=Неопределено) Экспорт
	
	СписокОперативныхНарядов=Новый СписокЗначений();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд,
		|	МАКСИМУМ(УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Дата) КАК Дата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник) КАК КоличествоСотрудников,
		|	""Наряд:"" + ВЫБОР
		|		КОГДА МАКСИМУМ(УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Бригадир) <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|			ТОГДА "" "" + МАКСИМУМ(УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Бригадир.Наименование)
		|		ИНАЧЕ """"
		|	КОНЕЦ + ВЫБОР
		|		КОГДА МАКСИМУМ(УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.РабочийЦентр) <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА "" на """""" + МАКСИМУМ(УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.РабочийЦентр.Наименование) + """"""""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОперативныйНарядПредставление
		|ПОМЕСТИТЬ ВТДействующиеНаряды
		|ИЗ
		|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников.СрезПоследних(, Организация = &Организация) КАК УГМК_ОперативныеНарядыСотрудниковСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников.СрезПоследних КАК УГМК_МестонахождениеСотрудниковСрезПоследних
		|		ПО УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник = УГМК_МестонахождениеСотрудниковСрезПоследних.Сотрудник
		|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.МестонахождениеСотрудника = ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
		|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.Период <= УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействующиеНаряды.ОперативныйНаряд,
		|	ДействующиеНаряды.Дата КАК Дата,
		|	ДействующиеНаряды.КоличествоСотрудников КАК КоличествоСотрудников,
		|	ДействующиеНаряды.ОперативныйНарядПредставление КАК ОперативныйНарядПредставление
		|ИЗ
		|	ВТДействующиеНаряды КАК ДействующиеНаряды
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НовыеНаряды.Ссылка,
		|	NULL,
		|	0,
		|	""Новый наряд:"" + ВЫБОР
		|		КОГДА НовыеНаряды.Бригадир <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|			ТОГДА "" "" + НовыеНаряды.Бригадир.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НовыеНаряды.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА "" на """""" + НовыеНаряды.РабочийЦентр.Наименование + """"""""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Справочник.УГМК_ОперативныйНаряд КАК НовыеНаряды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеНаряды КАК ДействующиеНаряды
		|		ПО НовыеНаряды.РабочийЦентр = ДействующиеНаряды.ОперативныйНаряд.РабочийЦентр
		|			И НовыеНаряды.Бригадир = ДействующиеНаряды.ОперативныйНаряд.Бригадир
		|ГДЕ
		|	НовыеНаряды.Действует
		|	И (НовыеНаряды.Владелец = &Организация
		|			ИЛИ НовыеНаряды.Владелец В ИЕРАРХИИ (&ПодразделениеОрганизации))
		|	И ДействующиеНаряды.ОперативныйНаряд ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОперативныйНарядПредставление";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Представление=ВыборкаДетальныеЗаписи.ОперативныйНарядПредставление+" ("+Формат(ВыборкаДетальныеЗаписи.КоличествоСотрудников,"ЧН=0; ЧГ=0")+" чел.) ";
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дата) Тогда
			Представление=Представление+Формат(ВыборкаДетальныеЗаписи.Дата,?(ВыборкаДетальныеЗаписи.Дата>=НачалоДня(ТекущаяДата()),"ДФ=HH.mm","ДФ='dd MMM HH:mm'"));
		КонецЕсли;
		
		СписокОперативныхНарядов.Добавить(ВыборкаДетальныеЗаписи.ОперативныйНаряд,Представление);
	КонецЦикла;
	
	Возврат СписокОперативныхНарядов;

КонецФункции

Функция ПолучитьПользователяПоНомеруКарты(СтандартКарты,Номер,Период) Экспорт
	УстановитьПривилегированныйРежим( Истина);
	
	Если СтандартКарты="Em-Marine" Тогда
		ВидКарты=Перечисления.ВидыИнформационныхКарт.Проксимити;	
	Иначе
		ВидКарты=Неопределено;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.ВладелецКарты,
		|	ИнформационныеКарты.ВладелецКарты.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &Номер
		|	И ИнформационныеКарты.ВидКарты = &ВидКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВидКарты", ВидКарты);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Период", Период);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пользователь=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Пользователь=ВыборкаДетальныеЗаписи.ВладелецКарты;
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаДетальныеЗаписи.ИдентификаторПользователяИБ);
		Если ПользовательИБ <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Пользователь;
КонецФункции

Функция ТекстВопросаОСменеПропуска(КодКарты,Сотрудник,СсылкаИзКода) Экспорт
	ПрежнийВладелецПропуска="";
	Если ЗначениеЗаполнено(СсылкаИзКода) тогда
		ПрежнийВладелецПропуска=" (вместо сотрудника "+СсылкаИзКода.Физлицо.Наименование+")"
	КонецЕсли;
	Возврат "Присвоить сотруднику "+СокрЛП(Сотрудник)+" пропуск №"+КодКарты+ПрежнийВладелецПропуска+" ?";
КонецФункции

//&НаСервереБезКонтекста
Функция ПодготовитьПараметрыВызова_РегистрацияСобытияСКУД( ТекущийПользователь) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Настройка=УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра(ТекущийПользователь, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделение") , МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента(), "РегистрацияПропуска", Ложь);
	//ПараметрыФормы=Новый Структура("Пользователь,Физлицо,Организация",ТекущийПользователь,ТекущийПользователь.Физлицо,УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
	//
	//Если Настройка.НайтиПоЗначению("Мастер")<>Неопределено Тогда
	//	ПараметрыФормы.Вставить("Мастер",Истина);
	//КонецЕсли;
	//
	//Возврат ПараметрыФормы;
КонецФункции

Функция ПолучитьПользователяПоКарте(КодКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидКарты",Перечисления.ВидыИнформационныхКарт.Проксимити);
	Запрос.УстановитьПараметр("КодКарты",КодКарты);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформационныеКарты.ВладелецКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &Номер
		|	И ИнформационныеКарты.ВидКарты = &ВидКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пользователь=Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пользователь=ВыборкаДетальныеЗаписи.ВладелецКарты;
	КонецЕсли;
	
	Возврат Пользователь;

КонецФункции

Функция ПолучитьСсылку( Тип, Имя, УИД = Неопределено) Экспорт
	Если Тип = "Справочник" тогда
		Менеджер = Справочники[ Имя];
	иначеЕсли Имя = "Документ" тогда
		Менеджер = Документы[ Имя];
	иначеЕсли Имя = "Перечисление" тогда
		Менеджер = Перечисления[ Имя];
	//иначеЕсли Имя = "ПланВидовХарактеристик" тогда
	//	Менеджер = ПланыВидовХарактеристик[ Имя];
	//иначеЕсли Имя = "ПланВидовРасчета" тогда
	//	Менеджер = ПланыВидовРасчета[ Имя];
	//иначеЕсли Имя = "БизнесПроцесс" тогда
	//	Менеджер = БизнесПроцессы[ Имя];
	//иначеЕсли Имя = "Задача" тогда
	//	Менеджер = Задачи[ Имя];
	КонецЕсли;
	
	Если УИД = Неопределено тогда
		Результат = Менеджер.ПустаяСсылка();
	иначе
		Результат = Менеджер.ПолучитьСсылку( УИД);
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПроверитьДоступностьМестаУчета( Аналитика, ТекущийПользователь)
	Если ЗначениеЗаполнено( Аналитика) тогда
		ТипАналитики = ТипЗнч( Аналитика);
		Если ТипАналитики = Тип("СправочникСсылка.Склады") тогда
			ДоступныМатериалы = УГМК_ОперативныйУчет.ЕстьДоступКСкладу( Аналитика, ТекущийПользователь);	
		иначеЕсли ТипАналитики = Тип("СправочникСсылка.РабочиеЦентры") тогда
			ДоступныМатериалы = УГМК_ОперативныйУчет.ЕстьДоступКОборудованию( Аналитика, ТекущийПользователь);	
		иначеЕсли ТипАналитики = Тип("СправочникСсылка.Подразделения") тогда
			ДоступныМатериалы = УГМК_ОперативныйУчет.ЕстьДоступКПодразделению( Аналитика, ТекущийПользователь);	
		Иначе
			ДоступныМатериалы = Истина;	
		КонецЕсли;
	иначе
		ДоступныМатериалы = Истина;	
	КонецЕсли;
	
	Возврат( ДоступныМатериалы);
КонецФункции

Функция ОбъектыРазныхГруппДоступностиИлиПодразделений( Знач Аналитика1, Знач Аналитика2, Знач ТекущийПользователь) Экспорт
	
	Аналитика1Доступна = ПроверитьДоступностьМестаУчета( Аналитика1, ТекущийПользователь);
	Аналитика2Доступна = ПроверитьДоступностьМестаУчета( Аналитика2, ТекущийПользователь);
	
	Результат = не (Аналитика1Доступна и Аналитика2Доступна);
	
	Если Результат тогда
		ЗаписатьЗаписьЖурналаРегистрации( "ОбъектыРазныхГруппДоступностиИлиПодразделений", "["+Аналитика1+"] ["+Аналитика2+"]");
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

//РежимПодбора="Одиночный" один из наиболее приоритетных
//РежимПодбора="Множественный" один из наиболее приоритетных для каждой тех. операции
//РежимПодбора="Приоритетный" все с наибольшим приоритетом
//РежимПодбора="Полный" все подходящие
Функция ПодборТехнологическихОпераций(Данные=Неопределено,МенеджерВременныхТаблиц=Неопределено,Знач ДополнительныеПоля="",ПоляСортировки="",Период=Неопределено,РежимПодбора="",ДетализацияПодбора="Глобально") Экспорт
	ТекстДополнительныеПоля="";	
	Если ДополнительныеПоля<>"" Тогда
		Поз=Найти(ДополнительныеПоля,",");
		Пока Поз>0 Цикл
			ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+Лев(ДополнительныеПоля,Поз-1)+",";	
			ДополнительныеПоля=Сред(ДополнительныеПоля,Поз+1);	
			Поз=Найти(ДополнительныеПоля,",");
		КонецЦикла; 
		ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+ДополнительныеПоля+",";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц=Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	//Запрос.УстановитьПараметр("ОднозначныйПодбор",ОднозначныйПодбор);
	
	ЗависимостьОтМатериала=Новый Массив;
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаТехнологическуюОперацию);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаВариантТехнологическойОперации);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
	Запрос.УстановитьПараметр("ЗависимостьОтМатериала", ЗависимостьОтМатериала);
	ЗависимостьОтПродукции=Новый Массив;
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтТехнологическойОперации);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтВариантаТехнологическойОперации);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
	Запрос.УстановитьПараметр("ЗависимостьОтПродукции", ЗависимостьОтПродукции);
	
	//
	Запрос.УстановитьПараметр("ДетализацияПодбораПоОперациям", ДетализацияПодбора="ПоОперациям");//Истина - варианты подбираются для каждой операции независимо 
	Запрос.УстановитьПараметр("РежимПодбораИзНастройки", Не ЗначениеЗаполнено(РежимПодбора));
	Запрос.УстановитьПараметр("РежимПодбораМножественный", РежимПодбора="Множественный");//Ложь - подбирается не более одного варианта для каждой операции, Истина - подбираются все варианты с максимальным приоритетом
	
	Если Данные=Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТДанные
			|;
			|УНИЧТОЖИТЬ ВТДанные";
		Данные=Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Колонки=Данные.Колонки;
	Если Колонки.Найти("Индекс")=Неопределено Тогда
		Колонки.Добавить("Индекс",Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Для каждого СторкаДанных Из Данные Цикл
		СторкаДанных.Индекс=Данные.Индекс(СторкаДанных);
	КонецЦикла; 
	
	//Если Данные<>Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&ДополнительныеПоля,
			|	Данные.Индекс КАК Индекс,
			|	Данные.Период КАК Период,
			|	Данные.Группа КАК Группа,
			|	Данные.ПоСвойствам КАК ПоСвойствам,
			|	Данные.РабочийЦентр КАК РабочийЦентр,
			|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
			|	Данные.ВидОперации КАК ВидОперации,
			|	Данные.ГруппаПродукции КАК ГруппаПродукции,
			|	Данные.Номенклатура КАК Номенклатура,
			|	Данные.Характеристика КАК Характеристика,
			|	Данные.МаркаСплава КАК МаркаСплава,
			|	Данные.Состояние КАК Состояние,
			|	Данные.Засор КАК Засор,
			|	Данные.ПоСвойствамПродукции КАК ПоСвойствамПродукции,
			|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
			|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
			|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
			|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
			|	Данные.СостояниеПродукции КАК СостояниеПродукции,
			|	Данные.ЗасорПродукции КАК ЗасорПродукции,
			|	Данные.ПаспортПартии КАК ПаспортПартии,
			|	Данные.ПаспортПартииПродукции КАК ПаспортПартииПродукции,
			|	Данные.Количество КАК Количество,
			|	Данные.Количество1 КАК Количество1,
			|	Данные.КоличествоМест КАК КоличествоМест,
			|	Данные.КоличествоПродукции КАК КоличествоПродукции,
			|	Данные.Количество1Продукции КАК Количество1Продукции,
			|	Данные.КоличествоМестПродукции КАК КоличествоМестПродукции,
			|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Данные.ТехнологическаяОперация КАК ТехнологическаяОперация,
			|	Данные.ВариантТехнологическойОперации КАК ВариантТехнологическойОперации,
			|	Данные.КоличествоОперации КАК КоличествоОперации
			|ПОМЕСТИТЬ ВТДанные
			|ИЗ
			|	&Данные КАК Данные
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Индекс";
			
		Если Колонки.Найти("ВидОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ВидОперации ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ПаспортПартии")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ПаспортПартии ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ПаспортПартииПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ПаспортПартииПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество1")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество1 ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоМест")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоМест ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество1Продукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество1Продукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоМестПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоМестПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Период")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Период ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Группа")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Группа ","0 ");
		КонецЕсли;
		Если Колонки.Найти("ГруппаПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Номенклатура")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Номенклатура ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Характеристика")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Характеристика ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("МаркаСплава")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплава ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Состояние")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Состояние ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Засор")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Засор ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ГруппаПродукцииПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукцииПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("НоменклатураПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.НоменклатураПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ХарактеристикаПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ХарактеристикаПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("МаркаСплаваПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплаваПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("СостояниеПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.СостояниеПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ЗасорПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЗасорПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ЕдиницаИзмерения")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЕдиницаИзмерения ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ТехнологическаяОперация")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТехнологическаяОперация ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ВариантТехнологическойОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ВариантТехнологическойОперации ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоОперации ",""""" ");
		КонецЕсли;
		//Если Колонки.Найти("ТребуетсяУточнение")=Неопределено Тогда
		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТребуетсяУточнение ",""""" ");
		//КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
		Запрос.УстановитьПараметр("Данные", Данные);
		Запрос.Выполнить();
	//КонецЕсли;	
	
	Если Период=Неопределено Тогда
		Период=ТекущаяДата();
	КонецЕсли; 
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Данные.Индекс КАК Индекс,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер1), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 1
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер1,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер2), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 2
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер2,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер3), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 3
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер3,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер4), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 4
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер4,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер5), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 5
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер5
		|ПОМЕСТИТЬ ВТРазмеры
		|ИЗ
		|	ВТДанные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		|		ПО Данные.Характеристика = УГМК_ЗначенияРазмеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК ВидыРазмеров
		|		ПО Данные.Характеристика.Владелец.НоменклатураОЦМ_ск.ТипРазмера = ВидыРазмеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Данные.Характеристика = ЗначенияСвойствОбъектов.Объект
		|			И (ВидыРазмеров.ВидРазмера = ЗначенияСвойствОбъектов.Свойство)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Индекс
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	Размер1,
		|	Размер2,
		|	Размер3,
		|	Размер4,
		|	Размер5
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Индекс КАК Индекс,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер1), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 1
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер1,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер2), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 2
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер2,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер3), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 3
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер3,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер4), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 4
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ 0
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер4,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(УГМК_ЗначенияРазмеров.Размер5), МАКСИМУМ(ВЫБОР
		|						КОГДА ВидыРазмеров.ПорядковыйНомерРазмера = 5
		|							ТОГДА ЗначенияСвойствОбъектов.Значение
		|						ИНАЧЕ NULL
		|					КОНЕЦ)) КАК ЧИСЛО), 0) КАК Размер5
		|ПОМЕСТИТЬ ВТРазмерыПродукции
		|ИЗ
		|	ВТДанные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		|		ПО Данные.ХарактеристикаПродукции = УГМК_ЗначенияРазмеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК ВидыРазмеров
		|		ПО Данные.ХарактеристикаПродукции.Владелец.НоменклатураОЦМ_ск.ТипРазмера = ВидыРазмеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Данные.ХарактеристикаПродукции = ЗначенияСвойствОбъектов.Объект
		|			И (ВидыРазмеров.ВидРазмера = ЗначенияСвойствОбъектов.Свойство)
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Индекс
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	Размер1,
		|	Размер2,
		|	Размер3,
		|	Размер4,
		|	Размер5
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Индекс КАК Индекс,
		|	ЕСТЬNULL(Соответствие.ТехнологическаяОперация, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)) КАК ТехнологическаяОперация,
		|	ЕСТЬNULL(Соответствие.ВариантТехнологическойОперации, ЗНАЧЕНИЕ(Справочник.УГМК_ВариантыТехнологическихОпераций.ПустаяСсылка)) КАК ВариантТехнологическойОперации,
		|	ВЫБОР
		|		КОГДА Соответствие.РабочийЦентр <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 50000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.РежимРаботыРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка)
		|			ТОГДА 10000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ВидОперации <> ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка)
		|			ТОГДА 1000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА 100000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА 100000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.Номенклатура <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.Номенклатура <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтМатериала)
		|			ТОГДА 0
		|		КОГДА ОписаниеМеталла.Характеристика <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 500
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер1Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер1Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер2Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер2Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер3Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер3Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер4Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер4Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер5Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер5Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
		|			ТОГДА 0
		|		КОГДА ОписаниеМеталлаПродукции.Характеристика <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 500
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер1Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер1Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер2Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер2Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер3Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер3Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер4Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер4Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер5Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер5Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.МаркаСплава <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.МаркаСплава <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.Состояние <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.Состояние <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеЗасора В (&ЗависимостьОтМатериала)
		|				И (ОписаниеМеталла.ЗасорМинимальный <> 0
		|					ИЛИ ОписаниеМеталла.ЗасорМаксимальный <> 0)
		|			ТОГДА 1000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеЗасора В (&ЗависимостьОтПродукции)
		|				И (ОписаниеМеталлаПродукции.ЗасорМинимальный <> 0
		|					ИЛИ ОписаниеМеталлаПродукции.ЗасорМаксимальный <> 0)
		|			ТОГДА 1000
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТВсеСоответствия
		|ИЗ
		|	ВТДанные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ВариантыТехнологическихОпераций КАК УГМК_ВариантыТехнологическихОпераций
		|		ПО Данные.ВариантТехнологическойОперации = УГМК_ВариантыТехнологическихОпераций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмеры КАК УГМК_ЗначенияРазмеров
		|		ПО Данные.Индекс = УГМК_ЗначенияРазмеров.Индекс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПродукции КАК УГМК_ЗначенияРазмеровПродукции
		|		ПО Данные.Индекс = УГМК_ЗначенияРазмеровПродукции.Индекс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводство
		|		ПО Данные.МаркаСплава = УГМК_МаркаСплаваПроизводство.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводствоПродукции
		|		ПО Данные.МаркаСплаваПродукции = УГМК_МаркаСплаваПроизводствоПродукции.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ИзменениеСвойствТехнологическойОперацией КАК Соответствие
		|		ПО (Данные.РабочийЦентр = Соответствие.РабочийЦентр
		|				ИЛИ Соответствие.РабочийЦентр = НЕОПРЕДЕЛЕНО
		|				ИЛИ Данные.РабочийЦентр В (Соответствие.РабочийЦентр.Состав.РабочийЦентр))
		|			И (Данные.РежимРабочегоЦентра = Соответствие.РежимРаботыРабочегоЦентра
		|				ИЛИ Соответствие.РежимРаботыРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка))
		|			И (Данные.ВидОперации = Соответствие.ВидОперации
		|				ИЛИ Соответствие.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка))
		|			И (НЕ Соответствие.ВариантТехнологическойОперации.ПометкаУдаления)
		|			И (&ДетализацияПодбораПоОперациям
		|				ИЛИ ЕСТЬNULL(УГМК_ВариантыТехнологическихОпераций.ТребуетсяУточнение, ИСТИНА)
		|					И ЕСТЬNULL(УГМК_ВариантыТехнологическихОпераций.Владелец, Соответствие.ТехнологическаяОперация) = Соответствие.ТехнологическаяОперация
		|					И НЕ Соответствие.ВариантТехнологическойОперации.ТребуетсяУточнение)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталла
		|		ПО (ОписаниеМеталла.КлючОписанияМеталла = Соответствие.КлючОписанияМеталла)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтМатериала)
		|				ИЛИ Данные.ГруппаПродукции = ОписаниеМеталла.ГруппаПродукции
		|				ИЛИ ОписаниеМеталла.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка))
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтМатериала)
		|				ИЛИ Данные.Номенклатура = ОписаниеМеталла.Номенклатура
		|				ИЛИ ОписаниеМеталла.Номенклатура = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтМатериала)
		|				ИЛИ ОписаниеМеталла.Характеристика <> НЕОПРЕДЕЛЕНО
		|					И Данные.Характеристика = ОписаниеМеталла.Характеристика
		|				ИЛИ ОписаниеМеталла.Характеристика = НЕОПРЕДЕЛЕНО
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) >= ОписаниеМеталла.Размер1Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) < ОписаниеМеталла.Размер1Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) = ОписаниеМеталла.Размер1Минимальный
		|							ИЛИ ОписаниеМеталла.Размер1Минимальный = 0)
		|							И ОписаниеМеталла.Размер1Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) >= ОписаниеМеталла.Размер2Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) < ОписаниеМеталла.Размер2Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) = ОписаниеМеталла.Размер2Минимальный
		|							ИЛИ ОписаниеМеталла.Размер2Минимальный = 0)
		|							И ОписаниеМеталла.Размер2Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) >= ОписаниеМеталла.Размер3Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) < ОписаниеМеталла.Размер3Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) = ОписаниеМеталла.Размер3Минимальный
		|							ИЛИ ОписаниеМеталла.Размер3Минимальный = 0)
		|							И ОписаниеМеталла.Размер3Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) >= ОписаниеМеталла.Размер4Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) < ОписаниеМеталла.Размер4Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) = ОписаниеМеталла.Размер4Минимальный
		|							ИЛИ ОписаниеМеталла.Размер4Минимальный = 0)
		|							И ОписаниеМеталла.Размер4Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) >= ОписаниеМеталла.Размер5Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) < ОписаниеМеталла.Размер5Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) = ОписаниеМеталла.Размер5Минимальный
		|							ИЛИ ОписаниеМеталла.Размер5Минимальный = 0)
		|							И ОписаниеМеталла.Размер5Максимальный = 0))
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтМатериала)
		|				ИЛИ Данные.МаркаСплава = ОписаниеМеталла.МаркаСплава
		|				ИЛИ Данные.МаркаСплава В (ОписаниеМеталла.МаркаСплава.Коллекция.Значение)
		|				ИЛИ Данные.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|							ПО
		|								Коллекция.Значение = МаркиСплавов.Родитель
		|									И Коллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|				ИЛИ Данные.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|					ГДЕ
		|						МаркиСплавов.Родитель = ОписаниеМеталла.МаркаСплава)
		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава = ОписаниеМеталла.МаркаСплава
		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава В (ОписаниеМеталла.МаркаСплава.Коллекция.Значение)
		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|							ПО
		|								Коллекция.Значение = МаркиСплавов.Родитель
		|									И Коллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|				ИЛИ УГМК_МаркаСплаваПроизводство.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|					ГДЕ
		|						МаркиСплавов.Родитель = ОписаниеМеталла.МаркаСплава)
		|				ИЛИ ОписаниеМеталла.МаркаСплава = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтМатериала)
		|				ИЛИ Данные.Состояние = ОписаниеМеталла.Состояние
		|				ИЛИ ОписаниеМеталла.Состояние = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеЗасора В (&ЗависимостьОтМатериала)
		|				ИЛИ (ЕСТЬNULL(Данные.Засор, 0) >= ОписаниеМеталла.ЗасорМинимальный
		|						И ЕСТЬNULL(Данные.Засор, 0) < ОписаниеМеталла.ЗасорМаксимальный
		|					ИЛИ (ЕСТЬNULL(Данные.Засор, 0) = ОписаниеМеталла.ЗасорМинимальный
		|						ИЛИ ОписаниеМеталла.ЗасорМинимальный = 0)
		|						И ОписаниеМеталла.ЗасорМаксимальный = 0))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталлаПродукции
		|		ПО (ОписаниеМеталлаПродукции.КлючОписанияМеталла = Соответствие.КлючОписанияМеталлаПродукции)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
		|				ИЛИ Данные.ГруппаПродукцииПродукции = ОписаниеМеталлаПродукции.ГруппаПродукции
		|				ИЛИ ОписаниеМеталлаПродукции.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка))
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
		|				ИЛИ Данные.НоменклатураПродукции = ОписаниеМеталлаПродукции.Номенклатура
		|				ИЛИ ОписаниеМеталлаПродукции.Номенклатура = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
		|				ИЛИ ОписаниеМеталлаПродукции.Характеристика <> НЕОПРЕДЕЛЕНО
		|					И Данные.ХарактеристикаПродукции = ОписаниеМеталлаПродукции.Характеристика
		|				ИЛИ ОписаниеМеталлаПродукции.Характеристика = НЕОПРЕДЕЛЕНО
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) >= ОписаниеМеталлаПродукции.Размер1Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) < ОписаниеМеталлаПродукции.Размер1Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) = ОписаниеМеталлаПродукции.Размер1Минимальный
		|							ИЛИ ОписаниеМеталлаПродукции.Размер1Минимальный = 0)
		|							И ОписаниеМеталлаПродукции.Размер1Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) >= ОписаниеМеталлаПродукции.Размер2Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) < ОписаниеМеталлаПродукции.Размер2Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) = ОписаниеМеталлаПродукции.Размер2Минимальный
		|							ИЛИ ОписаниеМеталлаПродукции.Размер2Минимальный = 0)
		|							И ОписаниеМеталлаПродукции.Размер2Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) >= ОписаниеМеталлаПродукции.Размер3Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) < ОписаниеМеталлаПродукции.Размер3Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) = ОписаниеМеталлаПродукции.Размер3Минимальный
		|							ИЛИ ОписаниеМеталлаПродукции.Размер3Минимальный = 0)
		|							И ОписаниеМеталлаПродукции.Размер3Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) >= ОписаниеМеталлаПродукции.Размер4Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) < ОписаниеМеталлаПродукции.Размер4Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) = ОписаниеМеталлаПродукции.Размер4Минимальный
		|							ИЛИ ОписаниеМеталлаПродукции.Размер4Минимальный = 0)
		|							И ОписаниеМеталлаПродукции.Размер4Максимальный = 0)
		|					И (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) >= ОписаниеМеталлаПродукции.Размер5Минимальный
		|							И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) < ОписаниеМеталлаПродукции.Размер5Максимальный
		|						ИЛИ (ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) = ОписаниеМеталлаПродукции.Размер5Минимальный
		|							ИЛИ ОписаниеМеталлаПродукции.Размер5Минимальный = 0)
		|							И ОписаниеМеталлаПродукции.Размер5Максимальный = 0))
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
		|				ИЛИ Данные.МаркаСплаваПродукции = ОписаниеМеталлаПродукции.МаркаСплава
		|				ИЛИ Данные.МаркаСплаваПродукции В (ОписаниеМеталлаПродукции.МаркаСплава.Коллекция.Значение)
		|				ИЛИ Данные.МаркаСплаваПродукции В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|							ПО
		|								Коллекция.Значение = МаркиСплавов.Родитель
		|									И Коллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|				ИЛИ Данные.МаркаСплаваПродукции В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|					ГДЕ
		|						МаркиСплавов.Родитель = ОписаниеМеталлаПродукции.МаркаСплава)
		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава = ОписаниеМеталлаПродукции.МаркаСплава
		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В (ОписаниеМеталлаПродукции.МаркаСплава.Коллекция.Значение)
		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|							ПО
		|								Коллекция.Значение = МаркиСплавов.Родитель
		|									И Коллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|				ИЛИ УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В
		|					(ВЫБРАТЬ
		|						МаркиСплавов.Ссылка
		|					ИЗ
		|						Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|					ГДЕ
		|						МаркиСплавов.Родитель = ОписаниеМеталлаПродукции.МаркаСплава)
		|				ИЛИ ОписаниеМеталлаПродукции.МаркаСплава = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтПродукции)
		|				ИЛИ Данные.СостояниеПродукции = ОписаниеМеталлаПродукции.Состояние
		|				ИЛИ ОписаниеМеталлаПродукции.Состояние = НЕОПРЕДЕЛЕНО)
		|			И (НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеЗасора В (&ЗависимостьОтПродукции)
		|				ИЛИ (ЕСТЬNULL(Данные.ЗасорПродукции, 0) >= ОписаниеМеталлаПродукции.ЗасорМинимальный
		|						И ЕСТЬNULL(Данные.ЗасорПродукции, 0) < ОписаниеМеталлаПродукции.ЗасорМаксимальный
		|					ИЛИ (ЕСТЬNULL(Данные.ЗасорПродукции, 0) = ОписаниеМеталлаПродукции.ЗасорМинимальный
		|						ИЛИ ОписаниеМеталлаПродукции.ЗасорМинимальный = 0)
		|						И ОписаниеМеталлаПродукции.ЗасорМаксимальный = 0))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	ВариантТехнологическойОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСоответствия.Индекс КАК Индекс,
		|	ВсеСоответствия.ТехнологическаяОперация КАК ТехнологическаяОперация,
		|	ВсеСоответствия.ВариантТехнологическойОперации КАК ВариантТехнологическойОперации,
		|	ВсеСоответствия.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ВТОтфильтрованныеСоответствия
		|ИЗ
		|	ВТВсеСоответствия КАК ВсеСоответствия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеСоответствия КАК ВсеСоответствияПодчиненный
		|		ПО ВсеСоответствия.Индекс = ВсеСоответствияПодчиненный.Индекс
		|			И ВсеСоответствия.ТехнологическаяОперация = ВсеСоответствияПодчиненный.ТехнологическаяОперация
		|			И (ВсеСоответствия.ВариантТехнологическойОперации В (ВсеСоответствияПодчиненный.ВариантТехнологическойОперации.Родитель, ВсеСоответствияПодчиненный.ВариантТехнологическойОперации.Родитель.Родитель, ВсеСоответствияПодчиненный.ВариантТехнологическойОперации.Родитель.Родитель.Родитель, ВсеСоответствияПодчиненный.ВариантТехнологическойОперации.Родитель.Родитель.Родитель.Родитель))
		|			И (ВсеСоответствия.ВариантТехнологическойОперации.ТребуетсяУточнение)
		|			И (НЕ ВсеСоответствияПодчиненный.ВариантТехнологическойОперации.ТребуетсяУточнение)
		|ГДЕ
		|	ВсеСоответствияПодчиненный.ВариантТехнологическойОперации ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСоответствия.Индекс КАК Индекс,
		|	МИНИМУМ(ВсеСоответствия.ТехнологическаяОперация) КАК ТехнологическаяОперация,
		|	МАКСИМУМ(ВсеСоответствия.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТМаксимальныйПриоритет
		|ИЗ
		|	ВТОтфильтрованныеСоответствия КАК ВсеСоответствия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеСоответствия.Индекс,
		|	ВЫБОР
		|		КОГДА &ДетализацияПодбораПоОперациям
		|			ТОГДА ВсеСоответствия.ТехнологическаяОперация
		|		ИНАЧЕ NULL
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСоответствия.Индекс КАК Индекс,
		|	ВсеСоответствия.ТехнологическаяОперация.УГМК_РежимПодбора КАК УГМК_РежимПодбора,
		|	ВсеСоответствия.ТехнологическаяОперация,
		|	ВсеСоответствия.ВариантТехнологическойОперации
		|ПОМЕСТИТЬ ВТРавнозначныеСоответствия
		|ИЗ
		|	ВТОтфильтрованныеСоответствия КАК ВсеСоответствия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныйПриоритет КАК МаксимальныйПриоритет
		|		ПО ВсеСоответствия.Индекс = МаксимальныйПриоритет.Индекс
		|			И (НЕ &ДетализацияПодбораПоОперациям
		|				ИЛИ ВсеСоответствия.ТехнологическаяОперация = МаксимальныйПриоритет.ТехнологическаяОперация)
		|			И ВсеСоответствия.Приоритет = МаксимальныйПриоритет.Приоритет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РавнозначныеСоответствия.Индекс КАК Индекс,
		|	МИНИМУМ(РавнозначныеСоответствия.ТехнологическаяОперация) КАК ТехнологическаяОперация,
		|	МИНИМУМ(РавнозначныеСоответствия.ВариантТехнологическойОперации) КАК ВариантТехнологическойОперации,
		|	КОЛИЧЕСТВО(РавнозначныеСоответствия.ВариантТехнологическойОперации) КАК Количество,
		|	МАКСИМУМ(РавнозначныеСоответствия.ВариантТехнологическойОперации) КАК РавнозначныйВариантТехнологическойОперации
		|ПОМЕСТИТЬ ВТКоличествоРавнозначныхСоответствий
		|ИЗ
		|	ВТРавнозначныеСоответствия КАК РавнозначныеСоответствия
		|
		|СГРУППИРОВАТЬ ПО
		|	РавнозначныеСоответствия.Индекс,
		|	ВЫБОР
		|		КОГДА &ДетализацияПодбораПоОперациям
		|			ТОГДА РавнозначныеСоответствия.ТехнологическаяОперация
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &РежимПодбораМножественный
		|				ИЛИ &РежимПодбораИзНастройки
		|					И РавнозначныеСоответствия.УГМК_РежимПодбора = ""Множественный""
		|			ТОГДА РавнозначныеСоответствия.ВариантТехнологическойОперации
		|		ИНАЧЕ NULL
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РавнозначныеСоответствия.Индекс КАК Индекс,
		|	РавнозначныеСоответствия.ТехнологическаяОперация КАК ТехнологическаяОперация,
		|	РавнозначныеСоответствия.ВариантТехнологическойОперации КАК ВариантТехнологическойОперации,
		|	КоличествоРавнозначныхСоответствий.Количество КАК КоличествоРавнозначных,
		|	ВЫБОР
		|		КОГДА КоличествоРавнозначныхСоответствий.Количество > 1
		|			ТОГДА КоличествоРавнозначныхСоответствий.РавнозначныйВариантТехнологическойОперации
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК РавнозначныйВариантТехнологическойОперации
		|ПОМЕСТИТЬ ВТПодходящиеСоответствия
		|ИЗ
		|	ВТРавнозначныеСоответствия КАК РавнозначныеСоответствия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоРавнозначныхСоответствий КАК КоличествоРавнозначныхСоответствий
		|		ПО РавнозначныеСоответствия.Индекс = КоличествоРавнозначныхСоответствий.Индекс
		|			И (НЕ &ДетализацияПодбораПоОперациям
		|				ИЛИ РавнозначныеСоответствия.ТехнологическаяОперация = КоличествоРавнозначныхСоответствий.ТехнологическаяОперация)
		|			И РавнозначныеСоответствия.ВариантТехнологическойОперации = КоличествоРавнозначныхСоответствий.ВариантТехнологическойОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	ВариантТехнологическойОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДополнительныеПоля,
		|	Данные.Индекс КАК Индекс,
		|	Данные.Период КАК Период,
		|	Данные.Группа КАК Группа,
		|	Данные.РабочийЦентр КАК РабочийЦентр,
		|	Данные.ПоСвойствам,
		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
		|	Данные.ВидОперации КАК ВидОперации,
		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика,
		|	Данные.МаркаСплава КАК МаркаСплава,
		|	Данные.Состояние КАК Состояние,
		|	Данные.Засор КАК Засор,
		|	Данные.ПоСвойствамПродукции,
		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
		|	Данные.ЗасорПродукции КАК ЗасорПродукции,
		|	Данные.ПаспортПартии КАК ПаспортПартии,
		|	ЕСТЬNULL(Соответствия.ТехнологическаяОперация, Данные.ТехнологическаяОперация) КАК ТехнологическаяОперация,
		|	ЕСТЬNULL(Соответствия.ВариантТехнологическойОперации, Данные.ВариантТехнологическойОперации) КАК ВариантТехнологическойОперации,
		|	Данные.ВариантТехнологическойОперации КАК ИсходныйВариантТехнологическойОперации,
		|	Данные.Количество КАК Количество,
		|	Данные.Количество1 КАК Количество1,
		|	Данные.КоличествоМест КАК КоличествоМест,
		|	Данные.КоличествоПродукции КАК КоличествоПродукции,
		|	Данные.Количество1Продукции КАК Количество1Продукции,
		|	Данные.КоличествоМестПродукции КАК КоличествоМестПродукции,
		|	Данные.КоличествоОперации КАК КоличествоОперации,
		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Соответствия.КоличествоРавнозначных,
		|	Соответствия.РавнозначныйВариантТехнологическойОперации,
		|	ВЫБОР
		|		КОГДА НЕ(ЕСТЬNULL(Данные.ТехнологическаяОперация, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)) ССЫЛКА Справочник.ТехнологическиеОперации
		|					И ЕСТЬNULL(Данные.ТехнологическаяОперация, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПодборТехнологическойОперации
		|ПОМЕСТИТЬ ВТРезультатПодбора
		|ИЗ
		|	ВТДанные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодходящиеСоответствия КАК Соответствия
		|		ПО Данные.Индекс = Соответствия.Индекс
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	ВариантТехнологическойОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатПодбора.Индекс КАК Индекс,
		|	РезультатПодбора.ТехнологическаяОперация КАК ТехнологическаяОперация,
		|	РезультатПодбора.ВариантТехнологическойОперации КАК ВариантТехнологическойОперации,
		|	МИНИМУМ(ТехнологическиеКартыПроизводстваМаршрут.НомерСтроки) КАК Порядок
		|ПОМЕСТИТЬ ВТПорядокОпераций
		|ИЗ
		|	ВТРезультатПодбора КАК РезультатПодбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО РезультатПодбора.РабочийЦентр = РабочиеЦентры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК ТехнологическиеКартыПроизводстваМаршрут
		|		ПО (РабочиеЦентры.УГМК_ТехнологическаяКарта = ТехнологическиеКартыПроизводстваМаршрут.Ссылка)
		|			И РезультатПодбора.ТехнологическаяОперация = ТехнологическиеКартыПроизводстваМаршрут.ТехнологическаяОперация
		|			И (РезультатПодбора.ВариантТехнологическойОперации = ТехнологическиеКартыПроизводстваМаршрут.ВариантТехнологическойОперации
		|				ИЛИ ТехнологическиеКартыПроизводстваМаршрут.ВариантТехнологическойОперации = ЗНАЧЕНИЕ(Справочник.УГМК_ВариантыТехнологическихОпераций.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатПодбора.Индекс,
		|	РезультатПодбора.ТехнологическаяОперация,
		|	РезультатПодбора.ВариантТехнологическойОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Индекс,
		|	ТехнологическаяОперация,
		|	ВариантТехнологическойОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДополнительныеПоля,
		|	Данные.Период КАК Период,
		|	Данные.Группа КАК Группа,
		|	Данные.РабочийЦентр КАК РабочийЦентр,
		|	Данные.ПоСвойствам,
		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
		|	Данные.ВидОперации КАК ВидОперации,
		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика,
		|	Данные.МаркаСплава КАК МаркаСплава,
		|	Данные.Состояние КАК Состояние,
		|	Данные.Засор КАК Засор,
		|	Данные.ПоСвойствамПродукции,
		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
		|	Данные.ЗасорПродукции КАК ЗасорПродукции,
		|	Данные.ПаспортПартии КАК ПаспортПартии,
		|	Данные.ТехнологическаяОперация,
		|	Данные.ВариантТехнологическойОперации,
		|	Данные.Количество КАК Количество,
		|	Данные.Количество1 КАК Количество1,
		|	Данные.КоличествоМест КАК КоличествоМест,
		|	Данные.КоличествоОперации КАК КоличествоОперации,
		|	ВЫБОР
		|		КОГДА НЕ Данные.ТребуетсяПодборТехнологическойОперации
		|			ТОГДА Данные.КоличествоОперации
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""Количество""
		|			ТОГДА Данные.Количество
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""Количество1""
		|			ТОГДА Данные.Количество1
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""КоличествоМест""
		|			ТОГДА Данные.КоличествоМест
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""КоличествоПродукции""
		|			ТОГДА Данные.КоличествоПродукции
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""Количество1Продукции""
		|			ТОГДА Данные.Количество1Продукции
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""КоличествоМестПродукции""
		|			ТОГДА Данные.КоличествоМестПродукции
		|		КОГДА ТехнологическиеОперации.УГМК_ПолеКоличества = ""0""
		|			ТОГДА 0
		|		ИНАЧЕ Данные.КоличествоПродукции
		|	КОНЕЦ КАК КоличествоТехнологическойОперации,
		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Данные.КоличествоРавнозначных,
		|	Данные.РавнозначныйВариантТехнологическойОперации,
		|	Данные.ТребуетсяПодборТехнологическойОперации,
		|	Расценки.Расценка,
		|	Расценки.НормаВремени,
		|	Расценки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияРасценки,
		|	Расценки.НормаВыработки,
		|	Расценки.Трудоемкость,
		|	ЕСТЬNULL(УГМК_КоэффициентыПересчетаЕдиницИзмерения.Коэффициент, 1) КАК КоэффициентПересчетаЕдиницИзмерения
		|ИЗ
		|	ВТРезультатПодбора КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|		ПО Данные.ТехнологическаяОперация = ТехнологическиеОперации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокОпераций КАК ПорядокОпераций
		|		ПО Данные.Индекс = ПорядокОпераций.Индекс
		|			И Данные.ТехнологическаяОперация = ПорядокОпераций.ТехнологическаяОперация
		|			И Данные.ВариантТехнологическойОперации = ПорядокОпераций.ВариантТехнологическойОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_РасценкиТехнологическихОпераций.СрезПоследних(
		|				&Период,
		|				(ТехнологическаяОперация, ВариантТехнологическойОперации) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТРезультатПодбора.ТехнологическаяОперация,
		|						ВТРезультатПодбора.ВариантТехнологическойОперации
		|					ИЗ
		|						ВТРезультатПодбора)) КАК Расценки
		|		ПО Данные.ТехнологическаяОперация = Расценки.ТехнологическаяОперация
		|			И Данные.ВариантТехнологическойОперации = Расценки.ВариантТехнологическойОперации
		|			И (Расценки.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_КоэффициентыПересчетаЕдиницИзмерения КАК УГМК_КоэффициентыПересчетаЕдиницИзмерения
		|		ПО (УГМК_КоэффициентыПересчетаЕдиницИзмерения.БазоваяЕдиницаИзмерения = Данные.ЕдиницаИзмерения)
		|			И (УГМК_КоэффициентыПересчетаЕдиницИзмерения.ЕдиницаИзмерения = Расценки.ЕдиницаИзмерения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокОпераций.Порядок";
		
	Запрос.Текст = Запрос.Текст+?(ПоляСортировки="","",",
		//|УПОРЯДОЧИТЬ ПО "+ПоляСортировки);	
		|	"+ПоляСортировки);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции

Функция ПроверкаПодбораТехнологическихОпераций(Данные=Неопределено,МенеджерВременныхТаблиц=Неопределено,Знач ДополнительныеПоля="",ПоляСортировки="",Период=Неопределено,РежимПодбора="",ДетализацияПодбора="Глобально") Экспорт
	ТекстДополнительныеПоля="";	
	Если ДополнительныеПоля<>"" Тогда
		Поз=Найти(ДополнительныеПоля,",");
		Пока Поз>0 Цикл
			ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+Лев(ДополнительныеПоля,Поз-1)+",";	
			ДополнительныеПоля=Сред(ДополнительныеПоля,Поз+1);	
			Поз=Найти(ДополнительныеПоля,",");
		КонецЦикла; 
		ТекстДополнительныеПоля=ТекстДополнительныеПоля+"Данные."+ДополнительныеПоля+",";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц=Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	//Запрос.УстановитьПараметр("ОднозначныйПодбор",ОднозначныйПодбор);
	
	ЗависимостьОтМатериала=Новый Массив;
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаТехнологическуюОперацию);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ВлияетНаВариантТехнологическойОперации);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
	ЗависимостьОтМатериала.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
	Запрос.УстановитьПараметр("ЗависимостьОтМатериала", ЗависимостьОтМатериала);
	ЗависимостьОтПродукции=Новый Массив;
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтТехнологическойОперации);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.ЗависитОтВариантаТехнологическойОперации);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяТехнологическойОперацией);
	ЗависимостьОтПродукции.Добавить(Перечисления.УГМК_ИзменениеСвойстваНоменклатурыВПеределе.МеняетсяВариантомТехнологическойОперации);
	Запрос.УстановитьПараметр("ЗависимостьОтПродукции", ЗависимостьОтПродукции);
	
	//
	//Запрос.УстановитьПараметр("ДетализацияПодбораПоОперациям", ДетализацияПодбора="ПоОперациям");//Истина - варианты подбираются для каждой операции независимо 
	//Запрос.УстановитьПараметр("РежимПодбораИзНастройки", Не ЗначениеЗаполнено(РежимПодбора));
	//Запрос.УстановитьПараметр("РежимПодбораМножественный", РежимПодбора="Множественный");//Ложь - подбирается не более одного варианта для каждой операции, Истина - подбираются все варианты с максимальным приоритетом
	
	Если Данные=Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТДанные
			|;
			|УНИЧТОЖИТЬ ВТДанные";
		Данные=Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Колонки=Данные.Колонки;
	Если Колонки.Найти("Индекс")=Неопределено Тогда
		Колонки.Добавить("Индекс",Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Для каждого СторкаДанных Из Данные Цикл
		СторкаДанных.Индекс=Данные.Индекс(СторкаДанных);
	КонецЦикла; 
	
	//Если Данные<>Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&ДополнительныеПоля,
			|	Данные.Индекс КАК Индекс,
			|	Данные.Период КАК Период,
			|	Данные.Группа КАК Группа,
			|	Данные.ПоСвойствам КАК ПоСвойствам,
			|	Данные.РабочийЦентр КАК РабочийЦентр,
			|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
			|	Данные.ВидОперации КАК ВидОперации,
			|	Данные.ГруппаПродукции КАК ГруппаПродукции,
			|	Данные.Номенклатура КАК Номенклатура,
			|	Данные.Характеристика КАК Характеристика,
			|	Данные.МаркаСплава КАК МаркаСплава,
			|	Данные.Состояние КАК Состояние,
			|	Данные.ПоСвойствамПродукции КАК ПоСвойствамПродукции,
			|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
			|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
			|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
			|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
			|	Данные.СостояниеПродукции КАК СостояниеПродукции,
			|	Данные.ПаспортПартии КАК ПаспортПартии,
			|	Данные.ПаспортПартииПродукции КАК ПаспортПартииПродукции,
			|	Данные.Количество КАК Количество,
			|	Данные.Количество1 КАК Количество1,
			|	Данные.КоличествоМест КАК КоличествоМест,
			|	Данные.КоличествоПродукции КАК КоличествоПродукции,
			|	Данные.Количество1Продукции КАК Количество1Продукции,
			|	Данные.КоличествоМестПродукции КАК КоличествоМестПродукции,
			|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Данные.ТехнологическаяОперация КАК ТехнологическаяОперация,
			|	Данные.ВариантТехнологическойОперации КАК ВариантТехнологическойОперации,
			|	Данные.КоличествоОперации КАК КоличествоОперации
			|ПОМЕСТИТЬ ВТДанные
			|ИЗ
			|	&Данные КАК Данные";
			
		Если Колонки.Найти("ВидОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ВидОперации ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ПаспортПартии")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ПаспортПартии ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ПаспортПартииПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ПаспортПартииПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество1")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество1 ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоМест")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоМест ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Количество1Продукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Количество1Продукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоМестПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоМестПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Период")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Период ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Группа")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Группа ","0 ");
		КонецЕсли;
		Если Колонки.Найти("ГруппаПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Номенклатура")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Номенклатура ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Характеристика")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Характеристика ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("МаркаСплава")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплава ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("Состояние")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.Состояние ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ГруппаПродукцииПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ГруппаПродукцииПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("НоменклатураПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.НоменклатураПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ХарактеристикаПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ХарактеристикаПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("МаркаСплаваПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.МаркаСплаваПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("СостояниеПродукции")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.СостояниеПродукции ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ЕдиницаИзмерения")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ЕдиницаИзмерения ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ТехнологическаяОперация")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТехнологическаяОперация ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("ВариантТехнологическойОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ВариантТехнологическойОперации ",""""" ");
		КонецЕсли;
		Если Колонки.Найти("КоличествоОперации")=Неопределено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.КоличествоОперации ",""""" ");
		КонецЕсли;
		//Если Колонки.Найти("ТребуетсяУточнение")=Неопределено Тогда
		//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Данные.ТребуетсяУточнение ",""""" ");
		//КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
		Запрос.УстановитьПараметр("Данные", Данные);
		Запрос.Выполнить();
	//КонецЕсли;	
	
	Если Период=Неопределено Тогда
		Период=ТекущаяДата();
	КонецЕсли; 
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДополнительныеПоля,
		|	Данные.Индекс КАК Индекс,
		|	Данные.Период КАК Период,
		|	Данные.Группа КАК Группа,
		|	Данные.РабочийЦентр КАК РабочийЦентр,
		|	Данные.ПоСвойствам,
		|	Данные.РежимРабочегоЦентра КАК РежимРабочегоЦентра,
		|	Данные.ВидОперации КАК ВидОперации,
		|	Данные.ГруппаПродукции КАК ГруппаПродукции,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика,
		|	Данные.МаркаСплава КАК МаркаСплава,
		|	Данные.Состояние КАК Состояние,
		|	Данные.ПоСвойствамПродукции,
		|	Данные.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
		|	Данные.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Данные.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	Данные.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
		|	Данные.СостояниеПродукции КАК СостояниеПродукции,
		|	Данные.ПаспортПартии КАК ПаспортПартии,
		|	ЕСТЬNULL(Соответствие.ТехнологическаяОперация, Данные.ТехнологическаяОперация) КАК ТехнологическаяОперация,
		|	ЕСТЬNULL(Соответствие.ВариантТехнологическойОперации, Данные.ВариантТехнологическойОперации) КАК ВариантТехнологическойОперации,
		|	Данные.ВариантТехнологическойОперации КАК ИсходныйВариантТехнологическойОперации,
		|	Данные.Количество КАК Количество,
		|	Данные.Количество1 КАК Количество1,
		|	Данные.КоличествоМест КАК КоличествоМест,
		|	Данные.КоличествоПродукции КАК КоличествоПродукции,
		|	Данные.Количество1Продукции КАК Количество1Продукции,
		|	Данные.КоличествоМестПродукции КАК КоличествоМестПродукции,
		|	Данные.КоличествоОперации КАК КоличествоОперации,
		|	Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Соответствие.РабочийЦентр <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 5000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.РежимРаботыРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка)
		|			ТОГДА 1000000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ВидОперации <> ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка)
		|			ТОГДА 100000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА 10000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.ГруппаПродукции <> ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА 10000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.Номенклатура <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.Номенклатура <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1000
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтМатериала)
		|			ТОГДА 0
		|		КОГДА ОписаниеМеталла.Характеристика <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 500
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер1Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер1Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер2Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер2Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер3Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер3Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер4Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер4Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталла.Размер5Минимальный <> 0
		|						ИЛИ ОписаниеМеталла.Размер5Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
		|			ТОГДА 0
		|		КОГДА ОписаниеМеталлаПродукции.Характеристика <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 500
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер1Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер1Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер2Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер2Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер3Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер3Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер4Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер4Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ОписаниеМеталлаПродукции.Размер5Минимальный <> 0
		|						ИЛИ ОписаниеМеталлаПродукции.Размер5Максимальный <> 0
		|					ТОГДА 100
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.МаркаСплава <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.МаркаСплава <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 10
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтМатериала)
		|				И ОписаниеМеталла.Состояние <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтПродукции)
		|				И ОписаниеМеталлаПродукции.Состояние <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет,
		|	ВЫБОР
		|		КОГДА Данные.РабочийЦентр = Соответствие.РабочийЦентр
		|			ТОГДА ""Соответствует""
		|		КОГДА Данные.РабочийЦентр В
		|				(ВЫБРАТЬ
		|					ГруппыЗаменяемостиРабочихЦентровСостав.РабочийЦентр
		|				ИЗ
		|					Справочник.ГруппыЗаменяемостиРабочихЦентров.Состав КАК ГруппыЗаменяемостиРабочихЦентровСостав
		|				ГДЕ
		|					Соответствие.РабочийЦентр = ГруппыЗаменяемостиРабочихЦентровСостав.Ссылка)
		|			ТОГДА ""Входит в группу""
		|		КОГДА Соответствие.РабочийЦентр = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК РабочийЦентрСоответствует,
		|	ВЫБОР
		|		КОГДА Данные.РежимРабочегоЦентра = Соответствие.РежимРаботыРабочегоЦентра
		|			ТОГДА ""Соответствует""
		|		КОГДА Соответствие.РежимРаботыРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.УГМК_РежимыРаботыРабочихЦентров.ПустаяСсылка)
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК РежимРабочегоЦентраСоответствует,
		|	ВЫБОР
		|		КОГДА Данные.ВидОперации = Соответствие.ВидОперации
		|			ТОГДА ""Соответствует""
		|		КОГДА Соответствие.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ПустаяСсылка)
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК ВидОперацииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтМатериала)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.ГруппаПродукции = ОписаниеМеталла.ГруппаПродукции
		|			ТОГДА ""Соответствует""
		|		КОГДА ОписаниеМеталла.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК ГруппаПродукцииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтМатериала)
		|			ТОГДА ""Не зависит""
		|		ИНАЧЕ ""Размер1 "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) >= ОписаниеМеталла.Размер1Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) < ОписаниеМеталла.Размер1Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер1, 0) = ОписаниеМеталла.Размер1Минимальный
		|						И ОписаниеМеталла.Размер1Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталла.Размер1Минимальный = 0
		|						И ОписаниеМеталла.Размер1Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ + "" Размер2 "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) >= ОписаниеМеталла.Размер2Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) < ОписаниеМеталла.Размер2Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер2, 0) = ОписаниеМеталла.Размер2Минимальный
		|						И ОписаниеМеталла.Размер2Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталла.Размер2Минимальный = 0
		|						И ОписаниеМеталла.Размер2Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ + "" Размер3 "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) >= ОписаниеМеталла.Размер3Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) < ОписаниеМеталла.Размер3Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер3, 0) = ОписаниеМеталла.Размер3Минимальный
		|						И ОписаниеМеталла.Размер3Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталла.Размер3Минимальный = 0
		|						И ОписаниеМеталла.Размер3Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ + "" Размер4 "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) >= ОписаниеМеталла.Размер4Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) < ОписаниеМеталла.Размер4Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер4, 0) = ОписаниеМеталла.Размер4Минимальный
		|						И ОписаниеМеталла.Размер4Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталла.Размер4Минимальный = 0
		|						И ОписаниеМеталла.Размер4Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ + "" Размер5 "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) >= ОписаниеМеталла.Размер5Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) < ОписаниеМеталла.Размер5Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеров.Размер5, 0) = ОписаниеМеталла.Размер5Минимальный
		|						И ОписаниеМеталла.Размер5Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталла.Размер5Минимальный = 0
		|						И ОписаниеМеталла.Размер5Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ
		|	КОНЕЦ КАК ХарактеристикаСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтМатериала)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.МаркаСплава = ОписаниеМеталла.МаркаСплава
		|			ТОГДА ""Соответствует""
		|		КОГДА Данные.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавовКоллекция.Значение
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК МаркиСплавовКоллекция
		|				ГДЕ
		|					МаркиСплавовКоллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В списке""
		|		КОГДА Данные.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|						ПО
		|							Коллекция.Значение = МаркиСплавов.Родитель
		|								И Коллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В группе из списка""
		|		КОГДА Данные.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|				ГДЕ
		|					МаркиСплавов.Родитель = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В группе""
		|		КОГДА УГМК_МаркаСплаваПроизводство.МаркаСплава = ОписаниеМеталла.МаркаСплава
		|			ТОГДА ""Соответствует регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводство.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавовКоллекция.Значение
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК МаркиСплавовКоллекция
		|				ГДЕ
		|					МаркиСплавовКоллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В списке регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводство.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|						ПО
		|							Коллекция.Значение = МаркиСплавов.Родитель
		|								И Коллекция.Ссылка = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В группе из списка регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводство.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|				ГДЕ
		|					МаркиСплавов.Родитель = ОписаниеМеталла.МаркаСплава)
		|			ТОГДА ""В группе регл.""
		|		КОГДА ОписаниеМеталла.МаркаСплава = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК МаркаСплаваСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтМатериала)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.Состояние = ОписаниеМеталла.Состояние
		|			ТОГДА ""Соответствует""
		|		КОГДА ОписаниеМеталла.Состояние = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК СостояниеСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеГруппыПродукции В (&ЗависимостьОтПродукции)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.ГруппаПродукцииПродукции = ОписаниеМеталлаПродукции.ГруппаПродукции
		|			ТОГДА ""Соответствует""
		|		КОГДА ОписаниеМеталлаПродукции.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.СК_ГруппыПродукции.ПустаяСсылка)
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК ГруппаПродукцииПродукцииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеНоменклатуры В (&ЗависимостьОтПродукции)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.НоменклатураПродукции = ОписаниеМеталлаПродукции.Номенклатура
		|			ТОГДА ""Соответствует""
		|		КОГДА ОписаниеМеталлаПродукции.Номенклатура = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК НоменклатураПродукцииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеХарактеристики В (&ЗависимостьОтПродукции)
		|			ТОГДА ""Не зависит""
		|		ИНАЧЕ ""Размер1Продукции "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) >= ОписаниеМеталлаПродукции.Размер1Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) < ОписаниеМеталлаПродукции.Размер1Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер1, 0) = ОписаниеМеталлаПродукции.Размер1Минимальный
		|						И ОписаниеМеталлаПродукции.Размер1Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталлаПродукции.Размер1Минимальный = 0
		|						И ОписаниеМеталлаПродукции.Размер1Максимальный = 0
		|					ТОГДА ""любой""
		|			КОНЕЦ + "" Размер2Продукции "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) >= ОписаниеМеталлаПродукции.Размер2Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) < ОписаниеМеталлаПродукции.Размер2Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер2, 0) = ОписаниеМеталлаПродукции.Размер2Минимальный
		|						И ОписаниеМеталлаПродукции.Размер2Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталлаПродукции.Размер2Минимальный = 0
		|						И ОписаниеМеталлаПродукции.Размер2Максимальный = 0
		|					ТОГДА ""любой""
		|			КОНЕЦ + "" Размер3Продукции "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) >= ОписаниеМеталлаПродукции.Размер3Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) < ОписаниеМеталлаПродукции.Размер3Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер3, 0) = ОписаниеМеталлаПродукции.Размер3Минимальный
		|						И ОписаниеМеталлаПродукции.Размер3Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталлаПродукции.Размер3Минимальный = 0
		|						И ОписаниеМеталлаПродукции.Размер3Максимальный = 0
		|					ТОГДА ""любой""
		|			КОНЕЦ + "" Размер4Продукции "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) >= ОписаниеМеталлаПродукции.Размер4Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) < ОписаниеМеталлаПродукции.Размер4Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер4, 0) = ОписаниеМеталлаПродукции.Размер4Минимальный
		|						И ОписаниеМеталлаПродукции.Размер4Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталлаПродукции.Размер4Минимальный = 0
		|						И ОписаниеМеталлаПродукции.Размер4Максимальный = 0
		|					ТОГДА ""любой""
		|			КОНЕЦ + "" Размер5Продукции "" + ВЫБОР
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) >= ОписаниеМеталлаПродукции.Размер5Минимальный
		|						И ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) < ОписаниеМеталлаПродукции.Размер5Максимальный
		|					ТОГДА ""в интервале""
		|				КОГДА ЕСТЬNULL(УГМК_ЗначенияРазмеровПродукции.Размер5, 0) = ОписаниеМеталлаПродукции.Размер5Минимальный
		|						И ОписаниеМеталлаПродукции.Размер5Максимальный = 0
		|					ТОГДА ""равен""
		|				КОГДА ОписаниеМеталлаПродукции.Размер5Минимальный = 0
		|						И ОписаниеМеталлаПродукции.Размер5Максимальный = 0
		|					ТОГДА ""любой""
		|				ИНАЧЕ ""НЕ ПОДХОДИТ""
		|			КОНЕЦ
		|	КОНЕЦ КАК ХарактеристикаПродукцииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеМаркиСплава В (&ЗависимостьОтПродукции)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.МаркаСплаваПродукции = ОписаниеМеталлаПродукции.МаркаСплава
		|			ТОГДА ""Соответствует""
		|		КОГДА Данные.МаркаСплаваПродукции В
		|				(ВЫБРАТЬ
		|					МаркиСплавовКоллекция.Значение
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК МаркиСплавовКоллекция
		|				ГДЕ
		|					МаркиСплавовКоллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В списке""
		|		КОГДА Данные.МаркаСплаваПродукции В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|						ПО
		|							Коллекция.Значение = МаркиСплавов.Родитель
		|								И Коллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В группе из списка""
		|		КОГДА Данные.МаркаСплаваПродукции В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|				ГДЕ
		|					МаркиСплавов.Родитель = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В группе""
		|		КОГДА УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава = ОписаниеМеталлаПродукции.МаркаСплава
		|			ТОГДА ""Соответствует регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавовКоллекция.Значение
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК МаркиСплавовКоллекция
		|				ГДЕ
		|					МаркиСплавовКоллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В списке регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК Коллекция ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|						ПО
		|							Коллекция.Значение = МаркиСплавов.Родитель
		|								И Коллекция.Ссылка = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В группе из списка регл.""
		|		КОГДА УГМК_МаркаСплаваПроизводствоПродукции.МаркаСплава В
		|				(ВЫБРАТЬ
		|					МаркиСплавов.Ссылка
		|				ИЗ
		|					Справочник.СК_МаркиСплавов КАК МаркиСплавов
		|				ГДЕ
		|					МаркиСплавов.Родитель = ОписаниеМеталлаПродукции.МаркаСплава)
		|			ТОГДА ""В группе регл.""
		|		КОГДА ОписаниеМеталлаПродукции.МаркаСплава = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК МаркаСплаваПродукцииСоответствует,
		|	ВЫБОР
		|		КОГДА НЕ Соответствие.ТехнологическаяОперация.УГМК_ИзменениеСостояния В (&ЗависимостьОтПродукции)
		|			ТОГДА ""Не зависит""
		|		КОГДА Данные.СостояниеПродукции = ОписаниеМеталлаПродукции.Состояние
		|			ТОГДА ""Соответствует""
		|		КОГДА ОписаниеМеталлаПродукции.Состояние = НЕОПРЕДЕЛЕНО
		|			ТОГДА ""Любой""
		|		ИНАЧЕ ""НЕ ПОДХОДИТ""
		|	КОНЕЦ КАК СостояниеПродукцииСоответствует
		|ИЗ
		|	ВТДанные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ВариантыТехнологическихОпераций КАК УГМК_ВариантыТехнологическихОпераций
		|		ПО Данные.ВариантТехнологическойОперации = УГМК_ВариантыТехнологическихОпераций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		|		ПО Данные.Характеристика = УГМК_ЗначенияРазмеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеровПродукции
		|		ПО Данные.ХарактеристикаПродукции = УГМК_ЗначенияРазмеровПродукции.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводство
		|		ПО Данные.МаркаСплава = УГМК_МаркаСплаваПроизводство.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УГМК_МаркаСплаваПроизводство КАК УГМК_МаркаСплаваПроизводствоПродукции
		|		ПО Данные.МаркаСплаваПродукции = УГМК_МаркаСплаваПроизводствоПродукции.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ИзменениеСвойствТехнологическойОперацией КАК Соответствие
		|		ПО Данные.ВариантТехнологическойОперации = Соответствие.ВариантТехнологическойОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталла
		|		ПО (ОписаниеМеталла.КлючОписанияМеталла = Соответствие.КлючОписанияМеталла)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталлаПродукции
		|		ПО (ОписаниеМеталлаПродукции.КлючОписанияМеталла = Соответствие.КлючОписанияМеталлаПродукции)";
		
	Запрос.Текст = Запрос.Текст+?(ПоляСортировки="","",",
		|УПОРЯДОЧИТЬ ПО "+ПоляСортировки);	
		//|	"+ПоляСортировки);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДополнительныеПоля,",ТекстДополнительныеПоля);
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции

Процедура УстановитьЗапускДляТестирования( Значение) Экспорт
	ПараметрыСеанса.УГМК_ЗапускДляТестирования = Значение;
КонецПроцедуры

Функция ПолучитьПараметрыПодключенияКРеглИБ() Экспорт
	ПараметрыПодключения = Неопределено;
	
	УстановитьПривилегированныйРежим( Истина);
	
	НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьМенеджерЗаписи();
	НастройкиТранспорта.Узел = ПланыОбмена.УГМК_ОперативныйУчетНСИ.ЭтотУзел();
	НастройкиТранспорта.Прочитать();
	Если НастройкиТранспорта.Выбран() тогда
		ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
		ПараметрыПодключения.ВариантРаботыИнформационнойБазы             = НастройкиТранспорта.COMВариантРаботыИнформационнойБазы;
		ПараметрыПодключения.КаталогИнформационнойБазы                   = НастройкиТранспорта.COMКаталогИнформационнойБазы;
		ПараметрыПодключения.ИмяСервера1СПредприятия                     = НастройкиТранспорта.COMИмяСервера1СПредприятия;
		ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия = НастройкиТранспорта.COMИмяИнформационнойБазыНаСервере1СПредприятия;
		ПараметрыПодключения.АутентификацияОперационнойСистемы           = НастройкиТранспорта.COMАутентификацияОперационнойСистемы;
		ПараметрыПодключения.ИмяПользователя                             = НастройкиТранспорта.COMИмяПользователя;
		ПараметрыПодключения.ПарольПользователя                          = НастройкиТранспорта.COMПарольПользователя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Ложь);
	
	Возврат ПараметрыПодключения;
КонецФункции

Функция КлючНастроекАвтосохранения( ВидОперации) Экспорт
	Если ЗначениеЗаполнено( ВидОперации) тогда
		КлючНастроек = ВидОперации.ТипСостояния;
		Если не ЗначениеЗаполнено( КлючНастроек) тогда
			КлючНастроек = ВидОперации.Код;
		КонецЕсли;
		
		КлючНастроек = "АРМ_ОперативныйУчет_"+КлючНастроек;
	иначе
		КлючНастроек = "АРМ_ОперативныйУчет_*";
	КонецЕсли;
	
	Возврат( КлючНастроек);
КонецФункции

Функция ПолучитьТекущуюМаркуПартии( ОбъектСсылка) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Объект",ОбъектСсылка);
	Запр.УстановитьПараметр("Свойство",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_МаркаСплава"));
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ЗначенияСвойствПартий.Значение КАК МаркаСплава,
	             |	ПРЕДСТАВЛЕНИЕ(УГМК_ЗначенияСвойствПартий.Значение) КАК МаркаСплаваСтр,
	             |	УГМК_ЗначенияСвойствПартий.Дата,
	             |	УГМК_ЗначенияСвойствПартий.ДокументРегистратор,
	             |	УГМК_ЗначенияСвойствПартий.ДокументРегистраторПеремещаемый,
	             |	УГМК_ЗначенияСвойствПартий.ДокументРегистраторПеремещаемый.ПредставлениеИсточника КАК РегистраторПредставление
	             |ИЗ
	             |	РегистрСведений.УГМК_ЗначенияСвойствПартий КАК УГМК_ЗначенияСвойствПартий
	             |ГДЕ
	             |	УГМК_ЗначенияСвойствПартий.Объект = &Объект
	             |	И УГМК_ЗначенияСвойствПартий.Свойство = &Свойство";
				 
	МаркаСплаваПартии = Новый Структура;
	МаркаСплаваПартии.Вставить("МаркаСплава",Неопределено);
	МаркаСплаваПартии.Вставить("МаркаСплаваСтр","-----");
	МаркаСплаваПартии.Вставить("Дата",Неопределено);
	МаркаСплаваПартии.Вставить("ДатаДокументРегистратор",Неопределено);
	МаркаСплаваПартии.Вставить("ДокументРегистраторПеремещаемый",Неопределено);
	МаркаСплаваПартии.Вставить("РегистраторПредставление",Неопределено);
   
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		ЗаполнитьЗначенияСвойств( МаркаСплаваПартии, Результат);
	КонецЕсли;
	
	Возврат( МаркаСплаваПартии);
КонецФункции

Функция ПолучитьДатуПоследнейОписиПоСкладу( СписокМестУчета) экспорт
	//Получим дату последней описи по складу
	НачДата=НачалоГода(ТекущаяДата());
	ЗапросОпись=новый Запрос;
	ЗапросОпись.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	                  |	УГМК_ДокументФакт.Дата
	                  |ИЗ
	                  |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт1
	                  |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФакт1.ДокументОснование
	                  |			И (УГМК_ДокументФакт1.Сторно)
	                  |			И (НЕ УГМК_ДокументФакт1.ПометкаУдаления)
	                  |ГДЕ
	                  |	УГМК_ДокументФакт.Проведен
	                  |	И УГМК_ДокументФакт.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ОписьМеталла)
	                  |	И НЕ ВЫБОР
	                  |				КОГДА УГМК_ДокументФакт.Сторно
	                  |					ТОГДА УГМК_ДокументФакт.Проведен
	                  |				КОГДА УГМК_ДокументФакт1.Сторно
	                  |					ТОГДА УГМК_ДокументФакт1.Проведен
	                  |				ИНАЧЕ ЛОЖЬ
	                  |			КОНЕЦ
	                  |	И ВЫБОР
	                  |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 0
	                  |					ИЛИ УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 4
	                  |				ТОГДА УГМК_ДокументФакт.СкладПолучатель В (&СписокМестУчета)
	                  |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 1
	                  |					ИЛИ УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 3
	                  |				ТОГДА УГМК_ДокументФакт.ПодразделениеПолучатель В (&СписокМестУчета)
	                  |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 2
	                  |				ТОГДА УГМК_ДокументФакт.РабочийЦентр В (&СписокМестУчета)
	                  |			ИНАЧЕ ЛОЖЬ
	                  |		КОНЕЦ
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	УГМК_ДокументФакт.МоментВремени УБЫВ";
	ЗапросОпись.УстановитьПараметр("СписокМестУчета",СписокМестУчета);
	ВыбОпись=ЗапросОпись.Выполнить().Выбрать();
	Если ВыбОпись.Следующий() Тогда
		НачДата=ВыбОпись.Дата;
	КонецЕсли;
	возврат НачДата;
КонецФункции

Функция ПолучитьМассивНеПодтвержденныхНакладныхНаСервере( Знач СписокСкладовД = Неопределено) Экспорт
	//ОЦМ Мобильная
	Мас=Новый Массив;
	//Если СписокСкладовД = Неопределено тогда
	//	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//	Подразделение  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( ТекущийПользователь, "ОсновноеПодразделение");
	//	ТекущееРабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//	
	//	ЗначенияВыбора = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( ТекущийПользователь, Подразделение, ТекущееРабочееМесто, "Склады,Подразделения", Ложь);
	//	СписокСкладовД = Новый Массив;
	//	
	//	Для каждого ЭлементСоответствия из ЗначенияВыбора цикл
	//		СписокЗн = ЭлементСоответствия.Значение;
	//		Для каждого ЭлементСписка из СписокЗн цикл
	//			ВозможноеЗначение = ЭлементСписка.Значение;
	//			Если ЗначениеЗаполнено( ВозможноеЗначение) и (СписокСкладовД.Найти( ВозможноеЗначение) = Неопределено) тогда
	//				СписокСкладовД.Добавить( ВозможноеЗначение);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//	Если СписокСкладовД.Найти( Подразделение) = Неопределено тогда
	//		СписокСкладовД.Добавить( Подразделение);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//////Получим дату последней описи по складу
	//НачДата = ПолучитьДатуПоследнейОписиПоСкладу(СписокСкладовД);
	//
	//Запрос=Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//             |	УГМК_ДокументФакт.Ссылка
	//             |ИЗ
	//             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	//             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт1
	//             |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФакт1.ДокументОснование
	//             |			И (УГМК_ДокументФакт1.Сторно)
	//             |			И (НЕ УГМК_ДокументФакт1.ПометкаУдаления)
	//             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт.Материалы КАК УГМК_ДокументФактМатериалы
	//             |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФактМатериалы.Ссылка
	//             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	//             |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФактПродукция.Ссылка
	//             |ГДЕ
	//             |	(НЕ УГМК_ДокументФакт.ПометкаУдаления
	//             |				И НЕ УГМК_ДокументФакт.Проведен
	//             |			ИЛИ УГМК_ДокументФакт.Проведен
	//             |				И УГМК_ДокументФактПродукция.Ссылка ЕСТЬ NULL 
	//             |				И НЕ УГМК_ДокументФактМатериалы.Ссылка ЕСТЬ NULL )
	//             |	И НЕ ВЫБОР
	//             |				КОГДА УГМК_ДокументФакт.Сторно
	//             |					ТОГДА УГМК_ДокументФакт.Проведен
	//             |				КОГДА УГМК_ДокументФакт1.Сторно
	//             |					ТОГДА УГМК_ДокументФакт1.Проведен
	//             |				ИНАЧЕ ЛОЖЬ
	//             |			КОНЕЦ
	//             |	И УГМК_ДокументФакт.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.Перемещение)
	//             |	И УГМК_ДокументФакт.Склад В(&Склад)
	//             |	И УГМК_ДокументФакт.Дата > &НачДата
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	УГМК_ДокументФакт.Ссылка";
	//КонДата=ТекущаяДата();
	//Запрос.УстановитьПараметр("НачДата",НачалоДня(НачДата));
	//Запрос.УстановитьПараметр("Склад",СписокСкладовД);
	//Мас=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Мас;
КонецФункции

Функция ПроверитьГодностьПартий( ДляПартий) Экспорт
	Если ТипЗнч( ДляПартий) = Тип("Массив") тогда
		МассивПартий = ДляПартий;
	иначе
		МассивПартий = Новый Массив;
		МассивПартий.Добавить( ДляПартий);
	КонецЕсли;
	
	СтрОш = "";
	
	Запр = новый Запрос;
	Запр.УстановитьПараметр("Ссылка",МассивПартий);
	Запр.УстановитьПараметр("СвойствоГоден", УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_РезультатСертификации"));
	Запр.Текст = "ВЫБРАТЬ
	             |	Партии.Ссылка КАК ПаспортПартии,
	             |	УГМК_ЗначенияСвойствПартий.Свойство,
	             |	ЕСТЬNULL(УГМК_ЗначенияСвойствПартий.Значение, НЕОПРЕДЕЛЕНО) КАК РезультатСертификации,
	             |	Партии.Ссылка.ДляПредставления КАК ДляПредставления,
	             |	УГМК_ЗначенияСвойствПартий.ДокументРегистратор
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		Партия.Ссылка КАК Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартии КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_Плавка КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПартияСырья КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартииСТК КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)) КАК Партии
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствПартий КАК УГМК_ЗначенияСвойствПартий
	             |		ПО Партии.Ссылка = УГМК_ЗначенияСвойствПартий.Объект
	             |			И (УГМК_ЗначенияСвойствПартий.Свойство = &СвойствоГоден)
	             |ГДЕ
	             |	Партии.Ссылка В(&Ссылка)";
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		ПартиюРазрешеноИспользовать = (Результат.РезультатСертификации = Истина) 
			ИЛИ (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_Годен)
			ИЛИ (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_СоответствуетТП)
			ИЛИ (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеСоответствует)
			ИЛИ (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.Сертификат);
		
		Если не ПартиюРазрешеноИспользовать тогда
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОш, Символы.ПС);
			Если (Результат.РезультатСертификации = Ложь) 
			 или (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.УГМК_НеГоден)
			 или (Результат.РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.ОтказаноВСертификации) тогда
				СтрОш = СтрОш + "Партия ("+Результат.ДляПредставления+") присвоено НЕгоден "+Результат.ДокументРегистратор;
			иначе
				СтрОш = СтрОш + "Партия ("+Результат.ДляПредставления+") нет документа Годности";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( СтрОш);
КонецФункции

Функция ПроверитьИдентичностьГодностиПартий( ДляПартий, ПроверятьСвойстваИмена) Экспорт
	Если ТипЗнч( ДляПартий) = Тип("Массив") тогда
		МассивПартий = ДляПартий;
	иначе
		МассивПартий = Новый Массив;
		МассивПартий.Добавить( ДляПартий);
	КонецЕсли;
	
	Запр = новый Запрос;
	Запр.УстановитьПараметр("Ссылка",МассивПартий);
	
	ПровереныСвойства = Новый Массив;
	
	СтрИзмерения = "";
	СтрПоля = "";
	СтрСоединения = "";
	Ном = 0;
	Для каждого ЭлементМассива из ПроверятьСвойстваИмена Цикл
		ЗаписьСвойство = УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_"+ЭлементМассива);
		Если ЗначениеЗаполнено( ЗаписьСвойство) тогда
			Ном = Ном + 1;
			ПровереныСвойства.Добавить( ЭлементМассива);
			
			Запр.УстановитьПараметр( ЭлементМассива, ЗаписьСвойство);
			
			ИмяИсточникаНомС = "УГМК_ЗначенияСвойствПартий"+Формат( Ном, "ЧГ=0");
			
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрПоля, ",");
            СтрПоля = СтрПоля + ИмяИсточникаНомС + ".Значение КАК "+ЭлементМассива;
			
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрИзмерения, ",");
			СтрИзмерения = СтрИзмерения + ЭлементМассива;
			
			СтрСоединения = СтрСоединения +"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствПартий КАК "+ИмяИсточникаНомС+"
	             |		ПО Партии.Ссылка = "+ИмяИсточникаНомС+".Объект
	             |			И ("+ИмяИсточникаНомС+".Свойство = &"+ЭлементМассива+")";
		КонецЕсли;
	КонецЦикла;
	
	СтрОш = "";
	Если (МассивПартий.Количество() <= 1) или (ПровереныСвойства.Количество() = 0) тогда
		Возврат( СтрОш);
	КонецЕсли;
	
	Запр.Текст = "ВЫБРАТЬ
	             |	Партии.Ссылка КАК ПаспортПартии,
	             |	Партии.Ссылка.ДляПредставления КАК ДляПредставления,"+СтрПоля+"
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		Партия.Ссылка КАК Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартии КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_Плавка КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПартияСырья КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партия.Ссылка
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартииСТК КАК Партия
	             |	ГДЕ
	             |		Партия.Ссылка В(&Ссылка)) КАК Партии
	             |		"+СтрСоединения+"
	             |ГДЕ
	             |	Партии.Ссылка В(&Ссылка)";
	Результат = Запр.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 3));
	Результат.ЗаполнитьЗначения( 1,"Количество");
	Результат.Свернуть( СтрИзмерения,"Количество");
	
	Если Результат.Количество() > 1 тогда
		СтрОш = "Обнаружено "+Результат.Количество()+" значений ";
		Для каждого ЭлементМассива из ПровереныСвойства Цикл
			СтрОш = СтрОш + ЭлементМассива + ", ";
		КонецЦикла;
		СтрОш = Лев( СтрОш, СтрДлина( СтрОш) - 2) + ":";
			
		Для каждого СтрокаС из Результат цикл
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОш, Символы.ПС);
			Для каждого ЭлементМассива из ПровереныСвойства Цикл
				ЗначениеС = Строка( СтрокаС[ ЭлементМассива]);
				Если ПустаяСтрока( ЗначениеС) тогда
					ЗначениеС = "<..>";
				КонецЕсли;
				СтрОш = СтрОш + ЗначениеС + ",";
			КонецЦикла;
			СтрОш = Лев( СтрОш, СтрДлина( СтрОш) - 1) + ".";
		КонецЦикла;
	КонецЕсли;
	
	Возврат( СтрОш);
КонецФункции

Функция НетФормированияПартии( УГМК_ПаспортПартии) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Образована",УГМК_ПаспортПартии);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ИсходныеПартии.Образована
	             |ИЗ
	             |	РегистрСведений.УГМК_ИсходныеПартии КАК УГМК_ИсходныеПартии
	             |ГДЕ
	             |	УГМК_ИсходныеПартии.Образована = &Образована";
	Возврат( Запр.Выполнить().Пустой());
КонецФункции

Процедура АрхивированиеПартий() Экспорт
	ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Если не ЗначениеЗаполнено( ТекущийПользователь) тогда
		ЗаписатьЗаписьЖурналаРегистрации("АрхивированиеПартий", "Не получен глТекущийПользователь");
		Возврат;
	КонецЕсли;
	
	ТекОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( ТекущийПользователь, "ОсновнаяОрганизация");
	Если не ЗначениеЗаполнено( ТекОрганизация) тогда
		ЗаписатьЗаписьЖурналаРегистрации("АрхивированиеПартий", "Не получена ОсновнаяОрганизация у "+ТекущийПользователь);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Истина);
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.Ссылка) КАК Ссылка,
	             |	Данные.Узел
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		Партии.Ссылка КАК Ссылка,
	             |		Партии.Узел КАК Узел
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_Плавка.Изменения КАК Партии
	             |	ГДЕ
	             |		НЕ Партии.Узел.ПометкаУдаления
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партии.Ссылка,
	             |		Партии.Узел
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартииСТК.Изменения КАК Партии
	             |	ГДЕ
	             |		НЕ Партии.Узел.ПометкаУдаления
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партии.Ссылка,
	             |		Партии.Узел
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПартияСырья.Изменения КАК Партии
	             |	ГДЕ
	             |		НЕ Партии.Узел.ПометкаУдаления
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Партии.Ссылка,
	             |		Партии.Узел
	             |	ИЗ
	             |		БизнесПроцесс.УГМК_ПаспортПартии.Изменения КАК Партии
	             |	ГДЕ
	             |		НЕ Партии.Узел.ПометкаУдаления) КАК Данные
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Данные.Узел
	             |
	             |ИМЕЮЩИЕ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.Ссылка) >= 200";
				 
	РезультатЗ = Запр.Выполнить();
	Результат = РезультатЗ.Выбрать();
	Если Результат.Количество() > 0 тогда
		СтрУзлы = "";
		Пока Результат.Следующий() цикл
			СтрУзлы = СтрУзлы +" "+Строка( ТипЗнч( Результат.Узел))+":"+Результат.Узел+"["+Формат( Результат.Ссылка, "ЧГ=0")+"];";
		КонецЦикла;
		
		ЗаписатьЗаписьЖурналаРегистрации("АрхивированиеПартий", "Зарегистрировано:"+СтрУзлы);
		Возврат;
	КонецЕсли;
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Организация", ТекОрганизация);
	Запр.УстановитьПараметр("Дата", ДобавитьМесяц( ТекущаяДата(), -6));
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	             |	Партии.Ссылка,
	             |	Партии.Дата КАК Дата
	             |ИЗ
	             |	БизнесПроцесс.УГМК_Плавка КАК Партии
	             |ГДЕ
	             |	НЕ Партии.Архив
	             |	И Партии.Организация = &Организация
	             |	И Партии.Дата < &Дата
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ ПЕРВЫЕ 50
	             |	Партии.Ссылка,
	             |	Партии.Дата
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПаспортПартииСТК КАК Партии
	             |ГДЕ
	             |	НЕ Партии.Архив
	             |	И Партии.Организация = &Организация
	             |	И Партии.Дата < &Дата
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ ПЕРВЫЕ 50
	             |	Партии.Ссылка,
	             |	Партии.Дата
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПартияСырья КАК Партии
	             |ГДЕ
	             |	НЕ Партии.Архив
	             |	И Партии.Организация = &Организация
	             |	И Партии.Дата < &Дата
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ ПЕРВЫЕ 50
	             |	Партии.Ссылка,
	             |	Партии.Дата
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПаспортПартии КАК Партии
	             |ГДЕ
	             |	НЕ Партии.Архив
	             |	И Партии.Организация = &Организация
	             |	И Партии.Дата < &Дата
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Партии.Дата";
	Результат = Запр.Выполнить().Выбрать();
	Ном = 0;
	Пока Результат.Следующий() цикл
		Объект = Результат.Ссылка.ПолучитьОбъект();
		Объект.Архив = Истина;
		Объект.Записать();
		Ном = Ном + 1;
	КонецЦикла;
	ЗаписатьЗаписьЖурналаРегистрации("АрхивированиеПартий", "Обработано "+Ном+" Партий.");
	УстановитьПривилегированныйРежим( Ложь);
КонецПроцедуры

Функция ПолучитьИсполнителейОперативногоНаряда(ОперативныйНаряд) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УГМК_ОперативныеНарядыСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников КАК УГМК_ОперативныеНарядыСотрудников
		|ГДЕ
		|	УГМК_ОперативныеНарядыСотрудников.ОперативныйНаряд = &ОперативныйНаряд
		|
		|УПОРЯДОЧИТЬ ПО
		|	УГМК_ОперативныеНарядыСотрудников.Сотрудник.Наименование";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
КонецФункции

Функция МинимальнаяДатаОписи( ОбъектСкладПолучатель, ЖелаемаяДата) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Склад",ОбъектСкладПолучатель);
	Запр.УстановитьПараметр("ЖелаемаяДата",ЖелаемаяДата);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстаткиОбороты.Регистратор.Сторно = ИСТИНА
	             |				И УГМК_ОперативныеОстаткиОбороты.Регистратор.ДокументОснование.Дата >= &ЖелаемаяДата
	             |			ТОГДА УГМК_ОперативныеОстаткиОбороты.Регистратор.ДокументОснование
	             |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	             |	КОНЕЦ КАК РегистраторСторно,
	             |	УГМК_ОперативныеОстаткиОбороты.МестоУчета,
	             |	УГМК_ОперативныеОстаткиОбороты.МаркаСплава,
	             |	УГМК_ОперативныеОстаткиОбороты.ГруппаПродукции,
	             |	УГМК_ОперативныеОстаткиОбороты.Номенклатура,
	             |	УГМК_ОперативныеОстаткиОбороты.Характеристика,
	             |	УГМК_ОперативныеОстаткиОбороты.Состояние,
	             |	УГМК_ОперативныеОстаткиОбороты.ПаспортПартии,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.КоличествоРасход) КАК КоличествоРасход,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.Количество1Расход) КАК Количество1Расход,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.КоличествоМестРасход) КАК КоличествоМестРасход,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.КоличествоПриход) КАК КоличествоПриход,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.Количество1Приход) КАК Количество1Приход,
	             |	СУММА(УГМК_ОперативныеОстаткиОбороты.КоличествоМестПриход) КАК КоличествоМестПриход
	             |ПОМЕСТИТЬ АналитикаДвижений
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки.Обороты(&ЖелаемаяДата, , Регистратор, МестоУчета = &Склад) КАК УГМК_ОперативныеОстаткиОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстаткиОбороты.Регистратор.Сторно = ИСТИНА
	             |				И УГМК_ОперативныеОстаткиОбороты.Регистратор.ДокументОснование.Дата >= &ЖелаемаяДата
	             |			ТОГДА УГМК_ОперативныеОстаткиОбороты.Регистратор.ДокументОснование
	             |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	             |	КОНЕЦ,
	             |	УГМК_ОперативныеОстаткиОбороты.МестоУчета,
	             |	УГМК_ОперативныеОстаткиОбороты.МаркаСплава,
	             |	УГМК_ОперативныеОстаткиОбороты.ГруппаПродукции,
	             |	УГМК_ОперативныеОстаткиОбороты.Номенклатура,
	             |	УГМК_ОперативныеОстаткиОбороты.Характеристика,
	             |	УГМК_ОперативныеОстаткиОбороты.Состояние,
	             |	УГМК_ОперативныеОстаткиОбороты.ПаспортПартии
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	АналитикаДвижений.Регистратор КАК Регистратор
	             |ПОМЕСТИТЬ НеСторнированы
	             |ИЗ
	             |	АналитикаДвижений КАК АналитикаДвижений
	             |		ЛЕВОЕ СОЕДИНЕНИЕ АналитикаДвижений КАК АналитикаДвиженийС
	             |		ПО АналитикаДвижений.Регистратор = АналитикаДвиженийС.РегистраторСторно
	             |ГДЕ
	             |	АналитикаДвижений.РегистраторСторно = НЕОПРЕДЕЛЕНО
	             |	И АналитикаДвиженийС.РегистраторСторно ЕСТЬ NULL 
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	УГМК_ОперативныеОстаткиОбороты.Период КАК Период,
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор КАК Регистратор,
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор.Номер,
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор.Дата,
	             |	УГМК_ОперативныеОстаткиОбороты.Регистратор.ВидОперации КАК РегистраторВидОперации
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстаткиОбороты
	             |ГДЕ
	             |	(УГМК_ОперативныеОстаткиОбороты.МестоУчета, УГМК_ОперативныеОстаткиОбороты.МаркаСплава, УГМК_ОперативныеОстаткиОбороты.ГруппаПродукции, УГМК_ОперативныеОстаткиОбороты.Номенклатура, УГМК_ОперативныеОстаткиОбороты.Характеристика, УГМК_ОперативныеОстаткиОбороты.Состояние, УГМК_ОперативныеОстаткиОбороты.ПаспортПартии) В
	             |			(ВЫБРАТЬ
	             |				УГМК_ОперативныеОстаткиОбороты.МестоУчета,
	             |				УГМК_ОперативныеОстаткиОбороты.МаркаСплава,
	             |				УГМК_ОперативныеОстаткиОбороты.ГруппаПродукции,
	             |				УГМК_ОперативныеОстаткиОбороты.Номенклатура,
	             |				УГМК_ОперативныеОстаткиОбороты.Характеристика,
	             |				УГМК_ОперативныеОстаткиОбороты.Состояние,
	             |				УГМК_ОперативныеОстаткиОбороты.ПаспортПартии
	             |			ИЗ
	             |				АналитикаДвижений КАК УГМК_ОперативныеОстаткиОбороты
	             |			ГДЕ
	             |				(УГМК_ОперативныеОстаткиОбороты.КоличествоРасход <> 0
	             |					ИЛИ УГМК_ОперативныеОстаткиОбороты.Количество1Расход <> 0
	             |					ИЛИ УГМК_ОперативныеОстаткиОбороты.КоличествоМестРасход <> 0
	             |					ИЛИ УГМК_ОперативныеОстаткиОбороты.КоличествоПриход <> 0
	             |					ИЛИ УГМК_ОперативныеОстаткиОбороты.Количество1Приход <> 0
	             |					ИЛИ УГМК_ОперативныеОстаткиОбороты.КоличествоМестПриход <> 0))
	             |	И УГМК_ОперативныеОстаткиОбороты.Период >= &ЖелаемаяДата
	             |	И УГМК_ОперативныеОстаткиОбороты.Регистратор В
	             |			(ВЫБРАТЬ
	             |				НеСторнированы.Регистратор
	             |			ИЗ
	             |				НеСторнированы КАК НеСторнированы)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Период
	             |ИТОГИ ПО
	             |	РегистраторВидОперации";
	МинимальнаяДатаОписи = '00010101';
	СтрОш = "";
	Регистраторы = Новый Массив;
	РезультатОперации = Запр.Выполнить().Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока РезультатОперации.Следующий() цикл
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОш, Символы.ПС);
		СтрОш = СтрОш + Строка( РезультатОперации.РегистраторВидОперации)+": ";
		СтрОшРегистратор = "";
		Результат = РезультатОперации.Выбрать( ОбходРезультатаЗапроса.Прямой);
		Пока Результат.Следующий() цикл
			МинимальнаяДатаОписи = макс( Результат.Период, МинимальнаяДатаОписи);
			Если Регистраторы.Найти( Результат.Регистратор) = Неопределено тогда
				Если Регистраторы.Количество() <= 5 тогда
					СтрОшРегистратор = СтрОшРегистратор + Строка( Результат.Регистратор);
				КонецЕсли;
				Регистраторы.Добавить( Результат.Регистратор);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено( СтрОшРегистратор) тогда
			СтрОш = СтрОш + СтрОшРегистратор;
		иначе
			СтрОш = СтрОш + "....";
		КонецЕсли;
	КонецЦикла;
	МинимальнаяДатаОписи = МинимальнаяДатаОписи + 1;
	
	Если Регистраторы.Количество() > 5 тогда
		СтрОш = СтрОш + " (еще "+Строка( Регистраторы.Количество()-5)+")";
	КонецЕсли;
	
	Возврат( Новый Структура("МинимальнаяДатаОписи,СтрОш,Регистраторы",МинимальнаяДатаОписи,СтрОш,Регистраторы));
КонецФункции

Процедура ПолучитьНакопленныеСообщенияПользователю( СтрокаСообщения, Разделитель = "") Экспорт
	СформированыСообщения = ПолучитьСообщенияПользователю( Истина);
	СтрокаПредупреждения = "";
	Для каждого СообщениеП из СформированыСообщения цикл
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрокаПредупреждения, Символы.ПС);
		СтрокаПредупреждения = СтрокаПредупреждения + СообщениеП.Текст;
	КонецЦикла;
	Если ЗначениеЗаполнено( СтрокаПредупреждения) тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрокаСообщения, Символы.ПС);
		СтрокаСообщения = СтрокаСообщения + Разделитель + СтрокаПредупреждения;
	КонецЕсли;
КонецПроцедуры
	
Функция ПроверитьДвиженияОтносительноОписей( СписокСкладовД, МинДата, МаксДата) Экспорт
	СтрПредупреждения = "";
	
	ДатаПроведеннойОписи = УГМК_ОперативныйУчетВызовСервера.ПолучитьДатуПоследнейОписиПоСкладу( СписокСкладовД);
	Если МинДата <= ДатаПроведеннойОписи тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрПредупреждения, Символы.ПС);
		СтрПредупреждения = СтрПредупреждения+Строка( ДатаПроведеннойОписи)+" проведена Опись металла. Документ изменяет информацию "+Строка( МинДата);
	КонецЕсли;

	Запр = Новый Запрос;
	Запр.УстановитьПараметр("СписокМестУчета", СписокСкладовД);
	Запр.УстановитьПараметр("ВидОперации", Справочники.УГМК_СостоянияЗаказа.ОписьМеталла);
	Запр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УГМК_ДокументФакт.Ссылка,
	             |	УГМК_ДокументФакт.СкладПолучатель,
	             |	УГМК_ДокументФакт.Дата КАК Дата
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |ГДЕ
	             |	(НЕ УГМК_ДокументФакт.Проведен
	             |			ИЛИ УГМК_ДокументФакт.Проведен
	             |				И УГМК_ДокументФакт.ФормироватьВременныеДвижения)
	             |	И НЕ УГМК_ДокументФакт.ПометкаУдаления
	             |	И УГМК_ДокументФакт.ВидОперации = &ВидОперации
	             |	И ВЫБОР
	             |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 0
	             |					ИЛИ УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 4
	             |				ТОГДА УГМК_ДокументФакт.СкладПолучатель В (&СписокМестУчета)
	             |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 1
	             |					ИЛИ УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 3
	             |				ТОГДА УГМК_ДокументФакт.ПодразделениеПолучатель В (&СписокМестУчета)
	             |			КОГДА УГМК_ДокументФакт.ТипУказанияМестоУчетаПродукции = 2
	             |				ТОГДА УГМК_ДокументФакт.РабочийЦентр В (&СписокМестУчета)
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Дата УБЫВ";
	Результат = Запр.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрПредупреждения, Символы.ПС);
		СтрПредупреждения = СтрПредупреждения+Результат.СкладПолучатель+": ведется опись металла "+Результат.Ссылка;
	КонецЕсли;
	
	Возврат( СтрПредупреждения);
КонецФункции

Функция ФормаДокумента_ПроверитьВведенныеДанныеСВопросом( Объект, Склад1=Неопределено, Склад2=Неопределено) Экспорт
	СтрОшВопрос = "";
	Если ЗначениеЗаполнено( Склад1) или ЗначениеЗаполнено( Склад2) тогда
		УГМК_ОперативныйУчетКлиентСервер.ЗаполнитьДатыМинМакс( Объект);
		СписокСкладовД = Новый Массив;
		Если ЗначениеЗаполнено( Склад1) тогда
			СписокСкладовД.Добавить( Склад1);
		КонецЕсли;
		Если ЗначениеЗаполнено( Склад2) тогда
			СписокСкладовД.Добавить( Склад2);
		КонецЕсли;
		СтрОшВопрос = УГМК_ОперативныйУчетВызовСервера.ПроверитьДвиженияОтносительноОписей( СписокСкладовД, Объект.ДатаМин, Объект.ДатаМакс);	
	КонецЕсли;
	
	Возврат( СтрОшВопрос);
КонецФункции

Процедура ВыполнитьДвижениеСерийПартияСТК( ДокументСсылка, ПерезаполнитьДвижениеОУ = Истина) Экспорт
	//ОЦМ Мобильная
	//СвойствоПартияСТК = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_ПартияСТК");
	//Если не ЗначениеЗаполнено( СвойствоПартияСТК) тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запр = Новый Запрос;
	//Запр.УстановитьПараметр("Ссылка",ДокументСсылка);
	//Если ТипЗнч( ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") тогда
	//	Запр.Текст = "ВЫБРАТЬ
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата как Период,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Заказ,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СТК,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ЗаданиеНаПроизводство,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СК_СТК_ИД,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.УГМК_ПаспортПартии,
	//	             |	СУММА(ОтчетПроизводстваЗаСменуПродукция.КоличествоТары) КАК КоличествоТары,
	//	             |	СУММА(ОтчетПроизводстваЗаСменуПродукция.Брутто) КАК Брутто,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ВесТары,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Упаковка,
	//	             |	СУММА(ОтчетПроизводстваЗаСменуПродукция.УГМК_КоличествоШтук) КАК УГМК_КоличествоШтук,
	//	             |	СУММА(ОтчетПроизводстваЗаСменуПродукция.КоличествоМест) КАК КоличествоМест,
	//	             |	СУММА(ОтчетПроизводстваЗаСменуПродукция.Количество) КАК Количество
	//	             |ИЗ
	//	             |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	//	             |ГДЕ
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка = &Ссылка
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Заказ,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СТК,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ЗаданиеНаПроизводство,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СК_СТК_ИД,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.УГМК_ПаспортПартии,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.ВесТары,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Упаковка";
	//иначе
	//	Возврат;
	//КонецЕсли;
	//			 
	//УГМК_ЗначенияСвойствСерийИстория = РегистрыСведений.УГМК_ЗначенияСвойствСерийИстория.СоздатьНаборЗаписей();
	//УГМК_ЗначенияСвойствСерийИстория.Отбор.Регистратор.Установить( ДокументСсылка);
	//УГМК_ЗначенияСвойствСерийИстория.Прочитать();
	//тзУГМК_ЗначенияСвойствСерийИстория = УГМК_ЗначенияСвойствСерийИстория.Выгрузить();
	//СтрокаПартии = тзУГМК_ЗначенияСвойствСерийИстория.Найти( СвойствоПартияСТК, "Свойство");
	//Пока СтрокаПартии <> Неопределено цикл
	//	тзУГМК_ЗначенияСвойствСерийИстория.Удалить( СтрокаПартии);
	//	СтрокаПартии = тзУГМК_ЗначенияСвойствСерийИстория.Найти( СвойствоПартияСТК, "Свойство");
	//КонецЦикла;
	//
	//РезультатЗ = Запр.Выполнить().Выбрать();
	//Пока РезультатЗ.Следующий() цикл
	//	Если ЗначениеЗаполнено( РезультатЗ.СерияНоменклатуры) тогда
	//		НоваяЗапись = тзУГМК_ЗначенияСвойствСерийИстория.Добавить();
	//		НоваяЗапись.Активность = Истина;
	//		НоваяЗапись.Период = РезультатЗ.Период;
	//		НоваяЗапись.Объект = РезультатЗ.СерияНоменклатуры;
	//		НоваяЗапись.Свойство = СвойствоПартияСТК;
	//		НоваяЗапись.Заказ = РезультатЗ.Заказ;
	//		НоваяЗапись.Значение = РезультатЗ.УГМК_ПаспортПартии;
	//		НоваяЗапись.ТипИсточника = "ВыполнитьДвижениеСерийПартияСТК";
	//	КонецЕсли;
	//КонецЦикла;
	//
	//УГМК_ЗначенияСвойствСерийИстория.Загрузить( тзУГМК_ЗначенияСвойствСерийИстория);
	//УГМК_ЗначенияСвойствСерийИстория.Записать();
	//
	//Если ПерезаполнитьДвижениеОУ тогда
	//	УГМК_МодульИсторияЗаказа.ВыполнитьДвижениеОперативныхОстатков( ДокументСсылка, 1);
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьСохраненныеСменыПоГрафику(График) экспорт
	Если ЗначениеЗаполнено( График) тогда
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("ДАТА1",'0001-01-01');
		Запр.УстановитьПараметр("Ссылка",График);
		Запр.Текст = "ВЫБРАТЬ
		             |	ГрафикиРаботыСмены.Смена,
		             |	ГрафикиРаботыСмены.Смена.УГМК_ВремяНачалаСекунд,
		             |	ГрафикиРаботыСмены.Смена.УГМК_ВремяОкончанияСекунд,
		             |	ДОБАВИТЬКДАТЕ(&ДАТА1, СЕКУНДА, ГрафикиРаботыСмены.Смена.УГМК_ВремяНачалаСекунд) КАК ВремяНачала,
		             |	ДОБАВИТЬКДАТЕ(&ДАТА1, СЕКУНДА, ГрафикиРаботыСмены.Смена.УГМК_ВремяОкончанияСекунд) КАК ВремяОкончания,
		             |	ГрафикиРаботыСмены.НомерСтроки КАК НомерСтроки
		             |ИЗ
		             |	Справочник.ГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
		             |ГДЕ
		             |	ГрафикиРаботыСмены.Ссылка = &Ссылка
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	НомерСтроки";
		тз = Запр.Выполнить().Выгрузить();
		тз.Свернуть("Смена,ВремяНачала,ВремяОкончания");
		возврат тз;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатыНачалаКонцаПоГрафику(График,ТекДата) экспорт
	тзСмен=ПолучитьСохраненныеСменыПоГрафику(График);
	Дата1 = ДобавитьМесяц( ТекДата, 1);
	Дата2 = ТекДата;
	Для каждого Строка из тзСмен цикл
		ДатаВремяНачала = ТекДата + (Строка.ВремяНачала-'0001-01-01');
		ДатаВремяОкончания = ТекДата + (Строка.ВремяОкончания-'0001-01-01');
		Если ДатаВремяОкончания <= ДатаВремяНачала тогда
			ДатаВремяОкончания = ДатаВремяОкончания + 24*60*60; 
		КонецЕсли;
		Дата1 = Мин( Дата1, ДатаВремяНачала);
		Дата2 = Макс( Дата2, ДатаВремяОкончания);
	КонецЦикла;
	структураДат=Новый Структура;
	структураДат.Вставить("Дата1",Дата1);
	структураДат.Вставить("Дата2",Дата2);
	возврат структураДат;
КонецФункции

Функция ПолучитьКодБезНулей(Номер)

	МассивПрефиксовДляОбхода = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Неопределено);
	
	//Для старых номеров ФБЦ убираем префикс
	Если Найти(Номер,"K") = 1 Тогда 
    	Номер = Сред(Номер, 2);
    КонецЕсли;
	МассивПрефиксовДляОбхода.Добавить("Y");
	тПрефикс = "";
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
		
//+ УГМК_isn 27.06.2013 13:34:53 
		// удаление префикса из номера документа
		//Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
		//	тПрефикс = тПрефикс + Сред(Номер, 1, СтрДлина(ТекущийПрефикс));
		//	Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);               			
		//КонецЕсли;
		
		// Удаляем двойные префиксы, напр: ММ, ПП
		Пока Найти(Номер, ТекущийПрефикс)=1 Цикл 
			тПрефикс = тПрефикс + Сред(Номер, 1, СтрДлина(ТекущийПрефикс));
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);               			
		КонецЦикла;
//- УГМК_isn 27.06.2013 13:34:58 
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
        КонецЦикла;
        
	КонецЦикла;
	
	Возврат тПрефикс + Номер;

КонецФункции // ПолучитьКодБезНулей()

Процедура ПечатьПриемкиГотовойПродукцииМайденпек(Т,НачДата,КонДата,График,РежимОтображения) Экспорт
	тзДок=ПолучитьДанныеПриемки(НачДата,КонДата,График,РежимОтображения);
	Макет=Обработки.УГМК_ПодтверждениеПриемкиГП.ПолучитьМакет("ПриемкаГПМайденпек");
	ОблШапка=Макет.ПолучитьОбласть("Шапка");
	ОблСтрока=Макет.ПолучитьОбласть("Строка");
	тз=Новый ТаблицаЗначений;
	//тз.Колонки.Добавить("Отм");
	тз.Колонки.Добавить("Партия");
	тз.Колонки.Добавить("Размер");
	тз.Колонки.Добавить("Обозначение");
	тз.Колонки.Добавить("Контрагент");
	тз.Колонки.Добавить("Смена1");
	тз.Колонки.Добавить("Смена2");
	тз.Колонки.Добавить("Смена3");
	тз.Колонки.Добавить("Комментарий");
	Для каждого стрД из тзДок Цикл
		//Если (не ЗначениеЗаполнено( стрД.СТК))или( не стрД.ДокументПриемки.Проведен) Тогда
		//	продолжить;
		//КонецЕсли;
		стр=тз.Добавить();
		//стр.Отм=?(стрД.ДокументПриемки.УГМК_ДокументЗакрыт,"V","");
		стр.Партия=ПолучитьКодБезНулей(стрД.СТК);
		стр.Размер=стрД.Размер;
		стр.Обозначение=стрД.Состояние;
		стр.Контрагент=стрД.Контрагент;
		стр.Смена1=0;
		стр.Смена2=0;
		стр.Смена3=0;
		Если стрД.СменаНомерСтроки=1 Тогда
			стр.Смена1=стрД.Количество;
		ИначеЕсли стрД.СменаНомерСтроки=2 Тогда
			стр.Смена2=стрД.Количество;
		ИначеЕсли стрД.СменаНомерСтроки=3 Тогда
			стр.Смена3=стрД.Количество;
		КонецЕсли;
		стр.Комментарий=стрД.Комментарий;
	КонецЦикла;
	Всего=тз.Итог("Смена1")+тз.Итог("Смена2")+тз.Итог("Смена3");
	ОблШапка.параметры.Всего= Всего;
	ОблШапка.Параметры.ИтогСмена1=тз.Итог("Смена1");
	ОблШапка.Параметры.ИтогСмена2=тз.Итог("Смена2");
	ОблШапка.Параметры.ИтогСмена3=тз.Итог("Смена3");
	ОблШапка.Параметры.ДатаДок=НачДата;
	//тз.Свернуть("Отм,Партия,Размер,Обозначение,Контрагент,Комментарий","Смена1,Смена2,Смена3");
	тз.Свернуть("Партия,Размер,Обозначение,Контрагент,Комментарий","Смена1,Смена2,Смена3");
	Т.Вывести(ОблШапка);
	для каждого стрТ из тз цикл
		ОблСтрока.Параметры.Заполнить(стрТ);
		Т.Вывести(ОблСтрока);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДанныеПриемки(НачДата,КонДата,График,РежимОтображения) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Запр=Новый Запрос;
	//
	//Если График=Неопределено Тогда
	//	//Запр.Текст = "ВЫБРАТЬ
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка КАК ДокументПриемки,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен КАК Проведен,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата КАК Дата,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Номер КАК ДокументПриемкиПредставление,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДокументЗакрыт КАК УГМК_ДокументЗакрыт,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура КАК Номенклатура,
	//	//			 |	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСменуПродукция.Номенклатура) КАК НоменклатураПредставление,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//	//			 |	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатурыПредставление,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры КАК СерияНоменклатуры,
	//	//			 |	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры) КАК СерияНоменклатурыПредставление,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Состояние КАК Состояние,
	//	//			 |	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Состояние) КАК СостояниеПредставление,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Количество КАК Количество,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.КоличествоМест КАК КоличествоМест,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.УГМК_КоличествоШтук КАК УГМК_КоличествоШтук,
	//	//			 |	0 КАК СменаНомерСтроки,
	//	//			 |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Значение КАК СквознойНомер,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Заказ.Контрагент КАК Контрагент,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.СТК
	//	//			 |ИЗ
	//	//			 |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	//	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ЗначенияСвойствЗаказовПокупателей.СрезПоследних КАК УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних
	//	//			 |		ПО ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв = УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ЗаказПокупателя
	//	//			 |			И ОтчетПроизводстваЗаСменуПродукция.Номенклатура = УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Номенклатура
	//	//			 |			И ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры = УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ХарактеристикаНоменклатуры
	//	//			 |			И (УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Свойство = &Свойство)
	//	//			 |ГДЕ
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата >= &ДатаН
	//	//			 |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата < &ДатаК
	//	//			 |	И ВЫБОР
	//	//			 |			КОГДА &РежимОтображения = 0
	//	//			 |				ТОГДА ИСТИНА
	//	//			 |			КОГДА &РежимОтображения = 1
	//	//			 |					И (ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен
	//	//			 |						И ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДокументЗакрыт)
	//	//			 |				ТОГДА ИСТИНА
	//	//			 |			КОГДА &РежимОтображения = 2
	//	//			 |					И (НЕ ОтчетПроизводстваЗаСменуПродукция.Ссылка.ПометкаУдаления
	//	//			 |						И НЕ ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДокументЗакрыт)
	//	//			 |				ТОГДА ИСТИНА
	//	//			 |			ИНАЧЕ ЛОЖЬ
	//	//			 |		КОНЕЦ
	//	//			 |
	//	//			 |УПОРЯДОЧИТЬ ПО
	//	//			 |	Дата,
	//	//			 |	ОтчетПроизводстваЗаСменуПродукция.Ссылка
	//	//			 |АВТОУПОРЯДОЧИВАНИЕ";
	//	//
	//	//Запр.УстановитьПараметр("РежимОтображения", РежимОтображения);
	//	//Запр.УстановитьПараметр("ДатаН", НачДата);
	//	//Запр.УстановитьПараметр("ДатаК", КонДата);
	//	//Запр.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.СквознойНомер);
	//	Запр.Текст = "";
	//иначе
	//	Запр.Текст = "ВЫБРАТЬ
	//	             |	ДОБАВИТЬКДАТЕ(&Дата1, СЕКУНДА, ГрафикиРаботыСмены.Смена.УГМК_ВремяНачалаСекунд) КАК ДатаВремяНачала,
	//	             |	ДОБАВИТЬКДАТЕ(&Дата1, СЕКУНДА, ГрафикиРаботыСмены.Смена.УГМК_ВремяОкончанияСекунд) КАК ДатаВремяОкончания,
	//	             |	ГрафикиРаботыСмены.НомерСтроки КАК СменаНомерСтроки
	//	             |ПОМЕСТИТЬ СменыПериодыСмены
	//	             |ИЗ
	//	             |	Справочник.ГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
	//	             |ГДЕ
	//	             |	ГрафикиРаботыСмены.Ссылка = &График
	//	             |;
	//	             |
	//	             |////////////////////////////////////////////////////////////////////////////////
	//	             |ВЫБРАТЬ
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата КАК Дата,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Номер КАК НомерДок,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Количество КАК Количество,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.КоличествоМест КАК КоличествоМест,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.УГМК_КоличествоШтук КАК УГМК_КоличествоШтук,
	//	             |	МИНИМУМ(ЕСТЬNULL(СменыПериодыСмены.СменаНомерСтроки, 0)) КАК СменаНомерСтроки,
	//	             |	ВЫБОР
	//	             |		КОГДА ОтчетПроизводстваЗаСменуПродукция.Заказ.Организация = &Организация_УГМК
	//	             |			ТОГДА &Контрагент_УГМК
	//	             |		ИНАЧЕ ОтчетПроизводстваЗаСменуПродукция.Заказ.Контрагент
	//	             |	КОНЕЦ КАК Контрагент,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СТК,
	//	             |	ВЫБОР
	//	             |		КОГДА ОтчетПроизводстваЗаСменуПродукция.Номенклатура.Наименование ПОДОБНО ""%LWC%""
	//	             |			ТОГДА ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры + ""xLWC""
	//	             |		ИНАЧЕ ВЫБОР
	//	             |				КОГДА ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.ОсобыеУсловия = &ОсобоеУсловие_PVC
	//	             |					ТОГДА ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры + "" PVC""
	//	             |				ИНАЧЕ ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры
	//	             |			КОНЕЦ
	//	             |	КОНЕЦ КАК Размер,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Состояние.СостояниеСокрНаим КАК Состояние,
	//	             |	ВЫРАЗИТЬ(ОтчетПроизводстваЗаСменуПродукция.Ссылка.Комментарий КАК СТРОКА(20)) КАК Комментарий
	//	             |ИЗ
	//	             |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	//	             |		ЛЕВОЕ СОЕДИНЕНИЕ СменыПериодыСмены КАК СменыПериодыСмены
	//	             |		ПО ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДатаВзвешивания >= СменыПериодыСмены.ДатаВремяНачала
	//	             |			И ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДатаВзвешивания < СменыПериодыСмены.ДатаВремяОкончания
	//	             |ГДЕ
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДатаВзвешивания >= &ДатаН
	//	             |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДатаВзвешивания < &ДатаК
	//	             |	И ВЫБОР
	//	             |			КОГДА &РежимОтображения = 0
	//	             |				ТОГДА ИСТИНА
	//	             |			КОГДА &РежимОтображения = 1
	//	             |					И (ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен
	//	             |						И ОтчетПроизводстваЗаСменуПродукция.Ссылка.УГМК_ДокументЗакрыт)
	//	             |				ТОГДА ИСТИНА
	//	             |			КОГДА &РежимОтображения = 2
	//	             |					И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен
	//	             |				ТОГДА ИСТИНА
	//	             |			ИНАЧЕ ЛОЖЬ
	//	             |		КОНЕЦ
	//	             |
	//	             |СГРУППИРОВАТЬ ПО
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Номер,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Количество,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.КоличествоМест,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.УГМК_КоличествоШтук,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.СТК,
	//	             |	ВЫБОР
	//	             |		КОГДА ОтчетПроизводстваЗаСменуПродукция.Номенклатура.Наименование ПОДОБНО ""%LWC%""
	//	             |			ТОГДА ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры + ""xLWC""
	//	             |		ИНАЧЕ ВЫБОР
	//	             |				КОГДА ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.ОсобыеУсловия = &ОсобоеУсловие_PVC
	//	             |					ТОГДА ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры + "" PVC""
	//	             |				ИНАЧЕ ОтчетПроизводстваЗаСменуПродукция.ХарактеристикаНоменклатуры.Размеры
	//	             |			КОНЕЦ
	//	             |	КОНЕЦ,
	//	             |	ВЫБОР
	//	             |		КОГДА ОтчетПроизводстваЗаСменуПродукция.Заказ.Организация = &Организация_УГМК
	//	             |			ТОГДА &Контрагент_УГМК
	//	             |		ИНАЧЕ ОтчетПроизводстваЗаСменуПродукция.Заказ.Контрагент
	//	             |	КОНЕЦ,
	//	             |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.НоменклатураОЦМ_ск.Состояние.СостояниеСокрНаим,
	//	             |	ВЫРАЗИТЬ(ОтчетПроизводстваЗаСменуПродукция.Ссылка.Комментарий КАК СТРОКА(20))
	//	             |
	//	             |УПОРЯДОЧИТЬ ПО
	//	             |	Дата,
	//	             |	НомерДок";
	//	
	//	Запр.УстановитьПараметр("РежимОтображения", РежимОтображения);
	//	Запр.УстановитьПараметр("Дата1", НачалоДня(НачДата));
	//	Запр.УстановитьПараметр("ДатаН", НачДата);
	//	Запр.УстановитьПараметр("ДатаК", КонДата);
	//	Запр.УстановитьПараметр("График", График);
	//	Запр.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.СквознойНомер);
	//	Запр.УстановитьПараметр("ОсобоеУсловие_PVC", 	УГМК_СлужебныеФункции.ПолучитьНастройку("ОcобоеУсловие_PVC"));
	//	Запр.УстановитьПараметр("Контрагент_УГМК", 	УГМК_СлужебныеФункции.ПолучитьНастройку("Контрагент_UMMC"));
	//	Запр.УстановитьПараметр("Организация_УГМК", 	УГМК_СлужебныеФункции.ПолучитьНастройку("УГМК-ОЦМ_Организация"));
	//КонецЕсли;
	//возврат Запр.Выполнить().Выгрузить();
КонецФункции

Процедура ЗаписатьСвойстваИстории( НаборЗаписей, ЭтотОбъектДата, ПаспортПартии, СтруктураРеквизитов, ТипИсточника="") Экспорт
	Для каждого Элемент из СтруктураРеквизитов Цикл
		ЗаписьСвойство = Элемент.Ключ;
		ЗначениеРеквизита = Элемент.Значение;
		
		//ЗаписьСвойство = УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоП_"+ИмяРеквизита);
		//Если ЗначениеЗаполнено( ЗаписьСвойство) и ЗначениеЗаполнено( ЗначениеРеквизита) тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ЭтотОбъектДата;
			Запись.Объект = ПаспортПартии;
			Запись.Свойство = ЗаписьСвойство;
			Запись.Значение = ЗначениеРеквизита;
			Запись.ТипИсточника = ТипИсточника;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазвернутьСписокРабочихЦентров( Знач СписокДоступных) Экспорт
	ТипГруппа = Тип("СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров");
	ТипРЦ = Тип("СправочникСсылка.РабочиеЦентры");
	
	СписокСсылок = Новый СписокЗначений;
	Для каждого Элемент из СписокДоступных цикл
		Значение = Элемент.Значение;
		
		ТипЗ = ТипЗнч( Значение);
		Если ЗначениеЗаполнено( Значение) тогда
			Если ТипЗ = ТипРЦ тогда
				УГМК_ОперативныйУчетКлиентСервер.ДобавитьЕслиНетСписок( СписокСсылок, Значение);
			ИначеЕсли ТипЗ = ТипГруппа тогда
				ТЧ = Значение.Состав;
				
				Для каждого Значение1 из ТЧ цикл
					УГМК_ОперативныйУчетКлиентСервер.ДобавитьЕслиНетСписок( СписокСсылок, Значение1.РабочийЦентр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат( СписокСсылок);
КонецФункции

Процедура ПрименитьНастройкиЗаполненияИзмерений( ЭтотОбъект) Экспорт
	ТаблицаДвижений = ЭтотОбъект.Выгрузить();
	ОтборСтрок = Новый Структура("МестоУчета");
	ЕстьИзменения = Ложь;
	
	ОбрабатыватьНастройки = Новый Структура;
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоГруппеПродукции","ГруппаПродукции");
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоНоменклатуре","Номенклатура");
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоХарактеристике","Характеристика");
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоСостоянию","Состояние");
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоПартии","ПаспортПартии");
	ОбрабатыватьНастройки.Вставить("НЕТДвиженийПоТаре","Тара");
		  
	МестаУчета = Новый Массив;
	Для каждого Строка из ЭтотОбъект цикл
		Если МестаУчета.Найти( Строка.МестоУчета) = Неопределено тогда
			МестаУчета.Добавить( Строка.МестоУчета);
			
			ПодразделениеНастроек = УГМК_СлужебныйПовторноеИспользование.ПолучитьПодразделениеПоЗначению( Строка.МестоУчета);
			
			ОтборСтрок.МестоУчета = Строка.МестоУчета;
			Для каждого Элемент из ОбрабатыватьНастройки цикл
				НастройкаСписок = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( Неопределено, ПодразделениеНастроек, Строка.МестоУчета, Элемент.Ключ, Ложь);
				
				ОчиститьИзмерение = Ложь;
				Если НастройкаСписок.Количество() > 0 тогда
					ОчиститьИзмерение = НастройкаСписок[ 0].Значение = Истина;
				КонецЕсли;
				
				Если ОчиститьИзмерение тогда
					ИмяИзмерения = Элемент.Значение;
					
					СтрокиДвижений = ТаблицаДвижений.НайтиСтроки( ОтборСтрок);
					Для каждого СтрокаДвижения из СтрокиДвижений цикл
						СтрокаДвижения[ ИмяИзмерения] = Неопределено;
						ЕстьИзменения = Истина;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения тогда
		ЭтотОбъект.Загрузить( ТаблицаДвижений);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПлавкуИПредставление( Слиток) Экспорт
	Результат = Новый Структура;
	
	Результат.Вставить("Основная", Слиток.Основная); 
	Результат.Вставить("ОсновнаяПредставление", УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеПартии( Слиток.Основная));
	
	Возврат( Результат);
КонецФункции

Функция Партия_КоличествоФормирование( ТекПартия) Экспорт
	Перем Результат, Запр, РезультатЗапроса;
	
	Результат = 0;
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	             |	СУММА(УГМК_ОперативныеОстатки.Количество) КАК Количество,
	             |	СУММА(УГМК_ОперативныеОстатки.Количество1) КАК Количество1,
	             |	СУММА(УГМК_ОперативныеОстатки.КоличествоМест) КАК КоличествоМест,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	             |ГДЕ
	             |	УГМК_ОперативныеОстатки.ПаспортПартии = &ПаспортПартии
	             |	И УГМК_ОперативныеОстатки.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ФормированиеЦеховойПартии)
	             |	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	УГМК_ОперативныеОстатки.ВидДвижения";
	Запр.УстановитьПараметр("ПаспортПартии",ТекПартия);
	
	РезультатЗапроса = Запр.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() тогда
		Результат = РезультатЗапроса.Количество;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция Партия_КоличествоВыпуск( ТекПартия) Экспорт
	Перем Результат, Запр, РезультатЗапроса;
	
	Результат = 0;
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ОперативныеОстатки.Количество КАК Количество,
	             |	УГМК_ОперативныеОстатки.Количество1 КАК Количество1,
	             |	УГМК_ОперативныеОстатки.КоличествоМест КАК КоличествоМест,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстатки.КорНоменклатура <> NULL
	             |			ТОГДА УГМК_ОперативныеОстатки.КорНоменклатура
	             |		ИНАЧЕ УГМК_ОперативныеОстатки.Номенклатура
	             |	КОНЕЦ КАК Номенклатура,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстатки.КорХарактеристика <> NULL
	             |			ТОГДА УГМК_ОперативныеОстатки.КорХарактеристика
	             |		ИНАЧЕ УГМК_ОперативныеОстатки.Характеристика
	             |	КОНЕЦ КАК Характеристика,
	             |	УГМК_ОперативныеОстатки.Период КАК Дата,
	             |	УГМК_ОперативныеОстатки.Регистратор,
	             |	УГМК_ОперативныеОстатки.ВидОперации,
	             |	УГМК_ОперативныеОстатки.Активность,
	             |	УГМК_ОперативныеОстатки.Серия
	             |ПОМЕСТИТЬ Данные
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	             |ГДЕ
	             |	УГМК_ОперативныеОстатки.ПаспортПартии = &ПаспортПартии
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	УГМК_ОперативныеОстатки.Количество,
	             |	УГМК_ОперативныеОстатки.Количество1,
	             |	УГМК_ОперативныеОстатки.КоличествоМест,
	             |	УГМК_ОперативныеОстатки.ПаспортПартии,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстатки.КорНоменклатура <> NULL
	             |			ТОГДА УГМК_ОперативныеОстатки.КорНоменклатура
	             |		ИНАЧЕ УГМК_ОперативныеОстатки.Номенклатура
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА УГМК_ОперативныеОстатки.КорХарактеристика <> NULL
	             |			ТОГДА УГМК_ОперативныеОстатки.КорХарактеристика
	             |		ИНАЧЕ УГМК_ОперативныеОстатки.Характеристика
	             |	КОНЕЦ,
	             |	УГМК_ОперативныеОстатки.Период,
	             |	УГМК_ОперативныеОстатки.Регистратор,
	             |	УГМК_ОперативныеОстатки.ВидОперации,
	             |	УГМК_ОперативныеОстатки.Активность,
	             |	УГМК_ОперативныеОстатки.Серия
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстаткиНеПодтвержденные КАК УГМК_ОперативныеОстатки
	             |ГДЕ
	             |	УГМК_ОперативныеОстатки.ПаспортПартии = &ПаспортПартии
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СУММА(Данные.Количество) КАК Количество,
	             |	СУММА(Данные.Количество1) КАК Количество1,
	             |	СУММА(Данные.КоличествоМест) КАК КоличествоМест,
	             |	Данные.ПаспортПартии,
	             |	Данные.Номенклатура,
	             |	Данные.Характеристика,
	             |	ВЫБОР
	             |		КОГДА Данные.ВидОперации = &ПринятСТК
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ Данные.Дата
	             |	КОНЕЦ КАК Дата,
	             |	Данные.Регистратор,
	             |	Данные.Регистратор.ПредставлениеИсточника КАК ПредставлениеИсточника,
	             |	Данные.Регистратор.Номер КАК Номер,
	             |	Данные.Регистратор.Дата КАК ДатаДокумент,
	             |	Данные.ВидОперации,
	             |	Данные.Серия
	             |ИЗ
	             |	Данные КАК Данные
	             |ГДЕ
	             |	Данные.ВидОперации В(&ВидОперации)
	             |	И Данные.Активность
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Данные.ПаспортПартии,
	             |	Данные.Номенклатура,
	             |	Данные.Характеристика,
	             |	Данные.Регистратор,
	             |	Данные.ВидОперации,
	             |	Данные.Серия,
	             |	Данные.Регистратор.ПредставлениеИсточника,
	             |	Данные.Регистратор.Номер,
	             |	Данные.Регистратор.Дата,
	             |	ВЫБОР
	             |		КОГДА Данные.ВидОперации = &ПринятСТК
	             |			ТОГДА НЕОПРЕДЕЛЕНО
	             |		ИНАЧЕ Данные.Дата
	             |	КОНЕЦ
	             |
	             |ИМЕЮЩИЕ
	             |	СУММА(Данные.Количество) <> 0";			 
	Запр.УстановитьПараметр("ПаспортПартии",ТекПартия);
	
	ОперацииВыпуска = Новый Массив;
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.Перевес);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.ЗаменаБрака);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.Кооперация);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.Инвентаризация);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.Изготовление);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.ПринятСТК);
	ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.ВзвешиваниеГП);
	
	Если УГМК_СлужебныеФункции.ПолучитьНастройку("Партия_КоличествоВыпуск_Взвешено") = Истина тогда
		ОперацииВыпуска.Добавить( Справочники.УГМК_СостоянияЗаказа.ИзготовлениеВзвешено);
	КонецЕсли;
	
	Запр.УстановитьПараметр("ВидОперации",ОперацииВыпуска);
	Запр.УстановитьПараметр("ПринятСТК",Справочники.УГМК_СостоянияЗаказа.ПринятСТК);

	ДанныеСдачиГП = Запр.Выполнить().Выгрузить();
	ДанныеСдачиГП.Колонки.Добавить("ДокументУПП");
	
	Для каждого НоваяСтрока из ДанныеСдачиГП Цикл
		НоваяСтрока.ДокументУПП = НоваяСтрока.Номер;
	КонецЦикла;
	
	Возврат( ДанныеСдачиГП);
КонецФункции

Функция Партия_ЦветКоличествоВыпуск( ТекПартия, ИтогоВесГП, ИтогоВесФормирование) Экспорт
	ЦветКоличествоВыпуск = ЦветаСтиля.ЦветТекстаПоля;
	Если ИтогоВесГП > ИтогоВесФормирование + 20 тогда
		ЦветКоличествоВыпуск = ЦветаСтиля.ЦветОсобогоТекста;
	КонецЕсли;
	
	Возврат( ЦветКоличествоВыпуск);
КонецФункции

Процедура УстановитьСданаПолностью( СсылкаПартияСТК) Экспорт
	Если ЗначениеЗаполнено( СсылкаПартияСТК) тогда
		Объект = СсылкаПартияСТК.ПолучитьОбъект();
		Объект.СданаПолностью = Истина;
		Объект.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНомерПечи( РабочийЦентр) Экспорт
	Попытка
		НомерПечи = Число( РабочийЦентр.УГМК_ДляПоиска);
	Исключение
		НомерПечи = 0;
	КонецПопытки;
	
	Возврат( НомерПечи);
КонецФункции

Функция ПолучитьОписаниеНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Если ОперативныйНаряд=Неопределено Тогда
	//    Текст="<p>Наряд не выбран</p>";
	//Иначе	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Дата КАК Дата,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Подразделение.Наименование КАК Подразделение,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник.Наименование КАК Сотрудник,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Смена.Наименование КАК Смена
	//		|ИЗ
	//		|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников.СрезПоследних(,) КАК УГМК_ОперативныеНарядыСотрудниковСрезПоследних
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников.СрезПоследних КАК УГМК_МестонахождениеСотрудниковСрезПоследних
	//		|		ПО УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник = УГМК_МестонахождениеСотрудниковСрезПоследних.Сотрудник
	//		|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.МестонахождениеСотрудника = ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
	//		|			И (УГМК_МестонахождениеСотрудниковСрезПоследних.Период <= УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Период)
	//		|ГДЕ
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд = &ОперативныйНаряд
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Сотрудник";

	//	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

	//	ВыделениеШрифт = "<font size=12pt>";
	//	КонецШрифт = "</font>";
	//	
	//	Текст="";
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если Текст="" Тогда
	//			Текст="<p>Наряд создан  <b>"+ВыделениеШрифт+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ='ЧЧ:мм dd MMMM yyyy'")+КонецШрифт+"</b></p>";
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
	//				Текст=Текст+"<p>Подразделение: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Подразделение+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
	//				Текст=Текст+"<p>Оборудование: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.РабочийЦентр+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
	//				Текст=Текст+"<p>Бригадир: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Бригадир+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
	//				Текст=Текст+"<p>Смена: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Смена+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Текст=Текст+"<p>Состав бригады:</p> <ol style='margin-left: 20'>";
	//		КонецЕсли;
	//		Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Сотрудник+КонецШрифт+"</b></li>";
	//	КонецЦикла;
	//	Текст=Текст+"</ol>";
	//	
	//	Если ЗначениеЗаполнено(Сотрудники) Тогда
	//		Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
	//		Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
	//			Для каждого Сотрудник Из Сотрудники Цикл
	//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Сотрудник+КонецШрифт+"</b></li>";
	//			КонецЦикла; 
	//		Иначе
	//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Сотрудники+КонецШрифт+"</b></li>";
	//		КонецЕсли;
	//		Текст=Текст+"</ol></font>";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Описание=Новый ФорматированныйДокумент;
	//
	//Описание.УстановитьHTML(Текст,Новый Структура);
	//
	//Возврат Описание;
КонецФункции

Функция ПолучитьОписаниеШаблонаНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Если ОперативныйНаряд=Неопределено Тогда
	//    Текст="<p>Наряд не выбран</p>";
	//Иначе	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.Дата КАК Дата,
	//		|	УГМК_ОперативныйНаряд.Владелец.Наименование КАК Подразделение,
	//		|	УГМК_ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
	//		|	УГМК_ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
	//		|	УГМК_ОперативныйНаряд.Смена.Наименование КАК Смена,
	//		|	УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник.Наименование КАК Сотрудник
	//		|ИЗ
	//		|	Справочник.УГМК_ОперативныйНаряд КАК УГМК_ОперативныйНаряд
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОперативныеНарядыСотрудников.СрезПоследних(, ) КАК УГМК_ОперативныеНарядыСотрудниковСрезПоследних
	//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников.СрезПоследних КАК УГМК_МестонахождениеСотрудниковСрезПоследних
	//		|			ПО УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Сотрудник = УГМК_МестонахождениеСотрудниковСрезПоследних.Сотрудник
	//		|				И (УГМК_МестонахождениеСотрудниковСрезПоследних.МестонахождениеСотрудника = ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
	//		|				И (УГМК_МестонахождениеСотрудниковСрезПоследних.Период <= УГМК_ОперативныеНарядыСотрудниковСрезПоследних.Период)
	//		|				И (УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.ОперативныйНаряд = &ОперативныйНаряд)
	//		|		ПО УГМК_ОперативныеНарядыСотрудниковСрезПоследних.ОперативныйНаряд.ОперативныйНаряд = УГМК_ОперативныйНаряд.Ссылка
	//		|ГДЕ
	//		|	УГМК_ОперативныйНаряд.Ссылка = &ОперативныйНаряд
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Сотрудник";

	//	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

	//	ВыделениеШрифт = "<font size=12pt>";
	//	КонецШрифт = "</font>";
	//	КонецСписка="";
	//	
	//	Текст="";
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если Текст="" Тогда
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сотрудник) Тогда
	//				Текст="<p>Наряд создан  <b>"+ВыделениеШрифт+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ='ЧЧ:мм dd MMMM yyyy'")+КонецШрифт+"</b></p>";
	//			Иначе
	//				Текст="<p>Новый наряд</p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
	//				Текст=Текст+"<p>Подразделение: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Подразделение+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
	//				Текст=Текст+"<p>Оборудование: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.РабочийЦентр+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
	//				Текст=Текст+"<p>Бригадир: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Бригадир+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
	//				Текст=Текст+"<p>Смена: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Смена+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сотрудник) Тогда
	//				Текст=Текст+"<p>Состав бригады:</p> <ol style='margin-left: 20'>";
	//				КонецСписка="</ol>";
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сотрудник) Тогда
	//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Сотрудник+КонецШрифт+"</b></li>";
	//		КонецЕсли;
	//	КонецЦикла;
	//	Текст=Текст+КонецСписка;
	//	
	//	Если ЗначениеЗаполнено(Сотрудники) Тогда
	//		Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
	//		Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
	//			Для каждого Сотрудник Из Сотрудники Цикл
	//				Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Сотрудник+КонецШрифт+"</b></li>";
	//			КонецЦикла; 
	//		Иначе
	//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Сотрудники+КонецШрифт+"</b></li>";
	//		КонецЕсли;
	//		Текст=Текст+"</ol></font>";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Описание=Новый ФорматированныйДокумент;
	//
	//Описание.УстановитьHTML(Текст,Новый Структура);
	//
	//Возврат Описание;
КонецФункции

Функция ПолучитьОписаниеИсторииНаряда(ОперативныйНаряд,Сотрудники=Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Если ОперативныйНаряд=Неопределено Тогда
	//    Текст="<p>Наряд не выбран</p>";
	//Иначе	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ОперативныйНаряд",ОперативныйНаряд);
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Начало.ОперативныйНаряд,
	//		|	Начало.Подразделение КАК Подразделение,
	//		|	Начало.Сотрудник КАК Сотрудник,
	//		|	Начало.Период КАК НачалоПериода,
	//		|	МИНИМУМ(Окончание.Период) КАК ОкончаниеПериода
	//		|ПОМЕСТИТЬ ВТПериодыНарядов
	//		|ИЗ
	//		|	РегистрСведений.УГМК_ОперативныеНарядыСотрудников КАК Начало
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОперативныеНарядыСотрудников КАК Окончание
	//		|		ПО Начало.Сотрудник = Окончание.Сотрудник
	//		//|			И Начало.ОперативныйНаряд <> Окончание.ОперативныйНаряд
	//		|			И Начало.Период < Окончание.Период
	//		|ГДЕ
	//		|	Начало.ОперативныйНаряд = &ОперативныйНаряд
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	Начало.Сотрудник,
	//		|	Начало.ОперативныйНаряд,
	//		|	Начало.Подразделение,
	//		|	Начало.Период
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ПериодыНарядов.ОперативныйНаряд КАК ОперативныйНаряд,
	//		|	ПериодыНарядов.ОперативныйНаряд.Дата КАК Дата,
	//		|	ПериодыНарядов.Подразделение.Наименование КАК Подразделение,
	//		|	ПериодыНарядов.Сотрудник.Наименование КАК Сотрудник,
	//		|	ПериодыНарядов.ОперативныйНаряд.Бригадир.Наименование КАК Бригадир,
	//		|	ПериодыНарядов.ОперативныйНаряд.РабочийЦентр.Наименование КАК РабочийЦентр,
	//		|	ПериодыНарядов.ОперативныйНаряд.Смена.Наименование КАК Смена,
	//		|	ПериодыНарядов.НачалоПериода КАК НачалоПериода,
	//		|	ВЫБОР
	//		|		КОГДА ПериодыНарядов.ОкончаниеПериода ЕСТЬ NULL 
	//		|			ТОГДА МИНИМУМ(Окончание.Период)
	//		|		КОГДА МИНИМУМ(Окончание.Период) ЕСТЬ NULL 
	//		|			ТОГДА ПериодыНарядов.ОкончаниеПериода
	//		|		КОГДА МИНИМУМ(Окончание.Период) < ПериодыНарядов.ОкончаниеПериода
	//		|			ТОГДА МИНИМУМ(Окончание.Период)
	//		|		ИНАЧЕ ПериодыНарядов.ОкончаниеПериода
	//		|	КОНЕЦ КАК ОкончаниеПериода
	//		|ИЗ
	//		|	ВТПериодыНарядов КАК ПериодыНарядов
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_МестонахождениеСотрудников КАК Окончание
	//		|		ПО ПериодыНарядов.Сотрудник = Окончание.Сотрудник
	//		|			И (Окончание.МестонахождениеСотрудника <> ЗНАЧЕНИЕ(Перечисление.УГМК_МестонахождениеСотрудников.НаРабочемМесте))
	//		|			И ПериодыНарядов.НачалоПериода < Окончание.Период
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ПериодыНарядов.Сотрудник,
	//		|	ПериодыНарядов.ОперативныйНаряд,
	//		|	ПериодыНарядов.Подразделение,
	//		|	ПериодыНарядов.НачалоПериода,
	//		|	ПериодыНарядов.ОкончаниеПериода
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	ОперативныйНаряд,
	//		|	ПериодыНарядов.Сотрудник.Наименование,
	//		|	НачалоПериода";
	//		
	//		

	//	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

	//	Текст="";
	//	ВыделениеШрифт = "<font size=12pt>";
	//	КонецШрифт = "</font>";
	//	
	//	ТекущийСотрудник=Неопределено;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если Текст="" Тогда
	//			Текст="<p>Наряд создан  <b>"+ВыделениеШрифт+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ='ЧЧ:мм dd MMMM yyyy'")+КонецШрифт+"</b></p>";
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) Тогда
	//				Текст=Текст+"<p>Подразделение: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Подразделение+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РабочийЦентр) Тогда
	//				Текст=Текст+"<p>Оборудование: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.РабочийЦентр+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Бригадир) Тогда
	//				Текст=Текст+"<p>Бригадир: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Бригадир+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Смена) Тогда
	//				Текст=Текст+"<p>Смена: <b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Смена+КонецШрифт+"</b></p>";
	//			КонецЕсли;
	//			Текст=Текст+"<p>Состав бригады:</p> <ol style='margin-left: 20'>";
	//		КонецЕсли;
	//		Если ТекущийСотрудник<>ВыборкаДетальныеЗаписи.Сотрудник Тогда
	//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+ВыборкаДетальныеЗаписи.Сотрудник+КонецШрифт+"</b>";
	//		Иначе
	//			Текст=Лев(Текст,СтрДлина(Текст)-5)+",";
	//		КонецЕсли;
	//		Текст=Текст+" <font size=""12pt"">"+Формат(ВыборкаДетальныеЗаписи.НачалоПериода,"ДФ='ЧЧ:мм dd MMM'")+" - "+Формат(ВыборкаДетальныеЗаписи.ОкончаниеПериода,"ДФ='ЧЧ:мм dd MMM'")+"</font></li>";
	//		
	//		ТекущийСотрудник=ВыборкаДетальныеЗаписи.Сотрудник;
	//	КонецЦикла;
	//	Текст=Текст+"</ol>";
	//	
	//	Если ЗначениеЗаполнено(Сотрудники) Тогда
	//		Текст=Текст+"<font color = #FF0000><p>Добавить в бригаду:</p> <ol style='margin-left: 20'>";
	//		Если ТипЗнч(Сотрудники)=Тип("Массив") Тогда
	//			Для каждого Сотрудник Из Сотрудники Цикл
	//				Если ЗначениеЗаполнено(Сотрудник) Тогда
	//					Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Строка( Сотрудник)+КонецШрифт+"</b></li>";
	//				КонецЕсли;
	//			КонецЦикла; 
	//		Иначе
	//			Текст=Текст+"<li style='margin-left: 20pt'><b>"+ВыделениеШрифт+Сотрудники+КонецШрифт+"</b></li>";
	//		КонецЕсли;
	//		Текст=Текст+"</ol></font>";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Описание=Новый ФорматированныйДокумент;
	//	
	//Описание.УстановитьHTML(Текст,Новый Структура);
	//
	//Возврат Описание;
КонецФункции

Функция Получить_ЗначениеПоказателя_УГМК_ТекстовоеЗначение(ЗначениеПоказателя) экспорт
	возврат ЗначениеПоказателя.УГМК_ТекстовоеЗначение;
КонецФункции

Функция ЭтоДокументФормированиеРазбраковка(ДокументОснованиеСсылка) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ДокументФакт.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт1
	             |		ПО УГМК_ДокументФакт.Ссылка = УГМК_ДокументФакт1.ДокументОснование
	             |			И (УГМК_ДокументФакт1.Сторно)
	             |ГДЕ
	             |	УГМК_ДокументФакт.ВидОперации = &ВидОперации
	             |	И ВЫБОР
	             |			КОГДА УГМК_ДокументФакт1.Ссылка ЕСТЬ NULL 
	             |				ТОГДА ИСТИНА
	             |			ИНАЧЕ ЛОЖЬ
	             |		КОНЕЦ
	             |	И НЕ УГМК_ДокументФакт.Ссылка.Сторно
	             |	И УГМК_ДокументФакт.ДокументОснование = &ДокументОснование
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ДокументФакт.Ссылка";
	Запрос.УстановитьПараметр("ВидОперации",Справочники.УГМК_СостоянияЗаказа.Разбраковка);
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснованиеСсылка);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат Выб.Ссылка;
	Иначе
		возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьТипУказанияМестаУчета( ТекущийПользователь, АналитикаНастроек, ИмяНастройки, СокращатьВарианты = Истина) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Перем ТекущееРабочееМесто, ДанныеНастроек, ТипУказанияМестаУчета;
	//
	//ТекущееРабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//ДанныеНастроек = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( ТекущийПользователь, АналитикаНастроек, ТекущееРабочееМесто, ИмяНастройки, Ложь);
	//
	//// пока оставляем или 0 (Склад) или 3 (Транзит через Склад)
	//ТипУказанияМестаУчета = 0;
	//Если ДанныеНастроек.Количество() > 0 тогда
	//	ТипУказанияМестаУчета = ДанныеНастроек[ 0].Значение;
	//	Если СокращатьВарианты тогда
	//		Если ТипУказанияМестаУчета = 1 тогда
	//			ТипУказанияМестаУчета = 0;
	//		иначеЕсли ТипУказанияМестаУчета = 2 тогда
	//			ТипУказанияМестаУчета = 0;
	//		иначеЕсли ТипУказанияМестаУчета = 3 тогда
	//			ТипУказанияМестаУчета = 3;
	//		иначеЕсли ТипУказанияМестаУчета = 4 тогда
	//			ТипУказанияМестаУчета = 4;
	//		иначе 
	//			ТипУказанияМестаУчета = 0;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Возврат( ТипУказанияМестаУчета);
КонецФункции

Функция ПолучитьМестоУчетаПоТипу( Параметры, ДополнениеИмени = "") Экспорт
	ИмяРЦ = "РабочийЦентр";
	ИмяСклад = "Склад";
	ИмяПодразделения = "Подразделение";
	ИмяТипУказания = "ТипУказанияМестоУчета";
	
	Если ДополнениеИмени = "Продукции" тогда
		ИмяСклад = "СкладПолучатель";
		ИмяПодразделения = "ПодразделениеПолучатель";
		ИмяТипУказания = "ТипУказанияМестоУчетаПродукции";
	КонецЕсли;
	
	МестоУчета = Неопределено;
	ТипУказания = Параметры[ ИмяТипУказания];
	Если ТипУказания = 0 тогда
		МестоУчета = Параметры[ ИмяРЦ];
		Если не ЗначениеЗаполнено( МестоУчета) тогда
			МестоУчета = Параметры[ ИмяСклад];
		КонецЕсли;
		Если не ЗначениеЗаполнено( МестоУчета) тогда
			МестоУчета = Параметры[ ИмяПодразделения];
		КонецЕсли;
	иначеЕсли (ТипУказания = 1) или (ТипУказания = 3) тогда
		МестоУчета = Параметры[ ИмяПодразделения];
	иначеЕсли ТипУказания = 2 тогда
		МестоУчета = Параметры[ ИмяРЦ];
	иначеЕсли ТипУказания = 4 тогда
		МестоУчета = Параметры[ ИмяСклад];
	КонецЕсли;
	
	Возврат( МестоУчета);
КонецФункции

Процедура УстановитьВидимостьПоТипуУказанияМестаУчета( Объект, Элементы, ДополнениеИмени = "", СуфиксЭлементаФормы="") Экспорт
	Если СуфиксЭлементаФормы = "" тогда
		ИмяГруппыСклад = "ГруппаОбъектСкладВыбрать";
		ИмяГруппыПодразделение = "ГруппаОбъектПодразделениеВыбрать";
		ИмяГруппыСкладПолучатель = "ГруппаОбъектСкладПолучательВыбрать";
		ИмяГруппыПодразделениеПолучатель = "ГруппаОбъектПодразделениеПолучательВыбрать";
		ИмяГруппыРЦ = "ГруппаОбъектРабочийЦентрВыбрать";
		ИмяГруппыРЦПолучатель = "ГруппаОбъектРабочийЦентрПолучательВыбрать";
	иначе
		ИмяГруппыСклад = "ГруппаОбъектСклад"+СуфиксЭлементаФормы+"Выбрать";
		ИмяГруппыПодразделение = "ГруппаОбъектПодразделение"+СуфиксЭлементаФормы+"Выбрать";
		ИмяГруппыСкладПолучатель = "ГруппаОбъектСкладПолучатель"+СуфиксЭлементаФормы+"Выбрать";
		ИмяГруппыПодразделениеПолучатель = "ГруппаОбъектПодразделениеПолучатель"+СуфиксЭлементаФормы+"Выбрать";
		ИмяГруппыРЦ = "ГруппаОбъектРабочийЦентр"+СуфиксЭлементаФормы+"Выбрать";
		ИмяГруппыРЦПолучатель = "ГруппаОбъектРабочийЦентрПолучатель"+СуфиксЭлементаФормы+"Выбрать";
	КонецЕсли;
	
	Если ДополнениеИмени = "" тогда
		ВыбратьСклад = Ложь;
		ВыбратьПодразделение = Ложь;
		ВыбратьРЦ = Объект.ТипУказанияМестоУчета = 2;
		
		Если (Объект.ТипУказанияМестоУчета = 0) или (Объект.ТипУказанияМестоУчета = 3) тогда
			ВыбратьСклад = Истина;
		КонецЕсли;
		Если (Объект.ТипУказанияМестоУчета = 1) или (Объект.ТипУказанияМестоУчета = 3) тогда
			ВыбратьПодразделение = Истина;
		КонецЕсли;
		
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыСклад, ВыбратьСклад);
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыПодразделение, ВыбратьПодразделение);
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыРЦ, ВыбратьРЦ);
	иначеЕсли ДополнениеИмени = "Продукции" тогда
		ВыбратьСклад = Ложь;
		ВыбратьПодразделение = Ложь;
		ВыбратьРЦ = Объект.ТипУказанияМестоУчетаПродукции = 2;
		
		Если (Объект.ТипУказанияМестоУчетаПродукции = 0) или (Объект.ТипУказанияМестоУчетаПродукции = 3) тогда
			ВыбратьСклад = Истина;
		КонецЕсли;
		Если (Объект.ТипУказанияМестоУчетаПродукции = 1) или (Объект.ТипУказанияМестоУчетаПродукции = 3) тогда
			ВыбратьПодразделение = Истина;
		КонецЕсли;
		
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыСкладПолучатель, ВыбратьСклад);
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыПодразделениеПолучатель, ВыбратьПодразделение);
		ОбработатьВидимостьГруппы( Элементы, ИмяГруппыРЦПолучатель, ВыбратьРЦ);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьВидимостьГруппы( Элементы, ИмяГрупп, ЗначениеВидимости)
	ЭлементыГруппа = Элементы.Найти( ИмяГрупп);
	Если ЭлементыГруппа <> Неопределено тогда
		Если ЭлементыГруппа.Видимость <> ЗначениеВидимости тогда
			ЭлементыГруппа.Видимость = ЗначениеВидимости;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТипУказанияМестоУчета( Объект, ТекущийПользователь, ИзмененОтправитель = Ложь, ИзмененПолучатель = Ложь, СокращатьВарианты = Истина) Экспорт
	АналитикаНастроек = Новый Структура;
	Если ИзмененОтправитель тогда
		АналитикаНастроек.Вставить("Склад", Объект.Склад);
		АналитикаНастроек.Вставить("Подразделение", Объект.Подразделение);
		Объект.ТипУказанияМестоУчета = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипУказанияМестаУчета( ТекущийПользователь, АналитикаНастроек, "Перемещение_ТипУказанияМестоУчета", СокращатьВарианты);
	КонецЕсли;
	Если ИзмененПолучатель тогда
		АналитикаНастроек.Вставить("Склад",Объект.СкладПолучатель);
		АналитикаНастроек.Вставить("Подразделение",Объект.ПодразделениеПолучатель);
		Объект.ТипУказанияМестоУчетаПродукции = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипУказанияМестаУчета( ТекущийПользователь, АналитикаНастроек, "Перемещение_ТипУказанияМестоУчетаПродукции", СокращатьВарианты);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКоллекцию( Знач Список, Знач Организация = Неопределено, Знач Пользовательская = Ложь) Экспорт
	Если не ЗначениеЗаполнено( Организация) тогда
		Организация = УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УГМК_МаркиСплавовКоллекцияКоллекция.Ссылка
		|ИЗ
		|	Справочник.УГМК_МаркиСплавовКоллекция.Коллекция КАК УГМК_МаркиСплавовКоллекцияКоллекция
		|
		|СГРУППИРОВАТЬ ПО
		|	УГМК_МаркиСплавовКоллекцияКоллекция.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА УГМК_МаркиСплавовКоллекцияКоллекция.Значение В (&Значение)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) = &Количество И
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УГМК_МаркиСплавовКоллекцияКоллекция.Значение В (&Значение)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) = 0";

	Запрос.УстановитьПараметр("Значение", Список.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Количество", Список.Количество());
	
	Запрос.УстановитьПараметр("Пользовательская", Пользовательская);
	Запрос.УстановитьПараметр("Организация", Организация);

	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ОбъектКоллекция = Справочники.УГМК_МаркиСплавовКоллекция.СоздатьЭлемент();
		ОбъектКоллекция.Организация = Организация;
		ОбъектКоллекция.Пользовательская = Пользовательская;
		Для каждого ЭлементСписка Из Список Цикл
			НоваяСтрока=ОбъектКоллекция.Коллекция.Добавить();
			НоваяСтрока.Значение=ЭлементСписка.Значение;
		КонецЦикла;
		ОбъектКоллекция.ДополнительныеСвойства.Вставить("ВызовПолучитьКоллекцию", Истина);
		ОбъектКоллекция.Записать();
		Возврат ОбъектКоллекция.Ссылка;
	КонецЕсли;
КонецФункции

Функция СписокНазначенийСвойств(ОбъектОтбораНазначений) экспорт

	СписокНазначенийСвойств = Новый СписокЗначений;

	Назначение = ОбъектОтбораНазначений;

	Попытка
		Пока ЗначениеЗаполнено(Назначение) Цикл
			СписокНазначенийСвойств.Добавить(Назначение);
			Назначение = Назначение.Родитель;
		КонецЦикла;
	Исключение
	КонецПопытки;

	СписокНазначенийСвойств.Добавить(Назначение);

	Возврат СписокНазначенийСвойств;

КонецФункции

Функция ПолучитьТЗРазмеров(ТипРазмера,ОбъектОтбораЗначений,ОбъектОтбораНазначений) экспорт
	
	//ВидыРазмеров = УГМК_ПеренесенныеПроцедурыИФункции.СК_ПолучитьВидыРазмеров(Продукция, ПолучатьВидРазмераПоСсылке).Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипРазмера", ТипРазмера);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыРазмеров.ВидРазмера,
	               |	ВидыРазмеров.Соединитель,
	               |	ВидыРазмеров.ПорядковыйНомерРазмера КАК ПорядковыйНомерРазмера
	               |ИЗ
	               |	Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК ВидыРазмеров
	               |ГДЕ
	               |	ВидыРазмеров.Ссылка = &ТипРазмера
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомерРазмера
	               |АВТОУПОРЯДОЧИВАНИЕ";
	ВидыРазмеров=Запрос.Выполнить().Выгрузить();
	Если ВидыРазмеров.Количество() > 0 Тогда
		ПослНомер = ВидыРазмеров[ВидыРазмеров.Количество()-1].ПорядковыйНомерРазмера + 1;
	Иначе
		ПослНомер = 1;
	КонецЕсли; 
	свПроизводитель = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_Производитель");
	Если ЗначениеЗаполнено(свПроизводитель) Тогда
		тВид = ВидыРазмеров.Добавить();
		тВид.ВидРазмера = свПроизводитель;
		тВид.ПорядковыйНомерРазмера = ПослНомер;
	КонецЕсли; 
	
	ВидыРазмеров.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	Для каждого тРазм Из ВидыРазмеров Цикл
		тРазм.ПометкаУдаления = тРазм.ВидРазмера.ПометкаУдаления;
	КонецЦикла; 
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр("Свойства", ВидыРазмеров);
	Запрос.УстановитьПараметр("СписокСвойств", ВидыРазмеров.ВыгрузитьКолонку("ВидРазмера"));
	Запрос.УстановитьПараметр("СледНомер", ПослНомер + 1);
	Запрос.УстановитьПараметр("НазначениеСвойств",       ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ОбъектОтбораЗначений));
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств(ОбъектОтбораНазначений));
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Свойства.ВидРазмера КАК Свойство,
	               |	Свойства.ПорядковыйНомерРазмера,
	               |	Свойства.ПометкаУдаления
	               |ПОМЕСТИТЬ тСвойства
	               |ИЗ
	               |	&Свойства КАК Свойства
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвойстваСК.Свойство,
	               |	СвойстваСК.ПометкаУдаления,
				   |	СвойстваСК.ПорядковыйНомерРазмера КАК УГМК_ПорядковыйНомерРазмера,
	               |	ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		СвойстваОбъектов.Свойство КАК Свойство,
	               |		СвойстваОбъектов.ПорядковыйНомерРазмера КАК ПорядковыйНомерРазмера,
	               |		СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	               |	ИЗ
	               |		тСвойства КАК СвойстваОбъектов
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ЗначенияСвойствОбъектов.Свойство,
	               |		&СледНомер,
	               |		ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления
	               |	ИЗ
	               |		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |	ГДЕ
	               |		ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	               |		И (НЕ ЗначенияСвойствОбъектов.Свойство В (&СписокСвойств))
				   |		) КАК СвойстваСК
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО СвойстваСК.Свойство = ЗначенияСвойствОбъектов.Свойство
	               |			И (ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений)
				   |УПОРЯДОЧИТЬ ПО
				   |	СвойстваСК.ПорядковыйНомерРазмера
	               |АВТОУПОРЯДОЧИВАНИЕ;";
				
	Запрос.Текст = ТекстЗапроса;
	ТблСвойствИЗначений = Запрос.Выполнить().Выгрузить();
	Возврат ТблСвойствИЗначений;
	
КонецФункции

Функция ПолучитьЗначенияРазмераПоХарактеристике( Организация, ПродукцияПартии, ТекХарактеристика) Экспорт
	Если не ЗначениеЗаполнено( ТекХарактеристика) тогда
		Возврат( Неопределено);
	иначеЕсли ТипЗнч( ТекХарактеристика) <> Тип("СправочникСсылка.ХарактеристикиНоменклатуры") тогда
		Возврат( ТекХарактеристика);
	КонецЕсли;
	
	СК_ПродукцияОЦМ = ПродукцияПартии.НоменклатураОЦМ_ск;
	ТекРазмер = Неопределено;
	
	//получим тип характеристики и саму характеристику по наименованию (точнее размер по велечинам)
	ТекущиеДанные = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ПоСвойствам,ГруппаПродукции,МаркаСплава,Состояние,ДополнениеИмени");
	ТекущиеДанные.ПоСвойствам=Истина;
	ТекущиеДанные.ГруппаПродукции=СК_ПродукцияОЦМ.ГруппаПродукции;
	ТекущиеДанные.МаркаСплава=СК_ПродукцияОЦМ.МаркаСплава;
	ТекущиеДанные.ДополнениеИмени="";
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("Организация", Организация);
	ПараметрыВызова.Вставить("ТекущиеДанные", ТекущиеДанные);
	Результат = УГМК_ОперативныйУчетВызовСервера.ХарактеристикаНачалоВыбора( СК_ПродукцияОЦМ.ГруппаПродукции, Ложь, "Характеристика", ПараметрыВызова);
	Если Результат <> Неопределено тогда
		ТипРазмераДляПереходаОУ = ТекХарактеристика.Владелец.НоменклатураОЦМ_ск.ТипРазмера;
		//если Результат.ВладелецОбразцаТипов - пустая ссылка, тогда типу размера присваиваем текущий тип размера из номенклатуры
		Если Результат.ВладелецОбразцаТипов.Пустая() Тогда
			Результат.ВладелецОбразцаТипов=ТипРазмераДляПереходаОУ;
		КонецЕсли;
		
		тзЗнРазмеров=УГМК_ОперативныйУчетВызовСервера.ПолучитьТЗРазмеров( ТипРазмераДляПереходаОУ, ТекХарактеристика, ПродукцияПартии);
		
		тзВидыразмеров=ТипРазмераДляПереходаОУ.ВидыРазмеров.Выгрузить();
		
		тзЗнРазмеров.Сортировать("УГМК_ПорядковыйНомерРазмера");
		
		ЗапросРазм=Новый Запрос;
		ЗапросРазм.Текст="ВЫБРАТЬ
		                 |	УГМК_ЗначенияРазмеров.Ссылка
		                 |ИЗ
		                 |	Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		                 |ГДЕ
		                 |	УГМК_ЗначенияРазмеров.Владелец = &Владелец
		                 |	И УГМК_ЗначенияРазмеров.Организация = &Организация
		                 |	И НЕ УГМК_ЗначенияРазмеров.ПометкаУдаления";
		ЗапросРазм.УстановитьПараметр("Владелец",Результат.ВладелецОбразцаТипов);
		Размер1=0;Размер2=0;Размер3=0;Размер4=0;Размер5=0;
		НомерРазмера = 0;
		для каждого СтрРазм из тзЗнРазмеров цикл
			СтрВидаРазмера=тзВидыразмеров.Найти(СтрРазм.Свойство,"ВидРазмера");
			Если СтрВидаРазмера<>Неопределено Тогда
				Если (СтрРазм.Значение<>0)и(СокрЛП(СтрРазм.Значение)<>"") Тогда
					НомерРазмера = НомерРазмера + 1;
					
					ТекПорядок=СокрЛП( НомерРазмера);
					ЗапросРазм.Текст=ЗапросРазм.Текст+" И УГМК_ЗначенияРазмеров.Размер"+ТекПорядок+"=&Размер"+ТекПорядок;
					ЗапросРазм.УстановитьПараметр("Размер"+ТекПорядок,СтрРазм.Значение);
					Если НомерРазмера=1 Тогда
						Размер1=СтрРазм.Значение;
					ИначеЕсли НомерРазмера=2 Тогда
						Размер2=СтрРазм.Значение;
					ИначеЕсли НомерРазмера=3 Тогда
						Размер3=СтрРазм.Значение;
					ИначеЕсли НомерРазмера=4 Тогда
						Размер4=СтрРазм.Значение;
					ИначеЕсли НомерРазмера=5 Тогда
						Размер5=СтрРазм.Значение;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекОрганизация = Организация;
		ЗапросРазм.УстановитьПараметр("Организация",ТекОрганизация);
		ВыбРазм=ЗапросРазм.Выполнить().Выбрать();
		Если ВыбРазм.Следующий() Тогда
			ТекРазмер=ВыбРазм.ссылка;
		Иначе
			СпрНовыйРазмер=Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
			СпрНовыйРазмер.Владелец=Результат.ВладелецОбразцаТипов;
			СпрНовыйРазмер.Организация=ТекОрганизация;
			СпрНовыйРазмер.Размер1=Размер1;
			СпрНовыйРазмер.Размер2=Размер2;
			СпрНовыйРазмер.Размер3=Размер3;
			СпрНовыйРазмер.Размер4=Размер4;
			СпрНовыйРазмер.Размер5=Размер5;
			СпрНовыйРазмер.Наименование=СпрНовыйРазмер.Автонаименование(СпрНовыйРазмер);
			СпрНовыйРазмер.Записать();
			ТекРазмер=СпрНовыйРазмер.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( ТекРазмер);
КонецФункции

Функция ПолучитьСтруктуруСвойствНаСервереПоНоменклатуреХарактеристике(Организация, ПродукцияПартии,ТекХарактеристика) экспорт
	Если (не ЗначениеЗаполнено( ПродукцияПартии)) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	СК_ПродукцияОЦМ = ПродукцияПартии.НоменклатураОЦМ_ск;
	
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Номенклатура",ПродукцияПартии);
	СтруктураСвойств.Вставить("МаркаСплава",СК_ПродукцияОЦМ.МаркаСплава);
	СтруктураСвойств.Вставить("ГруппаПродукции",СК_ПродукцияОЦМ.ГруппаПродукции);
	СтруктураСвойств.Вставить("ХарактеристикаНоменклатуры", ПолучитьЗначенияРазмераПоХарактеристике( Организация, ПродукцияПартии, ТекХарактеристика));
	
	Возврат СтруктураСвойств;
КонецФункции

Функция ПолучитьСтруктуруСвойствПартииНаСервере(ПартияСТК) экспорт
	Если не ЗначениеЗаполнено( ПартияСТК) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	ПродукцияПартии="";
	ТекХарактеристика="";
	Если ПартияСТК.ИзмененитьПродукцию Тогда
		ПродукцияПартии = ПартияСТК.ПродукцияПартии;
		ТекХарактеристика=ПартияСТК.ХарактеристикаПродукцииПартии;
	Иначе
		Если ПартияСТК.Продукция.Количество() > 0 тогда
			ПродукцияПартии = ПартияСТК.Продукция[0].Продукция;
			ТекХарактеристика = ПартияСТК.Продукция[0].ХарактеристикаПродукции;
		КонецЕсли;
	КонецЕсли;
	
	Если (не ЗначениеЗаполнено( ПродукцияПартии)) тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	СК_ПродукцияОЦМ = ПродукцияПартии.НоменклатураОЦМ_ск;
	
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Номенклатура",ПродукцияПартии);
	СтруктураСвойств.Вставить("МаркаСплава",СК_ПродукцияОЦМ.МаркаСплава);
	СтруктураСвойств.Вставить("ГруппаПродукции",СК_ПродукцияОЦМ.ГруппаПродукции);
	СтруктураСвойств.Вставить("ХарактеристикаНоменклатуры", ПолучитьЗначенияРазмераПоХарактеристике( ПартияСТК.Организация, ПродукцияПартии, ТекХарактеристика));
	
	Возврат СтруктураСвойств;
КонецФункции

Функция ПолучитьКраткоеПредставлениеРазмера( Знач Значение, Знач НД=Неопределено) Экспорт
	Стр = "";
	
	Если ЗначениеЗаполнено( Значение) тогда
		ТипХарактеристики = ТипЗнч( Значение);
		Если ТипХарактеристики = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров") тогда
			Стр = Значение.Владелец.КраткоеПредставлениеОУ;
			Стр = Стр + СокрЛП( Значение);
		иначеЕсли ТипХарактеристики = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") тогда
			Стр = Значение.Владелец.НоменклатураОЦМ_ск.ТипРазмера.КраткоеПредставлениеОУ;
			Стр = Стр + Строка( Значение.Размеры);
		КонецЕсли;
		
		Если не ЗначениеЗаполнено( Стр) тогда
			Стр = Строка( Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

Функция ПолучитьКраткоеПредставлениеСостояния( Знач Значение, Знач НД=Неопределено) Экспорт
	Стр = "";
	
	Если ЗначениеЗаполнено( Значение) тогда
		ТипСостояния = ТипЗнч( Значение);
		Если ТипСостояния = Тип("СправочникСсылка.СК_Состояния") тогда
			Стр = Значение.СостояниеСокрНаим;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено( Стр) тогда
			Стр = Строка( Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

Функция ПолучитьКраткоеПредставлениеНД( Знач Значение, Знач НД=Неопределено) Экспорт
	Стр = "";
	
	Если ЗначениеЗаполнено( Значение) тогда
		ТипНД = ТипЗнч( Значение);
		Если ТипНД = Тип("СправочникСсылка.СК_НДНаПродукцию") тогда
			Стр = Значение.ДляПредставления;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено( Стр) тогда
			Стр = Строка( Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

// ДополнениеИмениПараметр - Строка или Структура
//	в Структуре кроме результата ПолучитьИменаКолонокПоДополнениюИмени() должно быть установлено "ДополнениеИмени" от которого они получены. 
Функция ПолучитьПредставлениеКратко( ТекущиеДанные, ДополнениеИмениПараметр = "", ПредставленияПолучены = Ложь) Экспорт
	Стр = "";
	ДополнениеИмени = "";
	Если ТипЗнч( ДополнениеИмениПараметр) = Тип("Структура") тогда
		ИменаКолонок = ДополнениеИмениПараметр; 
		ДополнениеИмениПараметр.Свойство("ДополнениеИмени", ДополнениеИмени);
	иначе
		ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмениПараметр);
		ДополнениеИмени = ДополнениеИмениПараметр;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено тогда
		ПараметрыПредставления = Новый Структура("РазмерПредставление,СостояниеПредставление,НДПредставление,Дополнительно");
		
		Если ПредставленияПолучены тогда
			ПараметрыПредставления.РазмерПредставление = ТекущиеДанные["РазмерПредставление"+ДополнениеИмени];
			ПараметрыПредставления.СостояниеПредставление = ТекущиеДанные["СостояниеПредставление"+ДополнениеИмени];
			ПараметрыПредставления.НДПредставление = ТекущиеДанные["НДПредставление"+ДополнениеИмени];
			//ПараметрыПредставления.Дополнительно = ТекущиеДанные.Дополнительно;
		иначе
			попытка
				ПараметрыПредставления.РазмерПредставление = ПолучитьКраткоеПредставлениеРазмера( ТекущиеДанные[ ИменаКолонок.ХарактеристикаНоменклатуры]);
			исключение
				ПараметрыПредставления.РазмерПредставление = "";
			конецпопытки;
			попытка
				ПараметрыПредставления.СостояниеПредставление = ПолучитьКраткоеПредставлениеСостояния( ТекущиеДанные[ ИменаКолонок.Состояние]);
			исключение
				ПараметрыПредставления.СостояниеПредставление = "";
			КонецПопытки;
			
			Попытка
				ПараметрыПредставления.НДПредставление = ПолучитьКраткоеПредставлениеНД( ТекущиеДанные[ ИменаКолонок.Стандарт]);
			Исключение
				ПараметрыПредставления.НДПредставление = "";
			КонецПопытки;
			
			Попытка
				ДопНД = ТекущиеДанные[ ИменаКолонок.ДополнительныйНД];
			Исключение
				ДопНД = "";
			КонецПопытки;
			
			Если ЗначениеЗаполнено( ДопНД) тогда
				 ПараметрыПредставления.НДПредставление = ПараметрыПредставления.НДПредставление + " " +ПолучитьКраткоеПредставлениеНД( ДопНД);
			КонецЕсли;
			
			//ПараметрыПредставления.Дополнительно = ТекущиеДанные.Дополнительно;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( ПараметрыПредставления.РазмерПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.РазмерПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.СостояниеПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.СостояниеПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.НДПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.НДПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.Дополнительно) тогда
			Стр = Стр + " " + ПараметрыПредставления.Дополнительно;
		КонецЕсли;
		
		Стр = Сред( Стр, 2);
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

Функция ПолучитьПодразделениеВыпускаПоУчастку( ОбъектПодразделение) Экспорт
	Результат = Неопределено;
	
	Свойство = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_СоответствиеСкладовВыпуск_ОУ_Участок");
	Если ЗначениеЗаполнено( Свойство) тогда
		
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("Свойство", Свойство);
		Запр.УстановитьПараметр("Значение", ОбъектПодразделение);
		Запр.Текст = "ВЫБРАТЬ
		             |	ЗначенияСвойствОбъектов.Объект КАК Объект
		             |ИЗ
		             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		             |ГДЕ
		             |	ЗначенияСвойствОбъектов.Свойство = &Свойство
		             |	И ЗначенияСвойствОбъектов.Значение = &Значение
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Объект
		             |АВТОУПОРЯДОЧИВАНИЕ";
		
		РезультатЗ = Запр.Выполнить().Выбрать();
		Если РезультатЗ.Следующий() тогда
			Результат = РезультатЗ.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( Результат) тогда
		Результат = ОбъектПодразделение;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьУчастокПоПодразделениюВыпуска( ОбъектПодразделение) Экспорт
	Результат = Неопределено;
	
	Свойство = УГМК_СлужебныеФункции.ПолучитьНастройку("Свойство_СоответствиеСкладовВыпуск_ОУ_Участок");
	Если ЗначениеЗаполнено( Свойство) тогда
		
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("Свойство", Свойство);
		Запр.УстановитьПараметр("Объект", ОбъектПодразделение);
		Запр.Текст = "ВЫБРАТЬ
		             |	ЗначенияСвойствОбъектов.Значение КАК Значение
		             |ИЗ
		             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		             |ГДЕ
		             |	ЗначенияСвойствОбъектов.Свойство = &Свойство
		             |	И ЗначенияСвойствОбъектов.Объект = &Объект
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Объект
		             |АВТОУПОРЯДОЧИВАНИЕ";
		
		РезультатЗ = Запр.Выполнить().Выбрать();
		Если РезультатЗ.Следующий() тогда
			Результат = РезультатЗ.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( Результат) тогда
		Результат = ОбъектПодразделение;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьВозможныеПодразделенияДляВыпуска( Подразделение) Экспорт
	Подразделения = Новый Массив;
	Подразделения.Добавить( Подразделение);
	
	Участок = УГМК_ОперативныйУчетВызовСервера.ПолучитьУчастокПоПодразделениюВыпуска( Подразделение);
	Если Подразделения.Найти( Участок) = Неопределено тогда
		Подразделения.Добавить( Участок);
	КонецЕсли;
	Участок = УГМК_ОперативныйУчетВызовСервера.ПолучитьПодразделениеВыпускаПоУчастку( Подразделение);
	Если Подразделения.Найти( Участок) = Неопределено тогда
		Подразделения.Добавить( Участок);
	КонецЕсли;
	
	Возврат( Подразделения);
КонецФункции

Функция ПолучитьПеремещаемыеПараметрыПодборФондов( Знач Подразделение, Знач ТабЧасть, ДополнениеИмени="") Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//ПараметрыФ=Новый Структура;
	//
	//ПараметрыФ.Вставить("ЗаполнятьТабличнуюЧасть", ТабЧасть.Выгрузить());
	//
	//ИменаРеквизитов = Новый Структура;
	//Если ДополнениеИмени = "Продукции" тогда
	//	ИменаРеквизитов.Вставить("Номенклатура","Продукция");
	//	ИменаРеквизитов.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаПродукции");
	//	ИменаРеквизитов.Вставить("СерияНоменклатуры","");
	//	ИменаРеквизитов.Вставить("ЕдиницаИзмеренияМест","ЕдиницаИзмеренияМестПродукции");
	//	ИменаРеквизитов.Вставить("КоличествоМест","КоличествоМестПродукции");
	//	ИменаРеквизитов.Вставить("ЕдиницаИзмерения","ЕдиницаИзмеренияПродукции");
	//	ИменаРеквизитов.Вставить("Коэффициент","КоэффициентПродукции");
	//	ИменаРеквизитов.Вставить("Количество","КоличествоПродукции");
	//	ИменаРеквизитов.Вставить("Заказ","ЗаказПродукции");
	//	ИменаРеквизитов.Вставить("ЗаказВыпуска","ЗаказВыпускаПродукции");
	//	ИменаРеквизитов.Вставить("Качество","");

	//	ИменаРеквизитов.Вставить("СквознойНомер","СквознойНомер");
	//	ИменаРеквизитов.Вставить("ЗаказРезерв","");
	//	ИменаРеквизитов.Вставить("УГМК_ЯчейкаСклада","");
	//	ИменаРеквизитов.Вставить("Дополнительно","Дополнительно");
	//	ИменаРеквизитов.Вставить("СтатусПартии","");
	//иначе
	//	ИменаРеквизитов.Вставить("Номенклатура","Номенклатура");
	//	ИменаРеквизитов.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаНоменклатуры");
	//	ИменаРеквизитов.Вставить("СерияНоменклатуры","");
	//	ИменаРеквизитов.Вставить("ЕдиницаИзмеренияМест","ЕдиницаИзмеренияМест");
	//	ИменаРеквизитов.Вставить("КоличествоМест","КоличествоМест");
	//	ИменаРеквизитов.Вставить("ЕдиницаИзмерения","ЕдиницаИзмерения");
	//	ИменаРеквизитов.Вставить("Коэффициент","Коэффициент");
	//	ИменаРеквизитов.Вставить("Количество","Количество");
	//	ИменаРеквизитов.Вставить("Заказ","Заказ");
	//	ИменаРеквизитов.Вставить("ЗаказВыпуска","ЗаказВыпуска");
	//	ИменаРеквизитов.Вставить("Качество","");

	//	ИменаРеквизитов.Вставить("СквознойНомер","СквознойНомер");
	//	ИменаРеквизитов.Вставить("ЗаказРезерв","");
	//	ИменаРеквизитов.Вставить("УГМК_ЯчейкаСклада","");
	//	ИменаРеквизитов.Вставить("Дополнительно","Дополнительно");
	//	ИменаРеквизитов.Вставить("СтатусПартии","");
	//КонецЕсли;
	//
	//ПараметрыФ.Вставить("ИменаРеквизитов", ИменаРеквизитов);
	//ПараметрыФ.Вставить("Подразделение", УГМК_ОперативныйУчетВызовСервера.ПолучитьПодразделениеВыпускаПоУчастку( Подразделение));
	//
	//Результат = Новый Структура;
	//Результат.Вставить("ПараметрыОЛЕ", ЗначениеВСтрокуВнутр( ПараметрыФ));
	//Результат.Вставить("ЭтоОУ", УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияОперативногоУчета());

	//Возврат( Результат);
КонецФункции

Функция ПроверитьНаличиеВсехКолонок( ТаблицаПоиска, Добавлены, ДополнениеИмени = "")
	Мета = Метаданные.РегистрыСведений.УГМК_ОписаниеМеталла;
	Для каждого Измерение из Мета.Измерения цикл
		ИзмерениеИмя = Измерение.Имя + ДополнениеИмени;
		Если ТаблицаПоиска.Колонки.Найти( ИзмерениеИмя) = Неопределено тогда
			Добавлены.Добавить( ИзмерениеИмя);
			ТаблицаПоиска.Колонки.Добавить( ИзмерениеИмя, Измерение.Тип)
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Добавлены)
КонецФункции

Процедура ЗаполнитьИзЗначенияРазмера( Строка, ЗначениеРазмера, Номер, Добавлены, ДополнениеИмени = "")
	Имя = "Размер"+Номер;
	ИмяМин = Имя+"Минимальный"+ДополнениеИмени;
	ИмяМакс = Имя+"Максимальный"+ДополнениеИмени;
	Если Добавлены.Найти( ИмяМин) <> Неопределено тогда
		Строка[ ИмяМин] = ЗначениеРазмера[ Имя];
	КонецЕсли;
	Если Добавлены.Найти( ИмяМакс) <> Неопределено тогда
		Строка[ ИмяМакс] = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьКлючиОписанияМеталла( Организация, ТаблицаДанных, Знач ИмяКлючаМатериалы="КлючОписанияМеталла", Знач ИмяКлючаПродукция="КлючОписанияМеталлаПродукции", Знач Создавать=Ложь) Экспорт
	СторонаМатериалы = ЗначениеЗаполнено( ИмяКлючаМатериалы);
	СторонаПродукция = ЗначениеЗаполнено( ИмяКлючаПродукция);
	
	Если не (СторонаМатериалы или СторонаПродукция) тогда
		Возврат;
	ИначеЕсли ТаблицаДанных.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	// ключи пока создаются только в УПП
	Если ЭтоКонфигурацияОперативногоУчета() тогда
		Создавать = Ложь;
	КонецЕсли;
	
	ТаблицаПоиска = ТаблицаДанных.Скопировать();
	ТаблицаПоиска.Колонки.Добавить("_ИсходныйИндексСтроки_", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 5, 0));
	Добавлены = Новый Массив;
	
	Если СторонаМатериалы тогда
		ЕстьХарактеристикаМ = ТаблицаПоиска.Колонки.Найти("Характеристика") <> Неопределено;
		ПроверитьНаличиеВсехКолонок( ТаблицаПоиска, Добавлены, "");
		ЕстьХарактеристикаНоменклатуры = ТаблицаПоиска.Колонки.Найти("ХарактеристикаНоменклатуры") <> Неопределено;
		
		Для каждого СтрокаМ из ТаблицаПоиска цикл
			Если не ЕстьХарактеристикаМ и ЕстьХарактеристикаНоменклатуры тогда
				СтрокаМ.Характеристика = СтрокаМ.ХарактеристикаНоменклатуры;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьХарактеристикаМ = ЕстьХарактеристикаМ или ЕстьХарактеристикаНоменклатуры;
	иначе
		ЕстьХарактеристикаМ = Ложь;
	КонецЕсли;
	Если СторонаПродукция тогда
		ЕстьХарактеристикаП = ТаблицаПоиска.Колонки.Найти("ХарактеристикаПродукции") <> Неопределено;
		ПроверитьНаличиеВсехКолонок( ТаблицаПоиска, Добавлены, "Продукции");
	иначе
		ЕстьХарактеристикаП = Ложь;
	КонецЕсли;

	ТипЗначенияРазмеров = Тип("СправочникСсылка.УГМК_ЗначенияРазмеров");
	КешДанныхМеталла = Новый Соответствие;
	
	Для каждого Строка из ТаблицаПоиска цикл
		Строка._ИсходныйИндексСтроки_ = ТаблицаПоиска.Индекс( Строка);
		Если ЕстьХарактеристикаМ тогда
			ДанныеМеталла = КешДанныхМеталла.Получить( Строка.Номенклатура);
			Если не ЗначениеЗаполнено( Строка.МаркаСплава) тогда
				Строка.МаркаСплава = УГМК_ОперативныйУчет.ПолучитьМаркуСплаваПоЗначению( Строка.Номенклатура, ДанныеМеталла);
			КонецЕсли;
			Если не ЗначениеЗаполнено( Строка.ГруппаПродукции) тогда
				Строка.ГруппаПродукции = УГМК_ОперативныйУчет.ПолучитьГруппуПродукцииПоЗначению( Строка.Номенклатура, ДанныеМеталла);
			КонецЕсли;
			Если не ЗначениеЗаполнено( Строка.Состояние) тогда
				Строка.Состояние = УГМК_ОперативныйУчет.ПолучитьСостояниеПоЗначению( Строка.Номенклатура, ДанныеМеталла);
			КонецЕсли;
			Если ДанныеМеталла <> Неопределено тогда
				КешДанныхМеталла.Вставить( Строка.Номенклатура, ДанныеМеталла);
			КонецЕсли;
		
			Характеристика = ПолучитьЗначенияРазмераПоХарактеристике( Организация, Строка.Номенклатура, Строка.Характеристика);
			Если ТипЗнч( Характеристика) = ТипЗначенияРазмеров тогда
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 1, Добавлены);
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 2, Добавлены);
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 3, Добавлены);
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 4, Добавлены);
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 5, Добавлены);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьХарактеристикаП тогда
			ДанныеМеталла = КешДанныхМеталла.Получить( Строка.Продукция);
			Если не ЗначениеЗаполнено( Строка.МаркаСплаваПродукции) тогда
				Строка.МаркаСплаваПродукции = УГМК_ОперативныйУчет.ПолучитьМаркуСплаваПоЗначению( Строка.Продукция, ДанныеМеталла);
			КонецЕсли;
			Если не ЗначениеЗаполнено( Строка.ГруппаПродукцииПродукции) тогда
				Строка.ГруппаПродукцииПродукции = УГМК_ОперативныйУчет.ПолучитьГруппуПродукцииПоЗначению( Строка.Продукция, ДанныеМеталла);
			КонецЕсли;
			Если не ЗначениеЗаполнено( Строка.СостояниеПродукции) тогда
				Строка.СостояниеПродукции = УГМК_ОперативныйУчет.ПолучитьСостояниеПоЗначению( Строка.Продукция, ДанныеМеталла);
			КонецЕсли;
			Если ДанныеМеталла <> Неопределено тогда
				КешДанныхМеталла.Вставить( Строка.Номенклатура, ДанныеМеталла);
			КонецЕсли;
		
			Характеристика = ПолучитьЗначенияРазмераПоХарактеристике( Организация, Строка.Продукция, Строка.ХарактеристикаПродукции);
			Если ТипЗнч( Характеристика) = ТипЗначенияРазмеров тогда
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 1, Добавлены, "Продукции");
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 2, Добавлены, "Продукции");
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 3, Добавлены, "Продукции");
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 4, Добавлены, "Продукции");
				ЗаполнитьИзЗначенияРазмера( Строка, Характеристика, 5, Добавлены, "Продукции");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаПоиска);

	Если СторонаМатериалы и СторонаПродукция тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДанных._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	ТаблицаДанных.МаркаСплава КАК МаркаСплава,
		               |	ТаблицаДанных.ГруппаПродукции КАК ГруппаПродукции,
		               |	ТаблицаДанных.ХарактеристикаНоменклатуры КАК Характеристика,
		               |	ТаблицаДанных.Размер1Минимальный,
		               |	ТаблицаДанных.Размер1Максимальный,
		               |	ТаблицаДанных.Размер2Минимальный,
		               |	ТаблицаДанных.Размер2Максимальный,
		               |	ТаблицаДанных.Размер3Минимальный,
		               |	ТаблицаДанных.Размер3Максимальный,
		               |	ТаблицаДанных.Размер4Минимальный,
		               |	ТаблицаДанных.Размер4Максимальный,
		               |	ТаблицаДанных.Размер5Минимальный,
		               |	ТаблицаДанных.Размер5Максимальный,
		               |	ТаблицаДанных.Состояние КАК Состояние,
		               |	ТаблицаДанных.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
		               |	ТаблицаДанных.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
		               |	ТаблицаДанных.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		               |	ТаблицаДанных.Размер1МинимальныйПродукции,
		               |	ТаблицаДанных.Размер1МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер2МинимальныйПродукции,
		               |	ТаблицаДанных.Размер2МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер3МинимальныйПродукции,
		               |	ТаблицаДанных.Размер3МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер4МинимальныйПродукции,
		               |	ТаблицаДанных.Размер4МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер5МинимальныйПродукции,
		               |	ТаблицаДанных.Размер5МаксимальныйПродукции,
		               |	ТаблицаДанных.СостояниеПродукции КАК СостояниеПродукции
		               |ПОМЕСТИТЬ ВТДанные
		               |ИЗ
		               |	&ТаблицаДанных КАК ТаблицаДанных
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	Данные.МаркаСплава,
		               |	Данные.ГруппаПродукции,
		               |	Данные.Характеристика,
		               |	Данные.Размер1Минимальный,
		               |	Данные.Размер1Максимальный,
		               |	Данные.Размер2Минимальный,
		               |	Данные.Размер2Максимальный,
		               |	Данные.Размер3Минимальный,
		               |	Данные.Размер3Максимальный,
		               |	Данные.Размер4Минимальный,
		               |	Данные.Размер4Максимальный,
		               |	Данные.Размер5Минимальный,
		               |	Данные.Размер5Максимальный,
		               |	Данные.Состояние,
		               |	ОписаниеМеталла.КлючОписанияМеталла КАК КлючОписанияМеталла,
		               |	Данные.МаркаСплаваПродукции,
		               |	Данные.ГруппаПродукцииПродукции,
		               |	Данные.ХарактеристикаПродукции,
		               |	Данные.Размер1МинимальныйПродукции,
		               |	Данные.Размер1МаксимальныйПродукции,
		               |	Данные.Размер2МинимальныйПродукции,
		               |	Данные.Размер2МаксимальныйПродукции,
		               |	Данные.Размер3МинимальныйПродукции,
		               |	Данные.Размер3МаксимальныйПродукции,
		               |	Данные.Размер4МинимальныйПродукции,
		               |	Данные.Размер4МаксимальныйПродукции,
		               |	Данные.Размер5МинимальныйПродукции,
		               |	Данные.Размер5МаксимальныйПродукции,
		               |	Данные.СостояниеПродукции,
		               |	ОписаниеМеталлаПродукции.КлючОписанияМеталла КАК КлючОписанияМеталлаПродукции
		               |ИЗ
		               |	ВТДанные КАК Данные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталла
		               |		ПО Данные.МаркаСплава = ОписаниеМеталла.МаркаСплава
		               |			И Данные.ГруппаПродукции = ОписаниеМеталла.ГруппаПродукции
		               |			И Данные.Характеристика = ОписаниеМеталла.Характеристика
		               |			И Данные.Размер1Минимальный = ОписаниеМеталла.Размер1Минимальный
		               |			И Данные.Размер1Максимальный = ОписаниеМеталла.Размер1Максимальный
		               |			И Данные.Размер2Минимальный = ОписаниеМеталла.Размер2Минимальный
		               |			И Данные.Размер2Максимальный = ОписаниеМеталла.Размер2Максимальный
		               |			И Данные.Размер3Минимальный = ОписаниеМеталла.Размер3Минимальный
		               |			И Данные.Размер3Максимальный = ОписаниеМеталла.Размер3Максимальный
		               |			И Данные.Размер4Минимальный = ОписаниеМеталла.Размер4Минимальный
		               |			И Данные.Размер4Максимальный = ОписаниеМеталла.Размер4Максимальный
		               |			И Данные.Размер5Минимальный = ОписаниеМеталла.Размер5Минимальный
		               |			И Данные.Размер5Максимальный = ОписаниеМеталла.Размер5Максимальный
		               |			И Данные.Состояние = ОписаниеМеталла.Состояние
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталлаПродукции
		               |		ПО Данные.МаркаСплаваПродукции = ОписаниеМеталлаПродукции.МаркаСплава
		               |			И Данные.ГруппаПродукцииПродукции = ОписаниеМеталлаПродукции.ГруппаПродукции
		               |			И Данные.ХарактеристикаПродукции = ОписаниеМеталлаПродукции.Характеристика
		               |			И Данные.Размер1МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер1Минимальный
		               |			И Данные.Размер1МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер1Максимальный
		               |			И Данные.Размер2МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер2Минимальный
		               |			И Данные.Размер2МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер2Максимальный
		               |			И Данные.Размер3МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер3Минимальный
		               |			И Данные.Размер3МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер3Максимальный
		               |			И Данные.Размер4МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер4Минимальный
		               |			И Данные.Размер4МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер4Максимальный
		               |			И Данные.Размер5МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер5Минимальный
		               |			И Данные.Размер5МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер5Максимальный
		               |			И Данные.СостояниеПродукции = ОписаниеМеталлаПродукции.Состояние";
	иначеЕсли СторонаПродукция тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДанных._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	ТаблицаДанных.МаркаСплаваПродукции КАК МаркаСплаваПродукции,
		               |	ТаблицаДанных.ГруппаПродукцииПродукции КАК ГруппаПродукцииПродукции,
		               |	ТаблицаДанных.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		               |	ТаблицаДанных.Размер1МинимальныйПродукции,
		               |	ТаблицаДанных.Размер1МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер2МинимальныйПродукции,
		               |	ТаблицаДанных.Размер2МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер3МинимальныйПродукции,
		               |	ТаблицаДанных.Размер3МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер4МинимальныйПродукции,
		               |	ТаблицаДанных.Размер4МаксимальныйПродукции,
		               |	ТаблицаДанных.Размер5МинимальныйПродукции,
		               |	ТаблицаДанных.Размер5МаксимальныйПродукции,
		               |	ТаблицаДанных.СостояниеПродукции КАК СостояниеПродукции
		               |ПОМЕСТИТЬ ВТДанные
		               |ИЗ
		               |	&ТаблицаДанных КАК ТаблицаДанных
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	Данные.МаркаСплаваПродукции,
		               |	Данные.ГруппаПродукцииПродукции,
		               |	Данные.ХарактеристикаПродукции,
		               |	Данные.Размер1МинимальныйПродукции,
		               |	Данные.Размер1МаксимальныйПродукции,
		               |	Данные.Размер2МинимальныйПродукции,
		               |	Данные.Размер2МаксимальныйПродукции,
		               |	Данные.Размер3МинимальныйПродукции,
		               |	Данные.Размер3МаксимальныйПродукции,
		               |	Данные.Размер4МинимальныйПродукции,
		               |	Данные.Размер4МаксимальныйПродукции,
		               |	Данные.Размер5МинимальныйПродукции,
		               |	Данные.Размер5МаксимальныйПродукции,
		               |	Данные.СостояниеПродукции,
		               |	ОписаниеМеталлаПродукции.КлючОписанияМеталла КАК КлючОписанияМеталлаПродукции
		               |ИЗ
		               |	ВТДанные КАК Данные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталлаПродукции
		               |		ПО Данные.МаркаСплаваПродукции = ОписаниеМеталлаПродукции.МаркаСплава
		               |			И Данные.ГруппаПродукцииПродукции = ОписаниеМеталлаПродукции.ГруппаПродукции
		               |			И Данные.ХарактеристикаПродукции = ОписаниеМеталлаПродукции.Характеристика
		               |			И Данные.Размер1МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер1Минимальный
		               |			И Данные.Размер1МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер1Максимальный
		               |			И Данные.Размер2МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер2Минимальный
		               |			И Данные.Размер2МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер2Максимальный
		               |			И Данные.Размер3МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер3Минимальный
		               |			И Данные.Размер3МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер3Максимальный
		               |			И Данные.Размер4МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер4Минимальный
		               |			И Данные.Размер4МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер4Максимальный
		               |			И Данные.Размер5МинимальныйПродукции = ОписаниеМеталлаПродукции.Размер5Минимальный
		               |			И Данные.Размер5МаксимальныйПродукции = ОписаниеМеталлаПродукции.Размер5Максимальный
		               |			И Данные.СостояниеПродукции = ОписаниеМеталлаПродукции.Состояние";
	иначе 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДанных._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	ТаблицаДанных.МаркаСплава КАК МаркаСплава,
		               |	ТаблицаДанных.ГруппаПродукции КАК ГруппаПродукции,
		               |	ТаблицаДанных.ХарактеристикаНоменклатуры КАК Характеристика,
		               |	ТаблицаДанных.Размер1Минимальный,
		               |	ТаблицаДанных.Размер1Максимальный,
		               |	ТаблицаДанных.Размер2Минимальный,
		               |	ТаблицаДанных.Размер2Максимальный,
		               |	ТаблицаДанных.Размер3Минимальный,
		               |	ТаблицаДанных.Размер3Максимальный,
		               |	ТаблицаДанных.Размер4Минимальный,
		               |	ТаблицаДанных.Размер4Максимальный,
		               |	ТаблицаДанных.Размер5Минимальный,
		               |	ТаблицаДанных.Размер5Максимальный,
		               |	ТаблицаДанных.Состояние КАК Состояние
		               |ПОМЕСТИТЬ ВТДанные
		               |ИЗ
		               |	&ТаблицаДанных КАК ТаблицаДанных
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные._ИсходныйИндексСтроки_ КАК _ИсходныйИндексСтроки_,
		               |	Данные.МаркаСплава,
		               |	Данные.ГруппаПродукции,
		               |	Данные.Характеристика,
		               |	Данные.Размер1Минимальный,
		               |	Данные.Размер1Максимальный,
		               |	Данные.Размер2Минимальный,
		               |	Данные.Размер2Максимальный,
		               |	Данные.Размер3Минимальный,
		               |	Данные.Размер3Максимальный,
		               |	Данные.Размер4Минимальный,
		               |	Данные.Размер4Максимальный,
		               |	Данные.Размер5Минимальный,
		               |	Данные.Размер5Максимальный,
		               |	Данные.Состояние,
		               |	ОписаниеМеталла.КлючОписанияМеталла КАК КлючОписанияМеталла
		               |ИЗ
		               |	ВТДанные КАК Данные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УГМК_ОписаниеМеталла КАК ОписаниеМеталла
		               |		ПО Данные.МаркаСплава = ОписаниеМеталла.МаркаСплава
		               |			И Данные.ГруппаПродукции = ОписаниеМеталла.ГруппаПродукции
		               |			И Данные.Характеристика = ОписаниеМеталла.Характеристика
		               |			И Данные.Размер1Минимальный = ОписаниеМеталла.Размер1Минимальный
		               |			И Данные.Размер1Максимальный = ОписаниеМеталла.Размер1Максимальный
		               |			И Данные.Размер2Минимальный = ОписаниеМеталла.Размер2Минимальный
		               |			И Данные.Размер2Максимальный = ОписаниеМеталла.Размер2Максимальный
		               |			И Данные.Размер3Минимальный = ОписаниеМеталла.Размер3Минимальный
		               |			И Данные.Размер3Максимальный = ОписаниеМеталла.Размер3Максимальный
		               |			И Данные.Размер4Минимальный = ОписаниеМеталла.Размер4Минимальный
		               |			И Данные.Размер4Максимальный = ОписаниеМеталла.Размер4Максимальный
		               |			И Данные.Размер5Минимальный = ОписаниеМеталла.Размер5Минимальный
		               |			И Данные.Размер5Максимальный = ОписаниеМеталла.Размер5Максимальный
		               |			И Данные.Состояние = ОписаниеМеталла.Состояние";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Истина);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаРезультат Из ТаблРезультат Цикл
		Если Создавать и СторонаМатериалы и (СтрокаРезультат.КлючОписанияМеталла=NULL) Тогда
			Запись=РегистрыСведений.УГМК_ОписаниеМеталла.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись,СтрокаРезультат);
			
			ЗаписьПроверка=РегистрыСведений.УГМК_ОписаниеМеталла.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьПроверка,Запись);
			ЗаписьПроверка.Прочитать();
			Если ЗначениеЗаполнено(ЗаписьПроверка.КлючОписанияМеталла) Тогда
				СтрокаРезультат.КлючОписанияМеталла=ЗаписьПроверка.КлючОписанияМеталла;
			Иначе
				КлючОписанияМеталла=Справочники.УГМК_КлючиОписанияМеталла.СоздатьЭлемент();
				КлючОписанияМеталла.Наименование=Строка(Запись.МаркаСплава)+" "+Строка(Запись.ГруппаПродукции)+" "+Строка(Запись.Характеристика)+" "+Строка(Запись.Состояние);
				КлючОписанияМеталла.Записать();
				Запись.КлючОписанияМеталла=КлючОписанияМеталла.Ссылка;
				Запись.Записать();
				СтрокаРезультат.КлючОписанияМеталла=Запись.КлючОписанияМеталла;
			КонецЕсли;
		КонецЕсли;
		Если Создавать и СторонаПродукция и (СтрокаРезультат.КлючОписанияМеталлаПродукции=NULL) Тогда
			Запись=РегистрыСведений.УГМК_ОписаниеМеталла.СоздатьМенеджерЗаписи();
			Запись.МаркаСплава=СтрокаРезультат.МаркаСплаваПродукции;
			Запись.ГруппаПродукции=СтрокаРезультат.ГруппаПродукцииПродукции;
			Запись.Характеристика=СтрокаРезультат.ХарактеристикаПродукции;
			Запись.Размер1Минимальный=СтрокаРезультат.Размер1МинимальныйПродукции;
			Запись.Размер1Максимальный=СтрокаРезультат.Размер1МаксимальныйПродукции;
			Запись.Размер2Минимальный=СтрокаРезультат.Размер2МинимальныйПродукции;
			Запись.Размер2Максимальный=СтрокаРезультат.Размер2МаксимальныйПродукции;
			Запись.Размер3Минимальный=СтрокаРезультат.Размер3МинимальныйПродукции;
			Запись.Размер3Максимальный=СтрокаРезультат.Размер3МаксимальныйПродукции;
			Запись.Размер4Минимальный=СтрокаРезультат.Размер4МинимальныйПродукции;
			Запись.Размер4Максимальный=СтрокаРезультат.Размер4МаксимальныйПродукции;
			Запись.Размер5Минимальный=СтрокаРезультат.Размер5МинимальныйПродукции;
			Запись.Размер5Максимальный=СтрокаРезультат.Размер5МаксимальныйПродукции;
			Запись.Состояние=СтрокаРезультат.СостояниеПродукции;
			
			ЗаписьПроверка=РегистрыСведений.УГМК_ОписаниеМеталла.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьПроверка,Запись);
			ЗаписьПроверка.Прочитать();
			Если ЗначениеЗаполнено(ЗаписьПроверка.КлючОписанияМеталла) Тогда
				СтрокаРезультат.КлючОписанияМеталлаПродукции=ЗаписьПроверка.КлючОписанияМеталла;
			Иначе
				КлючОписанияМеталла=Справочники.УГМК_КлючиОписанияМеталла.СоздатьЭлемент();
				КлючОписанияМеталла.Наименование=Строка(Запись.МаркаСплава)+" "+Строка(Запись.ГруппаПродукции)+" "+Строка(Запись.Характеристика)+" "+Строка(Запись.Состояние);
				КлючОписанияМеталла.Записать();
				Запись.КлючОписанияМеталла=КлючОписанияМеталла.Ссылка;
				Запись.Записать();
				СтрокаРезультат.КлючОписанияМеталлаПродукции=Запись.КлючОписанияМеталла;
			КонецЕсли;
		КонецЕсли;
		
		ИсходнаяСтрока = ТаблицаДанных[ СтрокаРезультат._ИсходныйИндексСтроки_];
		Если СторонаМатериалы тогда
			ИсходнаяСтрока[ ИмяКлючаМатериалы] = СтрокаРезультат.КлючОписанияМеталла;
		КонецЕсли;
		Если СторонаПродукция тогда
			ИсходнаяСтрока[ ИмяКлючаПродукция] = СтрокаРезультат.КлючОписанияМеталлаПродукции;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим( Ложь);
КонецПроцедуры

Функция ПолучитьОписаниеСхемыПоОбразцу( ОбразецСсылка) Экспорт
	
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",ОбразецСсылка);
	 
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДокументФактПродукция.Ссылка.Организация КАК Организация,
	             |	УГМК_ДокументФактПродукция.Ссылка.Подразделение КАК Подразделение,
	             |	УГМК_ДокументФактПродукция.Ссылка.ДляПредставления КАК ДляПредставления,
	             |	УГМК_ДокументФактПродукция.Ссылка.Дата КАК Дата,
	             |	УГМК_ДокументФактПродукция.Ссылка.Номер КАК Номер,
	             |	УГМК_ДокументФактПродукция.Ссылка.РабочийЦентр КАК РабочийЦентр,
	             |	УГМК_ДокументФактПродукция.Ссылка.Оснастка1 КАК Оснастка,
	             |	УГМК_ДокументФактПродукция.Ссылка.РежимРабочегоЦентра КАК РежимРаботыРабочегоЦентра,
	             |	УГМК_ДокументФактПродукция.Продукция,
	             |	ИСТИНА КАК ПоСвойствамПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции,
	             |	УГМК_ДокументФактПродукция.СерияПродукции,
	             |	УГМК_ДокументФактПродукция.СостояниеПродукции,
	             |	УГМК_ДокументФактПродукция.ДопускИзготовления,
	             |	УГМК_ДокументФактПродукция.ДополнительнаяОперацияДо,
	             |	УГМК_ДокументФактПродукция.ДополнительнаяОперацияПосле,
	             |	УГМК_ДокументФактПродукция.Дополнительно,
	             |	УГМК_ДокументФактПродукция.ТехнологическаяОперация,
	             |	УГМК_ДокументФактПродукция.ВариантТехнологическойОперации,
	             |	УГМК_ДокументФактПродукция.ГруппаПродукцииПродукции,
	             |	ПРЕДСТАВЛЕНИЕ(УГМК_ДокументФактПродукция.ГруппаПродукцииПродукции) КАК ГруппаПродукцииПродукцииСтр,
	             |	УГМК_ДокументФактПродукция.ГруппаПродукцииПродукции.ДляПредставления КАК ДляПредставленияГруппаПродукции,
	             |	УГМК_ДокументФактПродукция.СтандартПродукции,
	             |	УГМК_ДокументФактПродукция.НДНаХимСоставПродукции,
	             |	УГМК_ДокументФактПродукция.МаркаСплаваПродукции,
	             |	УГМК_ДокументФактПродукция.ДополнительныйНДПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции.Размер1 КАК Размер1МинимальныйПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции.Размер2 КАК Размер2МинимальныйПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции.Размер3 КАК Размер3МинимальныйПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции.Размер4 КАК Размер4МинимальныйПродукции,
	             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции.Размер5 КАК Размер5МинимальныйПродукции,
	             |	0 КАК Размер1МаксимальныйПродукции,
	             |	0 КАК Размер2МаксимальныйПродукции,
	             |	0 КАК Размер3МаксимальныйПродукции,
	             |	0 КАК Размер4МаксимальныйПродукции,
	             |	0 КАК Размер5МаксимальныйПродукции,
	             |	УГМК_ДокументФактПродукция.Количество1Продукции,
	             |	УГМК_ДокументФактПродукция.КоличествоПродукции,
	             |	УГМК_ДокументФактПродукция.ЕдиницаИзмеренияПродукции
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	             |ГДЕ
	             |	УГМК_ДокументФактПродукция.Ссылка = &Ссылка
	             |	И УГМК_ДокументФактПродукция.НомерСтроки В
	             |			(ВЫБРАТЬ
	             |				МАКСИМУМ(УГМК_ДокументФактПродукция.НомерСтроки) КАК НомерСтроки
	             |			ИЗ
	             |				Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	             |			ГДЕ
	             |				УГМК_ДокументФактПродукция.Ссылка = &Ссылка
	             |			СГРУППИРОВАТЬ ПО
	             |						УГМК_ДокументФактПродукция.Ссылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УГМК_ДокументФактМатериалы.Ссылка.Организация КАК Организация,
	             |	УГМК_ДокументФактМатериалы.Ссылка.Подразделение КАК Подразделение,
	             |	УГМК_ДокументФактМатериалы.Ссылка.ДляПредставления КАК ДляПредставления,
	             |	УГМК_ДокументФактМатериалы.Ссылка.Дата КАК Дата,
	             |	УГМК_ДокументФактМатериалы.Ссылка.Номер КАК Номер,
	             |	УГМК_ДокументФактМатериалы.Ссылка.РабочийЦентр КАК РабочийЦентр,
	             |	УГМК_ДокументФактМатериалы.Ссылка.Оснастка1 КАК Оснастка,
	             |	УГМК_ДокументФактМатериалы.Ссылка.РежимРабочегоЦентра КАК РежимРаботыРабочегоЦентра,
	             |	УГМК_ДокументФактМатериалы.Номенклатура,
	             |	ИСТИНА КАК ПоСвойствам,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры,
	             |	УГМК_ДокументФактМатериалы.СерияНоменклатуры,
	             |	УГМК_ДокументФактМатериалы.Состояние,
	             |	УГМК_ДокументФактМатериалы.ДопускЗаготовки,
	             |	УГМК_ДокументФактМатериалы.ТехнологическаяОперация,
	             |	УГМК_ДокументФактМатериалы.ВариантТехнологическойОперации,
	             |	УГМК_ДокументФактМатериалы.ГруппаПродукции,
	             |	ПРЕДСТАВЛЕНИЕ(УГМК_ДокументФактМатериалы.ГруппаПродукции) КАК ГруппаПродукцииСтр,
	             |	УГМК_ДокументФактМатериалы.ГруппаПродукции.ДляПредставления КАК ДляПредставленияГруппа,
	             |	УГМК_ДокументФактМатериалы.Стандарт,
	             |	УГМК_ДокументФактМатериалы.НДНаХимСостав,
	             |	УГМК_ДокументФактМатериалы.МаркаСплава,
	             |	УГМК_ДокументФактМатериалы.ДополнительныйНД,
	             |	УГМК_ДокументФактМатериалы.Дополнительно,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры.Размер1 КАК Размер1Минимальный,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры.Размер2 КАК Размер2Минимальный,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры.Размер3 КАК Размер3Минимальный,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры.Размер4 КАК Размер4Минимальный,
	             |	УГМК_ДокументФактМатериалы.ХарактеристикаНоменклатуры.Размер5 КАК Размер5Минимальный,
	             |	0 КАК Размер1Максимальный,
	             |	0 КАК Размер2Максимальный,
	             |	0 КАК Размер3Максимальный,
	             |	0 КАК Размер4Максимальный,
	             |	0 КАК Размер5Максимальный,
	             |	УГМК_ДокументФактМатериалы.Количество1,
	             |	УГМК_ДокументФактМатериалы.Количество,
	             |	УГМК_ДокументФактМатериалы.ЕдиницаИзмерения
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт.Материалы КАК УГМК_ДокументФактМатериалы
	             |ГДЕ
	             |	УГМК_ДокументФактМатериалы.Ссылка = &Ссылка
	             |	И УГМК_ДокументФактМатериалы.НомерСтроки = 1";
				 
	Результат =  Запр.ВыполнитьПакет();
	
	ПродукцияДанные = Результат[ 0].Выгрузить();
	МатериалыДанные = Результат[ 1].Выгрузить();
	
	ДанныеСхемы = Новый Структура();
	ДанныеСхемы.Вставить("РабочийЦентр");
	ДанныеСхемы.Вставить("ВидОперации");
	ДанныеСхемы.Вставить("Оснастка");
	ДанныеСхемы.Вставить("РежимРаботыРабочегоЦентра");
	ДанныеСхемы.Вставить("КлючОписанияМеталлаЗаказ");
	ДанныеСхемы.Вставить("КлючОписанияМеталла");
	ДанныеСхемы.Вставить("КлючОписанияМеталлаПродукции");
	ДанныеСхемы.Вставить("ДляПоиска");
	ДанныеСхемы.Вставить("Действует");
	ДанныеСхемы.Вставить("Представление");
	ДанныеСхемы.Вставить("ПредставлениеМатериал");
	ДанныеСхемы.Вставить("ПредставлениеПродукции");
	ДанныеСхемы.Вставить("ГруппаПродукцииПредставление");
	ДанныеСхемы.Вставить("ГруппаПродукцииПредставлениеПродукции");
	//ДанныеСхемы.Вставить("ДатаИзменения");
	//ДанныеСхемы.Вставить("Ответственный");
	
	ДанныеСхемы.Вставить("Продукция");
	ДанныеСхемы.Вставить("ХарактеристикаПродукции");
	ДанныеСхемы.Вставить("СерияПродукции");
	ДанныеСхемы.Вставить("СостояниеПродукции");
	ДанныеСхемы.Вставить("ДопускИзготовления");
	ДанныеСхемы.Вставить("ДополнительнаяОперацияДо");
	ДанныеСхемы.Вставить("ДополнительнаяОперацияПосле");
	ДанныеСхемы.Вставить("Дополнительно");
	ДанныеСхемы.Вставить("ТехнологическаяОперация");
	ДанныеСхемы.Вставить("ВариантТехнологическойОперации");
	ДанныеСхемы.Вставить("ГруппаПродукцииПродукции");
	ДанныеСхемы.Вставить("СтандартПродукции");
	ДанныеСхемы.Вставить("НДНаХимСоставПродукции");
	ДанныеСхемы.Вставить("МаркаСплаваПродукции");
	ДанныеСхемы.Вставить("ДополнительныйНДПродукции");
	ДанныеСхемы.Вставить("КоличествоПродукции");
	ДанныеСхемы.Вставить("Количество1Продукции");
	
	ДанныеСхемы.Вставить("Номенклатура");
	ДанныеСхемы.Вставить("ХарактеристикаНоменклатуры");
	ДанныеСхемы.Вставить("СерияНоменклатуры");
	ДанныеСхемы.Вставить("Состояние");
	ДанныеСхемы.Вставить("ДопускЗаготовки");
	ДанныеСхемы.Вставить("ТехнологическаяОперация");
	ДанныеСхемы.Вставить("ВариантТехнологическойОперации");
	ДанныеСхемы.Вставить("ГруппаПродукции");
	ДанныеСхемы.Вставить("Стандарт");
	ДанныеСхемы.Вставить("НДНаХимСостав");
	ДанныеСхемы.Вставить("МаркаСплава");
	ДанныеСхемы.Вставить("ДополнительныйНД");
	ДанныеСхемы.Вставить("Дополнительно");
	ДанныеСхемы.Вставить("Количество");
	ДанныеСхемы.Вставить("Количество1");
	
	ДанныеСхемы.Вставить("Номер");
	ДанныеСхемы.Вставить("Дата");
	ДанныеСхемы.Вставить("ДляПредставления");
	ДанныеСхемы.Вставить("ПредставлениеОбразца");
	ДанныеСхемы.Вставить("Подразделение");
	
	Если МатериалыДанные.Количество() > 0 тогда
		МатериалыДанные.Колонки.Добавить("КлючОписанияМеталла");
		СтрокаМ = МатериалыДанные[ 0];
		УГМК_ОперативныйУчетВызовСервера.ПолучитьКлючиОписанияМеталла( СтрокаМ.Организация, МатериалыДанные, "КлючОписанияМеталла", "", Истина);
		ЗаполнитьЗначенияСвойств( ДанныеСхемы, СтрокаМ);
		
		Если ЗначениеЗаполнено( СтрокаМ.ДляПредставленияГруппа) тогда
			ДанныеСхемы.ГруппаПродукцииПредставление = СтрокаМ.ДляПредставленияГруппа;
		иначе
			ДанныеСхемы.ГруппаПродукцииПредставление = Строка( СтрокаМ.ГруппаПродукцииСтр);
		КонецЕсли;
		ДанныеСхемы.ПредставлениеМатериал = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( СтрокаМ, "", Ложь);
		ДанныеСхемы.ПредставлениеОбразца = Строка( ДанныеСхемы.Номер+" от "+Строка( ДанныеСхемы.Дата));
		ДанныеСхемы.Количество = ДанныеСхемы.Количество*УГМК_СлужебныйПовторноеИспользование.ПолучитьВесЕдиницыИзмерения( СтрокаМ.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ПродукцияДанные.Количество() > 0 тогда
		ПродукцияДанные.Колонки.Добавить("КлючОписанияМеталлаПродукции");
		СтрокаП = ПродукцияДанные[ 0];
		УГМК_ОперативныйУчетВызовСервера.ПолучитьКлючиОписанияМеталла( СтрокаП.Организация, ПродукцияДанные, "", "КлючОписанияМеталлаПродукции", Истина);
		ЗаполнитьЗначенияСвойств( ДанныеСхемы, СтрокаП);
		
		Если ЗначениеЗаполнено( СтрокаП.ДляПредставленияГруппаПродукции) тогда
			ДанныеСхемы.ГруппаПродукцииПредставлениеПродукции = СтрокаП.ДляПредставленияГруппаПродукции;
		иначе
			ДанныеСхемы.ГруппаПродукцииПредставлениеПродукции = Строка( СтрокаП.ГруппаПродукцииПродукцииСтр);
		КонецЕсли;
		ДанныеСхемы.ПредставлениеПродукции = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( СтрокаП, "Продукции", Ложь);
		
		Если не ЗначениеЗаполнено( ДанныеСхемы.ПредставлениеОбразца) тогда
			ДанныеСхемы.ПредставлениеОбразца = Строка( ДанныеСхемы.Номер+" от "+Строка( ДанныеСхемы.Дата));
		КонецЕсли;
		ДанныеСхемы.КоличествоПродукции = ДанныеСхемы.КоличествоПродукции*УГМК_СлужебныйПовторноеИспользование.ПолучитьВесЕдиницыИзмерения( СтрокаП.ЕдиницаИзмеренияПродукции);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено( ДанныеСхемы.ПредставлениеОбразца) тогда
		ДанныеСхемы.ПредставлениеОбразца = Строка( ОбразецСсылка.Номер+" от "+Строка( ОбразецСсылка.Дата));
	КонецЕсли;
		
	Возврат( ДанныеСхемы);
КонецФункции

Процедура ДействияПриИзмененииНоменклатуры_Сервер( ТекущиеДанные, ИменаКолонок) Экспорт
	Перем ДанныеМеталла;
	
	Если ТипЗнч( ТекущиеДанные[ ИменаКолонок.Номенклатура]) = Тип("СправочникСсылка.Номенклатура") тогда
		Если (не ЗначениеЗаполнено( ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения])) или 
			ТипЗнч( ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения]) <> Тип("СправочникСсылка.ЕдиницыИзмерения") или 
			ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения].Владелец <> ТекущиеДанные[ ИменаКолонок.Номенклатура] тогда
			Если ЗначениеЗаполнено( ТекущиеДанные[ ИменаКолонок.Номенклатура]) тогда
				ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения] = ТекущиеДанные[ ИменаКолонок.Номенклатура].ЕдиницаХраненияОстатков;
				ТекущиеДанные[ ИменаКолонок.Коэффициент] = ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения].Коэффициент;
				ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения1] = ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения];
			иначе
				ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения] = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
				ТекущиеДанные[ ИменаКолонок.Коэффициент] = 1;
				ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения1] = ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмерения];
			КонецЕсли;
		КонецЕсли;
		Если (не ЗначениеЗаполнено( ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмеренияМест])) или 
			ТипЗнч( ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмеренияМест]) <> Тип("СправочникСсылка.ЕдиницыИзмерения") или 
			ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмеренияМест].Владелец <> ТекущиеДанные[ ИменаКолонок.Номенклатура] тогда
			ТекущиеДанные[ ИменаКолонок.ЕдиницаИзмеренияМест] = ТекущиеДанные[ ИменаКолонок.Номенклатура].ЕдиницаИзмеренияМест;
		КонецЕсли;
	КонецЕсли;
	
	Если не ТекущиеДанные[ ИменаКолонок.ПоСвойствам] тогда
		ТекущиеДанные[ ИменаКолонок.ГруппаПродукции] = УГМК_ОперативныйУчет.ПолучитьГруппуПродукцииПоЗначению( ТекущиеДанные[ ИменаКолонок.Номенклатура], ДанныеМеталла);
		ТекущиеДанные[ ИменаКолонок.МаркаСплава] =  УГМК_ОперативныйУчет.ПолучитьМаркуСплаваПоЗначению( ТекущиеДанные[ ИменаКолонок.Номенклатура], ДанныеМеталла);
	КонецЕсли;
КонецПроцедуры

Функция ЭлементТараПлан() Экспорт
	Возврат( Справочники.УГМК_ТараТехнологическая.ПустаяСсылка());
КонецФункции

Функция ПолучитьДанныеЗаказа( СквознойНомер, ДатаПланирования, ЗначенияСвойствОбъекта, СвойствоДлина, ЗаказВыпуска) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено
	//Результат = Новый Структура;
	//Результат.Вставить("СквознойНомер");
	//Результат.Вставить("Размеры");
	//Результат.Вставить("Размер1");
	//Результат.Вставить("Размер2");
	//Результат.Вставить("Размер3");
	//Результат.Вставить("Размер4");
	//Результат.Вставить("Размер5");
	//Результат.Вставить("РазмерПрефикс","");
	//Результат.Вставить("РазмерДлина");
	//Результат.Вставить("Продукция");
	//Результат.Вставить("ХарактеристикаПродукции");
	//Результат.Вставить("Заказ");
	//Результат.Вставить("ЗаказВыпуска");
	//Результат.Вставить("Состояние");
	//Результат.Вставить("СостояниеКратко");
	//Результат.Вставить("Мерность");
	//Результат.Вставить("МерностьКратко");
	//Результат.Вставить("ГруппаПродукции");
	//Результат.Вставить("МаркаСплава");
	//Результат.Вставить("Стандарт");
	//Результат.Вставить("ДополнительныйНД");
	//Результат.Вставить("НДНаХимСостав");
	//Результат.Вставить("УсловноеОбозначение");
	//Результат.Вставить("МетодИзготовления");
	//Результат.Вставить("ФормаСечения");
	//Результат.Вставить("ТочностьИзготовления");
	//Результат.Вставить("ОсобыеУсловия");
	//Результат.Вставить("ТипРазмера");
	//Результат.Вставить("ПодгруппаТрудоемкости");
	//Результат.Вставить("ОбъединениеПоТехЦепочке");
	//Результат.Вставить("ОбъединениеПоПрокату");
	//Результат.Вставить("ПродукцияИД");
	//Результат.Вставить("Контрагент");
	//Результат.Вставить("ДоговорКонтрагента");
	//
	//ТипЧисло = Тип("Число");
	//
	//Если ЗначениеЗаполнено( СквознойНомер) тогда
	//	ДанныеЗаказа = УГМК_СлужебныеФункции.ПолучитьТаблицуЗаказовПоСквозномуНомеру( СквознойНомер, Истина, ДатаПланирования);
	//	Если ДанныеЗаказа <> Неопределено тогда
	//		СтрокаЗаказа = ДанныеЗаказа.Найти( ЗаказВыпуска, "ЗаказПоставщику");
	//	КонецЕсли;
	//	
	//	Если СтрокаЗаказа <> Неопределено тогда
	//		Результат.СквознойНомер = СтрокаЗаказа.СквознойНомер;
	//		Результат.Продукция = СтрокаЗаказа.Номенклатура;
	//		Результат.ХарактеристикаПродукции = СтрокаЗаказа.ХарактеристикаНоменклатуры;
	//		Результат.Заказ = СтрокаЗаказа.ЗаказПокупателя;
	//		Результат.ЗаказВыпуска = СтрокаЗаказа.ЗаказПоставщику;
	//		Результат.Контрагент = СтрокаЗаказа.Контрагент;
	//		Результат.ДоговорКонтрагента = СтрокаЗаказа.ДоговорКонтрагента;
	//		
	//		Если ЗначениеЗаполнено( Результат.ХарактеристикаПродукции) тогда
	//			Результат.Размеры = Результат.ХарактеристикаПродукции.Размеры;
	//			ЗначенияСвойствОбъекта.ОбъектОтбораЗначений = Результат.ХарактеристикаПродукции;
	//			
	//			ЗначенияСвойствОбъекта.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	//			ЗначенияСвойствОбъекта.ОбъектОтбораЗначений   = Результат.ХарактеристикаПродукции;
	//			ЗначенияСвойствОбъекта.ОбъектОтбораНазначений = Результат.Продукция;
	//			ЗначенияСвойствОбъекта.ПрочитатьЗаполнитьСвойстваИЗначения(Истина);
	//			ТаблицаРазмеров = ЗначенияСвойствОбъекта.СвойстваИЗначения;
	//			
	//			Ном = 1;
	//			Для каждого Строка из ТаблицаРазмеров цикл
	//				Если Строка.Свойство = СвойствоДлина тогда
	//					Результат.Вставить("РазмерДлина", Строка.Значение);
	//				иначеЕсли ЗначениеЗаполнено( Строка.Значение) и (ТипЗнч( Строка.Значение) = ТипЧисло) тогда
	//					Результат.Вставить("Размер"+Строка( Ном), Строка.Значение);
	//					Ном = Ном + 1;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено( Результат.Продукция) и ЗначениеЗаполнено( Результат.Продукция.НоменклатураОЦМ_ск) тогда
	//			НоменклатураОЦМ = Результат.Продукция.НоменклатураОЦМ_ск;
	//			ЗаполнитьЗначенияСвойств( Результат, НоменклатураОЦМ, "ГруппаПродукции,МаркаСплава,Стандарт,ДополнительныйНД,НДНаХимСостав,УсловноеОбозначение,МетодИзготовления,ФормаСечения,ТочностьИзготовления,Состояние,Мерность,ОсобыеУсловия,ПродукцияИД,ПодгруппаТрудоемкости,ОбъединениеПоТехЦепочке,ОбъединениеПоПрокату,ТипРазмера");
	//			Результат.Вставить("СостояниеКратко", УГМК_ОперативныйУчетВызовСервера.ПолучитьКраткоеПредставлениеСостояния( НоменклатураОЦМ.Состояние));
	//			Результат.Вставить("МерностьКратко", НоменклатураОЦМ.Мерность.МерностьСокрНаим);
	//			Результат.Вставить("РазмерПрефикс", НоменклатураОЦМ.ТипРазмера.КраткоеПредставлениеОУ);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Возврат( Результат)
КонецФункции

Функция ЗаполнитьАвтоматическиЕдиницыИзмеренияИКоличество1( Данные, Разделитель, ДополнениеИмени="") Экспорт
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	ИмяЕдиницаИзмерения = ИменаКолонок.ЕдиницаИзмерения;
	ИмяЕдиницаИзмерения1 = ИменаКолонок.ЕдиницаИзмерения1;
	ИмяЕдиницаИзмеренияМест = ИменаКолонок.ЕдиницаИзмеренияМест;
	
	Если Данные.Колонки.Найти("ЕдиницаИзмерения1_Распределение") = Неопределено тогда
		Данные.Колонки.Добавить("ЕдиницаИзмерения1_Распределение");
	КонецЕсли;
	
	ДействуетУправление_ЕдиницаИзмерения1 = УГМК_СлужебныеФункции.ПолучитьНастройку("ДействуетУправление_ЕдиницаИзмерения1") = Истина;
		
	УГМК_ОперативныйУчет.ПолучитьНастройкиТиповДляТаблицы( Данные, Разделитель, "ГруппаПродукции"+ДополнениеИмени);
	
	Для каждого Строка из Данные цикл
		Если не ЗначениеЗаполнено( Строка[ ИмяЕдиницаИзмеренияМест]) тогда
			Строка[ ИмяЕдиницаИзмеренияМест] = Неопределено;
		КонецЕсли;
		
		Если ДействуетУправление_ЕдиницаИзмерения1 тогда
			Если не ЗначениеЗаполнено( Строка[ ИмяЕдиницаИзмерения1]) тогда
				Если (Строка.Результат = Неопределено) или (не ЗначениеЗаполнено( Строка.Результат.ЕдиницаИзмерения1)) тогда
					Строка[ ИмяЕдиницаИзмерения1] = Строка[ ИмяЕдиницаИзмерения];
				иначе
					Строка[ ИмяЕдиницаИзмерения1] = Строка.Результат.ЕдиницаИзмерения1;
				КонецЕсли;
			иначеЕсли (Строка.Результат <> Неопределено) и ЗначениеЗаполнено( Строка.Результат.ЕдиницаИзмерения1) тогда
				Строка[ ИмяЕдиницаИзмерения1] = Строка.Результат.ЕдиницаИзмерения1;
			КонецЕсли;
		иначе
			Строка[ ИмяЕдиницаИзмерения1] = Строка[ ИмяЕдиницаИзмерения];
		КонецЕсли;
		
		Если УГМК_СлужебныеФункции.ВесоваяЕдиницаИзмерения( Строка[ ИмяЕдиницаИзмерения1]) и УГМК_СлужебныеФункции.ВесоваяЕдиницаИзмерения( Строка[ ИмяЕдиницаИзмерения]) тогда
			Строка[ ИмяЕдиницаИзмерения1] = Строка[ ИмяЕдиницаИзмерения];
		КонецЕсли;
		
		Строка.ЕдиницаИзмерения1_Распределение = Неопределено;
		Если ЗначениеЗаполнено( Строка[ ИмяЕдиницаИзмерения1]) и (не УГМК_СлужебныеФункции.ВесоваяЕдиницаИзмерения( Строка[ ИмяЕдиницаИзмерения1])) тогда
			Строка.ЕдиницаИзмерения1_Распределение = Строка[ ИмяЕдиницаИзмерения1];
		КонецЕсли;
			
		// Если весовое Количество1 и оно не заполнено то Брутто = Нетто
		Если (Строка[ ИменаКолонок.Количество1] = 0) и (Строка[ ИменаКолонок.ЕдиницаИзмерения] = Строка[ ИменаКолонок.ЕдиницаИзмерения1] или (не ЗначениеЗаполнено( Строка.ЕдиницаИзмерения1_Распределение))) тогда
			Строка[ ИменаКолонок.Количество1] = Строка[ ИменаКолонок.Количество];
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Данные)
КонецФункции

Функция ПолучитьТипХарактеристики( СтруктураДанных, Знач Организация = Неопределено) Экспорт
	Если Организация = Неопределено тогда
		Организация = УГМК_СлужебныеФункции.ПолучитьНастройку("ОрганизацияБазы");
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("Организация", Организация);
	ПараметрыВызова.Вставить("ТекущиеДанные", СтруктураДанных);
	ИмяРеквизита = "Характеристика";	
	
	Если СтруктураДанных = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.ПоСвойствам тогда
		ОпределяющийРеквизит = СтруктураДанных.ГруппаПродукции;
	иначе
		ОпределяющийРеквизит = СтруктураДанных.Номенклатура;
	КонецЕсли;
	
	Результат = УГМК_ОперативныйУчетВызовСервера.ХарактеристикаНачалоВыбора( ОпределяющийРеквизит, Истина, ИмяРеквизита, ПараметрыВызова);
	Возврат Результат;	
КонецФункции 

Функция ПолучитьПредставлениеБиркиФорматированное(СтруктураДанных,СписокСвойств=Неопределено,ТекущееСвойство=Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Перем ЗначениеСвойства, ТипПредставленияНаименования;
	//
	//Описание=Новый ФорматированныйДокумент;
	//Если ЗначениеЗаполнено(СтруктураДанных) Тогда
	//	
	//	Если Не СтруктураДанных.Свойство("ТипПредставленияНаименования", ТипПредставленияНаименования) Тогда
	//		ТипПредставленияНаименования = "Стандартное";
	//	КонецЕсли;
	//
	//	ЦветОбычный="background-color: #ffffff;";
	//	ЦветДоступный="background-color: #ffffb0;";
	//	ЦветТекущий="background-color: #ffffb0; text-decoration: underline;";
	//	РазмерШрифта1 = "14pt";
	//	РазмерШрифта2 = "12pt";
	//	
	//	Текст="<html>
	//		| <head>
	//		|  <meta charset=""utf-8"">
	//		|  <title>Описание бирки</title>
	//		|  <style type=""text/css"">
	//		//|  	body {font-family:  arial, verdana, sans-serif;}
	//		|   .block { 
	//		|	width: 200px; 
	//		|	background: #fc0; 
	//		|	padding: 5px; 
	//		|	border: solid 1px black; 
	//		|	float: left; 
	//		|	position: relative; 
	//		|	top: 40px; 
	//		|	left: -70px;
	//		|   }
	//		|  </style> 
	//		| </head>
	//		| <body>
	//		//|  <span style=""font-size: "+РазмерШрифта2+"; font-family: verdana, sans-serif;"">
	//		|";
	//	
	//	ПоСвойствам=Неопределено;
	//	Если Не СтруктураДанных.Свойство("ПоСвойствам",ПоСвойствам) Тогда
	//		ПоСвойствам=Ложь;
	//	КонецЕсли;
	//	
	//	Если (ТипПредставленияНаименования = "Кратко") тогда 
	//		//и СтруктураДанных.Свойство("Стандарт") и СтруктураДанных.Свойство("ДополнительныйНД") тогда
	//		ЦветСвойства = ЦветОбычный;
	//		
	//		ТекстПредставления = "";
	//		ЗнГруппаПродукции = Неопределено;
	//		ЗнМаркаСплава = Неопределено;

	//		Если СтруктураДанных.Свойство( "МаркаСплава", ЗнМаркаСплава) тогда 
	//			ТекстПредставления = ТекстПредставления + Строка( ЗнМаркаСплава)+Символы.Таб;
	//		иначе
	//			ТекстПредставления = ТекстПредставления + "?Марка?"+Символы.Таб;
	//		КонецЕсли;
	//		
	//		ТекстПредставления = ТекстПредставления + Строка( УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( СтруктураДанных, "", Ложь));
	//		Если СтруктураДанных.Свойство( "ГруппаПродукции", ЗнГруппаПродукции) тогда 
	//			ТекстПредставления = ТекстПредставления + " ["+ЗнГруппаПродукции+"]"
	//		КонецЕсли;
	//				
	//		Текст=Текст+"<p>";
	//		Текст = Текст+"<b><font size="""+РазмерШрифта1+"""><span style='"+ЦветСвойства+"'>"+ТекстПредставления+"</span></font></b>"; 
	//		Текст=Текст+"</p>";
	//	иначе
	//		Если ПоСвойствам Тогда
	//			Текст=Текст+"<p>";
	//			ИмяСвойства="ГруппаПродукции";
	//			СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//			Если ИмяСвойства=ТекущееСвойство Тогда
	//				ЦветСвойства=ЦветТекущий;
	//			ИначеЕсли СвойствоДоступно Тогда
	//				ЦветСвойства=ЦветДоступный;
	//			Иначе
	//				ЦветСвойства=ЦветОбычный;
	//			КонецЕсли;
	//			СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//			Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//				Текст = Текст+"<b><font size="""+РазмерШрифта1+"""><span style='"+ЦветСвойства+"'>"+Строка(ЗначениеСвойства)+"</span></font></b>"; 
	//			КонецЕсли;
	//			
	//			ИмяСвойства="МаркаСплава";
	//			СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//			Если ИмяСвойства=ТекущееСвойство Тогда
	//				ЦветСвойства=ЦветТекущий;
	//			ИначеЕсли СвойствоДоступно Тогда
	//				ЦветСвойства=ЦветДоступный;
	//			Иначе
	//				ЦветСвойства=ЦветОбычный;
	//			КонецЕсли;
	//			СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//			Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//				Текст = Текст+ " " +"<b><font size="""+РазмерШрифта1+"""><span style='"+ЦветСвойства+"'>"+Строка(ЗначениеСвойства)+"</span></font></b>"; 
	//			КонецЕсли;
	//			Текст=Текст+"</p>";
	//		Иначе
	//			ИмяСвойства="Номенклатура";
	//			СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//			Если ИмяСвойства=ТекущееСвойство Тогда
	//				ЦветСвойства=ЦветТекущий;
	//			ИначеЕсли СвойствоДоступно Тогда
	//				ЦветСвойства=ЦветДоступный;
	//			Иначе
	//				ЦветСвойства=ЦветОбычный;
	//			КонецЕсли;
	//			СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//			Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//				Текст = Текст+"<p><b><font size="""+РазмерШрифта1+"""><span style='"+ЦветСвойства+"'>"+Строка(ЗначениеСвойства)+"</span></font></b></p>"; 
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ИмяСвойства="ХарактеристикаНоменклатуры";
	//		СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//		Если ИмяСвойства=ТекущееСвойство Тогда
	//			ЦветСвойства=ЦветТекущий;
	//		ИначеЕсли СвойствоДоступно Тогда
	//			ЦветСвойства=ЦветДоступный;
	//		Иначе
	//			ЦветСвойства=ЦветОбычный;
	//		КонецЕсли;
	//		СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//		Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//			Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"<b>" + Строка(ЗначениеСвойства)+"</span></b></p>"
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если СтруктураДанных.Свойство("ПоСвойствам") Тогда
	//		РезультатТипХарактеристики = УГМК_ОперативныйУчетВызовСервера.ПолучитьТипХарактеристики( СтруктураДанных, СтруктураДанных.Организация);
	//		Если РезультатТипХарактеристики.МетаИмя = "УГМК_ЗначенияРазмеров" Тогда
	//			Запрос = Новый Запрос;
	//			Запрос.Текст = 
	//				"ВЫБРАТЬ
	//				|	СК_ТипыРазмеровВидыРазмеров.ПорядковыйНомерРазмера КАК Номер,
	//				|	СК_ТипыРазмеровВидыРазмеров.ВидРазмера КАК Заголовок
	//				|ИЗ
	//				|	Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК СК_ТипыРазмеровВидыРазмеров
	//				|ГДЕ
	//				|	СК_ТипыРазмеровВидыРазмеров.Ссылка = &ВладелецОбразцаТипов
	//				|
	//				|УПОРЯДОЧИТЬ ПО
	//				|	Номер";
	//				//Если СтруктураДанных.Свойство("ТекущийТипРазмеров") и ЗначениеЗаполнено(СтруктураДанных.ТекущийТипРазмеров) Тогда
	//				//	Запрос.УстановитьПараметр("ВладелецОбразцаТипов",СтруктураДанных.ТекущийТипРазмеров);					   
	//				//Иначе
	//					Запрос.УстановитьПараметр("ВладелецОбразцаТипов",РезультатТипХарактеристики.ВладелецОбразцаТипов);					   
	//				//КонецЕсли;
	//			РезультатЗапроса = Запрос.Выполнить();
	//			Если Не РезультатЗапроса.Пустой() Тогда
	//				Текст=Текст+"<p><font size="""+РазмерШрифта2+""">";
	//				ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	//				Пока ВыборкаЗапроса.Следующий() Цикл
	//					ЗначениеРазмер=СтруктураДанных["Размер" + Строка(ВыборкаЗапроса.Номер)];
	//					Если ЗначениеРазмер=Неопределено Тогда
	//						ЗначениеРазмер=0;
	//					КонецЕсли;
	//					Текст=Текст+" "+ВыборкаЗапроса.Заголовок+" <b>"+Формат(ЗначениеРазмер,"ЧН=0; ЧГ=0")+"</b>";
	//				КонецЦикла;
	//				Текст=Текст+"</font></p>";
	//			КонецЕсли;
	//		Иначе
	//			//СтрРазмеры="";
	//			//Для Сч=1 По 5 Цикл
	//			//	ЗначениеРазмера=СтруктураДанных["Размер" + Строка(Сч)];
	//			//	Если ЗначениеЗаполнено(ЗначениеРазмера) Тогда
	//			//		СтрРазмеры=СтрРазмеры+"*<b>"+ЗначениеРазмера+"</b>";
	//			//	КонецЕсли;
	//			//КонецЦикла;
	//			//Если СтрРазмеры<>"" Тогда
	//			//	Текст=Текст+"<p>"+Сред(СтрРазмеры,2)+"</p>";
	//			//КонецЕсли;
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Качество";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Качество: "+"<b>" + Строка(ЗначениеСвойства)+"</span></b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Маркировка";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Маркировка: "+"<b>" + Строка(ЗначениеСвойства)+"</span></b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Тара";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Тара " + Строка(ЗначениеСвойства)+"</span>: <b>" + Формат(СтруктураДанных.КоличествоТара,"ЧГ=0") +  "</b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Состояние";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Состояние: "+"<b>"+ Строка(ЗначениеСвойства)+"</span></b></p>"
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Количество";
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//		Текст = Текст + "<p>" + "Количество: <b>" + Формат(ЗначениеСвойства,"ЧГ=0") + " " +УГМК_СлужебныйПовторноеИспользование.ПолучитьНаименованиеЕдиницыИзмерения(СтруктураДанных.ЕдиницаИзмерения) + "</b></p>";
	//	КонецЕсли;

	//	ИмяСвойства="Количество1";
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//		ЕдиницаИзмерения1Весовая = Ложь;
	//		Текст = Текст + "<p>" + ?(ЕдиницаИзмерения1Весовая, "Вес: ", "Количество доп.: ") + "<b>" + Формат(ЗначениеСвойства,"ЧГ=0") + " " + УГМК_СлужебныйПовторноеИспользование.ПолучитьНаименованиеЕдиницыИзмерения(СтруктураДанных.ЕдиницаИзмерения1) + "</b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="КоличествоМест";
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//		Текст = Текст + "<p>Мест: <b>" + Формат(ЗначениеСвойства,"ЧГ=0") + "</b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="ПаспортПартии";
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//		ТипПартии=ЗначениеСвойства.Метаданные().Синоним;
	//		Текст = Текст + "<p>" +  ТипПартии + ": <b>" + УГМК_СлужебныйПовторноеИспользование.ПолучитьПредставлениеПартии(ЗначениеСвойства, Ложь, Ложь) + "</b></p>";
	//		//  Убрано, т.к. результат никому не нужен.
	//		//ОтборРегистра=Новый Структура("ПаспортПартии",ЗначениеСвойства);
	//		//СостояниеПартии=РегистрыСведений.УГМК_СостояниеПартии.СрезПоследних(,ОтборРегистра);
	//		//Для каждого СтрокаСостояния Из СостояниеПартии Цикл
	//		//	Если Не СтрокаСостояния.Закрыто Тогда
	//		//		Текст = Текст + "<p><font size="""+РазмерШрифта2+""">&nbsp;&nbsp;&nbsp;&nbsp;"+ Символы.ВТаб +  Формат(СтрокаСостояния.Период,"ДФ='dd.MM.yy чч:мм:сс'") + " - " + СтрокаСостояния.МестоУчета + ?(ЗначениеЗаполнено(СтрокаСостояния.Смена),", " + СтрокаСостояния.Смена,"") + "</font></p>";
	//		//	КонецЕсли;
	//		//КонецЦикла; 
	//	КонецЕсли;
	//	
	//	ИмяСвойства="Дополнительно";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Дополнительно: "+"<b>"+ Строка(ЗначениеСвойства)+"</span></b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="ТехнологическаяОперация";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Тех. операция: "+"<b>"+ ?(ЗначениеЗаполнено(ЗначениеСвойства),Строка(ЗначениеСвойства.ПолноеНаименование()),"")+"</span></b></p>";
	//	КонецЕсли;
	//	
	//	ИмяСвойства="ВариантТехнологическойОперации";
	//	СвойствоДоступно=СписокСвойств<>Неопределено И СписокСвойств.НайтиПоЗначению(ИмяСвойства)<>Неопределено;
	//	Если ИмяСвойства=ТекущееСвойство Тогда
	//		ЦветСвойства=ЦветТекущий;
	//	ИначеЕсли СвойствоДоступно Тогда
	//		ЦветСвойства=ЦветДоступный;
	//	Иначе
	//		ЦветСвойства=ЦветОбычный;
	//	КонецЕсли;
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Или СвойствоДоступно Тогда
	//		Текст = Текст + "<p><span style='"+ЦветСвойства+"'>"+"Вариант операции: "+"<b>"+ ?(ЗначениеЗаполнено(ЗначениеСвойства),Строка(ЗначениеСвойства.ПолноеНаименование()),"")+"</span></b></p>";
	//		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//			ОтборРасценки=Новый Структура("ТехнологическаяОперация,ВариантТехнологическойОперации",ЗначениеСвойства.Владелец,ЗначениеСвойства);
	//			ДанныеРасценочнойВедомости=РегистрыСведений.УГМК_РасценкиТехнологическихОпераций.СрезПоследних(,ОтборРасценки);
	//			Если ДанныеРасценочнойВедомости.Количество()>0 Тогда
	//				ЕдИзм=Строка(ДанныеРасценочнойВедомости[0].ЕдиницаИзмерения);
	//				//Текст=Текст+"<font size="""+РазмерШрифта1+""">";
	//				Текст = Текст + "<p>"+" расценка: "+"<b>"+ ДанныеРасценочнойВедомости[0].Расценка + " руб./" + ЕдИзм + "</b></p>";
	//				Текст = Текст + "<p>"+" норма выработки: "+"<b>"+ ДанныеРасценочнойВедомости[0].НормаВыработки + " " + ЕдИзм + "/час </b></p>";
	//				Текст = Текст + "<p>"+" норма времени: "+"<b>"+ ДанныеРасценочнойВедомости[0].НормаВремени + " часов (на 1 " + ЕдИзм + ") </b></p>";
	//				Текст = Текст + "<p>"+" трудоемкость: "+"<b>"+ ДанныеРасценочнойВедомости[0].Трудоемкость + " чел.часов (на 1 " + ЕдИзм + ") </b></p>";
	//				//Текст=Текст+"</font>";
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ИмяСвойства="КоличествоОперации";
	//	СтруктураДанных.Свойство(ИмяСвойства,ЗначениеСвойства);
	//	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//		Текст = Текст + "<p>" + "выполнено <b>" + Формат(ЗначениеСвойства,"ЧГ=0") + "</b></p>";
	//	КонецЕсли;
	//	
	//	
	//	Текст = Текст + "</span></body></html>";
	//	
	//	Описание.УстановитьHTML(Текст,Новый Структура);
	//КонецЕсли;
	//
	//Возврат Описание;
КонецФункции	

Функция ПолучитьФорматированныйДокумент( СписокДанных) Экспорт
	//ОЦМ Мобильная
Возврат Неопределено;
	//Описание=Новый ФорматированныйДокумент;
	//Если ЗначениеЗаполнено( СписокДанных) Тогда
	//	ЦветОбычный="background-color: #ffffff;";
	//	ЦветДоступный="background-color: #ffffb0;";
	//	ЦветТекущий="background-color: #ffffb0; text-decoration: underline;";
	//	РазмерШрифта1 = "14pt";
	//	РазмерШрифта2 = "12pt";
	//	
	//	Текст="<html>
	//		| <head>
	//		|  <meta charset=""utf-8"">
	//		|  <title>Описание бирки</title>
	//		|  <style type=""text/css"">
	//		//|  	body {font-family:  arial, verdana, sans-serif;}
	//		|   .block { 
	//		|	width: 200px; 
	//		|	background: #fc0; 
	//		|	padding: 5px; 
	//		|	border: solid 1px black; 
	//		|	float: left; 
	//		|	position: relative; 
	//		|	top: 40px; 
	//		|	left: -70px;
	//		|   }
	//		|  </style> 
	//		| </head>
	//		| <body>
	//		//|  <span style=""font-size: "+РазмерШрифта2+"; font-family: verdana, sans-serif;"">
	//		|";

	//	Для каждого Элемент из СписокДанных цикл
	//		Если Элемент.Пометка Тогда
	//			ЦветСвойства=ЦветТекущий;
	//		Иначе
	//			ЦветСвойства=ЦветОбычный;
	//		КонецЕсли;

	//		Если ЗначениеЗаполнено( Элемент.Представление) тогда
	//			Текст = Текст +  "<p><span style='"+ЦветСвойства+"'>"+Строка( Элемент.Значение)+": "+"<b>"+ Элемент.Представление +"</span></b></p>";
	//		иначе
	//			Текст = Текст +  "<p><span style='"+ЦветСвойства+"'>"+Строка( Элемент.Значение)+"</p>";
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Текст = Текст + "</span></body></html>";
	//	
	//	Описание.УстановитьHTML(Текст,Новый Структура);
	//КонецЕсли;
	//
	//Возврат Описание;
КонецФункции	

Функция ПолучитьТаблицуГруппыЗадания( Ссылка, Группа, МестоУчета=Неопределено) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Ссылка",Ссылка);
	Запр.УстановитьПараметр("Группа",Группа);
	Запр.Текст = "ВЫБРАТЬ
	             |	УГМК_ДокументПланТовары.Ссылка,
	             |	УГМК_ДокументПланТовары.НомерСтроки КАК НомерСтроки,
	             |	ВЫБОР
	             |		КОГДА УГМК_ДокументПланТовары.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	             |			ТОГДА УГМК_ДокументПланТовары.Ссылка.РабочийЦентр
	             |		ИНАЧЕ УГМК_ДокументПланТовары.РабочийЦентр
	             |	КОНЕЦ КАК РабочийЦентр,
	             |	УГМК_ДокументПланТовары.ТочкаМаршрута,
	             |	УГМК_ДокументПланТовары.Группа,
	             |	УГМК_ДокументПланТовары.Номенклатура,
	             |	УГМК_ДокументПланТовары.ХарактеристикаНоменклатуры,
	             |	УГМК_ДокументПланТовары.СерияНоменклатуры,
	             |	УГМК_ДокументПланТовары.Состояние,
	             |	УГМК_ДокументПланТовары.Качество,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмеренияМест,
	             |	УГМК_ДокументПланТовары.КоличествоМест,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмерения,
	             |	УГМК_ДокументПланТовары.Коэффициент,
	             |	УГМК_ДокументПланТовары.Коэффициент * УГМК_ДокументПланТовары.Количество КАК Количество,
	             |	УГМК_ДокументПланТовары.Количество1,
	             |	УГМК_ДокументПланТовары.ДопускИзготовления,
	             |	УГМК_ДокументПланТовары.ДопускЗаготовки,
	             |	УГМК_ДокументПланТовары.Продукция,
	             |	УГМК_ДокументПланТовары.ХарактеристикаПродукции,
	             |	УГМК_ДокументПланТовары.СостояниеПродукции,
	             |	УГМК_ДокументПланТовары.ЗаказПродукции,
	             |	УГМК_ДокументПланТовары.ЗаказВыпускаПродукции,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмеренияМестПродукции,
	             |	УГМК_ДокументПланТовары.КоличествоМестПродукции,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмеренияПродукции,
	             |	УГМК_ДокументПланТовары.КоэффициентПродукции,
	             |	УГМК_ДокументПланТовары.КоличествоПродукции,
	             |	УГМК_ДокументПланТовары.Количество1Продукции,
	             |	УГМК_ДокументПланТовары.ДополнительнаяОперацияДо,
	             |	УГМК_ДокументПланТовары.ДополнительнаяОперацияПосле,
	             |	УГМК_ДокументПланТовары.Дополнительно,
	             |	УГМК_ДокументПланТовары.ПаспортПартии,
	             |	УГМК_ДокументПланТовары.Сторно,
	             |	УГМК_ДокументПланТовары.ТехнологическаяОперация,
	             |	УГМК_ДокументПланТовары.ВариантТехнологическойОперации,
	             |	УГМК_ДокументПланТовары.ПаспортПартииПродукции,
	             |	УГМК_ДокументПланТовары.КлючСвязи,
	             |	УГМК_ДокументПланТовары.ДатаОперации,
	             |	УГМК_ДокументПланТовары.КлючСвязиПродукции,
	             |	УГМК_ДокументПланТовары.ГруппаПродукции,
	             |	УГМК_ДокументПланТовары.ГруппаПродукцииПродукции,
	             |	УГМК_ДокументПланТовары.Стандарт,
	             |	УГМК_ДокументПланТовары.СтандартПродукции,
	             |	УГМК_ДокументПланТовары.НДНаХимСостав,
	             |	УГМК_ДокументПланТовары.НДНаХимСоставПродукции,
	             |	УГМК_ДокументПланТовары.МаркаСплава,
	             |	УГМК_ДокументПланТовары.МаркаСплаваПродукции,
	             |	УГМК_ДокументПланТовары.ПоСвойствам,
	             |	УГМК_ДокументПланТовары.ПоСвойствамПродукции,
	             |	УГМК_ДокументПланТовары.ДополнительныйНД,
	             |	УГМК_ДокументПланТовары.ДополнительныйНДПродукции,
	             |	УГМК_ДокументПланТовары.Коэффициент1,
	             |	УГМК_ДокументПланТовары.Коэффициент1Продукции,
	             |	УГМК_ДокументПланТовары.Сотрудник,
	             |	УГМК_ДокументПланТовары.Заказ,
	             |	УГМК_ДокументПланТовары.ЗаказВыпуска,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмерения1,
	             |	УГМК_ДокументПланТовары.ЕдиницаИзмерения1Продукции,
	             |	УГМК_ДокументПланТовары.РежимРабочегоЦентра,
	             |	ВЫБОР
	             |		КОГДА УГМК_ДокументПланТовары.СледующийРабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	             |			ТОГДА УГМК_ДокументПланТовары.Ссылка.СледующийРабочийЦентр
	             |		ИНАЧЕ УГМК_ДокументПланТовары.СледующийРабочийЦентр
	             |	КОНЕЦ КАК СледующийРабочийЦентр,
	             |	ВЫБОР
	             |		КОГДА УГМК_ДокументПланТовары.ПредыдущийРабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	             |			ТОГДА УГМК_ДокументПланТовары.Ссылка.ПредыдущийРабочийЦентр
	             |		ИНАЧЕ УГМК_ДокументПланТовары.ПредыдущийРабочийЦентр
	             |	КОНЕЦ КАК ПредыдущийРабочийЦентр,
	             |	УГМК_ДокументПланТовары.Оснастка1,
	             |	УГМК_ДокументПланТовары.Оснастка2,
	             |	УГМК_ДокументПланТовары.Оснастка3,
	             |	УГМК_ДокументПланТовары.Примечание,
	             |	ВЫБОР
	             |		КОГДА УГМК_ДокументПланТовары.ДокументПлана = ЗНАЧЕНИЕ(Документ.УГМК_ДокументПлан.ПустаяСсылка)
	             |			ТОГДА УГМК_ДокументПланТовары.Ссылка
	             |		ИНАЧЕ УГМК_ДокументПланТовары.ДокументПлана
	             |	КОНЕЦ КАК ДокументПлана,
	             |	УГМК_ДокументПланТовары.Ссылка.Организация КАК Организация
	             |ИЗ
	             |	Документ.УГМК_ДокументПлан.Товары КАК УГМК_ДокументПланТовары
	             |ГДЕ
	             |	УГМК_ДокументПланТовары.Ссылка = &Ссылка
	             |	И УГМК_ДокументПланТовары.Группа = &Группа
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерСтроки";
				 
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Функция ПолучитьОстаткиГруппыЗадания( Ссылка, Группа, МестоУчета=Неопределено) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Задание",Ссылка);
	Запр.УстановитьПараметр("Группа",Группа);
	Запр.УстановитьПараметр("МестоУчета",МестоУчета);
	
	ЗапрТекст = "ВЫБРАТЬ
	             |	УГМК_ОперативныеПланыОстатки.Задание КАК ДокументПлана,
	             |	УГМК_ОперативныеПланыОстатки.Группа КАК ГруппаПлана,
	             |	УГМК_ОперативныеПланыОстатки.МаркаСплава,
	             |	УГМК_ОперативныеПланыОстатки.ГруппаПродукции,
	             |	УГМК_ОперативныеПланыОстатки.Номенклатура,
	             |	УГМК_ОперативныеПланыОстатки.Характеристика,
	             |	УГМК_ОперативныеПланыОстатки.Состояние,
	             |	УГМК_ОперативныеПланыОстатки.КоличествоОстаток КАК Количество,
	             |	УГМК_ОперативныеПланыОстатки.Количество1Остаток КАК Количество1,
	             |	УГМК_ОперативныеПланыОстатки.КоличествоМестОстаток КАК КоличествоМест,
	             |	УГМК_ОперативныеПланыОстатки.МестоУчета
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеПланы.Остатки(
	             |			,
	             |			Задание = &Задание
	             |				И Группа = &Группа 
				 |				//ОтборМестоУчета И МестоУчета = &МестоУчета
				 |				) КАК УГМК_ОперативныеПланыОстатки";
				 
	Если ЗначениеЗаполнено( МестоУчета) тогда
		ЗапрТекст = СтрЗаменить( ЗапрТекст, "//ОтборМестоУчета", "");
	КонецЕсли;
	
	Запр.Текст = ЗапрТекст;
	Возврат( Запр.Выполнить().Выгрузить());
КонецФункции

Процедура УстановитьАктивностьИПериод( НоваяЗапись, ЭтотОбъект, СтрокаДатаОперации) Экспорт
	НоваяЗапись.Активность = Истина;
	Если ЗначениеЗаполнено( СтрокаДатаОперации) тогда
		НоваяЗапись.Период = СтрокаДатаОперации;
	ИначеЕсли ЗначениеЗаполнено( ЭтотОбъект.ДатаПланирования) тогда
		НоваяЗапись.Период = ЭтотОбъект.ДатаПланирования;
	иначе
		НоваяЗапись.Период = ЭтотОбъект.Дата;
	КонецЕсли;
КонецПроцедуры

Процедура Движения_ОперативныеПланы( ЭтотОбъект, ТаблицаДанныхДокумента, НаборЗаписей = Неопределено) Экспорт
	КоэффМ = 0;
	КоэффП = 0;
	Если ЗначениеЗаполнено( ЭтотОбъект.ВидОперации) тогда
		КоэффМ = ЭтотОбъект.ВидОперации.ОтражатьВОперативныхПланах;
		КоэффП = ЭтотОбъект.ВидОперации.ОтражатьВОперативныхПланахПолучатель;
	КонецЕсли;
	Если (КоэффМ = 0) и (КоэффП = 0) тогда
		Возврат;
	КонецЕсли;
	
	КоэффМ_Движения = КоэффМ;
	КоэффП_Движения = КоэффП;
	Если КоэффМ_Движения < 0 тогда
		КоэффМ_Движения = -КоэффМ_Движения;
	КонецЕсли;
	Если КоэффП_Движения < 0 тогда
		КоэффП_Движения = -КоэффП_Движения;
	КонецЕсли;
	
	Если НаборЗаписей = Неопределено тогда
		НаборЗаписей = ЭтотОбъект.Движения.УГМК_ОперативныеПланы;
	КонецЕсли;
	
	Для каждого Строка из ТаблицаДанныхДокумента цикл
		КоэффСторно = 1;
		Если Строка.Сторно тогда
			КоэффСторно = -1;
		КонецЕсли;
		
		Если (КоэффМ <> 0) 
			и ЗначениеЗаполнено( Строка.ГруппаПродукции)
			и (ЗначениеЗаполнено( Строка.Количество) или ЗначениеЗаполнено( Строка.Количество1) или ЗначениеЗаполнено( Строка.КоличествоМест))
			тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			Если КоэффМ >= 0 тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			УстановитьАктивностьИПериод( НоваяЗапись, ЭтотОбъект, Строка.ДатаОперации);
			
			Если ЗначениеЗаполнено( Строка.ДокументПлана) тогда
				НоваяЗапись.Задание = Строка.ДокументПлана;
			иначе
				НоваяЗапись.Задание = ЭтотОбъект.Ссылка;
			КонецЕсли;
			Если Строка.ГруппаПлана > 0 тогда
				НоваяЗапись.Группа = Строка.ГруппаПлана;
			иначе
				НоваяЗапись.Группа = Строка.Группа;
			КонецЕсли;
			НоваяЗапись.ВидОперации = ЭтотОбъект.ВидОперации;
			НоваяЗапись.РабочийЦентр = ЭтотОбъект.РабочийЦентр;
			
			ЗаполнитьЗначенияСвойств( НоваяЗапись, Строка, "РежимРабочегоЦентра,ТехнологическаяОперация,ВариантТехнологическойОперации,КлючСвязи,КлючСвязиПродукции,МаркаСплава,ГруппаПродукции,Состояние,ПаспортПартии");
			Если Строка.ПоСвойствам тогда
				НоваяЗапись.Номенклатура = Строка.МаркаСплава;
			иначе
				НоваяЗапись.Номенклатура = Строка.Номенклатура;
			КонецЕсли;
			НоваяЗапись.Характеристика = Строка.ХарактеристикаНоменклатуры;
			
			НоваяЗапись.КорГруппаПродукции = Строка.ГруппаПродукцииПродукции;
			Если Строка.ПоСвойствамПродукции тогда
				НоваяЗапись.КорНоменклатура = Строка.МаркаСплаваПродукции;
			иначе
				НоваяЗапись.КорНоменклатура = Строка.Продукция;
			КонецЕсли;
			НоваяЗапись.КорХарактеристика = Строка.ХарактеристикаПродукции;
			НоваяЗапись.КорСостояние = Строка.СостояниеПродукции;
			НоваяЗапись.КорЗаказ = Строка.ЗаказПродукции;
			НоваяЗапись.КорЗаказВыпуска = Строка.ЗаказВыпускаПродукции;
			НоваяЗапись.КорПаспортПартии = Строка.ПаспортПартииПродукции;
			НоваяЗапись.Заказ = Строка.Заказ;
			НоваяЗапись.ЗаказВыпуска = Строка.ЗаказВыпуска;
			НоваяЗапись.МестоУчета = ПолучитьМестоУчетаОперативныйПлан( Строка, ЭтотОбъект.ВидОперации.ОперативныеПланыМестоУчета);
			
			Если ЭтотОбъект.ВидОперации.ОперативныеПланыКоличество = "КоличествоПродукции" тогда
				НоваяЗапись.Количество = КоэффСторно * КоэффМ_Движения * Строка.КоличествоПродукции;
				НоваяЗапись.Количество1 = КоэффСторно * КоэффМ_Движения * Строка.Количество1Продукции;
				НоваяЗапись.КоличествоМест = КоэффСторно * КоэффМ_Движения * Строка.КоличествоМестПродукции;
			иначе
				НоваяЗапись.Количество = КоэффСторно * КоэффМ_Движения * Строка.Количество;
				НоваяЗапись.Количество1 = КоэффСторно * КоэффМ_Движения * Строка.Количество1;
				НоваяЗапись.КоличествоМест = КоэффСторно * КоэффМ_Движения * Строка.КоличествоМест;
			КонецЕсли;
		КонецЕсли;
		Если (КоэффП <> 0) 
			и ЗначениеЗаполнено( Строка.ГруппаПродукцииПродукции) 
			и (ЗначениеЗаполнено( Строка.КоличествоПродукции) или ЗначениеЗаполнено( Строка.Количество1Продукции) или ЗначениеЗаполнено( Строка.КоличествоМестПродукции))
			тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			Если КоэффП >= 0 тогда
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			иначе
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			УстановитьАктивностьИПериод( НоваяЗапись, ЭтотОбъект, Строка.ДатаОперации);
			
			Если ЗначениеЗаполнено( Строка.ДокументПлана) тогда
				НоваяЗапись.Задание = Строка.ДокументПлана;
			иначе
				НоваяЗапись.Задание = ЭтотОбъект.Ссылка;
			КонецЕсли;
			Если Строка.ГруппаПлана > 0 тогда
				НоваяЗапись.Группа = Строка.ГруппаПлана;
			иначе
				НоваяЗапись.Группа = Строка.Группа;
			КонецЕсли;
			НоваяЗапись.ВидОперации = ЭтотОбъект.ВидОперации;
			НоваяЗапись.РабочийЦентр = ЭтотОбъект.РабочийЦентр;
			
			ЗаполнитьЗначенияСвойств( НоваяЗапись, Строка, "РежимРабочегоЦентра,ТехнологическаяОперация,ВариантТехнологическойОперации,КлючСвязи,КлючСвязиПродукции");
			Если Строка.ПоСвойствамПродукции тогда
				НоваяЗапись.Номенклатура = Строка.МаркаСплаваПродукции;
			иначе
				НоваяЗапись.Номенклатура = Строка.Продукция;
			КонецЕсли;
			НоваяЗапись.Характеристика = Строка.ХарактеристикаПродукции;
			НоваяЗапись.МаркаСплава = Строка.МаркаСплаваПродукции;
			НоваяЗапись.ГруппаПродукции = Строка.ГруппаПродукцииПродукции;
			НоваяЗапись.Состояние = Строка.СостояниеПродукции;
			НоваяЗапись.ПаспортПартии = Строка.ПаспортПартииПродукции;
			
			НоваяЗапись.КорГруппаПродукции = Строка.ГруппаПродукции;
			Если Строка.ПоСвойствам тогда
				НоваяЗапись.КорНоменклатура = Строка.МаркаСплава;
			иначе
				НоваяЗапись.КорНоменклатура = Строка.Номенклатура;
			КонецЕсли;
			НоваяЗапись.КорХарактеристика = Строка.ХарактеристикаНоменклатуры;
			НоваяЗапись.КорСостояние = Строка.Состояние;
			НоваяЗапись.КорЗаказ = Строка.Заказ;
			НоваяЗапись.КорЗаказВыпуска = Строка.ЗаказВыпуска;
			НоваяЗапись.КорПаспортПартии = Строка.ПаспортПартии;
			НоваяЗапись.Заказ = Строка.ЗаказПродукции;
			НоваяЗапись.ЗаказВыпуска = Строка.ЗаказВыпускаПродукции;
			НоваяЗапись.МестоУчета = ПолучитьМестоУчетаОперативныйПлан( Строка, ЭтотОбъект.ВидОперации.ОперативныеПланыМестоУчетаПродукции);
			
			Если ЭтотОбъект.ВидОперации.ОперативныеПланыКоличествоПродукции = "Количество" тогда
				НоваяЗапись.Количество = КоэффСторно * КоэффП_Движения * Строка.Количество;
				НоваяЗапись.Количество1 = КоэффСторно * КоэффП_Движения * Строка.Количество1;
				НоваяЗапись.КоличествоМест = КоэффСторно * КоэффП_Движения * Строка.КоличествоМест;
			иначе
				НоваяЗапись.Количество = КоэффСторно * КоэффП_Движения * Строка.КоличествоПродукции;
				НоваяЗапись.Количество1 = КоэффСторно * КоэффП_Движения * Строка.Количество1Продукции;
				НоваяЗапись.КоличествоМест = КоэффСторно * КоэффП_Движения * Строка.КоличествоМестПродукции;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМестоУчетаОперативныйПлан( Строка, ИмяМестоУчета)
	Если ЗначениеЗаполнено( ИмяМестоУчета) тогда
		Результат = Строка[ ИмяМестоУчета];
	иначе
		Результат = Строка.РабочийЦентр;
	КонецЕсли;
	
	Возврат( Результат);
КонецФункции

Функция ПолучитьТипРазмераПоГруппеПродукции(ГруппаПродукции) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СК_ТипыРазмеров.Ссылка
		|ИЗ
		|	Справочник.СК_ТипыРазмеров КАК СК_ТипыРазмеров
		|ГДЕ
		|	НЕ СК_ТипыРазмеров.ПометкаУдаления
		|	И СК_ТипыРазмеров.ГруппаПродукции = &ГруппаПродукции";
	Запрос.УстановитьПараметр("ГруппаПродукции", ГруппаПродукции);	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаЗапроса = Результат.Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЕсли; 
	
КонецФункции

Функция ОбновитьХарактеристику( ПараметрыРазмеров) экспорт
	Перем ХарактеристикаНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УГМК_ЗначенияРазмеров.Ссылка
		|ИЗ
		|	Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		|ГДЕ
		|	УГМК_ЗначенияРазмеров.УГМК_Мобильный И НЕ УГМК_ЗначенияРазмеров.ПометкаУдаления
		|	И УГМК_ЗначенияРазмеров.Владелец.ГруппаПродукции = &ГруппаПродукции";
		Для НомерРазмера = 1 По 5 Цикл
			ИмяРазмера="Размер" + Строка(НомерРазмера);
			Если не ЗначениеЗаполнено(ПараметрыРазмеров[ИмяРазмера]) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ((УГМК_ЗначенияРазмеров." + ИмяРазмера + " = &" + ИмяРазмера+")или("+"УГМК_ЗначенияРазмеров." + ИмяРазмера + " = 0))";
				Запрос.УстановитьПараметр(ИмяРазмера, неопределено);
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И УГМК_ЗначенияРазмеров." + ИмяРазмера + " = &" + ИмяРазмера;
				Запрос.УстановитьПараметр(ИмяРазмера, ПараметрыРазмеров[ИмяРазмера]);
			КонецЕсли;
		КонецЦикла;
	Запрос.Текст = Запрос.Текст +
		"ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ
		|	УГМК_ЗначенияРазмеров.Ссылка
		|ИЗ
		|	Справочник.УГМК_ЗначенияРазмеров КАК УГМК_ЗначенияРазмеров
		|ГДЕ
		|	УГМК_ЗначенияРазмеров.УГМК_Мобильный И
		|	НЕ УГМК_ЗначенияРазмеров.ПометкаУдаления
		|	И УГМК_ЗначенияРазмеров.Владелец.ГруппаПродукции = &ГруппаПродукции";
		Для НомерРазмера = 1 По 5 Цикл
			ИмяРазмера="Размер" + Строка(НомерРазмера);
			Если не ЗначениеЗаполнено(ПараметрыРазмеров[ИмяРазмера]) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И ((УГМК_ЗначенияРазмеров." + ИмяРазмера + " = &" + ИмяРазмера+")или("+"УГМК_ЗначенияРазмеров." + ИмяРазмера + " = 0))";
				Запрос.УстановитьПараметр(ИмяРазмера, неопределено);
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И УГМК_ЗначенияРазмеров." + ИмяРазмера + " = &" + ИмяРазмера;
				Запрос.УстановитьПараметр(ИмяРазмера, ПараметрыРазмеров[ИмяРазмера]);
			КонецЕсли;
		КонецЦикла;
	Запрос.УстановитьПараметр("ГруппаПродукции", ПараметрыРазмеров.ГруппаПродукции);
	
	//Если ЗначениеЗаполнено(ПараметрыРазмеров.ТекущийТипРазмеров) Тогда
	//	Запрос.Текст = Запрос.Текст + "
	//	|	И УГМК_ЗначенияРазмеров.Владелец=&ТекущийТипРазмеров";
	//	Запрос.УстановитьПараметр("ТекущийТипРазмеров", ПараметрыРазмеров.ТекущийТипРазмеров);
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Организация", ПараметрыРазмеров.Организация);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ХарактеристикаНоменклатуры = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе 
		НовыйОбъект = Справочники.УГМК_ЗначенияРазмеров.СоздатьЭлемент();
		//Если ЗначениеЗаполнено(ПараметрыРазмеров.ТекущийТипРазмеров) Тогда
		//	НовыйОбъект.Владелец = ПараметрыРазмеров.ТекущийТипРазмеров;
		//Иначе
			НовыйОбъект.Владелец = ПолучитьТипРазмераПоГруппеПродукции( ПараметрыРазмеров.ГруппаПродукции);
		//КонецЕсли;
		//структура видов размеров для создания правильного наименования
		СтруктураВидовРазмеров=Новый Соответствие;
		тз = НовыйОбъект.Владелец.ВидыРазмеров.Выгрузить();
		
		Для НомерРазмера = 1 По 5 Цикл
			ИмяРазмера="Размер" + Строка(НомерРазмера);
			Если ЗначениеЗаполнено(ПараметрыРазмеров[ИмяРазмера]) Тогда
				НовыйОбъект[ИмяРазмера] = ПараметрыРазмеров[ИмяРазмера];
				//добавим в структуру ВР
				СтрокаТЗ = тз.Найти(НомерРазмера, "ПорядковыйНомерРазмера");
				Если СтрокаТЗ <> Неопределено тогда
					СтруктураВидовРазмеров.Вставить(СтрокаТЗ.ВидРазмера,ПараметрыРазмеров[ИмяРазмера]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НовыйОбъект.УГМК_Временный = Истина;
		НовыйОбъект.УГМК_Мобильный = Истина;
		НовыйОбъект.Наименование = НовыйОбъект.Автонаименование(НовыйОбъект,СтруктураВидовРазмеров);
		НовыйОбъект.Записать();
		ХарактеристикаНоменклатуры = НовыйОбъект.Ссылка;
	КонецЕсли;
	
	Возврат( ХарактеристикаНоменклатуры);
КонецФункции

Функция ДокументЕстьВОМЗС(ДокументПередел) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ОтчетМастераЗаСменуПеределы.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ОтчетМастераЗаСмену.Переделы КАК УГМК_ОтчетМастераЗаСменуПеределы
	             |ГДЕ
	             |	УГМК_ОтчетМастераЗаСменуПеределы.ДокументПередел = &ДокументПередел
	             |	И НЕ УГМК_ОтчетМастераЗаСменуПеределы.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументПередел",ДокументПередел);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		возврат истина;
	Иначе
		возврат ложь;
	КонецЕсли;
КонецФункции

Функция ЭтоМастерЦеха(ТекущийПользователь) экспорт
	Рез=Ложь;
	ЭтоМастерЦеха = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра( ТекущийПользователь, , , "АРМ_МастерЦеха,ЭтоМастер", Ложь);
	Если ТипЗнч(ЭтоМастерЦеха)=Тип("Соответствие") Тогда
		для каждого ЭтоМастерЦеха1 из ЭтоМастерЦеха цикл
			Если ТипЗнч(ЭтоМастерЦеха1.значение)=Тип("СписокЗначений") Тогда
				Если ЭтоМастерЦеха1.значение.Количество()>0 Тогда
					Если ЭтоМастерЦеха1.значение[0].значение=Истина Тогда
						Рез=Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	возврат Рез;
КонецФункции

Процедура ОбновитьОписаниеВыбраннойСтрокиЗадания( ЭтотОбъект, МестоУчета) Экспорт
	Если не ЭтотОбъект.Константа_ИспользоватьЗадания тогда
		Возврат;
	КонецЕсли;
	
	Элементы = ЭтотОбъект.Элементы;
	
	ТабЧастьЗадание = ЭтотОбъект.ЗаданиеОбъект.Товары;
	Если ТабЧастьЗадание.Количество() = 0 тогда
		Элементы.КнопкаЗадание.Заголовок = "<.Задание.>";
		ЗаданиеОписание = "Отсканируйте Штрихкод или выберите <.Задание.>";
	иначе
		Элементы.КнопкаЗадание.Заголовок = "Задание"+Символы.ПС+Строка( ЭтотОбъект.ЗаданиеОстаток);
		ТекущиеДанные = ТабЧастьЗадание[ 0];
		Если ТекущиеДанные.МаркаСплава = ТекущиеДанные.МаркаСплаваПродукции тогда
			МаркаМ = Строка( ТекущиеДанные.МаркаСплава);
			МаркаП = "";
		иначе
			МаркаМ = Строка( ТекущиеДанные.МаркаСплава);
			МаркаП = Строка( ТекущиеДанные.МаркаСплаваПродукции);
		КонецЕсли;
		
		МаксДлина = Макс( СтрДлина( МаркаМ), СтрДлина( МаркаП));
		МаркаМ = Лев( МаркаМ+"                      ",МаксДлина)+Символы.Таб;
		МаркаП = Лев( МаркаП+"                      ",МаксДлина)+Символы.Таб;
		
		ЗаданиеОписание = "";
		Если ЗначениеЗаполнено( ТекущиеДанные.МаркаСплава) 
			или ЗначениеЗаполнено( ТекущиеДанные.Номенклатура) 
			или ЗначениеЗаполнено( ТекущиеДанные.ХарактеристикаНоменклатуры)
			тогда
			ЗаданиеОписание = ЗаданиеОписание+МаркаМ+Символы.Таб+УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( ТекущиеДанные, "", Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено( ТекущиеДанные.МаркаСплаваПродукции) 
			или ЗначениеЗаполнено( ТекущиеДанные.Продукция) 
			или ЗначениеЗаполнено( ТекущиеДанные.ХарактеристикаПродукции)
			тогда
			ЗаданиеОписание = ЗаданиеОписание+Символы.ПС+МаркаП+Символы.Таб+УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( ТекущиеДанные, "Продукции", Ложь);
		КонецЕсли;
		
		Если ТекущиеДанные.РабочийЦентр = МестоУчета тогда
		иначеЕсли ТекущиеДанные.ПредыдущийРабочийЦентр = МестоУчета тогда
			ЗаданиеОписание = ЗаданиеОписание + " Задание: "+ТекущиеДанные.РабочийЦентр;
		иначе
			ЗаданиеОписание = ЗаданиеОписание + " !!! Задание: "+ТекущиеДанные.РабочийЦентр+" !!!";
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.ЗаданиеОписание = ЗаданиеОписание;
КонецПроцедуры

//-->УГМК_kivas начало блока { Процедуры раскраски заказов в списках } 09.01.2017 13:05:05

//
// получает код раскраски для списков
//
// Параметры
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупателя - заказ по которому ищем значения доп реквизитов
//
//  Номенклатура  - СправочникСсылка.Номенклатура - Номенклатура по которой ищем значения доп реквизитов
//                 
//  ХарактеристикаНоменклатуры  - СправочникСсылка.ХарактеристикиНоменклатуры  - Характеристика номенклатуры по которой ищем значения доп реквизитов
//                 
//
// Возвращаемое значение:
//   Число   - Код цвета для раскраски
Функция ПолучитьКодРаскраскиПоСтрокеЗаказа(ЗаказПокупателя,Номенклатура,ХарактеристикаНоменклатуры) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УГМК_ДопТребованияСрезПоследних.ВидДопТребования.УГМК_ЦветРаскраскиВСписках,
		|	УГМК_ДопТребованияСрезПоследних.ВидДопТребования.УГМК_КодЦветаРаскраскиВСписках КАК КодЦветаРаскраскиВСписках
		|ИЗ
		|	РегистрСведений.УГМК_ДопТребования.СрезПоследних(
		|			,
		|			ВидДопТребования.УГМК_ИспользуетсяРаскраска = ИСТИНА
		|				И ЗаказПокупателя = &ЗаказПокупателя
		|				И Номенклатура = &Номенклатура
		|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК УГМК_ДопТребованияСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодЦветаРаскраскиВСписках"
		;

	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КодЦветаРаскраскиВСписках; 
	КонецЦикла;
	
КонецФункции //ПолучитьКодРаскраскиПоСтрокеЗаказа(ЗаказПокупателя,Номенклатура,ХарактеристикаНоменклатуры)

// Из Таблицы доп требований находит все раскрашенные и возвращает таблицу с минимальными кодами раскраски по каждой партии
//
// Параметры
//  ТЧДопТребований  - ТаблицаЗначений - Таблица значений из табличной части обработки УГМК_ДопТребования
//                 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений с колонками:  ЗаказПокупателя | Номенклатура | ХарактеристикаНоменклатуры | КодЦвета
//						Данные необходимы для дополнения свойств заказа покупателя
//
Функция  ПолучитьТаблицуКодовРаскраскиПоВсемСтрокамДопТребований(ТЧДопТребований)Экспорт 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТЧДопТребований.ЗаказПокупателя,
	|	ТЧДопТребований.Номенклатура,
	|	ТЧДопТребований.ХарактеристикаНоменклатуры,
	|	ВЫРАЗИТЬ(ТЧДопТребований.ВидДопТребования КАК Справочник.ВидыПараметровВыпускаПродукции) КАК ВидДопТребования
	|ПОМЕСТИТЬ ВсеДопТребования
	|ИЗ
	|	&ТЧДопТребований КАК ТЧДопТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВсеДопТребования.ВидДопТребования.УГМК_КодЦветаРаскраскиВСписках) КАК КодЦвета,
	|	ВсеДопТребования.ЗаказПокупателя,
	|	ВсеДопТребования.Номенклатура,
	|	ВсеДопТребования.ХарактеристикаНоменклатуры
	|ИЗ
	|	ВсеДопТребования КАК ВсеДопТребования
	|ГДЕ
	|	ВсеДопТребования.ВидДопТребования.УГМК_ИспользуетсяРаскраска = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДопТребования.ЗаказПокупателя,
	|	ВсеДопТребования.Номенклатура,
	|	ВсеДопТребования.ХарактеристикаНоменклатуры
	|");
	
	Запрос.УстановитьПараметр("ТЧДопТребований",ТЧДопТребований);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции //  ПолучитьТаблицуКодовРаскраскиПоВсемСтрокамДопТребований()
 
// Дописывает набор записей РС УГМК_ЗначенияСвойствЗаказовПокупателей документа
//
// Параметры
//  ТЧДопТребований  - ТаблицаЗначений - Таблица значений из табличной части обработки УГМК_ДопТребования
//                
//  ДокументДвижения  - ДокументСсылка.ЗаказПокупателя; ДокументСсылка.КорректировкаЗаказаПокупателя - Регистратор набора записей
//
Процедура ДополнитьЗначенияСвойствЗаказаПокупателя(ТЧДопТребований,ДокументДвижения)Экспорт 
	//ОЦМ Мобильная

	//ТаблицаКодовРаскраски = ПолучитьТаблицуКодовРаскраскиПоВсемСтрокамДопТребований(ТЧДопТребований);
	//
	//Если ТаблицаКодовРаскраски.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//НаборЗаписей = РегистрыСведений.УГМК_ЗначенияСвойствЗаказовПокупателей.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижения);
	//НаборЗаписей.Прочитать();
	//
	//Для каждого СтрокаРаскраски Из ТаблицаКодовРаскраски Цикл
	//	нСтрока = НаборЗаписей.Добавить();
	//	нСтрока.Регистратор = ДокументДвижения;
	//	нСтрока.Период = ДокументДвижения.Дата;
	//	ЗаполнитьЗначенияСвойств(нСтрока, СтрокаРаскраски);
	//	нСтрока.Свойство					= ПланыВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.КодЦветаРаскраскиВСписках;
	//	нСтрока.Значение					= СтрокаРаскраски.КодЦвета;
	//КонецЦикла; 
	//
	//НаборЗаписей.Записать();

КонецПроцедуры // ДополнитьЗначенияСвойствЗаказаПокупателя()

Процедура ДополнитьУсловноеОформлениеРаскраскойДопТребований(УсловноеОформление,КолонкаДопТребований,ПолеСписка = Неопределено)Экспорт 

	СоответствиеОформлений = УГМК_СлужебныйПовторноеИспользование.СоздатьСоответствиеЦветов();
	Для каждого Оформление Из СоответствиеОформлений Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Использование = Истина;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Оформление.Значение);
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КолонкаДопТребований);
		Отбор.ПравоеЗначение = Оформление.Ключ;
		Если ПолеСписка <> Неопределено Тогда
			Поле = Элемент.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПолеСписка);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьТаблицуДляРаскраски(ТабЧастьПродукции,Организация)Экспорт 
	
	ТекстЗапроса = ВернутьТекстЗапросаКодовРаскраски();
	ЭтоОУ = ЭтоКонфигурацияОперативногоУчета();
	//ЭтоОУ = Истина;
	Если ЭтоОУ Тогда
		//подключаемся по web
		ПостроительСтруктурыЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПодготовитьСтруктуруПостроителя();
		ПостроительСтруктурыЗапроса.Текст = ТекстЗапроса;
		ЗаполнитьПараметрыЗапросаТаблицыРаскраски(ПостроительСтруктурыЗапроса.Параметры,ТабЧастьПродукции);
		//ПостроительЗапроса.Параметры.Вставить("ТЧПродукция", ТабЧастьПродукции);
		Если ПостроительСтруктурыЗапроса.Параметры.СписокЗаказов.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		СтруктураЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.СоздатьСтруктуруПараметровНаОсновеПостроителяЗапроса(ПостроительСтруктурыЗапроса);
		СтруктураОтвета = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ВыполнитьЗапросWEBСервисаНаСервере(СтруктураЗапроса,Организация.Наименование);
		ТаблицаРезультатЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПреобразоватьРезультатКСсылочнымТипам(СтруктураОтвета);
		Результат = ТаблицаРезультатЗапроса;
		Возврат Результат;
	Иначе 
		//запрос к текущей базе
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ЗаполнитьПараметрыЗапросаТаблицыРаскраски(Запрос.Параметры,ТабЧастьПродукции);
		//Запрос.УстановитьПараметр("ТЧПродукция", ТабЧастьПродукции);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьВедущееДопТребованиеДляРаскраски()

Функция ВернутьТекстЗапросаКодовРаскраски() Экспорт 

	ТекстЗапроса = "ВЫБРАТЬ
	               |	МИНИМУМ(УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Значение) КАК Значение,
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ЗаказПокупателя,
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Номенклатура,
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ХарактеристикаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.УГМК_ЗначенияСвойствЗаказовПокупателей.СрезПоследних(
	               |			,
	               |			ЗаказПокупателя В (&СписокЗаказов)
	               |				И Номенклатура В (&СписокНоменклатуры)
	               |				И ХарактеристикаНоменклатуры В (&СписокХарактеристик)
	               |				И Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УГМК_СвойстваЗаказовПокупателей.КодЦветаРаскраскиВСписках)) КАК УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ХарактеристикаНоменклатуры,
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.ЗаказПокупателя,
	               |	УГМК_ЗначенияСвойствЗаказовПокупателейСрезПоследних.Номенклатура";
	Возврат ТекстЗапроса;		
КонецФункции // ВернутьТекстЗапросаКодовРаскраски()

Процедура ЗаполнитьПараметрыЗапросаТаблицыРаскраски(Параметры,ТЧПродукции) Экспорт 

	МассивЗаказов = Новый Массив;
	МассивНоменклатур = Новый Массив;
	МассивХарактеристик = Новый Массив;
	Для каждого СтрокаФонда Из ТЧПродукции Цикл
		Если ЗначениеЗаполнено(СтрокаФонда.ЗаказПродукции)  Тогда
			МассивЗаказов.Добавить(СтрокаФонда.ЗаказПродукции);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаФонда.Продукция)  Тогда
			МассивНоменклатур.Добавить(СтрокаФонда.Продукция);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаФонда.ХарактеристикаПродукции)  Тогда
			МассивХарактеристик.Добавить(СтрокаФонда.ХарактеристикаПродукции);
		КонецЕсли;
	КонецЦикла; 
	Параметры.Вставить("СписокЗаказов",МассивЗаказов);	
	Параметры.Вставить("СписокНоменклатуры",МассивНоменклатур);	
	Параметры.Вставить("СписокХарактеристик",МассивХарактеристик);	

КонецПроцедуры
//<--УГМК_kivas конец блока { Процедуры раскраски заказов в списках } 09.01.2017 13:05:05 
 
Функция НайденНаплавОтливкаПоПартииВОМЗС(ТекПартия,ВидОперации) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ДокументФактПродукция.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |		ПО (УГМК_ДокументФактПродукция.Ссылка = УГМК_ДокументФакт.ДокументОснование
	             |				И УГМК_ДокументФакт.Сторно)
	             |ГДЕ
	             |	УГМК_ДокументФактПродукция.Ссылка.Проведен
	             |	И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	             |	И УГМК_ДокументФактПродукция.ПаспортПартииПродукции = &ПаспортПартииПродукции
	             |	И УГМК_ДокументФактПродукция.Ссылка.ВидОперации = &ВидОперации
	             |	И УГМК_ДокументФакт.Ссылка ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ПаспортПартииПродукции",ТекПартия);
	Запрос.УстановитьПараметр("ВидОперации",ВидОперации);
	Выб=Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если УГМК_ОперативныйУчетВызовСервера.ДокументЕстьВОМЗС(Выб.Ссылка)=Истина Тогда
			возврат Истина;
		КонецЕсли;
	КонецЦикла;
	возврат Ложь;
КонецФункции
 
Функция ДокументЕстьВПартииСТК(ТекДок,НайденнаяПартия) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ПаспортПартииСТКПродукция.Ссылка
	             |ИЗ
	             |	БизнесПроцесс.УГМК_ПаспортПартииСТК.Продукция КАК УГМК_ПаспортПартииСТКПродукция
	             |ГДЕ
	             |	НЕ УГМК_ПаспортПартииСТКПродукция.Ссылка.ПометкаУдаления
	             |	И УГМК_ПаспортПартииСТКПродукция.ДокументПредъявление = &ДокументПредъявление";
	Запрос.УстановитьПараметр("ДокументПредъявление",ТекДок);
	Выб=Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() тогда
		НайденнаяПартия=Выб.Ссылка.Номер;
		возврат истина;
	Иначе
		возврат ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьтзПредъявлений(ПартияСТК) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	УГМК_ДокументФактПродукция.Ссылка
	             |ИЗ
	             |	Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |		ПО УГМК_ДокументФактПродукция.Ссылка = УГМК_ДокументФакт.ДокументОснование
	             |			И (УГМК_ДокументФакт.Сторно)
	             |ГДЕ
	             |	УГМК_ДокументФактПродукция.Ссылка.Проведен
	             |	И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	             |	И УГМК_ДокументФактПродукция.Ссылка.ВидОперации = &ВидОперации
	             |	И УГМК_ДокументФакт.Ссылка ЕСТЬ NULL 
	             |	И УГМК_ДокументФактПродукция.ПаспортПартииПродукции = &ПартияСТК
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УГМК_ДокументФактПродукция.Ссылка";
	Запрос.УстановитьПараметр("ВидОперации",Справочники.УГМК_СостоянияЗаказа.ПредъявлениеОТКДляПриемкиГП);
	Запрос.УстановитьПараметр("ПартияСТК",ПартияСТК);
	возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьМассивЭлементовПоУровню(ур) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗначенияСвойствОбъектов.Объект
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	             |	И ЗначенияСвойствОбъектов.Значение = &Значение
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗначенияСвойствОбъектов.Объект";
	Запрос.УстановитьПараметр("Свойство",УГМК_СлужебныеФункции.ПолучитьНастройку("СвойствоНоменклатуры_УровеньТары"));
	Запрос.УстановитьПараметр("Значение",ур);
	рез=Новый СписокЗначений;
	рез.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект"));
	возврат рез;
КонецФункции

Функция КонтрольПрослеживаемостиГП( СоответствиеСтрокаПартия) Экспорт
	СтрОшСтроки = "";
	
	Если СоответствиеСтрокаПартия.Количество() > 0 тогда
		ПроверитьПартии = Новый Массив;
		Для каждого Элемент из СоответствиеСтрокаПартия цикл
			ПроверитьПартии.Добавить( Элемент.Значение);
		КонецЦикла;
		
		Запр = Новый Запрос;
		Запр.УстановитьПараметр("Образована",ПроверитьПартии);
		Запр.Текст = "ВЫБРАТЬ
		             |	УГМК_ИсходныеПартииСрезПоследних.Образована,
		             |	УГМК_ИсходныеПартииСрезПоследних.Исходная,
		             |	УГМК_ИсходныеПартииСрезПоследних.Подчиненные,
		             |	УГМК_ИсходныеПартииСрезПоследних.Действует
		             |ИЗ
		             |	РегистрСведений.УГМК_ИсходныеПартии.СрезПоследних(, Образована В (&Образована)) КАК УГМК_ИсходныеПартииСрезПоследних
		             |ГДЕ
		             |	УГМК_ИсходныеПартииСрезПоследних.Действует
		             |	И ((УГМК_ИсходныеПартииСрезПоследних.Исходная ССЫЛКА БизнесПроцесс.УГМК_Плавка)
					 | 		ИЛИ(УГМК_ИсходныеПартииСрезПоследних.Исходная ССЫЛКА БизнесПроцесс.УГМК_ПартияСырья))";
		Плавки = Запр.Выполнить().Выгрузить();
		
		Для каждого Элемент из СоответствиеСтрокаПартия цикл
			Если Плавки.Найти( Элемент.Значение, "Образована") = Неопределено тогда
				СтрОшСтроки = СтрОшСтроки + Строка( Элемент.Ключ) + Символы.ПС;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено( СтрОшСтроки) тогда
		Если СтрЧислоСтрок( СтрОшСтроки) = 1 тогда
			СтрОшСтроки = "Нет прослеживаемости до Плавки в строке " + СтрОшСтроки;
		иначе
			СтрОшСтроки = "Нет прослеживаемости до Плавки в строках :" + Символы.ПС + СтрОшСтроки;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат( СтрОшСтроки);
КонецФункции

Процедура УстановитьСвойствоДляОбъекта( СвойствоИлиИмя, ОбъектСсылка, Значение = Null) Экспорт
	Перем Свойство;
	
	Если не ЗначениеЗаполнено( ОбъектСсылка) тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч( СвойствоИлиИмя) = Тип("Строка") тогда
		Свойство = УГМК_СлужебныеФункции.ПолучитьНастройку( СвойствоИлиИмя);
	иначе
		Свойство = СвойствоИлиИмя; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Свойство) тогда
		МенеджерЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Если Значение = Null тогда
			МенеджерЗ.Объект = ОбъектСсылка;
			МенеджерЗ.Свойство = Свойство;
			МенеджерЗ.Прочитать();
			Если МенеджерЗ.Выбран() тогда
				МенеджерЗ.Удалить();
			КонецЕсли;
		иначе
			МенеджерЗ.Активность = Истина;
			МенеджерЗ.Объект = ОбъектСсылка;
			МенеджерЗ.Свойство = Свойство;
			МенеджерЗ.Значение = Значение;
			МенеджерЗ.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьИсториюПартии(Партия) экспорт
	
	//ОЦМ Мобильная
	Возврат Неопределено;
	//ВсеПартии=Новый Массив;

	//Партии=Новый Массив;
	//Партии.Добавить(Партия);

	//Запрос = Новый Запрос;
	//ПустыеПартии=Новый Массив;
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_Плавка.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПаспортПартии.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПаспортПартииСТК.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПартияСырья.ПустаяСсылка());
	//ПустыеПартии.Добавить(Неопределено);
	//Запрос.УстановитьПараметр("ПустыеПартии",ПустыеПартии);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	УГМК_ОперативныеОстатки.КорПаспортПартии КАК Партия
	//	|ИЗ
	//	|	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК ДокументСторно
	//	|		ПО УГМК_ОперативныеОстатки.Регистратор = ДокументСторно.ДокументОснование
	//	|			И (ДокументСторно.Сторно)
	//	|ГДЕ
	//	|	УГМК_ОперативныеОстатки.ПаспортПартии В (&Партии)
	//	|	И УГМК_ОперативныеОстатки.ПаспортПартии <> УГМК_ОперативныеОстатки.КорПаспортПартии
	//	|	И НЕ УГМК_ОперативныеОстатки.КорПаспортПартии В (&ПустыеПартии)
	//	|	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//	|	И НЕ УГМК_ОперативныеОстатки.Регистратор.Сторно
	//	|	И ДокументСторно.Ссылка ЕСТЬ NULL ";

	//Пока Партии.Количество()>0 Цикл
	//	Запрос.УстановитьПараметр("Партии",Партии);
	//	Результат = Запрос.Выполнить();
	//	Партии.Очистить();
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если ВсеПартии.Найти(ВыборкаДетальныеЗаписи.Партия)=Неопределено Тогда
	//			Партии.Добавить(ВыборкаДетальныеЗаписи.Партия);
	//			ВсеПартии.Добавить(ВыборкаДетальныеЗаписи.Партия);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;

	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	УГМК_ПаспортПартии.Ссылка как Партия
	//	|ИЗ
	//	|	БизнесПроцесс.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии
	//	|ГДЕ
	//	|	УГМК_ПаспортПартии.Ссылка В(&Партии)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дата";
	//	
	////ИсторияПартии=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	//Запрос.УстановитьПараметр("Партии",ВсеПартии);
	//тзРезультат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
	//
	//Возврат тзРезультат;
КонецФункции

Функция ПолучитьИсториюПартииПоВсемТипам(Партия) экспорт
	//ОЦМ Мобильная
	
	ВсеПартии=Новый Массив;

	//Партии=Новый Массив;
	//Партии.Добавить(Партия);

	//Запрос = Новый Запрос;
	//ПустыеПартии=Новый Массив;
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_Плавка.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПаспортПартии.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПаспортПартииСТК.ПустаяСсылка());
	//ПустыеПартии.Добавить(БизнесПроцессы.УГМК_ПартияСырья.ПустаяСсылка());
	//ПустыеПартии.Добавить(Неопределено);
	//Запрос.УстановитьПараметр("ПустыеПартии",ПустыеПартии);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	УГМК_ОперативныеОстатки.КорПаспортПартии КАК Партия
	//	|ИЗ
	//	|	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК ДокументСторно
	//	|		ПО УГМК_ОперативныеОстатки.Регистратор = ДокументСторно.ДокументОснование
	//	|			И (ДокументСторно.Сторно)
	//	|ГДЕ
	//	|	УГМК_ОперативныеОстатки.ПаспортПартии В (&Партии)
	//	|	И УГМК_ОперативныеОстатки.ПаспортПартии <> УГМК_ОперативныеОстатки.КорПаспортПартии
	//	|	И НЕ УГМК_ОперативныеОстатки.КорПаспортПартии В (&ПустыеПартии)
	//	|	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//	|	И НЕ УГМК_ОперативныеОстатки.Регистратор.Сторно
	//	|	И ДокументСторно.Ссылка ЕСТЬ NULL ";

	//Пока Партии.Количество()>0 Цикл
	//	Запрос.УстановитьПараметр("Партии",Партии);
	//	Результат = Запрос.Выполнить();
	//	Партии.Очистить();
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если ВсеПартии.Найти(ВыборкаДетальныеЗаписи.Партия)=Неопределено Тогда
	//			Партии.Добавить(ВыборкаДетальныеЗаписи.Партия);
	//			ВсеПартии.Добавить(ВыборкаДетальныеЗаписи.Партия);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;

	////Запрос.Текст = 
	////	"ВЫБРАТЬ
	////	|	УГМК_ПаспортПартии.Ссылка как Партия
	////	|ИЗ
	////	|	БизнесПроцесс.УГМК_ПаспортПартии КАК УГМК_ПаспортПартии
	////	|ГДЕ
	////	|	УГМК_ПаспортПартии.Ссылка В(&Партии)
	////	|
	////	|УПОРЯДОЧИТЬ ПО
	////	|	Дата";
	////	
	//////ИсторияПартии=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	////Запрос.УстановитьПараметр("Партии",ВсеПартии);
	////тзРезультат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
	
	Возврат ВсеПартии;
КонецФункции

Функция ПолучитьИсториюПартииНаСервере(ТекПартия) экспорт
	ИсторияПартии=Новый ТаблицаЗначений;
	тз=ПолучитьИсториюПартии(ТекПартия);
	тз.Добавить(ТекПартия);
	Для каждого ТекП из тз Цикл
		//ТекП=стр.Партия;
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	УГМК_ДокументФактПродукция.Ссылка.Дата,
		             |	УГМК_ДокументФактПродукция.МаркаСплаваПродукции КАК Сплав,
		             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции КАК Размер,
		             |	УГМК_ДокументФактПродукция.Ссылка.Ответственный КАК ФИО,
		             |	СУММА(УГМК_ДокументФактПродукция.КоличествоПродукции) КАК Количество,
		             |	УГМК_ДокументФактПродукция.Ссылка.РабочийЦентр КАК Оборудование,
		             |	УГМК_ДокументФактПродукция.Ссылка.ВидОперации
		             |ИЗ
		             |	Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт1
		             |		ПО УГМК_ДокументФактПродукция.Ссылка = УГМК_ДокументФакт1.ДокументОснование
		             |			И (УГМК_ДокументФакт1.Сторно)
		             |ГДЕ
		             |	УГМК_ДокументФактПродукция.Ссылка.Проведен
		             |	И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
		             |	И УГМК_ДокументФакт1.Ссылка ЕСТЬ NULL 
		             |	И УГМК_ДокументФактПродукция.ПаспортПартииПродукции = &ПаспортПартииПродукции
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	УГМК_ДокументФактПродукция.МаркаСплаваПродукции,
		             |	УГМК_ДокументФактПродукция.Ссылка.Дата,
		             |	УГМК_ДокументФактПродукция.ХарактеристикаПродукции,
		             |	УГМК_ДокументФактПродукция.Ссылка.Ответственный,
		             |	УГМК_ДокументФактПродукция.Ссылка.ВидОперации,
		             |	УГМК_ДокументФактПродукция.Ссылка.РабочийЦентр";
		Запрос.УстановитьПараметр("ПаспортПартииПродукции",ТекП);
		тзП=Запрос.Выполнить().Выгрузить();
		тзП.Сортировать("Дата,Сплав,Размер,ФИО");
		Если тз.Найти(ТекП)=0 Тогда
			ИсторияПартии=тзП.СкопироватьКолонки();
			ИсторияПартии.Колонки.Добавить("Партия");
		КонецЕсли;
		Для каждого стрП из тзП Цикл
			СтрИ=ИсторияПартии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрИ,СтрП);
			СтрИ.Партия=ТекП;
		КонецЦикла;
	КонецЦикла;
	ИсторияПартии.Сортировать("Дата,Сплав,Размер");
	возврат ИсторияПартии;
КонецФункции

Функция ПолучитьВыпущено(Заказ,Продукция,ХарактеристикаПродукции) экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СУММА(УГМК_ОперативныеОстаткиОстатки.КоличествоОстаток) КАК КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.УГМК_ОперативныеОстатки.Остатки(
	             |			,
	             |			ПаспортПартии В
	             |				(ВЫБРАТЬ
	             |					УГМК_ДокументФактПродукция.СерияПродукции КАК СерияПродукции
	             |				ИЗ
	             |					Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	             |						ПО
	             |							УГМК_ДокументФактПродукция.Ссылка = УГМК_ДокументФакт.ДокументОснование
	             |								И УГМК_ДокументФакт.Сторно ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |							УГМК_ДокументФактПродукция.СерияПродукции КАК Серия,
	             |							МАКСИМУМ(УГМК_ДокументФактПродукция.Ссылка.Дата) КАК Дата
	             |						ИЗ
	             |							Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	             |						ГДЕ
	             |							УГМК_ДокументФактПродукция.Ссылка.Проведен
	             |							И (УГМК_ДокументФактПродукция.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ИзменениеЗаказаВыпущенойПродукции)
	             |								ИЛИ УГМК_ДокументФактПродукция.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ВзвешиваниеГП))
	             |							И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	             |							И УГМК_ДокументФактПродукция.ЗаказПродукции = &ЗаказПродукции
				 |							И УГМК_ДокументФактПродукция.Продукция = &Продукция
				 |							И УГМК_ДокументФактПродукция.ХарактеристикаПродукции = &ХарактеристикаПродукции
	             |						СГРУППИРОВАТЬ ПО
	             |											УГМК_ДокументФактПродукция.СерияПродукции
	             |						) КАК ВложенныйЗапрос
	             |						ПО
	             |							УГМК_ДокументФактПродукция.Ссылка.Дата = ВложенныйЗапрос.Дата
	             |				ГДЕ
	             |					УГМК_ДокументФактПродукция.Ссылка.Проведен
	             |					И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	             |					И УГМК_ДокументФакт.Ссылка ЕСТЬ NULL 
	             |				СГРУППИРОВАТЬ ПО
	             |							УГМК_ДокументФактПродукция.СерияПродукции)) КАК УГМК_ОперативныеОстаткиОстатки";
	Запрос.УстановитьПараметр("ЗаказПродукции",Заказ);
	Запрос.УстановитьПараметр("Продукция",Продукция);
	Запрос.УстановитьПараметр("ХарактеристикаПродукции",ХарактеристикаПродукции);
	тзВыб=Запрос.Выполнить().Выгрузить();
	Остатки=тзВыб.Итог("КоличествоОстаток");
	ЗапросОтгр=Новый Запрос;
	ЗапросОтгр.Текст="ВЫБРАТЬ
	                 |	УГМК_ОперативныеОстатки.Количество
	                 |ИЗ
	                 |	РегистрНакопления.УГМК_ОперативныеОстатки КАК УГМК_ОперативныеОстатки
	                 |ГДЕ
	                 |	УГМК_ОперативныеОстатки.ПаспортПартии В
	                 |			(ВЫБРАТЬ
	                 |				УГМК_ДокументФактПродукция.СерияПродукции КАК СерияПродукции
	                 |			ИЗ
	                 |				Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция ЛЕВОЕ СОЕДИНЕНИЕ Документ.УГМК_ДокументФакт КАК УГМК_ДокументФакт
	                 |					ПО
	                 |						УГМК_ДокументФактПродукция.Ссылка = УГМК_ДокументФакт.ДокументОснование
	                 |							И УГМК_ДокументФакт.Сторно ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |						УГМК_ДокументФактПродукция.СерияПродукции КАК Серия,
	                 |						МАКСИМУМ(УГМК_ДокументФактПродукция.Ссылка.Дата) КАК Дата
	                 |					ИЗ
	                 |						Документ.УГМК_ДокументФакт.Продукция КАК УГМК_ДокументФактПродукция
	                 |					ГДЕ
	                 |						УГМК_ДокументФактПродукция.Ссылка.Проведен
	                 |						И (УГМК_ДокументФактПродукция.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ИзменениеЗаказаВыпущенойПродукции)
	                 |							ИЛИ УГМК_ДокументФактПродукция.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Справочник.УГМК_СостоянияЗаказа.ВзвешиваниеГП))
	                 |						И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	                 |						И УГМК_ДокументФактПродукция.ЗаказПродукции = &ЗаказПродукции
					 |						И УГМК_ДокументФактПродукция.Продукция = &Продукция
					 |						И УГМК_ДокументФактПродукция.ХарактеристикаПродукции = &ХарактеристикаПродукции
	                 |					СГРУППИРОВАТЬ ПО
	                 |										УГМК_ДокументФактПродукция.СерияПродукции
	                 |					) КАК ВложенныйЗапрос
	                 |					ПО
	                 |						УГМК_ДокументФактПродукция.Ссылка.Дата = ВложенныйЗапрос.Дата
	                 |			ГДЕ
	                 |				УГМК_ДокументФактПродукция.Ссылка.Проведен
	                 |				И НЕ УГМК_ДокументФактПродукция.Ссылка.Сторно
	                 |				И УГМК_ДокументФакт.Ссылка ЕСТЬ NULL 
	                 |			СГРУППИРОВАТЬ ПО
	                 |						УГМК_ДокументФактПродукция.СерияПродукции)
	                 |	И ТИПЗНАЧЕНИЯ(УГМК_ОперативныеОстатки.Регистратор) = ТИП(Документ.УГМК_Регистратор)
	                 |	И УГМК_ОперативныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	ЗапросОтгр.УстановитьПараметр("ЗаказПродукции",Заказ);
	ЗапросОтгр.УстановитьПараметр("Продукция",Продукция);
	ЗапросОтгр.УстановитьПараметр("ХарактеристикаПродукции",ХарактеристикаПродукции);
	тзВыбОтгр=ЗапросОтгр.Выполнить().Выгрузить();
	Отгрузка=тзВыбОтгр.Итог("Количество");
	возврат Остатки+Отгрузка;
КонецФункции

Функция ПолучитьПредставлениеПодробно( ТекущиеДанные, ДополнениеИмениПараметр = "", ПредставленияПолучены = Ложь) Экспорт
	Стр = "";
	ДополнениеИмени = "";
	Если ТипЗнч( ДополнениеИмениПараметр) = Тип("Структура") тогда
		ИменаКолонок = ДополнениеИмениПараметр; 
		ДополнениеИмениПараметр.Свойство("ДополнениеИмени", ДополнениеИмени);
	иначе
		ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмениПараметр);
		ДополнениеИмени = ДополнениеИмениПараметр;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено тогда
		ПараметрыПредставления = Новый Структура("Назначение,МаркаПредставление,ГруппаПродукцииПредставление,РазмерПредставление,СостояниеПредставление,НДПредставление,Дополнительно");
		
		Если ПредставленияПолучены тогда
			ПараметрыПредставления.МаркаПредставление = ТекущиеДанные["МаркаПредставление"+ДополнениеИмени];
			ПараметрыПредставления.ГруппаПродукцииПредставление = ТекущиеДанные["ГруппаПродукцииПредставление"+ДополнениеИмени];
			ПараметрыПредставления.РазмерПредставление = ТекущиеДанные["РазмерПредставление"+ДополнениеИмени];
			ПараметрыПредставления.СостояниеПредставление = ТекущиеДанные["СостояниеПредставление"+ДополнениеИмени];
			ПараметрыПредставления.НДПредставление = ТекущиеДанные["НДПредставление"+ДополнениеИмени];
			//ПараметрыПредставления.Дополнительно = ТекущиеДанные.Дополнительно;
		иначе
			попытка
				ПараметрыПредставления.МаркаПредставление = Строка( ТекущиеДанные[ ИменаКолонок.МаркаСплава]);
			исключение
				ПараметрыПредставления.МаркаПредставление = "";
			конецпопытки;
			попытка
				ПараметрыПредставления.ГруппаПродукцииПредставление = Строка( ТекущиеДанные[ ИменаКолонок.ГруппаПродукции]);
			исключение
				ПараметрыПредставления.ГруппаПродукцииПредставление = "";
			конецпопытки;
			попытка
				ПараметрыПредставления.РазмерПредставление = Строка( ТекущиеДанные[ ИменаКолонок.ХарактеристикаНоменклатуры]);
			исключение
				ПараметрыПредставления.РазмерПредставление = "";
			конецпопытки;
			попытка
				ПараметрыПредставления.СостояниеПредставление = Строка( ТекущиеДанные[ ИменаКолонок.Состояние]);
			исключение
				ПараметрыПредставления.СостояниеПредставление = "";
			КонецПопытки;
			
			Попытка
				ПараметрыПредставления.НДПредставление = Строка( ТекущиеДанные[ ИменаКолонок.Стандарт]);
			Исключение
				ПараметрыПредставления.НДПредставление = "";
			КонецПопытки;
			
			Попытка
				ДопНД = ТекущиеДанные[ ИменаКолонок.ДополнительныйНД];
			Исключение
				ДопНД = "";
			КонецПопытки;
			
			Если ЗначениеЗаполнено( ДопНД) тогда
				 ПараметрыПредставления.НДПредставление = ПараметрыПредставления.НДПредставление + " " +ПолучитьКраткоеПредставлениеНД( ДопНД);
			КонецЕсли;
			
			//ПараметрыПредставления.Дополнительно = ТекущиеДанные.Дополнительно;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено( ТекущиеДанные[ ИменаКолонок.Назначение]) тогда
		//	Стр = Стр + " " + ТекущиеДанные[ ИменаКолонок.Назначение];
		//КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.МаркаПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.МаркаПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.ГруппаПродукцииПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.ГруппаПродукцииПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.РазмерПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.РазмерПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.СостояниеПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.СостояниеПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.НДПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.НДПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.Дополнительно) тогда
			Стр = Стр + " " + ПараметрыПредставления.Дополнительно;
		КонецЕсли;
		
		Стр = Сред( Стр, 2);
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции
