
#Область ПроцедурыИФункцииПодключениеОтключенияОборудования

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);
	
КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
							   ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
	   
	КонечныйРезультат = Истина;
	Результат         = Истина;
	ОписаниеОшибки    = "";
	СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования"      , Устройство.ТипОборудованияИмя);
				НовоеПодключение.ПараметрыПодключения.Вставить("ДрайверОборудования"  , Устройство.ДрайверОборудования);
				НовоеПодключение.ПараметрыПодключения.Вставить("ИдентификаторОбъекта" , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.ПараметрыПодключения.Вставить("ПакетнаяПечать"       , Устройство.ПакетнаяПечать);
		
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ПодключитьУстройство(НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
				
				Если Результат Тогда
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru = 'Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки%'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				//Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция отключает устройства по типу оборудовани
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияВызовСервера.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					ПодключенноеУстройство.КоличествоПодключенных = 0;
					
					ВыходныеПараметры = Неопределено;
					
					Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ОтключитьУстройство(ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
					
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
				
			КонецЕсли;
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ОтключитьУстройство(ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
		КонецЕсли;
		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

//Поиск по идентификатору подключенного ранее устройства
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСОборудованием

// Процедура выбора устройства из доступных
//
Функция ВыбратьУстройство(ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен, СообщениеНеВыбрано = "") Экспорт
	
	Идентификатор = Неопределено;
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипПО);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) Тогда
			Сообщить(СообщениеНеПодключен);
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;

		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(ТекстЗаголовкаВыбора);
			Если Идентификатор <> Неопределено Тогда
				Идентификатор = Идентификатор.Значение;
			Иначе
				Сообщить(?(ПустаяСтрока(СообщениеНеВыбрано), СообщениеНеПодключен, СообщениеНеВыбрано));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ПараметрыПодключенияПО", Новый Массив());
	КонецЕсли;
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	ОтключитьВсеОборудование();
	
КонецФункции

// Направляет команду обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	Если ПодключенноеУстройство <> Неопределено Тогда
		ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
		// Вызов метода выполнения команды у обработчика
		Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, ПараметрыПодключения); 
	Иначе
		// Сообщение об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru = 'Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполнить команду на экземпляре оборудовании
//
Функция ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, Знач ИдентификаторОборудования, Команда, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат = Ложь;
	
	Если (ИдентификаторОборудования = Неопределено) Или ИдентификаторОборудования.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Устройство не выбрано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторОборудования, ТекстОшибки) Тогда
		Результат = ВыполнитьКоманду(ИдентификаторОборудования, Команда, ВходныеПараметры, ВыходныеПараметры);
		Если Не Результат Тогда
			ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
			ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	Иначе
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, ВыводитьСообщения = Истина) Экспорт
	
	Результат = Ложь;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	времПараметрыПодключения = ДанныеОборудования.Параметры;
	времПараметрыПодключения.Вставить("ИдентификаторОбъекта" , ДанныеОборудования.ИдентификаторОбъекта);
	
	// Вызов метода выполнения команды у обработчика.
	Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, времПараметрыПодключения); 
		
	Если Не Результат И ВыводитьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			|""%ОписаниеОшибки%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию драйвера
//  
Функция ПолучитьВерсиюДрайвера(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	времПараметрыПодключения = Новый Структура();
	времПараметрыПодключения.Вставить("ТипОборудования"      , ДанныеОборудования.ТипОборудованияИмя);
	времПараметрыПодключения.Вставить("ДрайверОборудования"  , ДанныеОборудования.ДрайверОборудования);
	времПараметрыПодключения.Вставить("ИдентификаторОбъекта" , ДанныеОборудования.ИдентификаторОбъекта);
	
	// Вызов метода выполнения команды у обработчика
	Результат = МенеджерОборудованияУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПолучитьВерсиюДрайвера", ВходныеПараметры, ВыходныеПараметры, времПараметрыПодключения); 
	
	ВыходныеПараметры.Вставить("ВерсияДрайвераВМакете", ДанныеОборудования.ВерсияДрайвераВМакете);
	
	Возврат Результат;
	
КонецФункции

// Выполнить настройку оборудования
// 
Функция ВыполнитьНастройкуОборудования(ИдентификаторОборудования) Экспорт
	
	Результат = Ложь;
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеУстройства = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не определено.'");
		Сообщить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор"      , ИдентификаторОборудования);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	ПараметрыФормы.Вставить("ПакетнаяПечать"     , ДанныеУстройства.ПакетнаяПечать);
	ПараметрыФормы.Вставить("ТипОборудованияИмя" , ДанныеУстройства.ТипОборудованияИмя);
	
	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	ФормаРезультат = ОткрытьФормуМодально("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы);
	Если ТипЗнч(ФормаРезультат) = Тип("Структура") И ФормаРезультат.Свойство("Идентификатор") И ФормаРезультат.Свойство("ПараметрыОборудования") Тогда
		Результат = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(ФормаРезультат.Идентификатор, ФормаРезультат.ПараметрыОборудования, ФормаРезультат.ПакетнаяПечать);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавить драйвер из макета
//
Функция УстановитьДрайверИзМакета(ИдентификаторДрайвера) Экспорт
	
	ИмяМакета = "";
	Результат = Ложь;
	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетДрайвераССервера(ИдентификаторДрайвера, ИмяМакета);
	
	Если ПустаяСтрока(ИмяМакета) Тогда
		ТекстОшибки = НСтр("ru='Установка драйвера производиться с помощью дистрибутива поставщика.'");
		Сообщить(ТекстОшибки); 
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаВрем = ИмяМакета + ".apk";
	ВременныйКаталог = КаталогВременныхФайлов();
	
	Если ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + ИмяФайлаВрем, Ложь) Тогда
		ЗапуститьПриложение(ВременныйКаталог + ИмяФайлаВрем, , Истина);
		Результат = Истина;
	Иначе
		ТекстОшибки = НСтр("ru='Ошибка установки драйвера.'");
		Сообщить(ТекстОшибки); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполнить установку драйвера
// 
Функция ВыполнитьУстановкуДрайвера(ИдентификаторОборудования) Экспорт
	
	Результат = Ложь;
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеУстройства = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не определено.'");
		Сообщить(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Возврат УстановитьДрайверИзМакета(ДанныеУстройства.ДрайверОборудования);
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", Центрировать = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = "";
	
	Пока СтрДлина(Текст) > ДлинаПоля Цикл
		
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(Текст) Тогда
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС);
		Если Центрировать Тогда
			Текст = ПостроитьПоле(Текст, СтрДлина(Текст) + Цел((ДлинаПоля - СтрДлина(Текст))/2), ДобСимвол, Ложь);
			Текст = ПостроитьПоле(Текст, ДлинаПоля);
		КонецЕсли;
		ТекстПолный = ТекстПолный + Текст;
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Выполнить проверку готовности устройства.
//
Функция ВыполнитьПроверкуГотовностиУстройства(ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьДополнительнуюКоманду(ИдентификаторОборудования, "GetAvailable", Неопределено, ВыходныеПараметры, Ложь);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСФискальнымиУстройствами

// Открыть денежный ящик.
//
Функция ВыполнитьОткрытиеДенежногоЯщика(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "OpenCashDrawer", Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтрокиПечатающегоУстройства(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	                                                                 
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования,  "GetLineLength", Неопределено, ВыходныеПараметры);    
	
КонецФункции

// Сформировать фискальный отчет (Z или X) на фискальном устройстве.
//
Функция ВыполнитьФискальныйОтчет(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "FiscalReport",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Сформировать чек внесения или выемки на фискальном устройстве.
//
Функция ВыполнитьВнесениеВыемку(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "Encash", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Печать текстового документа. 
//
Функция ВыполнитьПечатьТекста(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintText", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить печать чека на фискальном устройстве.
//
Функция ВыполнитьПечатьЧека(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintReceipt", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить печать ценника.
//
Функция ВыполнитьПечатьЭтикеток(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintLabels", ВходныеПараметры, ВыходныеПараметры); ; 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПлатежнымиСистемами

// Выполнить сверку итогов на платежной системе
//
Функция ВыполнитьСверкуИтоговПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Результат = ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "Settlement", Неопределено, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

// Функция оплаты по платежной карте
//
Функция ВыполнитьОплатуПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Результат = ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeSales", ВходныеПараметры, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

// Функция возврата по платежной карте
//
Функция ВыполнитьВозвратПлатежаПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Результат = ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeRefund", ВходныеПараметры, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

// Функция отмены по платежной карте
//
Функция ВыполнитьОтменуПлатежаПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Результат = ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeVoid", ВходныеПараметры, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСУстройствамиВвода

// Выполнить ввод данных на устройстве ввода.
//
Функция ВыполнитьВводДанных(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "GetData", Неопределено, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСШтрихкодами

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ВремТипШтрихкода = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ВремТипШтрихкода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ВремТипШтрихкода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ВремТипШтрихкода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВремТипШтрихкода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ВремТипШтрихкода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ВремТипШтрихкода= ""  Тогда // QR По умолчанию
		ВремТипШтрихкода = "QR";
	КонецЕсли;
	
	Возврат ВремТипШтрихкода;
	
КонецФункции

#КонецОбласти
