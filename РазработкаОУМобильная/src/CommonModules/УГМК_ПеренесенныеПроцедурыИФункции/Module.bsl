
// Функция возвращает тип размера из справочника СК_ТипыРазмеров.
//
Функция СК_ПолучитьТипРазмера(ПродукцияОЦМ, ПоСсылке = Истина) Экспорт
	
	Если ПоСсылке = Истина И ЗначениеЗаполнено(ПродукцияОЦМ.ТипРазмера) Тогда
		Возврат ПродукцияОЦМ.ТипРазмера;
	КонецЕсли; 
	
	ГруппаПродукции = ?(ЗначениеЗаполнено(ПродукцияОЦМ.ГруппаПродукции), ПродукцияОЦМ.ГруппаПродукции, Справочники.СК_ГруппыПродукции.ПустаяСсылка());
	ФормаСечения 	= ?(ЗначениеЗаполнено(ПродукцияОЦМ.ФормаСечения), ПродукцияОЦМ.ФормаСечения, Справочники.СК_ФормыСечения.ПустаяСсылка());
	Мерность		= ?(ЗначениеЗаполнено(ПродукцияОЦМ.Мерность), ПродукцияОЦМ.Мерность, Справочники.СК_Мерность.ПустаяСсылка());
	Стандарт		= ?(ЗначениеЗаполнено(ПродукцияОЦМ.Стандарт), ПродукцияОЦМ.Стандарт, Неопределено);
	
	Возврат( УГМК_СлужебныйПовторноеИспользование.СК_ПолучитьТипРазмераПоПараметрам( ГруппаПродукции, ФормаСечения, Мерность, Стандарт));
КонецФункции

// Функция возвращает тип размера из справочника СК_ТипыРазмеров.
//
Функция СК_ПолучитьТипРазмераПоПараметрам( ГруппаПродукции, ФормаСечения=Неопределено, Мерность=Неопределено, Стандарт=Неопределено) Экспорт
	Возврат( УГМК_СлужебныйПовторноеИспользование.СК_ПолучитьТипРазмераПоПараметрам( ГруппаПродукции, ФормаСечения, Мерность, Стандарт));
КонецФункции
             
// Функция получает список видов размеров
//
Функция СК_ПолучитьВидыРазмеров(ПродукцияОЦМ, ПоСсылке = Истина)Экспорт
	
	ТипРазмера = СК_ПолучитьТипРазмера(ПродукцияОЦМ, ПоСсылке);	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипРазмера", ТипРазмера);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыРазмеров.ВидРазмера,
	               |	ВидыРазмеров.Соединитель,
	               |	ВидыРазмеров.ПорядковыйНомерРазмера КАК ПорядковыйНомерРазмера
	               |ИЗ
	               |	Справочник.СК_ТипыРазмеров.ВидыРазмеров КАК ВидыРазмеров
	               |ГДЕ
	               |	ВидыРазмеров.Ссылка = &ТипРазмера
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомерРазмера
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Возврат Запрос.Выполнить();	
	
КонецФункции

// Функция преобразует строку размера к стандарному виду
//
Функция СК_ПреобразоватьСтроковоеЗначение(Значение, Шаблон = Неопределено) Экспорт
	
	Если Значение = Шаблон Тогда
		Возврат "";
	Иначе	
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Прав(Значение, 1) = "″" Тогда
				ДлинаСтр = СтрДлина(Значение);
				
				ЧислоМинут 	= Число(Сред(Значение, ДлинаСтр - 5, 2));
				ЧислоСекунд = Число(Сред(Значение, ДлинаСтр - 2, 2));
				
				СтрокаМинут = Строка(Формат(ЧислоМинут, "ЧГ=0; ЧЦ=2; ЧН="));
				Если СтрДлина(СтрокаМинут) = 1 Тогда
					СтрокаМинут = " " + СтрокаМинут;
				КонецЕсли;	
				СтрокаСекунд = Строка(Формат(ЧислоСекунд, "ЧГ=0; ЧЦ=2; ЧН="));
				Если СтрДлина(СтрокаСекунд) = 1 Тогда
					СтрокаСекунд = " " + СтрокаСекунд;
				КонецЕсли;	
				Значение = Строка(Формат(Число(Лев(Значение, ДлинаСтр - 7)), "ЧГ=0; ЧЦ=2; ЧН="))+"˚"+СтрокаМинут+"′"+СтрокаСекунд+"″";
					
			КонецЕсли;
			Возврат СокрЛП(Значение);
		Иначе
			Возврат Значение;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

// Функция проверяет, есть ли характеристики с эквивалентными значениями свойств.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений, содержащая эквивалентные характеристики. 
//  Таблица состоит из одной колонки, содержащей ссылку на характеристики.
//
Функция СК_ЭквивалентныеХарактеристики(Объект, СвойстваИЗначения)Экспорт

	Индекс =0; 	
	
	МассивСвойств = Новый Массив;
	Запрос = Новый Запрос();
	// В качестве владельца передаем ссылку на Номенклатуру
	Запрос.УстановитьПараметр("ВладелецХарактеристики", Объект);	

	Запрос.Текст = "ВЫБРАТЬ
	               |	Характеристика.ХаракНом КАК Характеристика
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХарактеристикиНоменклатуры.Ссылка КАК ХаракНом
	               |	ИЗ
	               |		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |	ГДЕ
	               |		ХарактеристикиНоменклатуры.Активная = Истина
				   |		И ХарактеристикиНоменклатуры.ПометкаУдаления = Ложь
				   |		И ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики) КАК Характеристика
				   |";

	// Определяем характеристики, которые содержат заданные свойства.			   
	Для каждого Строка Из СвойстваИЗначения Цикл
		Если Строка.Свойство.УГМК_ДопКонтроль = Истина Тогда
			
			Индекс = СвойстваИЗначения.Индекс(Строка);
			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);
			Запрос.Текст = Запрос.Текст + "
						|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
						|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Индекс + "
						|
						|ПО
						|	ЗначенияСвойствОбъектов" + Индекс + ".Объект = Характеристика.ХаракНом
						|	И
						|	ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс +"
						|	И
						|	ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс +"
						|";
						
			// Формирование массива свойств
			МассивСвойств.Добавить(Строка.Свойство);	
			
		КонецЕсли; 
    КонецЦикла;
	
	// Следующий кусок запроса определяет наличие других свойств, не указанных в переданном массиве.
	// Выбираем только те характеристики, у которых нет других свойств.
	Запрос.Текст = Запрос.Текст + "
				   |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Характеристики.ХаракНом КАК ХаракНом,
	               |			КОЛИЧЕСТВО(ЗначенияСвойствОбъектов.Свойство) КАК КолСвойств
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ХарактеристикиНоменклатуры.Ссылка КАК ХаракНом
	               |			ИЗ
	               |				Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |			ГДЕ
	               |				ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики) КАК Характеристики
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |				ПО Характеристики.ХаракНом = ЗначенияСвойствОбъектов.Объект
	               |		ГДЕ
	               |			(НЕ ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств))
	               |			И ЗначенияСвойствОбъектов.Свойство.УГМК_ДопКонтроль = Истина		
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Характеристики.ХаракНом) КАК ДругиеСвойства
	               |		ПО Характеристика.ХаракНом = ДругиеСвойства.ХаракНом
	               |ГДЕ
	               |	ДругиеСвойства.КолСвойств = 0 ИЛИ ДругиеСвойства.КолСвойств ЕСТЬ NULL";

	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
				   
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура удаляет из таблицы строки с незаданными значением свойств
Процедура СК_УбратьНезаданныеСвойства(СвойстваИЗначения)Экспорт
	
	МассивСтрок = Новый Массив;
	Для каждого Строка из СвойстваИЗначения Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Значение) ИЛИ Строка.Значение = "  ˚  ́  ˝" Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Cтрока из МассивСтрок цикл
		СвойстваИЗначения.Удалить(Cтрока);
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует параметры отбора для поиска типа размера.
//
Функция СК_ЗаполнитьПараметрыОтбораТипаРазмера(Продукция) Экспорт
	
	ПараметрыОтбора = Новый Структура;

	Если ЗначениеЗаполнено(Продукция) Тогда
		ПараметрыОтбора.Вставить("ГруппаПродукции",Продукция.ГруппаПродукции);
		ПараметрыОтбора.Вставить("ФормаСечения",Продукция.ФормаСечения);
		ПараметрыОтбора.Вставить("Мерность",Продукция.Мерность);
        ПараметрыОтбора.Вставить("Стандарт",Продукция.Стандарт);
		ПараметрыОтбора.Вставить("ТипРазмера",Продукция.ТипРазмера);
		ПараметрыОтбора.Вставить("МетодИзготовления",Продукция.МетодИзготовления);
		ПараметрыОтбора.Вставить("Мерность",Продукция.Мерность);
	КонецЕсли;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

Функция ПреобразоватьКИдентификатору( Знач Стр) Экспорт
	Стр = СтрЗаменить( Стр, " ", "");
	Стр = СтрЗаменить( Стр, ".", "");
	Стр = СтрЗаменить( Стр, ",", "");
	Стр = СтрЗаменить( Стр, "-", "");
	Стр = СтрЗаменить( Стр, "\", "");
	Стр = СтрЗаменить( Стр, "/", "");
	
	Возврат( Стр);
КонецФункции
	
Функция ПолучитьСтруктуруСвойствОбъекта( ОбъектСсылка) Экспорт
	Запр = Новый Запрос;
	Запр.УстановитьПараметр("Объект",ОбъектСсылка);
	Запр.Текст = "ВЫБРАТЬ
	             |	ЗначенияСвойствОбъектов.Свойство,
	             |	ЗначенияСвойствОбъектов.Значение как Значение,
	             |	ЗначенияСвойствОбъектов.Свойство.Наименование как Наименование
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Объект = &Объект";
	Данные = Новый Структура;
	Результат = Запр.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		Данные.Вставить( ПреобразоватьКИдентификатору( Результат.Наименование), Результат.Значение);
	КонецЦикла;
	
	Возврат( Данные)
КонецФункции

Функция РассчитатьВес( ФормулаРасчетаВеса, Свойства, УдельныйВес) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить( "Результат = "+ФормулаРасчетаВеса);
	исключение
		Сообщить( ОписаниеОшибки());
		Результат = 0;
	КонецПопытки;
	
	Возврат( Результат);
КонецФункции


	

