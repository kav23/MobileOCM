&НаКлиенте
Функция ОсновноеОкно(Заголовок=Неопределено) Экспорт
	
	ОсновноеОкно = Неопределено;
	
	Окна = ПолучитьОкна();
	Если Окна <> Неопределено Тогда
		Для каждого Окно Из Окна Цикл
			Если Заголовок=Неопределено Тогда
				Если Окно.Основное Тогда
					ОсновноеОкно = Окно;
					Прервать;
				КонецЕсли;
			ИначеЕсли Лев(Окно.Заголовок,СтрДлина(Заголовок))=Заголовок Тогда
				ОсновноеОкно = Окно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОсновноеОкно;
	
КонецФункции

&НаКлиенте
Функция УстановитьТипыПоНастройке( Элемент, СтандартнаяОбработка, ИмяРеквизита, ДополнениеИмени = "", НачалоВыбора = Истина, ДанныеФормы) Экспорт
	ТекущиеДанные = ДанныеФормы.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено тогда
		Возврат( Неопределено);
	КонецЕсли;
	
	Если ДополнениеИмени = "Продукции" тогда
		Если ТекущиеДанные.ПоСвойствамПродукции тогда
			ОпределяющийРеквизит = ТекущиеДанные.ГруппаПродукцииПродукции;
		иначе
			ОпределяющийРеквизит = ТекущиеДанные.Продукция;
		КонецЕсли;
	иначе
		Если ТекущиеДанные.ПоСвойствам тогда
			ОпределяющийРеквизит = ТекущиеДанные.ГруппаПродукции;
		иначе
			ОпределяющийРеквизит = ТекущиеДанные.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
	Результат = УГМК_ОперативныйУчетВызовСервера.ХарактеристикаНачалоВыбора( ОпределяющийРеквизит, СтандартнаяОбработка, ИмяРеквизита, ДанныеФормы);
	ВладелецОбразцаТипов = Неопределено;
	
	Организация = Неопределено;
    ДанныеФормы.Свойство("Организация",Организация);
	
	Если НачалоВыбора тогда
		Если Результат <> Неопределено тогда
			ВладелецОбразцаТипов = Результат.ВладелецОбразцаТипов;
			Если ЗначениеЗаполнено( Результат.ВладелецОбразцаТипов) тогда
				ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора");
				Если ТипЗнч( ФормаВыбора) = Тип("УправляемаяФорма") тогда
					ПараметрыВызова = Новый Структура;
					ПараметрыВызова.Вставить("Отбор", Новый Структура("Владелец", Результат.ВладелецОбразцаТипов));
					ПараметрыВызова.Вставить("ТекущаяСтрока", Результат.Значение);
					Если ЗначениеЗаполнено( Организация) тогда
						ПараметрыВызова.Вставить("Организация", Организация);
					КонецЕсли;
					ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора", ПараметрыВызова, Элемент);
				иначе
					ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора",,Элемент);
					ФормаВыбора.ПараметрВыборПоВладельцу = Результат.ВладелецОбразцаТипов;
					ФормаВыбора.ПараметрОтборПоВладельцу = Результат.ВладелецОбразцаТипов;
					ФормаВыбора.НачальноеЗначениеВыбора = Результат.Значение;
				КонецЕсли;
				СтандартнаяОбработка = Ложь;

				ФормаВыбора.Открыть();
			иначе
				ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора");
				Если ТипЗнч( ФормаВыбора) = Тип("УправляемаяФорма") тогда
					ПараметрыВызова = Новый Структура;
					ПараметрыВызова.Вставить("ТекущаяСтрока", Результат.Значение);
					Если ЗначениеЗаполнено( Организация) тогда
						ПараметрыВызова.Вставить("Организация", Организация);
					КонецЕсли;
					ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора", ПараметрыВызова, Элемент);
				иначе
					ФормаВыбора = ПолучитьФорму("Справочник."+Результат.МетаИмя+".ФормаВыбора",,Элемент);
					ФормаВыбора.НачальноеЗначениеВыбора = Результат.Значение;
				КонецЕсли;
				СтандартнаяОбработка = Ложь;

				ФормаВыбора.Открыть();
			КонецЕсли;
		КонецЕсли;
	иначе
		ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
		ИмяДанных = "";
		Если ИмяРеквизита = "Характеристика" тогда
			ИменаКолонок.Свойство("ХарактеристикаНоменклатуры", ИмяДанных);
		иначеЕсли ИмяРеквизита = "Серия" тогда
			ИменаКолонок.Свойство("СерияНоменклатуры", ИмяДанных);
		иначеЕсли ИмяРеквизита = "Состояние" тогда
			ИменаКолонок.Свойство("Состояние", ИмяДанных);
		КонецЕсли;
		
		ЕстьРеквизит = Ложь;
		Если ЗначениеЗаполнено( ИмяДанных) Тогда
			Попытка
				ТекущееЗначение = ДанныеФормы.ТекущиеДанные[ ИмяДанных];
				ЕстьРеквизит = Истина;
			исключение
				ТекущееЗначение = Неопределено;
				ЕстьРеквизит = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если (Результат <> Неопределено) и ЕстьРеквизит тогда
			ВладелецОбразцаТипов = Результат.ВладелецОбразцаТипов;
			МетаИмя = Результат.МетаИмя;
			ЗначениеНастройки = Результат.Значение;
			ПустоеЗначение = ПредопределенноеЗначение("Справочник."+МетаИмя+".ПустаяСсылка");

			Если ЗначениеЗаполнено( ТекущееЗначение) тогда
				ДанныеФормы.ТекущиеДанные[ ИмяДанных] = УГМК_ОперативныйУчетВызовСервера.ПривестиЗначениеПоНастройке( ТекущееЗначение, МетаИмя, ЗначениеНастройки, ВладелецОбразцаТипов, ПустоеЗначение);
			иначе
				ДанныеФормы.ТекущиеДанные[ ИмяДанных] = ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( ВладелецОбразцаТипов);
	
КонецФункции

// ********************* Работа с анализами ***************************
&НаКлиенте
Процедура РазверутьОбразцы( Анализы, Элементы) Экспорт
	ДеревоЭ = Анализы.ПолучитьЭлементы();
	Для каждого СтрокаА из ДеревоЭ цикл
		Инд = СтрокаА.ПолучитьИдентификатор();
		Если не Элементы.Анализы.Развернут( Инд) тогда
			Элементы.Анализы.Развернуть( Инд);
		КонецЕсли;
		
		ДеревоЭ1 = СтрокаА.ПолучитьЭлементы();
		Для каждого СтрокаА из ДеревоЭ1 цикл
			Инд = СтрокаА.ПолучитьИдентификатор();
			Если не Элементы.Анализы.Развернут( Инд) тогда
				Элементы.Анализы.Развернуть( Инд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОбразцы( Анализы, Элементы) Экспорт
	ДеревоЭ = Анализы.ПолучитьЭлементы();
	Для каждого СтрокаА из ДеревоЭ цикл
		Инд = СтрокаА.ПолучитьИдентификатор();
		Если Элементы.Анализы.Развернут( Инд) тогда
			Элементы.Анализы.Свернуть( Инд);
		КонецЕсли;
		
		ДеревоЭ1 = СтрокаА.ПолучитьЭлементы();
		Для каждого СтрокаА из ДеревоЭ1 цикл
			Инд = СтрокаА.ПолучитьИдентификатор();
			Если Элементы.Анализы.Развернут( Инд) тогда
				Элементы.Анализы.Свернуть( Инд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетПоАнализамПартии( ТекущаяПлавка) Экспорт
	Перем ОтчетСсылка, ВариантСсылка;
	
	УГМК_ОперативныйУчетВызовСервера.ПолучитьОтчетПоАнализамПартии( ОтчетСсылка, ВариантСсылка);
	
	#Если ТолстыйКлиентОбычноеПриложение тогда
	Если ЗначениеЗаполнено( ОтчетСсылка) И ЗначениеЗаполнено( ВариантСсылка) И ОтчетСсылка.ЭтоГруппа = Ложь Тогда
		ОтчетОбъект = Отчеты.ПроизвольныйОтчет.Создать();
		Форма = ОтчетОбъект.ПолучитьФорму(,, ОтчетСсылка);
		ОтчетОбъект.УстановитьПроизвольныйОтчет( ОтчетСсылка, ВариантСсылка, Форма);
		
		Схема = ТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, , );
		Форма.КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		
		ОтчетОбъект.ПрименитьНастройку();
		ТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);
		
		тНастройка = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
		тНастройка.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		тНастройка.СтандартныйПериод.ДатаНачала	 = '00010101';
		тНастройка.СтандартныйПериод.ДатаОкончания	 = '00010101';
		
		Элемент = тНастройка.ДинамическиеПараметры.Получить("ПаспортПартии");
		Элемент.Значение = ТекущаяПлавка;
		Элемент.Использование = Истина;
		
		ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(( тНастройка));
		
		ТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, Форма);
		
		Форма.ПанельНастроекНарисована = Истина;
		
		Форма.Открыть();
		Форма.ОбновитьОтчет();
	КонецЕсли;
	#иначе
	Если ЗначениеЗаполнено( ОтчетСсылка) И ЗначениеЗаполнено( ВариантСсылка) Тогда
		ПараметрыВ = Новый Структура;
		ПараметрыВ.Вставить("ПроизвольныйОтчет", ОтчетСсылка);
		ПараметрыВ.Вставить("СохраненнаяНастройка", ВариантСсылка);
		ПараметрыВ.Вставить("ФормироватьПриОткрытии", Истина);
		
		Настройки = Новый СписокЗначений;
		Настройки.Добавить( ТекущаяПлавка, "ПаспортПартии");
		ПараметрыВ.Вставить("ЗначенияПараметров", Настройки);
		
		Форма = ОткрытьФорму("Отчет.ПроизвольныйОтчет.Форма.ФормаОтчетаУправляемая", ПараметрыВ, ОтчетСсылка);
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// *******************************************************************

Функция ОбщиеДействияНачалоРедактированияНовойСтроки( ТабЧасть, ДополнениеИмени, Элемент, Отказ, Копирование, Родитель=Неопределено, Группа=Неопределено) Экспорт
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	НоваяСтрока = ТабЧасть.Добавить();
	Если Копирование тогда
		ИсходнаяСтрока = Элемент.ТекущаяСтрока;
		ЗаполнитьЗначенияСвойств( НоваяСтрока, Элемент.ДанныеСтроки( ИсходнаяСтрока));
	КонецЕсли;
	НоваяСтрока[ ИменаКолонок.ДатаОперации] = ТекущаяДата();
	НоваяСтрока[ ИменаКолонок.Тара] = Неопределено;
	НоваяСтрока[ ИменаКолонок.КоличествоТара] = Неопределено;
	НоваяСтрока[ ИменаКолонок.Количество] = 0;
	НоваяСтрока[ ИменаКолонок.Количество1] = 0;
	НоваяСтрока[ ИменаКолонок.Коэффициент1] = 0;
	
	НоваяСтрока[ ИменаКолонок.КлючСвязи] = УГМК_ОперативныйУчетКлиентСервер.ПолучитьНовыйКлючСтрокиИсточника( ТабЧасть, "КлючСвязи"+ДополнениеИмени);
	
	Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат( Элемент.ТекущиеДанные);
КонецФункции

Функция ОбщиеДействияНачалоРедактированияСтроки( ТабЧасть, ДополнениеИмени, Элемент, Отказ) Экспорт
	Возврат( Элемент.ТекущиеДанные);
КонецФункции

Процедура ДействияПриИзмененииНоменклатуры( ТекущиеДанные, ДополнениеИмени) Экспорт
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	
	ПараметрыВ = Новый Структура;
	Для каждого Элем из ИменаКолонок цикл
		ПараметрыВ.Вставить( Элем.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств( ПараметрыВ, ТекущиеДанные);
	УГМК_ОперативныйУчетВызовСервера.ДействияПриИзмененииНоменклатуры_Сервер( ПараметрыВ, ИменаКолонок);
	ЗаполнитьЗначенияСвойств( ТекущиеДанные, ПараметрыВ);
	
КонецПроцедуры

Процедура ТараНачалоВыбора(Элемент, СтандартнаяОбработка, ГруппаПродукции, Организация, ТекущееЗначение = Неопределено) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура;
	ПараметрыОтбора = Новый Структура("Организация", Организация);
	
	Если ЗначениеЗаполнено( ГруппаПродукции) тогда
		ТипТары = УГМК_СлужебныйПовторноеИспользование.ПолучитьОбразецТипаРеквизита( ГруппаПродукции, "ТипТары", Организация);
		Если ЗначениеЗаполнено( ТипТары) тогда
			ПараметрыОтбора.Вставить("ТипТары", ТипТары);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ТекущееЗначение) тогда
		Параметры.Вставить("ТекущаяСтрока", ТекущееЗначение);
	КонецЕсли;
	
	Параметры.Вставить( "Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.УГМК_ТараТехнологическая.Форма.ФормаВыбора", Параметры, Элемент);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНаименованиеДляОтображения( Элемент, ИменаКолонок) Экспорт
	НаименованиеДляОтображения = "";
	Если Элемент[ ИменаКолонок.ПоСвойствам] тогда
		НаименованиеДляОтображения = Строка(Элемент[ ИменаКолонок.ГруппаПродукции]) + " " + Строка(Элемент[ ИменаКолонок.МаркаСплава]) + " " + Строка(Элемент[ ИменаКолонок.ХарактеристикаНоменклатуры])
	иначе
		НаименованиеДляОтображения = Строка(Элемент[ ИменаКолонок.Номенклатура]) + " " + Строка(Элемент[ ИменаКолонок.ХарактеристикаНоменклатуры]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Элемент[ ИменаКолонок.Состояние]) тогда
		НаименованиеДляОтображения = НаименованиеДляОтображения + " " + Строка( Элемент[ ИменаКолонок.Состояние]);
	КонецЕсли;
	
	Возврат( НаименованиеДляОтображения);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаименование_Клиент( ОбъектПродукция=Неопределено, ОбъектМатериалы=Неопределено) Экспорт
	ПартииДляПредставления = Новый Соответствие;
	
	Если ОбъектПродукция <> Неопределено тогда
		ИменаКолонокП = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("Продукции");
		для Каждого Элемент из ОбъектПродукция Цикл
			НаименованиеНовое = ПолучитьНаименованиеДляОтображения( Элемент, ИменаКолонокП);
			
			Если Элемент.НаименованиеПродукции <> НаименованиеНовое тогда
				Элемент.НаименованиеПродукции = НаименованиеНовое;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Элемент.ПаспортПартииПродукции) и ПартииДляПредставления.Получить( Элемент.ПаспортПартииПродукции) = Неопределено тогда
				ПартииДляПредставления.Вставить( Элемент.ПаспортПартииПродукции, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
																				
	Если ОбъектМатериалы <> Неопределено тогда
		ИменаКолонокМ = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("");
		для Каждого Элемент из ОбъектМатериалы Цикл
			НаименованиеНовое = ПолучитьНаименованиеДляОтображения( Элемент, ИменаКолонокМ);
			
			Если Элемент.Наименование <> НаименованиеНовое тогда
				Элемент.Наименование = НаименованиеНовое;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Элемент.ПаспортПартии) и ПартииДляПредставления.Получить( Элемент.ПаспортПартии) = Неопределено тогда
				ПартииДляПредставления.Вставить( Элемент.ПаспортПартии, "");
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если ПартииДляПредставления.Количество() > 0 тогда
		УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставленияПартий( ПартииДляПредставления);
	КонецЕсли;
	
	Если ОбъектПродукция <> Неопределено тогда
		для Каждого Элемент из ОбъектПродукция Цикл
			НаименованиеНовое = "";
			Если ЗначениеЗаполнено( Элемент.ПаспортПартииПродукции) тогда
				НаименованиеНовое = ПартииДляПредставления.Получить( Элемент.ПаспортПартииПродукции);
			КонецЕсли;
			
			Попытка
				Если ЗначениеЗаполнено( Элемент.СерияПродукции) тогда
					Если ЗначениеЗаполнено( НаименованиеНовое) тогда
						НаименованиеНовое = Строка( Элемент.СерияПродукции)+":"+НаименованиеНовое;
					иначе
						НаименованиеНовое = Строка( Элемент.СерияПродукции);
					КонецЕсли;
				КонецЕсли;
			исключение
				УГМК_ОперативныйУчетВызовСервера.ЗаписатьЗаписьЖурналаРегистрации("ЗаполнитьНаименование_Клиент", "СерияПродукции "+ОписаниеОшибки());
			КонецПопытки;
			
			Если Элемент.ПаспортПартииПредставлениеПродукции <> НаименованиеНовое тогда
				Элемент.ПаспортПартииПредставлениеПродукции = НаименованиеНовое;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
																				
	Если ОбъектМатериалы <> Неопределено тогда
		для Каждого Элемент из ОбъектМатериалы Цикл
			НаименованиеНовое = "";
			Если ЗначениеЗаполнено( Элемент.ПаспортПартии) тогда
				НаименованиеНовое = ПартииДляПредставления.Получить( Элемент.ПаспортПартии);
			КонецЕсли;
			
			Попытка
				Если ЗначениеЗаполнено( Элемент.СерияНоменклатуры) тогда
					Если ЗначениеЗаполнено( НаименованиеНовое) тогда
						НаименованиеНовое = Строка( Элемент.СерияНоменклатуры)+":"+НаименованиеНовое;
					иначе
						НаименованиеНовое = Строка( Элемент.СерияНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			исключение
				УГМК_ОперативныйУчетВызовСервера.ЗаписатьЗаписьЖурналаРегистрации("ЗаполнитьНаименование_Клиент", "СерияНоменклатуры "+ОписаниеОшибки());
			КонецПопытки;
			
			Если Элемент.ПаспортПартииПредставление <> НаименованиеНовое тогда
				Элемент.ПаспортПартииПредставление = НаименованиеНовое;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПредставлениеКратко_Клиент( ТекущиеДанные, ДополнениеИмениПараметр = "") Экспорт
	Стр = "";
	ДополнениеИмени = "";
	Если ТипЗнч( ДополнениеИмениПараметр) = Тип("Структура") тогда
		ИменаКолонок = ДополнениеИмениПараметр; 
		ДополнениеИмениПараметр.Свойство("ДополнениеИмени", ДополнениеИмени);
	иначе
		ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмениПараметр);
		ДополнениеИмени = ДополнениеИмениПараметр;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено тогда
		ПараметрыПредставления = Новый Структура("РазмерПредставление,СостояниеПредставление,НДПредставление,Дополнительно");
		
		ПараметрыПредставления.РазмерПредставление = ТекущиеДанные["РазмерПредставление"+ДополнениеИмени];
		ПараметрыПредставления.СостояниеПредставление = ТекущиеДанные["СостояниеПредставление"+ДополнениеИмени];
		ПараметрыПредставления.НДПредставление = ТекущиеДанные["НДПредставление"+ДополнениеИмени];
		//ПараметрыПредставления.Дополнительно = ТекущиеДанные.Дополнительно;
		
		Если ЗначениеЗаполнено( ПараметрыПредставления.РазмерПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.РазмерПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.СостояниеПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.СостояниеПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.НДПредставление) тогда
			Стр = Стр + " " + ПараметрыПредставления.НДПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено( ПараметрыПредставления.Дополнительно) тогда
			Стр = Стр + " " + ПараметрыПредставления.Дополнительно;
		КонецЕсли;
		
		Стр = Сред( Стр, 2);
	КонецЕсли;
	
	Возврат( Стр);
КонецФункции

&НаКлиенте
Функция ПолучитьНаименованиеКраткоеДляОтображения( Элемент, ИменаКолонок, ПредставленияПолучены) Экспорт
	НаименованиеДляОтображения = "";
	Если ПредставленияПолучены тогда
		НаименованиеДляОтображения = ПолучитьПредставлениеКратко_Клиент( Элемент, ИменаКолонок);
	иначеЕсли Элемент[ ИменаКолонок.ПоСвойствам] тогда
		НаименованиеДляОтображения = УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставлениеКратко( Элемент, ИменаКолонок, Ложь);
	иначе
		НаименованиеДляОтображения = Строка(Элемент[ ИменаКолонок.Номенклатура]) + " " + Строка(Элемент[ ИменаКолонок.ХарактеристикаНоменклатуры]);
		
		Если ЗначениеЗаполнено( Элемент[ ИменаКолонок.Состояние]) тогда
			НаименованиеДляОтображения = НаименованиеДляОтображения + " " + Строка( Элемент[ ИменаКолонок.Состояние]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат( НаименованиеДляОтображения);
КонецФункции

&НаКлиенте
Функция СтруктураКраткогоНаименования( ИменаКолонок)
	Результат = Новый Структура;
	Результат.Вставить( ИменаКолонок.ПоСвойствам);
	Результат.Вставить( ИменаКолонок.МаркаСплава);
	Результат.Вставить( ИменаКолонок.Номенклатура);
	Результат.Вставить( ИменаКолонок.ХарактеристикаНоменклатуры);
	Результат.Вставить( ИменаКолонок.Состояние);
	Результат.Вставить( ИменаКолонок.Стандарт);
	Результат.Вставить( ИменаКолонок.ДополнительныйНД);
	Результат.Вставить("Дополнительно","");
	Результат.Вставить("ДополнениеИмени","");
	
	Возврат( Результат);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаименованиеКраткое_Клиент( ОбъектПродукция, ОбъектМатериалы, ПредставленияПолучены = Ложь) Экспорт
	ПартииДляПредставления = Новый Соответствие;
	
	Если ОбъектПродукция <> Неопределено тогда
		ИменаКолонокП = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("Продукции");
		для Каждого Элемент из ОбъектПродукция Цикл
			Если ПустаяСтрока( Элемент.НаименованиеПродукции) тогда
				Если ПредставленияПолучены тогда
					ПараметрыП = Новый Структура("РазмерПредставлениеПродукции,СостояниеПредставлениеПродукции,НДПредставлениеПродукции,Дополнительно");
					ЗаполнитьЗначенияСвойств( ПараметрыП, Элемент);
					Элемент.НаименованиеПродукции = ПолучитьНаименованиеКраткоеДляОтображения( ПараметрыП, "Продукции", Истина);
				иначе
					ПараметрыП = СтруктураКраткогоНаименования( ИменаКолонокП);
					ЗаполнитьЗначенияСвойств( ПараметрыП, Элемент);
					ПараметрыП.ДополнениеИмени = "Продукции";
					Элемент.НаименованиеПродукции = ПолучитьНаименованиеКраткоеДляОтображения( ПараметрыП, ИменаКолонокП, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Элемент.ПаспортПартииПродукции) и ПартииДляПредставления.Получить( Элемент.ПаспортПартииПродукции) = Неопределено тогда
				ПартииДляПредставления.Вставить( Элемент.ПаспортПартииПродукции, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
																				
	Если ОбъектМатериалы <> Неопределено тогда
		ИменаКолонокМ = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени("");
		для Каждого Элемент из ОбъектМатериалы Цикл
			Если ПустаяСтрока( Элемент.Наименование) тогда
				Если ПредставленияПолучены тогда
					ПараметрыМ = Новый Структура("РазмерПредставление,СостояниеПредставление,НДПредставление,Дополнительно");
					ЗаполнитьЗначенияСвойств( ПараметрыМ, Элемент);
					Элемент.Наименование = ПолучитьНаименованиеКраткоеДляОтображения( ПараметрыМ, "", Истина);
				иначе
					ПараметрыМ = СтруктураКраткогоНаименования( ИменаКолонокМ);
					ЗаполнитьЗначенияСвойств( ПараметрыМ, Элемент);
					ПараметрыМ.ДополнениеИмени = "";
					Элемент.Наименование = ПолучитьНаименованиеКраткоеДляОтображения( ПараметрыМ, ИменаКолонокМ, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Элемент.ПаспортПартии) и ПартииДляПредставления.Получить( Элемент.ПаспортПартии) = Неопределено тогда
				ПартииДляПредставления.Вставить( Элемент.ПаспортПартии, "");
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если ПартииДляПредставления.Количество() > 0 тогда
		УГМК_ОперативныйУчетВызовСервера.ПолучитьПредставленияПартий( ПартииДляПредставления);
	КонецЕсли;
	
	Если ОбъектПродукция <> Неопределено тогда
		для Каждого Элемент из ОбъектПродукция Цикл
			НаименованиеНовое = "";
			Если ЗначениеЗаполнено( Элемент.ПаспортПартииПродукции) тогда
				НаименованиеНовое = ПартииДляПредставления.Получить( Элемент.ПаспортПартииПродукции);
			КонецЕсли;
			
			Если Элемент.ПаспортПартииПредставлениеПродукции <> НаименованиеНовое тогда
				Элемент.ПаспортПартииПредставлениеПродукции = НаименованиеНовое;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
																				
	Если ОбъектМатериалы <> Неопределено тогда
		для Каждого Элемент из ОбъектМатериалы Цикл
			НаименованиеНовое = "";
			Если ЗначениеЗаполнено( Элемент.ПаспортПартии) тогда
				НаименованиеНовое = ПартииДляПредставления.Получить( Элемент.ПаспортПартии);
			КонецЕсли;
			
			Если Элемент.ПаспортПартииПредставление <> НаименованиеНовое тогда
				Элемент.ПаспортПартииПредставление = НаименованиеНовое;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьОбработать_ВводЧисла( ИмяРеквизита, СтароеЗначение, СтандартнаяОбработка, ЭтаФорма, ЭтоСтрока = Ложь, РежимПароля = Ложь, ЭтоВводВеса = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	ПараметрыВ = Новый Структура;
	ПараметрыВ.Вставить("ИмяРеквизита",ИмяРеквизита);
	ПараметрыВ.Вставить("Значение", СтароеЗначение);
	ПараметрыВ.Вставить("ЗначениеСтр", СтароеЗначение);
	ПараметрыВ.Вставить("ЭтоСтрока", ЭтоСтрока);
	ПараметрыВ.Вставить("РежимПароля", РежимПароля);
	ПараметрыВ.Вставить("ЭтоВводВеса", ЭтоВводВеса);
	
	Результат = ОткрытьФормуМодально("Обработка.УГМК_ВводЧисла.Форма.Форма",ПараметрыВ, ЭтаФорма);
	НовоеЗначение = Неопределено;
	Если Результат <> Неопределено тогда
		НовоеЗначение = Результат.Значение;
	КонецЕсли;
	
	Возврат( НовоеЗначение);
КонецФункции

&НаКлиенте
Функция ОбновитьТабличнуюЧастьДокумента( ТабЧасть, ИнформацияБирки, ДополнениеИмени = "") Экспорт
	Возврат( УГМК_ОперативныйУчетКлиентСервер.ОбновитьТабличнуюЧастьДокумента( ТабЧасть, ИнформацияБирки, ДополнениеИмени));
	//ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	//
	//КлючПоСвойствам = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам();
	//КлючНатуральный = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча();
	//
	//КлючПоСвойствамК = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
	//КлючНатуральныйК = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
	//
	//ЕстьИзменения = Ложь;
	//
	//Для каждого Строка из ИнформацияБирки.ДанныеБирки цикл
	//	Если ЗначениеЗаполнено( Строка.Тара) тогда
	//		Если Строка.ПоСвойствам тогда
	//			КлючСтроки = КлючПоСвойствам;
	//		иначе
	//			КлючСтроки = КлючНатуральный;
	//		КонецЕсли;
	//	иначе
	//		Если Строка.ПоСвойствам тогда
	//			КлючСтроки = КлючПоСвойствамК;
	//		иначе
	//			КлючСтроки = КлючНатуральныйК;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ОтборСтрок = Новый Структура;
	//	Для каждого КолонкаКлюча из КлючСтроки цикл
	//		ОтборСтрок.Вставить( ИменаКолонок[ КолонкаКлюча], Строка[ КолонкаКлюча]);
	//	КонецЦикла;
	//	
	//	СтрокиМ = ТабЧасть.НайтиСтроки( ОтборСтрок);
	//	НоваяСтрока = Неопределено;
	//	Если СтрокиМ.Количество() = 0 тогда
	//		НоваяСтрока = ТабЧасть.Добавить();
	//	ИначеЕсли СтрокиМ.Количество() = 1 и СтрокиМ[ 0][ ИменаКолонок.Количество] = 0 тогда
	//		НоваяСтрока = СтрокиМ[ 0];
	//	КонецЕсли;
	//	
	//	Если НоваяСтрока <> Неопределено тогда
	//		Для Каждого КолонкаЭлемент из ИменаКолонок цикл
	//			Если Строка.Свойство( КолонкаЭлемент.Ключ) тогда
	//				НоваяСтрока[ КолонкаЭлемент.Значение] = Строка[ КолонкаЭлемент.Ключ];
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		НоваяСтрока[ ИменаКолонок.ДатаОперации] = ТекущаяДата();
	//		НоваяСтрока[ ИменаКолонок.КлючСвязи] = УГМК_ОперативныйУчетКлиентСервер.ПолучитьНовыйКлючСтрокиИсточника( ТабЧасть, "КлючСвязи"+ДополнениеИмени);
	//		
	//		ЕстьИзменения = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат( ЕстьИзменения);
КонецФункции

&НаКлиенте
Процедура СменаНачалоВыбора( ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = ЭтаФорма.Элементы.Смена;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		ПараметрыВ = Новый Структура;
		
		ПараметрыВ.Вставить("ТекущаяСтрока", ЭтаФорма.Смена);
		
		ОткрытьФорму("Справочник.Смены.Форма.ФормаВыбораУправляемая", ПараметрыВ, ЭлементВвода);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Склад1НачалоВыбора( ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Подразделение = Неопределено) Экспорт
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = ЭтаФорма.Элементы.Склад1;
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыВ = Новый Структура;
		
		Если Подразделение = Неопределено тогда
			ПараметрыВ.Вставить("Подразделение", ЭтаФорма.Подразделение);
		иначе
			ПараметрыВ.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		ПараметрыВ.Вставить("ТекущийПользователь", ЭтаФорма.ТекущийПользователь);
		ПараметрыВ.Вставить("РабочийЦентр",  Неопределено);
		ПараметрыВ.Вставить("ТекущаяСтрока", ЭтаФорма.Склад);
		
		ОткрытьФорму("Справочник.Склады.Форма.УГМК_ФормаВыбораОУ", ПараметрыВ, ЭлементВвода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора( ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяЭлементаФормы, Подразделение = Неопределено) Экспорт
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = ЭтаФорма.Элементы[ ИмяЭлементаФормы];
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыВ = Новый Структура;
		
		Если Подразделение = Неопределено тогда
			ПараметрыВ.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
		иначе
			ПараметрыВ.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		ПараметрыВ.Вставить("ТекущийПользователь", ЭтаФорма.ТекущийПользователь);
		ПараметрыВ.Вставить("РабочийЦентр",  Неопределено);
		ПараметрыВ.Вставить("ТекущаяСтрока", ЭтаФорма.Объект.Склад);
		
		ОткрытьФорму("Справочник.Склады.Форма.УГМК_ФормаВыбораОУ", ПараметрыВ, ЭлементВвода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбора( ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяЭлементаФормы, Подразделение = Неопределено) Экспорт
	ЭлементВвода = Неопределено;
	Если ТипЗнч( Элемент) = Тип("ПолеФормы") тогда
		ЭлементВвода = Элемент;
	иначе
		ЭлементВвода = ЭтаФорма.Элементы[ ИмяЭлементаФормы];
	КонецЕсли;
	
	Если ЭлементВвода <> Неопределено тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыВ = Новый Структура;
		
		Если Подразделение = Неопределено тогда
			ПараметрыВ.Вставить("Подразделение", ЭтаФорма.Объект.ПодразделениеПолучатель);
		иначе
			ПараметрыВ.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		ПараметрыВ.Вставить("ТекущийПользователь", ЭтаФорма.ТекущийПользователь);
		ПараметрыВ.Вставить("РабочийЦентр",  Неопределено);
		ПараметрыВ.Вставить("ТекущаяСтрока", ЭтаФорма.Объект.СкладПолучатель);
		
		ОткрытьФорму("Справочник.Склады.Форма.УГМК_ФормаВыбораОУ", ПараметрыВ, ЭлементВвода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПарамерыТабличногоДокумента( Т) Экспорт
	Т.КлючПараметровПечати = "Этикетка_101_76";
	
	Т.ИмяПринтера = "Zebra_101_76";
	Т.ИмяПараметровПечати = "Этикетка_101_76";
	Т.ВерхнийКолонтитул.Выводить = Ложь;
	Т.НижнийКолонтитул.Выводить = Ложь;
	Т.ПолеСверху = 0;
	Т.ПолеСлева = 0;
	Т.ПолеСнизу = 0;
	Т.ПолеСправа = 0;
	Т.РазмерКолонтитулаСверху = 0;
	Т.РазмерКолонтитулаСнизу = 0;
	Т.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Т.АвтоМасштаб = Ложь;
	Т.МасштабПечати = 100;
	Т.ЧерноБелаяПечать = Истина;
	
	Т.ИспользуемоеИмяФайла = "Этикетка_101_76";
	
	Т.ТолькоПросмотр = Истина;
КонецПроцедуры

// *******************************************************************

&НаКлиенте
Процедура ПоискПоПодстрокеНаКлиенте( ПодборТаблицаПартии, СтрокаПоиска, ПутиКДанным, ВидСравнения=Неопределено) Экспорт
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	Если ВидСравнения = Неопределено тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	
	// Поиск по подстроке Партии
	ГруппаОтбора = СоздатьГруппуЭлементовОтбора(
		ПодборТаблицаПартии.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	Для каждого Путь из ПутиКДанным цикл
		ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			Путь,
			СтрокаПоиска,
			Использование, ВидСравнения
		);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

&НаКлиенте
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

&НаКлиенте
Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

&НаКлиенте
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// *******************************************************************

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	//ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	//
	//КлассОМ = ЧастиИмени[0];
	//ИмяОМ   = ЧастиИмени[1];
	//
	//Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
	//	Возврат ПланыОбмена[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
	//	Возврат Справочники[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
	//	Возврат Документы[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
	//	Возврат ЖурналыДокументов[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
	//	Возврат Перечисления[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
	//	Возврат Отчеты[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
	//	Возврат Обработки[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
	//	Возврат ПланыВидовХарактеристик[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
	//	Возврат ПланыСчетов[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
	//	Возврат ПланЫВидовРасчета[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
	//	Возврат РегистрыСведений[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
	//	Возврат РегистрыНакопления[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
	//	Возврат РегистрыБухгалтерии[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
	//	Возврат РегистрыРасчета[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
	//	Возврат БизнесПроцессы[ИмяОМ];
	//	
	//ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
	//	Возврат Задачи[ИмяОМ];
	//Иначе
	//	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru='Неизвестный тип объекта метаданных (%1)'"), КлассОМ);
	//КонецЕсли;
	
КонецФункции

Процедура СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//ОЦМ Мобильная
	//
	//// Получим менеджер печати
	//МенеджерПечати = МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	//
	//// Подготовим коллекцию для формируемых печатных форм
	//КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов);
	//
	//// Подготовим структуру параметров вывода
	//ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	//
	//ОбъектыПечати = Новый СписокЗначений;
	//
	//// Сформируем печатные формы
	//МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	//
	//// Проверим, все ли макеты были сформированы
	//Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
	//	Если Стр.ТабличныйДокумент = Неопределено Тогда
	//		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//									НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
	//									Стр.ИмяМакета);
	//		ВызватьИсключение(ТекстСообщенияОбОшибке);
	//	КонецЕсли;
	//	
	//	Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
	//	
	//	// По умолчанию установим автомасштаб форм, для которых пользователь не выполнил настройку параметров страницы
	//	// Признаком того, что пользователь не выполнил настройку параметров страницы, является незаполненное ИмяПринтера
	//	Если НЕ Стр.ТабличныйДокумент.АвтоМасштаб
	//		И НЕ ЗначениеЗаполнено(Стр.ТабличныйДокумент.ИмяПринтера) Тогда
	//		Стр.ТабличныйДокумент.АвтоМасштаб = Истина;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ НЕЭКСПОРТНЫЕ ФУНКЦИИ

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
Функция ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов) Экспорт
	
	//Макеты = Новый ТаблицаЗначений;
	//Макеты.Колонки.Добавить("ИмяМакета");
	//Макеты.Колонки.Добавить("ИмяВРЕГ");
	//Макеты.Колонки.Добавить("СинонимМакета");
	//Макеты.Колонки.Добавить("ТабличныйДокумент");
	//Макеты.Колонки.Добавить("Экземпляров");
	//Макеты.Колонки.Добавить("Картинка");
	//Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	//
	//СтрИмен = СтрЗаменить(ИменаМакетов, ",", Символы.ПС);
	//Для Сч = 1 По СтрЧислоСтрок(СтрИмен) Цикл
	//	Имя = СтрПолучитьСтроку(СтрИмен, Сч);
	//	Стр = Макеты.Найти(Имя, "ИмяМакета");
	//	Если Стр = Неопределено Тогда
	//		Стр = Макеты.Добавить();
	//		Стр.ИмяМакета = Имя;
	//		Стр.ИмяВРЕГ   = ВРег(Имя);
	//		Стр.Экземпляров = 1;
	//	Иначе
	//		Стр.Экземпляров = Стр.Экземпляров + 1;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы
//
Функция ПодготовитьСтруктуруПараметровВывода() Экспорт
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно",		Ложь);
	ПараметрыВывода.Вставить("ПолучательЭлектронногоПисьма",	Неопределено);
	ПараметрыВывода.Вставить("ОтправительЭлектронногоПисьма",	Неопределено);
	
	Возврат ПараметрыВывода;
	
КонецФункции

// Проверить, нужно ли печатать макет
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Вывести табличный документ в коллекцию печатных форм
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка = Неопределено, ПолныйПутьКМакету = "") Экспорт
	
	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	
	Если Стр <> Неопределено Тогда
		Стр.ТабличныйДокумент = ТабличныйДокумент;
		Стр.СинонимМакета = СинонимМакета;
		Стр.Картинка = Картинка;
		Стр.ПолныйПутьКМакету = ПолныйПутьКМакету;
	КонецЕсли;
	
КонецПроцедуры

// Задать область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
// Параметры:
//  ТабличныйДокумент - табличный документ - табличный документ печатной формы
//  НомерСтрокиНачало - число - позиция начала очередной области в документе
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  Ссылка - ссылка на объект ИБ - объект печати
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

КонецПроцедуры

Функция ПроверитьУникальностьАналитикиТекущейСтроки() Экспорт
	Возврат( Истина);
КонецФункции

Функция ПолучитьОтборДляШтрихкода( ТекущиеДанные, ДополнениеИмени, ПроверятьУникальностьСтроки=Ложь) Экспорт
	Возврат( УГМК_ОперативныйУчетКлиентСервер.ПолучитьОтборДляШтрихкода( ТекущиеДанные, ДополнениеИмени, ПроверятьУникальностьСтроки));
	
	//ОтборДляКодирования = Новый Структура;
	//Если ТекущиеДанные <> Неопределено тогда
	//	КолонкиОтбора = Новый Массив;
	//	Если ЗначениеЗаполнено( ТекущиеДанные["Тара"+ДополнениеИмени]) тогда
	//		Если УГМК_СлужебныйПовторноеИспользование.ТараОпределяетМестоВПартии( ТекущиеДанные["Тара"+ДополнениеИмени]) тогда
	//			// Тара представляет собой "номер" в поставке.
	//			КолонкиОтбора.Добавить("Тара");
	//			КолонкиОтбора.Добавить("ПаспортПартии");
	//		иначе // Тара уникальна внутри документа (Короб, Шпуля и др.)
	//			КолонкиОтбора.Добавить("Тара");
	//		КонецЕсли;
	//	иначеЕсли ЗначениеЗаполнено( ТекущиеДанные["ПаспортПартии"+ДополнениеИмени]) тогда
	//		Если ТипЗнч( ТекущиеДанные["ПаспортПартии"+ДополнениеИмени]) = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
	//			КолонкиОтбора.Добавить("Количество");
	//			КолонкиОтбора.Добавить("КоличествоТара");
	//		КонецЕсли;
	//		КолонкиОтбора.Добавить("Тара");
	//		КолонкиОтбора.Добавить("ПаспортПартии");
	//	иначеЕсли ПроверятьУникальностьСтроки тогда
	//		КолонкиОтбора.Добавить("НомерСтроки");
	//	иначеЕсли ТекущиеДанные["ПоСвойствам"+ДополнениеИмени] тогда
	//		КолонкиОтбора = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиКлючаПоСвойствам( Истина);
	//	иначе
	//		КолонкиОтбора = УГМК_ОперативныйУчетКлиентСервер.ПолучитьКолонкиНатуральногоКлюча( Истина);
	//	КонецЕсли;
	//	
	//	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	//	Для каждого ИмяКолонки из КолонкиОтбора цикл
	//		ОтборДляКодирования.Вставить( ИменаКолонок[ ИмяКолонки], ТекущиеДанные[ ИменаКолонок[ ИмяКолонки]]);
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Возврат( ОтборДляКодирования);
КонецФункции

// *******************************************************************

Процедура ПроверитьНомерДокументаОперативногоУчета(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   

	РазностьДат = УГМК_ОперативныйУчетВызовСервера.ВычислитьРазностьДат( ТипЗнч( ДокументОбъект.Ссылка), ДокументОбъект.Дата, НачальнаяДатаДокумента);
	
	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;
КонецПроцедуры

// *******************************************************************

Процедура ПредупреждениеПользователю( ТекстПредупреждения, Таймаут=0, Заголовок="") Экспорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("ТекстСообщения",    ТекстПредупреждения);
	
	ОткрытьФормуМодально("ОбщаяФорма.УГМК_ПредупреждениеОУ", Параметры);
КонецПроцедуры

Функция ПроверитьДанныеТаблицы( ТабличнаяЧасть, ДополнениеИмени, ПроверятьКоличество = Истина) Экспорт
	СтрОшДок = "";
	
	ИменаКолонок = УГМК_ОперативныйУчетКлиентСервер.ПолучитьИменаКолонокПоДополнениюИмени( ДополнениеИмени);
	Для каждого Строка из ТабличнаяЧасть цикл
		СтрОшСтрокаДок = "";
		Если Строка[ ИменаКолонок.ПоСвойствам] тогда
			Если не ЗначениеЗаполнено( Строка[ ИменаКолонок.МаркаСплава]) тогда
				УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшСтрокаДок, ";");
				СтрОшСтрокаДок = СтрОшСтрокаДок + "Марка сплава";
			КонецЕсли;
			Если не ЗначениеЗаполнено( Строка[ ИменаКолонок.ГруппаПродукции]) тогда
				УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшСтрокаДок, ";");
				СтрОшСтрокаДок = СтрОшСтрокаДок + "Группа продукции";
			КонецЕсли;
		иначе
			Если не ЗначениеЗаполнено( Строка[ ИменаКолонок.Номенклатура]) тогда
				УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшСтрокаДок, ";");
				СтрОшСтрокаДок = СтрОшСтрокаДок + "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьКоличество и (не (ЗначениеЗаполнено( Строка[ ИменаКолонок.Количество]) или ЗначениеЗаполнено( Строка[ ИменаКолонок.Количество1]) или ЗначениеЗаполнено( Строка[ ИменаКолонок.КоличествоМест]))) тогда
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшСтрокаДок, ";");
			СтрОшСтрокаДок = СтрОшСтрокаДок + "Количество";
		КонецЕсли;
		
		Если ЗначениеЗаполнено( СтрОшСтрокаДок) тогда
			УГМК_ОперативныйУчетКлиентСервер.ДобавитьРазделительСтрок( СтрОшСтрокаДок, Символы.ПС);
			СтрОшДок = СтрОшДок + "["+Строка[ ИменаКолонок.НомерСтроки]+"] не заполнены - "+СтрОшСтрокаДок;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено( СтрОшДок) тогда
		СтрОшДок = "Ошибки в строках:"+Символы.ПС+СтрОшДок;
	КонецЕсли;
	
	Возврат( СтрОшДок);
КонецФункции

Функция ВыбратьЗначениеИзСписка(СписокВыбора,ТекущееЗначение=Неопределено,ВладелецФормы=Неопределено) Экспорт
	ПараметрыФормы=Новый Структура("СписокВыбора,ТекущееЗначение",СписокВыбора,ТекущееЗначение);
	Возврат ОткрытьФормуМодально("ОбщаяФорма.УГМК_ВыборИзСпискаОУ",ПараметрыФормы,ВладелецФормы);
КонецФункции

Процедура ПроверитьДатуДокумента( ЭтотОбъект, НеСохранять = Неопределено, ЗаполнитьДаты = Истина) Экспорт
	//ОЦМ Мобильная
	//Если НеСохранять = Неопределено тогда
	//	НеСохранять = Ложь;
	//КонецЕсли;
	//
	//Если ЗаполнитьДаты = Истина тогда
	//	УГМК_ОперативныйУчетКлиентСервер.ЗаполнитьДатыМинМакс( ЭтотОбъект);
	//КонецЕсли;
	//
	//Если НачалоДня( ЭтотОбъект.Дата) < НачалоДня( ЭтотОбъект.ДатаМин) тогда
	//	Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю("Дата документа ["+ЭтотОбъект.Дата+"] меньше минимальной даты движений ["+ЭтотОбъект.ДатаМин+"], изменить дату?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "Требуется изменить дату:", КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Да тогда
	//		ЭтотОбъект.Дата = ЭтотОбъект.ДатаМин;
	//	иначе
	//		НеСохранять = Истина;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Функция ФормаОперации_ОбработкаПроверкиПередЗаписью( Объект, Отказ, Команда = Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//УГМК_ОперативныйУчетКлиентСервер.ЗаполнитьДатыМинМакс( Объект);
	//
	//УГМК_ОперативныйУчетКлиент.ПроверитьДатуДокумента( Объект, Отказ, Ложь);
	//
	//СпособПроверки = УГМК_ОперативныйУчетВызовСервера.СпособПроверкиИзмененийОперативныхДокументов();
	//Если СпособПроверки <> "ОтсрочкаСутки" тогда // Режим запрета перепроведения
	//	Если не Отказ и (Команда = "Провести") и (не Объект.Проведен) 
	//		и (Объект.ВидОперации<>ПредопределенноеЗначение("Справочник.УГМК_СостоянияЗаказа.ВзвешиваниеГП"))
	//		и (Объект.ВидОперации<>ПредопределенноеЗначение("Справочник.УГМК_СостоянияЗаказа.ПредъявлениеОТКДляПриемкиГП")) тогда
	//		Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю("ВНИМАНИЕ!"+Символы.ПС+Символы.ПС+"Проведенный документ НЕ может быть изменен. Для исправлений потребуется Отменить документ (Сторно) и ввести правильный."+Символы.ПС+"Провести?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "Подтверждение проведения:");
	//		Отказ = Ответ <> КодВозвратаДиалога.Да;
	//	КонецЕсли;
	//КонецЕсли;
КонецФункции

Функция ФормаПартии_ОбработкаПроверкиПередЗаписью( Объект, Отказ) Экспорт
КонецФункции

Функция ВозможнаПечатьУГМК_ДокументФакт( Объект) Экспорт
	МожноПечатать = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Справочник.УГМК_СостоянияЗаказа.ОписьМеталла") Тогда
		МожноПечатать = Истина;
	иначеЕсли не Объект.Проведен Тогда
		УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю("Недостаточно полномочий для печати непроведенного документа!");
		МожноПечатать = Ложь;
	иначеЕсли Объект.ФормироватьВременныеДвижения тогда
		УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю("Недостаточно полномочий для печати временного документа!");
		МожноПечатать = Ложь;
	иначеЕсли Объект.Сторно тогда
		УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю("Недостаточно полномочий для печати Сторно!");
		МожноПечатать = Ложь;
	иначе
		ДокументСторно = УГМК_ОперативныйУчетВызовСервера.РеквизитыСторнирующегоДокумента( Объект.Ссылка);
		Если ЗначениеЗаполнено( ДокументСторно.Ссылка) тогда
			УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю("Недостаточно полномочий для печати Сторнированного документа!");
			МожноПечатать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( МожноПечатать);
КонецФункции

Функция ФормаОперации_ПроверкаПередПечатью( ЭтаФорма, Объект, ТекстВопроса = Неопределено, ЭтоПечатнаяФорма = Ложь) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//СтрКоманда = "";
	//Если Объект.Проведен тогда
	//	СтрКоманда = "Провести";
	//иначе
	//	СтрКоманда = "Записать";
	//КонецЕсли;
	//
	//Если ТекстВопроса = Неопределено тогда
	//	ТекстВопроса = "Сохранить изменения?";
	//КонецЕсли;
	//
	//Если ЭтаФорма.Модифицированность и ЭтаФорма.ПроверитьВведенныеДанные( СтрКоманда) тогда
	//	Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю( ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Отмена или Ответ = КодВозвратаДиалога.Таймаут тогда
	//		Возврат( Ложь);
	//	иначеЕсли Ответ = КодВозвратаДиалога.Нет тогда 
	//		Возврат( Ложь);
	//	КонецЕсли;
	//	
	//	ЭтаФорма.КомандаОбъекта( СтрКоманда);
	//	
	//	ОбъектПродукция=Неопределено;
	//	Объект.Свойство("Продукция",ОбъектПродукция);
	//	ОбъектМатериалы=Неопределено;
	//	Объект.Свойство("Материалы",ОбъектМатериалы);
	//	//УГМК_ОперативныйУчетКлиент.ЗаполнитьНаименование_Клиент( Объект.Продукция, Объект.Материалы);
	//	УГМК_ОперативныйУчетКлиент.ЗаполнитьНаименование_Клиент( ОбъектПродукция, ОбъектМатериалы);
	//КонецЕсли;
	//
	//МожноПечатать = не ЭтаФорма.Модифицированность;
	//
	//Если МожноПечатать и (ЭтоПечатнаяФорма = Истина) тогда
	//	МожноПечатать = ВозможнаПечатьУГМК_ДокументФакт( Объект);
	//КонецЕсли;
	//
	//Возврат( МожноПечатать);
КонецФункции

Функция ФормаПартии_ПроверкаПередПечатью( ЭтаФорма, Объект, ТекстВопроса = Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//СтрКоманда = "Записать";
	//
	//Если ТекстВопроса = Неопределено тогда
	//	ТекстВопроса = "Сохранить изменения?";
	//КонецЕсли;
	//
	//Если ЭтаФорма.Модифицированность и ЭтаФорма.ПроверитьВведенныеДанные( СтрКоманда) тогда
	//	Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю( ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Отмена или Ответ = КодВозвратаДиалога.Таймаут тогда
	//		Возврат( Ложь);
	//	иначеЕсли Ответ = КодВозвратаДиалога.Нет тогда 
	//		Возврат( Ложь);
	//	КонецЕсли;
	//	
	//	ЭтаФорма.КомандаОбъекта( СтрКоманда);
	//КонецЕсли;
	//
	//Возврат( не ЭтаФорма.Модифицированность);
КонецФункции

Функция ФормаОперации_ПереходСписку( ЭтаФорма, Объект, ТекстВопроса = Неопределено) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	//Если ТекстВопроса = Неопределено тогда
	//	ТекстВопроса = "Сохранить изменения?";
	//КонецЕсли;
	//
	//Если ЭтаФорма.Модифицированность тогда
	//	Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю( ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 120, КодВозвратаДиалога.Да);
	//	Если Ответ = КодВозвратаДиалога.Отмена или Ответ = КодВозвратаДиалога.Таймаут тогда
	//		Возврат( Ложь);
	//	иначеЕсли Ответ = КодВозвратаДиалога.Нет тогда 
	//		ЭтаФорма.Модифицированность = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЭтаФорма.Модифицированность тогда
	//	Если ЭтаФорма.ПроверитьВведенныеДанные() тогда
	//		СтрокаСообщения = ЭтаФорма.ПереходКСписку( Истина);
	//	КонецЕсли;
	//иначе
	//	СтрокаСообщения = ЭтаФорма.ПереходКСписку( Ложь);
	//КонецЕсли;
	//
	//МожноПереходить = ПустаяСтрока( СтрокаСообщения);
	//Если МожноПереходить тогда
	//	ОбъектПродукция=Неопределено;
	//	Объект.Свойство("Продукция",ОбъектПродукция);
	//	ОбъектМатериалы=Неопределено;
	//	Объект.Свойство("Материалы",ОбъектМатериалы);
	//	УГМК_ОперативныйУчетКлиент.ЗаполнитьНаименование_Клиент( ОбъектПродукция, ОбъектМатериалы);
	//иначе
	//	УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю( СтрокаСообщения);
	//КонецЕсли;
	//
	//Возврат( МожноПереходить);
КонецФункции

Функция ФормаОперации_КомандаОбъекта( ЭтаФорма, Объект, Команда = Неопределено) Экспорт
	Если Команда = Неопределено тогда
		Команда = ?( Объект.Проведен, "Провести", "Записать");
	КонецЕсли;
	
	СтрокаСообщения = ЭтаФорма.КомандаОбъекта_Сервер( Команда);
	Если ЗначениеЗаполнено( СтрокаСообщения) тогда
		УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю( СтрокаСообщения);
	иначе
		Оповестить("УГМК_ФормаОперации_КомандаОбъекта", Команда, Объект.Ссылка); 
	КонецЕсли;
КонецФункции

Процедура ОткрытьФормуРегистрацииПропуска(Пользователь,ЗаголовокОкно=Неопределено) Экспорт
	ОсновноеОкно = ОсновноеОкно(ЗаголовокОкно);
	Если ОсновноеОкно<>Неопределено Тогда
		Форма=ОсновноеОкно.ПолучитьСодержимое();
		Если Форма=Неопределено Тогда
			ОткрытьФорму("Документ.УГМК_ДокументФакт.Форма.СменаПользователя",,,,ОсновноеОкно);
		Иначе
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	//Настрйка = УГМК_СлужебныйПовторноеИспользование.ПолучитьДоступныеЗначенияДляРабочегоЦентра(Пользователь, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ОсновноеПодразделение") , МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента(), "РегистрацияПропуска", Ложь);
	//ПараметрыФормы=Новый Структура("Пользователь,Физлицо,Организация",Пользователь,Пользователь.Физлицо,УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь,"ОсновнаяОрганизация"));
	//Если Настрйка.НайтиПоЗначению("Мастер")<>Неопределено Тогда
	//	ПараметрыФормы.Вставить("Мастер",Истина);
	//КонецЕсли;
	ПараметрыФормы = УГМК_ОперативныйУчетВызовСервера.ПодготовитьПараметрыВызова_РегистрацияСобытияСКУД(Пользователь);
	
	ОткрытьФорму("Документ.УГМК_РегистрацияСобытияСКУД.Форма.ФормаДокумента",ПараметрыФормы,,,ОсновноеОкно);
КонецПроцедуры

Функция ВыбратьИсполнителейОперативногоНаряда(Параметры) Экспорт
	ОперативныйНаряд=УГМК_ОперативныйУчетКлиент.ВыбратьОперативныйНаряд(Параметры);
	Сотрудники=Неопределено;
	Если ОперативныйНаряд<>Неопределено Тогда
		Сотрудники=УГМК_ОперативныйУчетВызовСервера.ПолучитьИсполнителейОперативногоНаряда(ОперативныйНаряд);
	КонецЕсли;
	Возврат Сотрудники; 
КонецФункции

Функция ВыбратьОперативныйНаряд(ПараметрыФормы) Экспорт
	//ПараметрыФормы=Новый Структура;
	//ПараметрыФормы.Вставить("РежимФормы","Архив");
	//Если Параметры.Свойство("Организация") Тогда
	//	ПараметрыФормы.Вставить("Организация",Параметры.Организация);
	//КонецЕсли;
	//Если Параметры.Свойство("Подразделение") Тогда
	//	ПараметрыФормы.Вставить("Подразделение",Параметры.Подразделение);
	//КонецЕсли;
	//Если Параметры.Свойство("Физлицо") Тогда
	//	ПараметрыФормы.Вставить("Физлицо",Параметры.Физлицо);
	//КонецЕсли;
	Форма=ПолучитьФорму("Документ.УГМК_ОперативныйНаряд.Форма.ФормаВыбора",ПараметрыФормы);
	ПараметрыФормы=Форма.ОткрытьМодально();
	ОперативныйНаряд=Неопределено;
	Если ПараметрыФормы<>Неопределено Тогда
		Результат=ПараметрыФормы.Результат;
		Если Результат<>Неопределено Тогда
			ОперативныйНаряд=ПараметрыФормы.Результат.ОперативныйНаряд;
		КонецЕсли;
	КонецЕсли;
	Возврат ОперативныйНаряд; 
КонецФункции

Функция НайтиДобавитьЭлементОтбора( Элементы, Поле1, ВидСравнения = Неопределено) Экспорт
	Перем Результат1;
	
	Результат1 = Неопределено;
	
	Для Каждого ЭлементОтбора из Элементы цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле1 тогда
			Результат1 = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат1 = Неопределено тогда
		Результат1 = Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		Результат1.ЛевоеЗначение = Поле1;
		Если ВидСравнения = Неопределено тогда
			Результат1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		иначе
			Результат1.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( Результат1);
КонецФункции

Процедура ОтменитьДокумент( ЭтаФорма, ТекущийПользователь = Неопределено, ИмяЭлемента = "Список", ИмяСкладаПроверкиПрав = "Склад") Экспорт
	//ОЦМ Мобильная
	//ЭлементСписок = ЭтаФорма.Элементы[ ИмяЭлемента];
	//ТекущаяСтрока = ЭлементСписок.ТекущаяСтрока;
	//Если ТипЗнч( ТекущаяСтрока) = Тип("Число") тогда
	//	ТекущаяСтрока = ЭлементСписок.ТекущиеДанные.Ссылка;
	//КонецЕсли;
	//Если ТекущаяСтрока <> Неопределено тогда
	//	Если не ЗначениеЗаполнено( ТекущийПользователь) тогда
	//		ТекущийПользователь = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//	КонецЕсли;
	//	
	//	ТекущиеДанные = ЭлементСписок.ТекущиеДанные;
	//	СкладПроверки = ТекущиеДанные[ ИмяСкладаПроверкиПрав];
	//	ЕстьДоступКСкладу = УГМК_ОперативныйУчет.ЕстьДоступКСкладу( СкладПроверки, ТекущийПользователь);
	//	Если ЕстьДоступКСкладу = Истина тогда
	//		СтрОш = УГМК_ОперативныйУчетВызовСервера.ПроверкаВозможностиСторно( ТекущаяСтрока);
	//		Если ЗначениеЗаполнено( СтрОш) тогда
	//			УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю( СтрОш);
	//		иначе
	//			Ответ = СтандартныеПодсистемыКлиент.ВопросПользователю( "Отменить документ "+ТекущиеДанные.Номер+" от "+ТекущиеДанные.Дата+" ?", РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да тогда
	//				
	//				ПараметрыВ = Новый Структура;
	//				ПараметрыВ.Вставить("СтрокаДляРедактирования", "");
	//				ПараметрыВ.Вставить("ВладелецСвойства", Неопределено);
	//				ПараметрыВ.Вставить("ЗаголовокПоля","Причина сторнирования");
	//				ПараметрыВ.Вставить("ЗаголовокФормы","Укажите причину сторнирования");
	//				
	//				ФормаР = ПолучитьФорму("Документ.УГМК_ДокументФакт.Форма.ФормаРедактированиеСтроки", ПараметрыВ, ЭтаФорма);
	//				
	//				ПричинаСторно = "";
	//				Результат = ФормаР.ОткрытьМодально();
	//				Если Результат <> Неопределено тогда
	//					ПричинаСторно = Строка( Результат);
	//				КонецЕсли;
	//		
	//				СтрокаСообщения = УГМК_ОперативныйУчетВызовСервера.СторноДокумента( ТекущаяСтрока, ПричинаСторно, Ложь);
	//				Если ЗначениеЗаполнено( СтрокаСообщения) тогда
	//					УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю( СтрокаСообщения);
	//				КонецЕсли;
	//				ЭлементСписок.Обновить();
	//			КонецЕсли;
	//		КонецЕсли;
	//	иначе
	//		УГМК_ОперативныйУчетКлиент.ПредупреждениеПользователю( "Нет прав для ["+СкладПроверки+"]");
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт
	//ОЦМ Мобильная

	//Для Каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
	//	Если Лев(ЭлементЗаполнения.Наименование,7) = "Удалить" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено( ЭлементЗаполнения) тогда
	//		ЭлементЗаполненияНаименование = ЭлементЗаполнения.Наименование;
	//	иначе
	//		ЭлементЗаполненияНаименование = "Выбрать из справочника..."
	//	КонецЕсли;
	//	
	//	ПунктМеню = ЭлементМеню.Кнопки.Добавить("Операция_"+ЭлементЗаполнения.Код, ТипКнопкиКоманднойПанели.Действие, 
	//	                                        ЭлементЗаполненияНаименование, ОбъектОбработкиВыбораОперации);
	//	ПунктМеню.ИзменяетДанные = Истина;
	//КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

Функция НайтиЭлементПоИДПН( ОтборЭлементы, Знач ИДПН)
	Перем Результат;
	
	Результат = Неопределено;
	Для каждого Элемент из ОтборЭлементы цикл
		Если Элемент.ИдентификаторПользовательскойНастройки = ИДПН тогда
			Результат = Элемент;
		КонецЕсли;
		
		Если Результат <> Неопределено тогда
			Прервать;
		иначеЕсли ТипЗнч( Результат) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			Результат = НайтиЭлементПоИДПН( Элемент.Элементы, ИДПН);
		КонецЕсли;
	КонецЦикла;
	
	Возврат( Результат);
КонецФункции
	
Процедура Партии_ОбновитьОтборыПоПолямЖурнал( ЭтаФорма) Экспорт
	Список = ЭтаФорма.Список;
	Элементы = ЭтаФорма.Элементы;
	Смена = ЭтаФорма.Смена;
	Дата = ЭтаФорма.Дата;
	
	ДатаПо = ЭтаФорма.ДатаПо;
	Если ЗначениеЗаполнено( ДатаПо) тогда
		ДатаПо = КонецДня( ДатаПо);
	КонецЕсли;
	
	Поле1 = Новый ПолеКомпоновкиДанных("Дата");
	
	ОтборЭлементы = Список.Отбор.Элементы;
	
	ГруппаДата = НайтиЭлементПоИДПН( ОтборЭлементы, ".Авто.ГруппаДата.");
	
	Если ГруппаДата = Неопределено тогда
		ГруппаДата = ОтборЭлементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДата.ИдентификаторПользовательскойНастройки = ".Авто.ГруппаДата.";
		ГруппаДата.Представление = "Дата";
		ГруппаДата.ПредставлениеПользовательскойНастройки = "Дата";
		ГруппаДата.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	ЭлементДата = НайтиЭлементПоИДПН( ГруппаДата.Элементы, ".Авто.ЭлементДата.");
	ЭлементДатаПо = НайтиЭлементПоИДПН( ГруппаДата.Элементы, ".Авто.ЭлементДатаПо.");
	
	Если ЭлементДата = Неопределено тогда
		ЭлементДата = ГруппаДата.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДата.ИдентификаторПользовательскойНастройки = ".Авто.ЭлементДата.";
		ЭлементДата.Представление = "Дата с";
		ЭлементДата.ПредставлениеПользовательскойНастройки = "Дата с";
		ЭлементДата.ЛевоеЗначение = Поле1;
		ЭлементДата.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	КонецЕсли;
		
	Если ЭлементДатаПо = Неопределено тогда
		ЭлементДатаПо = ГруппаДата.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДатаПо.ИдентификаторПользовательскойНастройки = ".Авто.ЭлементДатаПо.";
		ЭлементДатаПо.Представление = "Дата с";
		ЭлементДатаПо.ПредставлениеПользовательскойНастройки = "Дата с";
		ЭлементДатаПо.ЛевоеЗначение = Поле1;
		ЭлементДатаПо.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	КонецЕсли;
	
	ЭлементДата.ПравоеЗначение = Дата;
	ЭлементДатаПо.ПравоеЗначение = ДатаПо;
	
	Если ЗначениеЗаполнено( Дата) и ЗначениеЗаполнено( ДатаПо) тогда
		ЭлементДата.Использование = Истина;
		ЭлементДатаПо.Использование = Истина;
		ГруппаДата.Использование = Истина;
		
		ЗаголовокСтраницы = Формат( Дата, "ДФ=dd.MM.yyyy")+" ... "+Формат( ДатаПо, "ДФ=dd.MM.yyyy");
	иначеЕсли ЗначениеЗаполнено( Дата) тогда
		ЭлементДата.Использование = Истина;
		ЭлементДатаПо.Использование = Ложь;
		ГруппаДата.Использование = Истина;
		
		ЗаголовокСтраницы = Формат( Дата, "ДФ=dd.MM.yyyy")+" ...";
	иначеЕсли ЗначениеЗаполнено( ДатаПо) тогда
		ЭлементДата.Использование = Ложь;
		ЭлементДатаПо.Использование = Истина;
		ГруппаДата.Использование = Истина;
		
		ЗаголовокСтраницы = "... "+Формат( ДатаПо, "ДФ=dd.MM.yyyy");
	иначе
		ЭлементДата.Использование = Ложь;
		ЭлементДатаПо.Использование = Ложь;
		ГруппаДата.Использование = Ложь;
		ЗаголовокСтраницы = "Все даты";
	КонецЕсли;
	
	Поле1 = Новый ПолеКомпоновкиДанных("Смена");
	ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ОтборЭлементы, Поле1);
	Если ЭлементОтбора <> Неопределено тогда
		Если ЗначениеЗаполнено( Смена) тогда
			ЭлементОтбора.ПравоеЗначение = Смена;
			ЭлементОтбора.Использование = Истина;
			ЗаголовокСтраницы = ЗаголовокСтраницы + " ("+Смена+")";
		иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//++ Касьянов А.А. (добавляем отбор по организации)
	Поле1 = Новый ПолеКомпоновкиДанных("Организация");
	Организация=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	ЭлементОтбора = УГМК_ОперативныйУчетКлиентСервер.НайтиДобавитьЭлементОтбора( ОтборЭлементы, Поле1);
	Если ЭлементОтбора <> Неопределено тогда
		Если ЗначениеЗаполнено( Организация) тогда
			ЭлементОтбора.ПравоеЗначение = Организация;
			ЭлементОтбора.Использование = Истина;
			//ЗаголовокСтраницы = ЗаголовокСтраницы + " ("+Смена+")";
		иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	//--
	
	Элементы.СписокПартий.Заголовок = ЗаголовокСтраницы;
КонецПроцедуры

Функция ПолучитьПодключениеКРеглИБ() Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;
	
	//Результат = Новый Структура("Соединение, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки, ОшибкаПодключенияКомпоненты",
	//Неопределено, "", "", Ложь);
	//
	//Параметры = УГМК_ОперативныйУчетВызовСервера.ПолучитьПараметрыПодключенияКРеглИБ();
	//Если Параметры = Неопределено тогда
	//	Результат.КраткоеОписаниеОшибки = "Нет настроек подключения к Регламентированной ИБ (Проверьте План обмена Оперативный учет НСИ (УГМК))";
	//	Результат.ПодробноеОписаниеОшибки = Результат.КраткоеОписаниеОшибки;
	//иначе
	//	Попытка
	//		COMConnector = Новый COMObject("V82.Application"); // "V82.COMConnector"
	//	Исключение
	//		Информация = ИнформацияОбОшибке();
	//		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключится к другой программе: %1'");
	//		
	//		Результат.ОшибкаПодключенияКомпоненты = Истина;
	//		Результат.ПодробноеОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
	//		Результат.КраткоеОписаниеОшибки       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
	//		
	//		Возврат Результат;
	//	КонецПопытки;
	//	
	//	Если Параметры.ВариантРаботыИнформационнойБазы = 0 Тогда
	//		// Файловый режим
	//		Если ПустаяСтрока(Параметры.КаталогИнформационнойБазы) Тогда
	//			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задано месторасположение каталога информационной базы.'");
	//			Результат.ПодробноеОписаниеОшибки = СтрокаСообщенияОбОшибке;
	//			Результат.КраткоеОписаниеОшибки   = СтрокаСообщенияОбОшибке;
	//			Возврат Результат;
	//			
	//		КонецЕсли;
	//		
	//		Если Параметры.АутентификацияОперационнойСистемы Тогда
	//			СтрокаСоединения = "File = ""&КаталогИнформационнойБазы""";
	//			
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&КаталогИнформационнойБазы", Параметры.КаталогИнформационнойБазы);
	//			
	//		Иначе
	//			СтрокаСоединения = "File = ""&КаталогИнформационнойБазы""; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
	//			
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&КаталогИнформационнойБазы", Параметры.КаталогИнформационнойБазы);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяПользователя",           Параметры.ИмяПользователя);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ПарольПользователя",        Параметры.ПарольПользователя);
	//			
	//		КонецЕсли;
	//		
	//	Иначе 
	//		// Клиент-серверный вариант работы информационной базы
	//		Если ПустаяСтрока(Параметры.ИмяСервера1СПредприятия) Или ПустаяСтрока(Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
	//			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не заданы обязательные параметры подключения: ""Имя сервера""; ""Имя информационной базы на сервере"".'");
	//			
	//			Результат.ПодробноеОписаниеОшибки = СтрокаСообщенияОбОшибке;
	//			Результат.КраткоеОписаниеОшибки   = СтрокаСообщенияОбОшибке;
	//			Возврат Результат;
	//			
	//		КонецЕсли;
	//		
	//		Если Параметры.АутентификацияОперационнойСистемы Тогда
	//			СтрокаСоединения = "Srvr = &ИмяСервера1СПредприятия; Ref = &ИмяИнформационнойБазыНаСервере1СПредприятия";
	//			
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяСервера1СПредприятия",                     Параметры.ИмяСервера1СПредприятия);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяИнформационнойБазыНаСервере1СПредприятия", Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия);
	//			
	//		Иначе
	//			СтрокаСоединения = "Srvr = &ИмяСервера1СПредприятия; Ref = &ИмяИнформационнойБазыНаСервере1СПредприятия; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
	//			
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяСервера1СПредприятия",                     Параметры.ИмяСервера1СПредприятия);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяИнформационнойБазыНаСервере1СПредприятия", Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяПользователя",                             Параметры.ИмяПользователя);
	//			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ПарольПользователя",                          Параметры.ПарольПользователя);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Попытка
	//		Результат.Соединение = COMConnector;
	//		Результат.Соединение.Connect(СтрокаСоединения);
	//	Исключение
	//		Информация = ИнформацияОбОшибке();
	//		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключится к другой программе: %1'");
	//		
	//		Результат.ОшибкаПодключенияКомпоненты = Истина;
	//		Результат.ПодробноеОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
	//		Результат.КраткоеОписаниеОшибки       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
	//		
	//	КонецПопытки;
	//КонецЕсли;

	//Возврат( Результат);
КонецФункции

Процедура ОбновитьФайлМониторингаАктивности() Экспорт
	//ОЦМ Мобильная
	//ИмяКаталога = УГМК_СлужебныеФункции.ПолучитьНастройку("Мониторинг_КаталогФайлаАктивности");
	//Если ЗначениеЗаполнено( ИмяКаталога) тогда 
	//	 //И УГМК_ОперативныйУчетВызовСервера.ЭтоКонфигурацияОперативногоУчета() тогда
	//	 
	//	КаталогНаДиске = Новый Файл( ИмяКаталога);
	//	Если КаталогНаДиске.Существует() Тогда
	//		ИмяФайла = ИмяКаталога;
	//		Если Прав( ИмяФайла, 1) <> "\" тогда
	//			ИмяФайла = ИмяФайла + "\";
	//		КонецЕсли;
	//		ИмяФайла = ИмяФайла+"tm.txt";
	//		
	//		Попытка
	//			ТекстФ = Новый ТекстовыйДокумент;
	//			ТекстФ.ДобавитьСтроку( Строка( ТекущаяДата()));
	//			ТекстФ.Записать( ИмяФайла);
	//		исключение
	//			УГМК_ОперативныйУчетВызовСервера.ЗаписатьЗаписьЖурналаРегистрации("ОбновитьФайлМониторингаАктивности", "ОшибкаЗаписиФайла:"+ОписаниеОшибки());
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Функция ПроверкаДатыОписи( ОбъектДата, ОбъектСкладПолучатель) Экспорт
	СтрОш = "";
	
	МинимальнаяДата = УГМК_ОперативныйУчетВызовСервера.МинимальнаяДатаОписи( ОбъектСкладПолучатель, ОбъектДата);
	Если ОбъектДата < МинимальнаяДата.МинимальнаяДатаОписи тогда
		СтрОш = СтрОш + "Минимально возможная дата проведения описи "+МинимальнаяДата.МинимальнаяДатаОписи+Символы.ПС+
		"Обнаружены движения:"+МинимальнаяДата.СтрОш;
	КонецЕсли;
	
	Возврат( СтрОш)
КонецФункции

//+ УГМК_isn 16.07.2015 14:36:11
Процедура ОткрытиеМультиязычногоРеквизита(Форма, Объект, СтандартнаяОбработка, ИмяРеквизита, СинонимРеквизита) Экспорт 

	СтандартнаяОбработка	= Ложь;
	
	масПредставления = Объект.УГМК_МногоязычныеПредставления.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	СоотвПредставления = Новый Соответствие;
	Для Каждого текСтрока Из масПредставления Цикл
		СоотвПредставления.Вставить(текСтрока.Язык, текСтрока.Представление);
	КонецЦикла;
	
	//Параметры = Новый Структура("СоотвПредставления, ЗначениеРеквизитаФормы, ИмяРеквизита, СинонимРеквизита", СоотвПредставления, Наименование, "Наименование", "Наименование");
	Параметры = Новый Структура("СоотвПредставления, ИмяРеквизита, СинонимРеквизита", СоотвПредставления, ИмяРеквизита, СинонимРеквизита);
	ОткрытьФорму("ОбщаяФорма.УГМК_ФормаМногоязычногоПредставленияДанных", Параметры, Форма, Форма.КлючУникальности);

КонецПроцедуры

Функция ОбновитьМногоязычноеПредставление(тзМногоязычныеПредставления, Язык, ИмяРеквизита, Представление)
	масСтроки = тзМногоязычныеПредставления.НайтиСтроки(Новый Структура("Язык, ИмяРеквизита", Язык, ИмяРеквизита));
	Если масСтроки.Количество() > 0 Тогда
		текСтрока = масСтроки[0];
		текСтрока.Представление = Представление;
	ИначеЕсли ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = тзМногоязычныеПредставления.Добавить();
		НоваяСтрока.Язык = Язык;
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.Представление = Представление;
	КонецЕсли;	
КонецФункции

Функция ОбработкаОповещенияВыбораМногоязычногоРеквизита(СоотвПредставление, ИмяРеквизита, Объект, Форма) Экспорт
	Если СоотвПредставление.Количество() > 0 Тогда
		//ТекущийЯзык = ПараметрыСеанса.ТекЯзыкДанных_1бит;
		тзМногоязычныеПредставления = Объект.УГМК_МногоязычныеПредставления;
		Для Каждого текЭл Из СоотвПредставление Цикл
			ОбновитьМногоязычноеПредставление(тзМногоязычныеПредставления, текЭл.Ключ, ИмяРеквизита, текЭл.Значение);
			//Если текЭл.Ключ.Основной Тогда
			//	Объект[ИмяРеквизита] = текЭл.Значение;
			//КонецЕсли;
			//Если текЭл.Ключ = ТекущийЯзык Тогда 
			//	Форма["я" + ИмяРеквизита] = текЭл.Значение; 
			//КонецЕсли;
		КонецЦикла;
		Форма.Модифицированность = Истина;
	КонецЕсли; 
КонецФункции

//- УГМК_isn 16.07.2015 14:36:11

Процедура ПоказатьСписокДокументов( СписокДокументов) Экспорт
	ОчиститьСообщения();
	Для каждого Элемент из СписокДокументов цикл
		Если ЗначениеЗаполнено( Элемент.Представление) тогда
			Сообщить( Элемент.Представление);
		иначе
			Сообщить( Строка( Элемент.Значение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьПодборПоФондам( Организация, ПараметрыВ) Экспорт
	//ОЦМ Мобильная
	//Состояние("Подготовка выбора...");
	//Попытка
	//	ПараметрыФормы = Новый Структура("ЗапрашиватьКоличество,ИспользоватьWEB_Сервис,НеБлокироватьВладельца,НеВыводитьКоличество,НеВыводитьСообщенияЗадания,НетПеренестиВДокумент,ОрганизацияWEB_сервиса,ПараметрыВх,ПараметрыОле");
	//	ЗаполнитьЗначенияСвойств( ПараметрыФормы, ПараметрыВ);
	//	
	//	ПараметрыФормы.ИспользоватьWEB_Сервис = ПараметрыВ.ЭтоОУ;
	//	ПараметрыФормы.ОрганизацияWEB_сервиса = Организация;
	//	
	//	ОткрытьФорму("Обработка.УГМК_ФормаЗаполненияИзРегистра_Фонды_ДляОУ.Форма.Форма", ПараметрыФормы);
	//Исключение
	//	ПредупреждениеПользователю("Не удалось открыть форму подбора..."+Символы.ПС+
	//		ОписаниеОшибки());
	//КонецПопытки; 
КонецПроцедуры

Функция КонтрольДокументаПриемкиГП( ЭтаФорма, Команда = Неопределено) Экспорт
	Объект = ЭтаФорма.Объект;
	
	СтрОш = "";
	Если Объект.ВидОперации = ПредопределенноеЗначение("Справочник.УГМК_СостоянияЗаказа.ВзвешиваниеГП") тогда
		Если Объект.Продукция.Количество() = 0 тогда
			СтрОш = СтрОш + " Нет Продукции;";
		иначе
			СтрокаП = Объект.Продукция[ 0];
			Если не ЗначениеЗаполнено( СтрокаП.Продукция) тогда
				СтрОш = СтрОш + " Нет Продукции;";
			КонецЕсли;
			Если не ЗначениеЗаполнено( СтрокаП.ПаспортПартииПродукции) тогда
				СтрОш = СтрОш + " Нет Партии;";
			КонецЕсли;
			Если не ЗначениеЗаполнено( СтрокаП.СерияПродукции) тогда
				СтрОш = СтрОш + " Нет Серии;";
			КонецЕсли;
			Если не ЗначениеЗаполнено( СтрокаП.КоличествоПродукции) тогда
				СтрОш = СтрОш + " Не указано Количество;";
			КонецЕсли;
		КонецЕсли;
	иначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Справочник.УГМК_СостоянияЗаказа.ПредъявлениеОТКДляПриемкиГП") тогда
		Если Объект.Материалы.Количество() = 0 тогда
			СтрОш = СтрОш + " Документ пуст.";
		иначе
			СоответствиеСтрокаПартия = Новый Соответствие;
			СтрОшСтроки = "";
			Для каждого Строка из Объект.Материалы цикл
				СтрОшСтрока = "";
				Если ЗначениеЗаполнено( Строка.ПаспортПартии) тогда
					СоответствиеСтрокаПартия.Вставить( Строка.НомерСтроки, Строка.ПаспортПартии);
				иначеЕсли Команда = "Провести" тогда
					СтрОшСтрока = СтрОшСтрока+ "Не указана Партия;";
				КонецЕсли;
				Если не ЗначениеЗаполнено( Строка.МаркаСплава) тогда
					СтрОшСтрока = СтрОшСтрока+ "Не указана Марка;";
				КонецЕсли;
				Если не ЗначениеЗаполнено( Строка.ГруппаПродукции) тогда
					СтрОшСтрока = СтрОшСтрока+ "Не указана Группа продукции;";
				КонецЕсли;
				
				Если ЗначениеЗаполнено( СтрОшСтрока) тогда
					СтрОшСтроки = СтрОшСтроки + Символы.ПС+ Строка( Строка.НомерСтроки)+": "+СтрОшСтрока;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено( СтрОшСтроки) тогда
				СтрОш = СтрОш + Символы.ПС + СтрОшСтроки;
			КонецЕсли;
			
			Если (Команда = "Провести") и (СоответствиеСтрокаПартия.Количество() > 0) тогда
				СтрОш = СтрОш + Символы.ПС + УГМК_ОперативныйУчетВызовСервера.КонтрольПрослеживаемостиГП( СоответствиеСтрокаПартия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат( СтрОш);
КонецФункции

Функция ПолучитьФорму_ВводКоличестваОперативныйДокумент( ЭтаФорма, Объект, ПараметрыФормы, ДополнениеИмени, ДополнениеИмениГруппа="") Экспорт
	
	ПараметрыФормы.Вставить( "ДополнениеИмениГруппа", ДополнениеИмениГруппа);
	ПараметрыФормы.Вставить( "ДополнениеИмени", ДополнениеИмени);
	
	ОткрыватьНовуюФормуВводаКоличества=УГМК_СлужебныеФункции.ПолучитьНастройку("ОткрыватьНовуюФормуВводаКоличества");
	Если ОткрыватьНовуюФормуВводаКоличества<>Истина Тогда
		ФормаРедактирования = ПолучитьФорму("Обработка.УГМК_ВводКоличестваОперативныйДокумент.Форма", ПараметрыФормы, ЭтаФорма);
	Иначе
		ФормаРедактирования = ПолучитьФорму("Обработка.УГМК_ВводКоличестваОперативныйДокумент.Форма.ФормаНовая", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
	ФормаРедактирования.Объект.ДополнениеИмени = ДополнениеИмени;

    Возврат( ФормаРедактирования)
КонецФункции