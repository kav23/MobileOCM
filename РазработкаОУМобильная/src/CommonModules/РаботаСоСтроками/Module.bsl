// Ищет подстроку в строке, после указанной позиции
Функция НайтиПосле(Строка, Подстрока, НачальнаяПозиция = 0) Экспорт
	
	Позиция = Найти(Сред(Строка, НачальнаяПозиция + 1), Подстрока);
	Если Позиция = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат НачальнаяПозиция + Позиция;	

КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(
	Знач Строка, 
	Знач Разделитель = ",", 
	Знач ПропускатьПустыеСтроки = Неопределено,
	ИсключатьДубли = Ложь,
	ВсеВНижнемРегистре = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если ВсеВНижнемРегистре Тогда
			Подстрока = НРег(Подстрока);
		КонецЕсли;
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если ИсключатьДубли 
				И Результат.Найти(Подстрока) = Неопределено 
				Или Не ИсключатьДубли Тогда
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если ВсеВНижнемРегистре Тогда
		Строка = НРег(Строка);
	КонецЕсли;
		
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если ИсключатьДубли 
			И Результат.Найти(Строка) = Неопределено 
			Или Не ИсключатьДубли Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заменяет повторное вхождение символа на одиночное
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт
	
	ВременныйТекст = Текст;
	
	ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	Пока ПозицияДвойногоСимвола <> 0 Цикл
		ВременныйТекст = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	КонецЦикла;
	
	Возврат ВременныйТекст;
	
КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//										   для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//	ЧислоЦифрамиПредметИсчисленияПрописью(23,  НСтр("ru = 'минуту,минуты,минут'")); // Вернет "23 минуты".
//	ЧислоЦифрамиПредметИсчисленияПрописью(15,  НСтр("ru = 'минуту,минуты,минут'")); // Вернет "15 минут".
//
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = Формат(Число,"ЧН=0");
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = Результат + " " + МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = Результат + " " + МассивПредставлений[1];
	Иначе
		Результат = Результат + " " + МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;	
			
КонецФункции

// Возвращает текстовое представление единицы измерения в правильном склонении и числе
//
// Параметры
//  Число - Число - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//										   для двух и для пяти единиц, разделитель - запятая.
//										   Пример: "минуту,минуты,минут".
//
// Возвращаемое значение
//  Строка - текстовое представление единицы измерения.
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = "";
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = МассивПредставлений[0];
	ИначеЕсли Число > 1 и Число < 5 Тогда
		Результат = МассивПредставлений[1];
	Иначе
		Результат = МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С АДРЕСАМИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Принимает строку почтовых адресов в виде
// "name1 <addr1@dom1>, name2 <addr2@dom2>, ..., nameN <addrN@domN>"
// или
// "name1 <addr1@dom1>; name2 <addr2@dom2>; ...; nameN <addrN@domN>"
// Возвращает:
// Результат (Массив)
// - Элемент (Структура)
//   - Адрес (Строка)
//   - Представление (Строка)
//
Функция РазложитьСтрокуПочтовыхАдресов(Знач ПочтовыеАдресаСтр) Экспорт
	
	Результат = Новый Массив;
	
	ПочтовыеАдресаСтр= СтрЗаменить(ПочтовыеАдресаСтр, ";", Символы.ПС);
	ПочтовыеАдресаСтр = СтрЗаменить(ПочтовыеАдресаСтр, ",", Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(ПочтовыеАдресаСтр) Цикл
		АдресСтр = СокрЛП(СтрПолучитьСтроку(ПочтовыеАдресаСтр, Счетчик));
		Если ПустаяСтрока(АдресСтр) Тогда
			Продолжить;
		КонецЕсли;
		АдресЭлектроннойПочтыИнфо = РазложитьПредставлениеАдресаЭлектроннойПочты(АдресСтр);
		Результат.Добавить(АдресЭлектроннойПочтыИнфо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Принимает строку почтового адреса в виде
// "name <addr@dom>"
// Возвращает:
// Результат (Структура)
// - Адрес (Строка) - addr@dom
// - ОтображаемоеИмя (Строка) - name
// - Пользователь (Строка)-  addr
// - Домен (Строка) - dom
//
Функция РазложитьПредставлениеАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочтыСтр) Экспорт
	
	Результат = Новый Структура("Адрес, ОтображаемоеИмя, Пользователь, Домен", "", "", "", "");
	
	АдресЭлектроннойПочтыСтр = СокрЛП(АдресЭлектроннойПочтыСтр);
	
	Поз = Найти(АдресЭлектроннойПочтыСтр, "@");
	Если Поз = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтрокаАдреса = "";
	ПозицияПервогоСимволаАдреса = 0;
	ПозицияПоследнегоСимволаАдреса = 0;
	
	// Идем влево от @
	Для Индекс = 0 По Поз - 1 Цикл
		
		ИндексВСтроке = Поз - Индекс;
		СтрокаАдресаПроверка = Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1) + СтрокаАдреса;
		
		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПервогоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// Идем вправо от @
	Для ИндексВСтроке = Поз + 1 По СтрДлина(АдресЭлектроннойПочтыСтр) Цикл
		
		СтрокаАдресаПроверка = СтрокаАдреса + Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1);
		
		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПоследнегоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Результат.Адрес = СтрокаАдреса;
	// слева от адреса берем представление
	Результат.ОтображаемоеИмя = Лев(АдресЭлектроннойПочтыСтр, ПозицияПервогоСимволаАдреса - 2);
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);
	
	Если Не ЭтоАдресЭлектроннойПочты(Результат.Адрес) Тогда
		Результат.Адрес = "";
	Иначе
		Поз = Найти(Результат.Адрес, "@");
		Результат.Пользователь = Лев(Результат.Адрес, Поз - 1);
		Результат.Домен = Сред(Результат.Адрес, Поз + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет строку на формат адреса электронной почты
// проверка не точная но основные элементы на месте
//
Функция ЭтоАдресЭлектроннойПочты(АдресЭлектроннойПочты) Экспорт
	
	Поз = Найти(АдресЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрЧислоВхождений(АдресЭлектроннойПочты, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Прав(АдресЭлектроннойПочты, 1) = "."
		Или Лев(АдресЭлектроннойПочты, 1) = "." Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Найти(АдресЭлектроннойПочты, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл
		Если Найти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Пользователь = Лев(АдресЭлектроннойПочты, Поз - 1);
	Если СтрДлина(Пользователь) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Сервер = Сред(АдресЭлектроннойПочты, Поз + 1);
	Если СтрДлина(Сервер) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поз = Найти(Сервер, ".");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Формирует представление адресата электронной почты
//
//Параметры
//  Имя     - Строка - имя адресата
//  Адрес   - Строка - адрес электронной почты адресата
//  Контакт - СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Результат (Строка) - "Имя <Адрес>" или "Адрес"
//
Функция ПолучитьПредставлениеАдресаЭлектроннойПочты(Имя, Адрес) Экспорт
	
	Если ПустаяСтрока(Имя) Или Имя = Адрес Тогда
		Результат = Адрес;
	ИначеЕсли ПустаяСтрока(Адрес) Тогда
		Результат = Имя;
	Иначе
		Результат = Имя + " <" + Адрес + ">";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(АдресЭлектроннойПочты) Экспорт
	
	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл
		Если Найти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции