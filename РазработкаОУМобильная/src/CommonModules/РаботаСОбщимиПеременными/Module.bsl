// МЕХАНИЗМ ОБЩИХ ПЕРЕМЕННЫХ
//
// Для работы с механизмом общих переменных используются функции
//	1. глЗначениеПеременной - для получения значения переменной
//	2. глЗначениеПеременнойУстановить - для изменения значения переменной 
//									(используется в исключительных ситуациях, не для всех переменных).
// 
// ВАЖНО: не следует явно вызывать экспортные функции этого модуля


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА ОБЩИХ ПЕРЕМЕННЫХ

// Функция предназначена для получения значения по имени переменной из КЭШа конфигурации
// Вызывается из функции ПолучитьЗначениеПеременной
//
// Параметры:
//	Имя					- Строка, имя переменной
//	НайденноеЗначение	- Произвольное значение, значение переменной. Заполняется в ходе выполнения функции
//  Кэш					- КЭШ из которого получали значение. Заполняется в ходе выполнения функции
//  ПоместитьВКэш		- Булево, Истина, если значение требуется поместить в КЭШ. Заполняется в ходе выполнения функции
//
// Возвращаемое значение: 
//  Булево - Истина, если значение было получено из КЭШа, иначе Ложь
//
Функция ПолучитьИзКэшаКонфигурации(Имя, НайденноеЗначение, Кэш, ПоместитьВКэш) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	Кэш = глОбщиеЗначения;
	#Иначе	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	#КонецЕсли
	
	Если Кэш <> Неопределено Тогда
		// Ищем значение в структуре
		Если Кэш.Свойство(Имя, НайденноеЗначение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	//Не нашли значение в кэше - вычисленное значение надо будет поместить в Кэш
	ПоместитьВКэш = Истина;
	
	Возврат Ложь;
	
КонецФункции // 

// Функция предназначена для получения значения по имени переменной
// Вызывается из функции глЗначениеПеременной
//
// Параметры:
//	Имя - Строка, имя переменной
//
// Возвращаемое значение: 
//  Произвольное значение
//
Функция ПолучитьЗначениеПеременной(Имя) Экспорт
	//ОЦМ Мобильная
	Возврат Неопределено;	
	//ИмяПараметраВР = ВРег(Имя);
	//
	//НайденноеЗначение = Неопределено;
	//
	//Кэш = Неопределено;
	//ПоместитьВКэш = Ложь;
	//
	//Если НайденноеЗначение = Неопределено Тогда
	//	
	//	Если ИмяПараметраВР = ВРег("глКомпонентаСклоненияФИО") Тогда
	//		#Если Клиент Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			Попытка
	//				// Загружаем внешнюю компоненту
	//				ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native);
	//				НайденноеЗначение = Новый("AddIn.Decl.CNameDecl");
	//			Исключение
	//				// УГМК_Начало 27.01.2012 12:55:55 update1c 
	//				// Определяем имя внешней компоненты
	//				Компонента = "NameDecl.dll"; 
	//				
	//				Попытка
	//					// Загружаем внешнюю компоненту
	//					ЗагрузитьВнешнююКомпоненту(Компонента); 
	//					НайденноеЗначение = Новый("AddIn.NameDeclension");
	//				Исключение
	//					// Не удалось выполнить операции с внешней компонентой
	//					ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
	//				КонецПопытки;
	//				
	//				// УГМК_Конец 27.01.2012 12:56:01 update1c 
	//				// Не удалось выполнить операции с внешней компонентой
	//				//ОбщегоНазначения.СообщитьОбОшибке("Ошибка загрузки внешней компоненты для склонения ФИО! Функции склонения будут недоступны!");
	//			КонецПопытки;
	//		КонецЕсли; 
	//		#КонецЕсли
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("глТекущийПользователь") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
	//		КонецЕсли; 
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаАвтоОбменДанными") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
	//		КонецЕсли; 
	//		
	//	// Для получения переменной используется КЭШ конфигурации, 
	//	// т.к. ее значение может изменяться программно в течение сеанса
	//		
	//	ИначеЕсли ВРег(ИмяПараметраВР) = ВРег("глКоллекцияЗначенийЗаголовков") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = ЗаполнитьКоллекциюЗначенийЗаголовков();
	//		КонецЕсли; 
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("ДатаНачалаОпределенияСчетовПриПроведенииДокументов") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = '20090101';
	//		КонецЕсли; 
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("глСоответствиеТекстовЭлектронныхПисем")
	//		ИЛИ ИмяПараметраВР = ВРег("ЗначенияНастроекПользователей")  
	//		ИЛИ ИмяПараметраВР = ВРег("ЗначенияДополнительныхПравПользователя") 
	//		ИЛИ ИмяПараметраВР = ВРег("КэшСтратегииАвтонумерации") Тогда
	//		
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = Новый Соответствие;
	//		КонецЕсли;
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("ТаблицаСоответствийФайловЭлектронныхПисем") Тогда
	//		
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = Новый ТаблицаЗначений;
	//			НайденноеЗначение.Колонки.Добавить("ИД"          ,Новый ОписаниеТипов("Строка"));
	//			НайденноеЗначение.Колонки.Добавить("ПутьКФайлу"  ,Новый ОписаниеТипов("Строка"));
	//		КонецЕсли;
	//		
	//	// Эти переменные используются только на клиенте
	//	#Если Клиент Тогда
	//	ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем") Тогда	
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
	//		КонецЕсли; 
	//		
	//	ИначеЕсли ИмяПараметраВР = ВРег("глЗапрашиватьПодтверждениеПриЗакрытии") Тогда	
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = Истина;		
	//		КонецЕсли; 
	//	#КонецЕсли
	//	
	//	ИначеЕсли ИмяПараметраВР = ВРег("глОбработкаСообщений") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = Обработки.СообщенияВыполняемыхДействий.Создать();
	//		КонецЕсли; 
	//	
	//	ИначеЕсли ИмяПараметраВР = ВРег("глСпискиРегистраторов") Тогда
	//		Если НЕ ПолучитьИзКэшаКонфигурации(ИмяПараметраВР, НайденноеЗначение, Кэш, ПоместитьВКэш) Тогда
	//			НайденноеЗначение = ЗаполнитьСтруктуруРегистрРегистраторы();
	//		КонецЕсли; 
	//		
	//	ИначеЕсли ВРег(ИмяПараметраВР) = ВРег("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
	//		НастройкиЗащитыПерсональныхДанных = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.Получить();
	//		
	//		НайденноеЗначение = НастройкиЗащитыПерсональныхДанных.ОграничитьКоличествоСотрудниковПриПечатиВедомости;
	//	Иначе
	//		
	//		// Остальные переменные получим используя механизм повторно возвращамых значений
	//		НайденноеЗначение = РаботаСОбщимиПеременнымиПовтИсп.ПолучитьЗначениеПеременной(Имя);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	//
	//Если ПоместитьВКэш Тогда
	//	
	//	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	//		
	//		Если глОбщиеЗначения = Неопределено Тогда
	//			глОбщиеЗначения = Новый Структура;
	//		КонецЕсли; 
	//		глОбщиеЗначения.Вставить(Имя, НайденноеЗначение);
	//		
	//	#Иначе	
	//		
	//		// В функции ПолучитьИзКэшаКонфигурации получили значение параметра сеанса
	//		// Добавим в него новое значение переменной и поместим в КЭШ
	//		Кэш.Вставить(Имя, НайденноеЗначение);
	//		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	//		
	//	#КонецЕсли
	//	
	//КонецЕсли; 
	//
	//Возврат НайденноеЗначение;
	//
КонецФункции

Процедура УстановитьЗначениеПеременной(ИмяПараметра, ЗначениеПараметра, ОбновитьКэшНаСервере = Ложь) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
		// обновление переменной на клиенте или во внешнем соединении  
		
		// если глобальная переменная глОбщиеЗначения еще не инициализирована, инициализируем ее 
		Если глОбщиеЗначения = Неопределено Тогда
			глОбщиеЗначения = Новый Структура;
		КонецЕсли;
		
		// Установим новое значение переменной
		глОбщиеЗначения.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Если НЕ ОбновитьКэшНаСервере Тогда
			Возврат;			
		КонецЕсли;
	#КонецЕсли
	
	// Обновим значение переменной в кэше на сервере. Это происходит в двух случаях:
	// 1. при выполнении на клиенте, когда ОбновитьКэшНаСервере = Истина (см. выше)
	// 2. при выполнении на сервере
	КэшНаСервере = ПараметрыСеанса.ОбщиеЗначения.Получить();
		
	// Если ПараметрыСеанса.ОбщиеЗначения еще не инициализирована, инициализируем ее 
	Если КэшНаСервере = Неопределено Тогда
		КэшНаСервере = Новый Структура;
	КонецЕсли;
	
	КэшНаСервере.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(КэшНаСервере);
	
КонецПроцедуры

// Процедура добавляет обязательные значения в кэш ОбщиеЗначения при запуске системы и после очистки кэша
//
Процедура ДобавитьОбязательныеЗначенияВКэш() Экспорт
	//ОЦМ Мобильная
	//глЗначениеПеременной("РазрешитьВыводитьСообщенияВПанельКомментариев");
	//глЗначениеПеременной("ДублироватьСообщенияВЖурналРегистрации");
	//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыводитьСообщенияВПанельКомментариев");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ АКТУАЛЬНОСТИ ЗНАЧЕНИЙ ПЕРМЕННЫХ

// Процедура очищает переменные глОбщиеЗначения и ПараметрыСеанса.ОбщиеЗначения
// используемые функцией глЗначениеПеременной.
//
Процедура ОчиститьДанныеКЭШа()

	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	глОбщиеЗначения = Неопределено;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	//Добавление обязательных значений в кеш ОбщиеЗначения
	ДобавитьОбязательныеЗначенияВКэш();
КонецПроцедуры
 
Процедура ОбновитьКЭШПриЗаписиКонстант(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		ОчиститьДанныеКЭШа();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьКЭШПриЗаписиРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ Тогда
		ОчиститьДанныеКЭШа();
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЧИСЛЯЮЩИЕ ЗНАЧЕНИЯ ПЕРЕМЕННЫХ
// Заполняет структуру - Регистр и список регистраторов этого регистра
//
// Возвращаемое значение:
//   Структура   - Ключ - Имя регистра, Значение - СписокЗначений, регистраторы этого регистра
//
Функция ЗаполнитьСтруктуруРегистрРегистраторы()

	Регистраторы = Новый Структура("Регистр","СписокРегистраторов");
	
	Для каждого МетаданныеДокумент Из Метаданные.Документы Цикл
		
		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл
			
			СписокРегистраторов = Неопределено;
			Если НЕ Регистраторы.Свойство(МетаданныеРегистр.Имя, СписокРегистраторов) Тогда
				СписокРегистраторов = Новый СписокЗначений;
			КонецЕсли;
			
			СписокРегистраторов.Добавить(Документы[МетаданныеДокумент.Имя], МетаданныеДокумент.Синоним);

			Регистраторы.Вставить(МетаданныеРегистр.Имя, СписокРегистраторов);
			
		КонецЦикла;	
			
	КонецЦикла;
	
	Возврат Регистраторы;

КонецФункции // ЗаполнитьСтруктуруРегистрРегистраторы()

