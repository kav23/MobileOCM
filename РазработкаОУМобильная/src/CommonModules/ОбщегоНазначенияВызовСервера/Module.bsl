#Область ПрограммныйИнтерфейс

Процедура СохранитьНастройкуПользователя(Настройка, ЗначениеНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		Настройка = Перечисления.НастройкиПользователя[Настройка];
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗначениеНастроекПользователя.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Настройка = Настройка;
	
	Если ЗначениеНастройки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеНастройки) = Тип("СтандартныйПериод") Тогда
		МенеджерЗаписи.ЗначениеХранилище = Новый ХранилищеЗначения(ЗначениеНастройки);
	Иначе
		МенеджерЗаписи.Значение = ЗначениеНастройки;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Выполняет необходимые действия перед запуском приложения.
//
Процедура ОбновитьПриложение() Экспорт
	
	НачатьТранзакцию();
	
	ПараметрыСеанса.ОткрыватьЧтоНового = Ложь;
	ПараметрыСеанса.ОбновлениеБД       = Ложь;
	
	ПараметрыСеанса.ВерсияФорматаОбмена = 0;
	
	ВерсияПриложенияДоОбновления = Константы.ТекущаяВерсияПриложения.Получить();
	НоваяВерсияПриложения = Метаданные.Версия;
	
	Если ВерсияПриложенияДоОбновления <> НоваяВерсияПриложения Тогда
		
		// ПодключаемоеОборудование
		МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
		// Конец ПодключаемоеОборудование
		
		Если ЗначениеЗаполнено(ВерсияПриложенияДоОбновления) Тогда
			
			ПараметрыСеанса.ОткрыватьЧтоНового = Истина;
			
			Если ОбновлениеБД.ОпределитьНеобходимостьОбновления() Тогда
				ПараметрыСеанса.ОбновлениеБД = Истина;
				
				// Установка ТекущаяВерсияПриложения будет после успешного обновления
			Иначе
				Константы.ТекущаяВерсияПриложения.Установить(НоваяВерсияПриложения);
			КонецЕсли;
			
		Иначе
			Константы.ТекущаяВерсияПриложения.Установить(НоваяВерсияПриложения);
		КонецЕсли;
	КонецЕсли;
	
	Справочники.ВидыАлкогольнойПродукции.ЗаполнитьСправочникИзКлассификатораВидовАлкогольнойПродукции();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура УстановитьРежимСинхронизацииДемоверсии() Экспорт
	
	Если ЗначениеНастроекПовтИсп.ЭтоДемоверсия() Тогда
		Константы.РежимСинхронизацииДанных.Установить(Перечисления.РежимСинхронизацииДанных.Автономный);
		Справочники.ЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьЗапускПриложения() Экспорт
	
	ПервыйЗапуск = НЕ ЗначениеЗаполнено(Константы.РежимСинхронизацииДанных.Получить());
	
	Если ПервыйЗапуск Тогда
		ОбщегоНазначения.ИзменитьАдминистративныйРежим(Истина);
	КонецЕсли;
	
	Возврат ПервыйЗапуск;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты,,,Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный тип второго параметра'");
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПовторноИспользуемыеЗначенияСервер() Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Устанавливает значение любой константы.
//
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, Значение) Экспорт
	
	Константы[ИмяКонстанты].Установить(Значение);
	
КонецПроцедуры

// Получает ссылку предопределенного элемента по его полному имени.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

//@
Процедура УстановитьОриентациюЭкрана() Экспорт
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	
КонецПроцедуры

#КонецОбласти
