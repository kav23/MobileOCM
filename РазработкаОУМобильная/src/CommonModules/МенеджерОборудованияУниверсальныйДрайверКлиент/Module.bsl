                                            
#Область ПрограммныйИнтерфейс

// Функция осуществляет подключение устройства
//
Функция ПодключитьУстройство(ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Структура();
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "OPEN", Неопределено, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет отключение устройства
//
Функция ОтключитьУстройство(ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Структура();
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CLOSE", Неопределено, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Структура();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫСОКОГО УРОВНЯ
	
	// Закрыть смену
	Если Команда = "GetAvailable" ИЛИ Команда = "ПолучитьДоступность" Тогда
		Результат = ПолучитьДоступность(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙТСВАМИ
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ПечатьЧека(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		Результат = ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать этикетки
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток"  Тогда
		Результат = ПечатьЭтикеток(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Формирование фискального отчета (Z или X)
	ИначеЕсли Команда = "FiscalReport" ИЛИ Команда = "ФискальныйОтчет" Тогда
		Результат = СформироватьФискальныйОтчет(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЧЕКОВ
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПЛАТЕЖНЫМИ СИСТЕМАМИ
	
	// Оплата по платежной карте
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Результат = ОплатитьПлатежнойКартой(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Возврат платежа по платежной карте
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Результат = ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отмена платежа по платежной карте
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Результат = ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ УСТРОЙСТВ ВВОДА ДАННЫХ
	
	ИначеЕсли Команда = "GetData" ИЛИ Команда = "ПолучитьДанные" Тогда
		Результат = ПолучитьДанныеВвода(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ДРАЙВЕРОВ
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	// Функция возвращает версию драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ТекстОшибки = НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Команда%", Команда);
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСлужебные

Функция ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, Команда, ПараметрыКомандыВходные, ПараметрыКомандыВыходные, ВыходныеПараметры)
	
#Если МобильноеПриложениеКлиент Тогда
	
	ДействиеМобильногоУстройства = ПараметрыПодключения.ИдентификаторОбъекта + "." + Команда;
	Запуск = Новый ЗапускПриложенияМобильногоУстройства(ДействиеМобильногоУстройства, "");
	
	ДополнительныеДанные = Новый ДополнительныеДанныеЗапускаПриложенияМобильногоУстройства;
	ДополнительныеДанные.Добавить("DeviceID", "");
	
	Если ПараметрыПодключения <> Неопределено Тогда
		Для Каждого ПараметрПодключения Из ПараметрыПодключения Цикл
			Если Лев(ПараметрПодключения.Ключ, 2) = "P_" Тогда
				ЗначениеПараметра = ПараметрПодключения.Значение;
				ИмяПараметра = Сред(ПараметрПодключения.Ключ, 3);
				ДополнительныеДанные.Добавить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыКомандыВходные <> Неопределено Тогда
		Для Каждого ПараметрВходящий Из ПараметрыКомандыВходные Цикл
			ДополнительныеДанные.Добавить(ПараметрВходящий.Ключ, ПараметрВходящий.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запуск.ДополнительныеДанные = ДополнительныеДанные;
	
	РезультатЗапуска = Запуск.Запустить(Истина);
	
	Если НЕ РезультатЗапуска Тогда             
		ДополнительныйТекст = "";
		ДополнительныйЗапуск = Новый ЗапускПриложенияМобильногоУстройства(ПараметрыПодключения.ИдентификаторОбъекта + ".GET_LAST_ERROR", "");
		ДополнительныеДанные = Новый ДополнительныеДанныеЗапускаПриложенияМобильногоУстройства;
		ДополнительныеДанные.Добавить("ErrorText", "");
		ДополнительныйЗапуск.ДополнительныеДанные = ДополнительныеДанные;
		Если ДополнительныйЗапуск.Запустить(Истина) Тогда
			ЗначениеПараметра = ДополнительныйЗапуск.ДополнительныеДанные.Получить("ErrorText");
			ДополнительныйТекст = ?(ЗначениеПараметра <> Неопределено, ЗначениеПараметра.Значение, "GET_LAST_ERROR: Parameter ""ErrorText"" not found."); 
		КонецЕсли;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения команды ""%Наименование%"" для приложения ""%Приложение%"".'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Наименование%", Команда);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Приложение%"  , ПараметрыПодключения.ИдентификаторОбъекта);
		
		Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДополнительныйТекст
		КонецЕсли;
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	Иначе
		Если ПараметрыКомандыВыходные <> Неопределено Тогда
			Для Каждого ПараметрВыходной Из ПараметрыКомандыВыходные Цикл
				ЗначениеПараметра = Запуск.ДополнительныеДанные.Получить(ПараметрВыходной.Ключ);
				ПараметрыКомандыВыходные[ПараметрВыходной.Ключ] = ?(ЗначениеПараметра = Неопределено, Неопределено, ЗначениеПараметра.Значение);
			КонецЦикла;
		КонецЕсли;
		Результат = Истина;
	КонецЕсли;
	
#Иначе
	Результат = Истина;
	Сообщить("Команда: " + Команда);
	Если ПараметрыПодключения <> Неопределено Тогда
		Для Каждого ПараметрПодключения Из ПараметрыПодключения Цикл
			Если Лев(ПараметрПодключения.Ключ, 2) = "P_" Тогда
				ЗначениеПараметра = ПараметрПодключения.Значение;
				ИмяПараметра = Сред(ПараметрПодключения.Ключ, 3);
				Сообщить(ИмяПараметра + "=" + ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
#КонецЕсли

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииНефискальныеЧеки

// Получить cуммы оплат по видам оплаты.
//
Функция ПолучитьСуммыОплат(ТаблицаОплат)
	
	СуммыОплат = Новый Структура();
	СуммыОплат.Вставить("НаличнаяОплата", 0);
	СуммыОплат.Вставить("БезналичнаяОплата1", 0);
	СуммыОплат.Вставить("БезналичнаяОплата2", 0);
	СуммыОплат.Вставить("БезналичнаяОплата3", 0);
	СуммыОплат.Вставить("СуммаВсего", 0);
	
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].Тип = 1 Тогда
				СуммыОплат.БезналичнаяОплата1 = СуммыОплат.БезналичнаяОплата1 + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].Тип = 2 Тогда
				СуммыОплат.БезналичнаяОплата2 = СуммыОплат.БезналичнаяОплата2 + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].Тип = 3 Тогда
				СуммыОплат.БезналичнаяОплата3 = СуммыОплат.БезналичнаяОплата3 + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммыОплат.НаличнаяОплата = СуммыОплат.НаличнаяОплата + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
			СуммыОплат.СуммаВсего = СуммыОплат.СуммаВсего + ТаблицаОплат[ИндексОплаты].Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммыОплат;
	
КонецФункции

// формирует шаблон нефискального чека
//
Функция СформироватьШаблонЧека(ПараметрыПодключения, ТипДокумента, ПараметрыЧека)
	
	ФискальныйОтчет = Ложь;
	
	Если ТипДокумента = 1 Тогда
		ТипДокументаИмя = НСтр("ru='ПРОДАЖА'");
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипДокументаИмя = НСтр("ru='ВОЗВРАТ'");
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипДокументаИмя = НСтр("ru='ПОКУПКА'");
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипДокументаИмя = НСтр("ru='ВОЗВРАТ ПОКУПКИ'");
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипДокументаИмя = НСтр("ru='ВНЕСЕНИЕ'");
	ИначеЕсли ТипДокумента = 6 Тогда
		ТипДокументаИмя = НСтр("ru='ВЫЕМКА'");
	ИначеЕсли ТипДокумента = 7 Тогда
		ТипДокументаИмя = НСтр("ru='Z-ОТЧЕТ'");
		ФискальныйОтчет = Истина;
	ИначеЕсли ТипДокумента = 8 Тогда
		ТипДокументаИмя = НСтр("ru='X-ОТЧЕТ'");
		ФискальныйОтчет = Истина;
	Иначе
		ТипДокументаИмя = НСтр("ru='НЕФИСКАЛЬНЫЙ'");
	КонецЕсли;
	
	ВыходныеПараметрыВрем = Новый Структура(); 
	Если ПолучитьШиринуСтроки(ПараметрыПодключения, Неопределено, ВыходныеПараметрыВрем) Тогда
		ШиринаСтроки = ВыходныеПараметрыВрем.ШиринаСтроки;
	Иначе
		ШиринаСтроки = 32;
	КонецЕсли;
	
	ПараметрыЧека.Вставить("ШиринаСтроки", ШиринаСтроки);
	
	Разделитель = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	Текст = Разделитель;
	Если ПараметрыЧека.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ПараметрыЧека.ОрганизацияНазвание) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ПараметрыЧека.ОрганизацияНазвание, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	Если ПараметрыЧека.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ПараметрыЧека.ТекстШапки) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ПараметрыЧека.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерКассы = ?(ПараметрыЧека.Свойство("НомерКассы") И НЕ ПустаяСтрока(ПараметрыЧека.НомерКассы), "КАССА " + ПараметрыЧека.НомерКассы, "");
	ОрганизацияИНН = ?(ПараметрыЧека.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ПараметрыЧека.ОрганизацияИНН), "ИНН " + ПараметрыЧека.ОрганизацияИНН, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(ОрганизацияИНН) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(НомерКассы, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерСмены = ?(ПараметрыЧека.Свойство("НомерСмены") И НЕ ПустаяСтрока(ПараметрыЧека.НомерСмены), " №" + ПараметрыЧека.НомерСмены, "");
	ДатаВремя = ?(ПараметрыЧека.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ПараметрыЧека.ДатаВремя), ПараметрыЧека.ДатаВремя, ТекущаяДата());
	ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	
	Если ФискальныйОтчет Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ТипДокументаИмя + НомерСмены, , ШиринаСтроки) + Символы.ПС;
	Иначе
		НомерЧека = ?(ПараметрыЧека.Свойство("НомерЧека") И НЕ ПустаяСтрока(ПараметрыЧека.НомерЧека), "ЧЕК №" + ПараметрыЧека.НомерЧека, "");
		Если Не ПустаяСтрока(НомерЧека) Тогда
			Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ТипДокументаИмя, НомерЧека, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(ТипДокументаИмя, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если Не ПустаяСтрока(НомерСмены) Тогда
			Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля("СМЕНА" + НомерСмены, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(ДатаВремя, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
	КонецЕсли;
	
	КассирДолжность = ?(ПараметрыЧека.Свойство("КассирДолжность") И НЕ ПустаяСтрока(ПараметрыЧека.КассирДолжность), ПараметрыЧека.КассирДолжность, "КАССИР");
	КассирФИО = ?(ПараметрыЧека.Свойство("КассирФИО") И НЕ ПустаяСтрока(ПараметрыЧека.КассирФИО), ПараметрыЧека.КассирФИО, "");
	
	Текст = Текст + РазделительВнут;
	Текст = Текст + "%СОДЕРЖИМОЕ%" + Символы.ПС;
	
	Если НЕ ФискальныйОтчет Тогда
		Текст = Текст + РазделительВнут;
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(КассирДолжность + ":" + Символы.НПП + КассирФИО, ШиринаСтроки) + Символы.ПС;                        
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ПараметрыЧека.ТекстПодвала) Тогда
		Текст = ВРег(Текст) + Разделитель;
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ПараметрыЧека.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = ВРег(Текст) + Разделитель;
	
	Возврат Текст;
	
КонецФункции

// формирует табличную часть нефискального чека
//
Функция СформироватьТабличнуюЧастьЧека(ПараметрыПодключения, ПараметрыЧека, ТаблицаНоменклатуры, СуммыОплат);
	
	ФорматЧисла = "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
	
	ШиринаСтроки = ПараметрыЧека.ШиринаСтроки;
	
	РазделительВнут = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	Текст = "";
	
	// Формируем строки чека
	СуммаЧека = 0;
	
	Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
		ТекущаяПозиция = ТаблицаНоменклатуры[ИндексМассива];
		Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
			Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПолеПереносом(ТекущаяПозиция.Наименование, ШиринаСтроки) + Символы.ПС;
			СтрокаТовара = Формат(ТекущаяПозиция.Количество, "ЧЦ=10; ЧДЦ=3; ЧРД=.; ЧН=0.000; ЧГ=0") + " х " + Формат(ТекущаяПозиция.Цена, ФорматЧисла) +
				" = " + Формат(ТекущаяПозиция.Количество * ТекущаяПозиция.Цена, ФорматЧисла);
			Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(СтрокаТовара, ШиринаСтроки, , Ложь) + Символы.ПС;
			Если ТекущаяПозиция.Количество * ТекущаяПозиция.Цена > ТекущаяПозиция.Сумма Тогда
				Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru='СКИДКА = '") 
				+ Формат(ТекущаяПозиция.Количество * ТекущаяПозиция.Цена - ТекущаяПозиция.Сумма, ФорматЧисла), ШиринаСтроки, , Ложь) + Символы.ПС;
			ИначеЕсли ТекущаяПозиция.Количество * ТекущаяПозиция.Цена < ТекущаяПозиция.Сумма Тогда
				Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru='НАДБАВКА = '")
				+ Формат(ТекущаяПозиция.Сумма - ТекущаяПозиция.Количество * ТекущаяПозиция.Цена, ФорматЧисла), ШиринаСтроки, , Ложь) + Символы.ПС;
			КонецЕсли;
			СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
		ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
			Текст = Текст + ТекущаяПозиция.Текст + Символы.ПС;
		ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
			СтрокаШтрихкода = "|ШтрихКод|" + ТекущаяПозиция.ТипШтрихкода + "|" + ТекущаяПозиция.ШтрихКод; 
			Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + РазделительВнут;
	Текст = Текст + НСтр("ru='         ИТОГ = '") + Формат(СуммаЧека, ФорматЧисла) + Символы.ПС;

	Текст = Текст + РазделительВнут;
	Если СуммыОплат.НаличнаяОплата > 0 Тогда
		Текст = Текст + НСтр("ru='    НАЛИЧНЫМИ = '") + Формат(СуммыОплат.НаличнаяОплата, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммыОплат.БезналичнаяОплата1 > 0 Тогда
		Текст = Текст + НСтр("ru='  ПЛАТ.КАРТОЙ = '") + Формат(СуммыОплат.БезналичнаяОплата1, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммыОплат.БезналичнаяОплата2 > 0 Тогда
		Текст = Текст + НСтр("ru='     КРЕДИТОМ = '") + Формат(СуммыОплат.БезналичнаяОплата2, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммыОплат.БезналичнаяОплата3 > 0 Тогда
		Текст = Текст + НСтр("ru=' СЕРТИФИКАТОМ = '") + Формат(СуммыОплат.БезналичнаяОплата3, ФорматЧисла) + Символы.ПС;
	КонецЕсли;          
	
	Текст = Текст + РазделительВнут;
	Текст = Текст + НСтр("ru='        СДАЧА = '") + Формат(СуммыОплат.СуммаВсего - СуммаЧека, ФорматЧисла);
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхРегистраторовИПринтеровЧеков

// Функция осуществляет печать штрихкода 
//
Функция ПечатьШтрихкода(ПараметрыПодключения, ТипШтрихкода, Штрихкод, ВыходныеПараметры)
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("BarcodeType", ТипШтрихкода);
	ПараметрыКоманды.Вставить("Barcode",     Штрихкод);
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_BARCODE", ПараметрыКоманды, Неопределено, ВыходныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФискальныхРегистраторов

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ПараметрыПодключения, ТипЧека, ВыходныеПараметры)
	
	Результат = Ложь;
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("CheckType", ТипЧека);
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	ПараметрыКомандыВыходные.Вставить("SessionNumber",  Неопределено);
	ПараметрыКомандыВыходные.Вставить("CheckNumber"  ,  Неопределено);
	
	Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "OPEN_CHECK", ПараметрыКоманды, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
		ВыходныеПараметры.Вставить("НомерЧека",  ПараметрыКомандыВыходные["CheckNumber"]);
		ВыходныеПараметры.Вставить("НомерСмены", ПараметрыКомандыВыходные["SessionNumber"]);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ПараметрыПодключения, СуммыОплат, ВыходныеПараметры)
	
	ПараметрыКоманды = Новый Соответствие;
	
	Если СуммыОплат <> Неопределено Тогда
		ПараметрыКоманды.Вставить("Cash",         СуммыОплат.НаличнаяОплата);
		ПараметрыКоманды.Вставить("NonCashType1", СуммыОплат.БезналичнаяОплата1);
		ПараметрыКоманды.Вставить("NonCashType2", СуммыОплат.БезналичнаяОплата2);
		ПараметрыКоманды.Вставить("NonCashType3", СуммыОплат.БезналичнаяОплата3);
	Иначе
		ПараметрыКоманды.Вставить("Cash",         0);
		ПараметрыКоманды.Вставить("NonCashType1", 0);
		ПараметрыКоманды.Вставить("NonCashType2", 0);
		ПараметрыКоманды.Вставить("NonCashType3", 0);
	КонецЕсли;
	
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CLOSE_CHECK", ПараметрыКоманды, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ПараметрыПодключения, ВыходныеПараметры)
	
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CANCEL_CHECK", Неопределено, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет печать фискальной строки. 
//
Функция НапечататьФискальнуюСтроку(ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("Name"       , Наименование);
	ПараметрыКоманды.Вставить("Quantity"   , Количество);
	ПараметрыКоманды.Вставить("Price"      , Цена);
	ПараметрыКоманды.Вставить("Amount"     , Сумма);
	ПараметрыКоманды.Вставить("Department" , НомерСекции);
	ПараметрыКоманды.Вставить("Tax"        , СтавкаНДС);
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_FISCAL_STRING", ПараметрыКоманды, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет печать нефискальной строки. 
//
Функция НапечататьНефискальнуюСтроку(ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("TextString", СтрокаТекста);
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_NONFISCAL_STRING", ПараметрыКоманды, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет пакетную печать чека. 
//
Функция ПечатьЧекаПакетно(ПараметрыПодключения, ПакетКоманд, ВыходныеПараметры)
	
	Результат = Ложь;
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("CheckCommandsPackage", ПакетКоманд);
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	ПараметрыКомандыВыходные.Вставить("SessionNumber",  Неопределено);
	ПараметрыКомандыВыходные.Вставить("CheckNumber"  ,  Неопределено);
	
	Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_CHECK", ПараметрыКоманды, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
		ВыходныеПараметры.Вставить("НомерЧека",  ПараметрыКомандыВыходные["CheckNumber"]);
		ВыходныеПараметры.Вставить("НомерСмены", ПараметрыКомандыВыходные["SessionNumber"]);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПринтеровЧеков

// Функция осуществляет открытие нового документа
//
Функция ОткрытьДокумент(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "OPEN_DOCUMENT", Неопределено, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет закрытие документа
//
Функция ЗакрытьДокумент(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CLOSE_DOCUMENT", Неопределено, Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция осуществляет печать строки 
//
Функция НапечататьСтроку(ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("TextString", СтрокаТекста);
	Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_STRING", ПараметрыКоманды, Неопределено, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет пакетную печать документа. 
//
Функция ПечатьДокументаПакетно(ПараметрыПодключения, ПакетКоманд, ВыходныеПараметры)
	
	ПараметрыКоманды = Новый Соответствие;
	ПараметрыКоманды.Вставить("DocumentCommandsPackage", ПакетКоманд);
	
	Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PRINT_DOCUMENT", ПараметрыКоманды, Неопределено, ВыходныеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВвода

Функция ПолучитьДанныеВвода(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	ПараметрыКомандыВыходные.Вставить("Data",  Неопределено);
	Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "GET_DATA", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
		ВыходныеПараметры.Вставить("ДанныеВвода", ПараметрыКомандыВыходные["Data"]);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПлатежныхСистем

// Функция оплаты по платежной карте
//
Функция ОплатитьПлатежнойКартой(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема") Тогда
		
		ПараметрыКоманды = Новый Соответствие;
		ПараметрыКоманды.Вставить("Amount"       ,  ВходныеПараметры.Сумма);
		ПараметрыКоманды.Вставить("ReceiptNumber",  ВходныеПараметры.НомерЧека);
		
		ПараметрыКомандыВыходные = Новый Соответствие;
		ПараметрыКомандыВыходные.Вставить("CardNumber"       , Неопределено);
		ПараметрыКомандыВыходные.Вставить("RRNCode"          , Неопределено);
		ПараметрыКомандыВыходные.Вставить("AuthorizationCode", Неопределено);
		ПараметрыКомандыВыходные.Вставить("Slip"             , Неопределено);
		
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "PAYMENT", ПараметрыКоманды, ПараметрыКомандыВыходные, ВыходныеПараметры); 
		Если Результат Тогда
			ВыходныеПараметры.Вставить("НомерКарты"         , ПараметрыКомандыВыходные["CardNumber"]);
			ВыходныеПараметры.Вставить("НомерСсылкиОперации", ПараметрыКомандыВыходные["RRNCode"]);
			ВыходныеПараметры.Вставить("КодАвторизации"     , ПараметрыКомандыВыходные["AuthorizationCode"]);
			ВыходныеПараметры.Вставить("СлипЧек"            , ПараметрыКомандыВыходные["Slip"]);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//  Функция возврата по платежной карте
//
Функция ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема") Тогда
		
		ПараметрыКоманды = Новый Соответствие;
		ПараметрыКоманды.Вставить("Amount"       ,  ВходныеПараметры.Сумма);
		ПараметрыКоманды.Вставить("ReceiptNumber",  ВходныеПараметры.НомерЧека);
		ПараметрыКоманды.Вставить("CardNumber"   ,  ВходныеПараметры.НомерКарты);
		ПараметрыКоманды.Вставить("RRNCode"      ,  ВходныеПараметры.НомерСсылкиОперации);
		
		ПараметрыКомандыВыходные = Новый Соответствие;
		ПараметрыКомандыВыходные.Вставить("CardNumber"       , Неопределено);
		ПараметрыКомандыВыходные.Вставить("RRNCode"          , Неопределено);
		ПараметрыКомандыВыходные.Вставить("Slip"             , Неопределено);
		
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "RETURN_PAYMENT", ПараметрыКоманды, ПараметрыКомандыВыходные, ВыходныеПараметры); 
		Если Результат Тогда
			ВыходныеПараметры.Вставить("НомерКарты"         , ПараметрыКомандыВыходные["CardNumber"]);
			ВыходныеПараметры.Вставить("НомерСсылкиОперации", ПараметрыКомандыВыходные["RRNCode"]);
			ВыходныеПараметры.Вставить("КодАвторизации"     , Неопределено);
			ВыходныеПараметры.Вставить("СлипЧек"            , ПараметрыКомандыВыходные["Slip"]);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//  Функция отмены по платежной карте
//
Функция ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) 
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема") Тогда
		
		ПараметрыКоманды = Новый Соответствие;
		ПараметрыКоманды.Вставить("Amount"       ,  ВходныеПараметры.Сумма);
		ПараметрыКоманды.Вставить("ReceiptNumber",  ВходныеПараметры.НомерЧека);
		ПараметрыКоманды.Вставить("CardNumber"   ,  ВходныеПараметры.НомерКарты);
		ПараметрыКоманды.Вставить("RRNCode"      ,  ВходныеПараметры.НомерСсылкиОперации);
		
		ПараметрыКомандыВыходные = Новый Соответствие;
		ПараметрыКомандыВыходные.Вставить("CardNumber"       , Неопределено);
		ПараметрыКомандыВыходные.Вставить("RRNCode"          , Неопределено);
		ПараметрыКомандыВыходные.Вставить("Slip"             , Неопределено);
		
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CANCEL_PAYMENT", ПараметрыКоманды, ПараметрыКомандыВыходные, ВыходныеПараметры); 
		Если Результат Тогда
			ВыходныеПараметры.Вставить("НомерКарты"         , ПараметрыКомандыВыходные["CardNumber"]);
			ВыходныеПараметры.Вставить("НомерСсылкиОперации", Неопределено);
			ВыходныеПараметры.Вставить("КодАвторизации"     , Неопределено);
			ВыходныеПараметры.Вставить("СлипЧек"            , ПараметрыКомандыВыходные["Slip"]);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция cверки итогов по картам
//
Функция ИтогиДняПоКартам(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПлатежнаяСистема") Тогда
		
		Результат = Ложь;
		ПараметрыКомандыВыходные = Новый Соответствие;
		ПараметрыКомандыВыходные.Вставить("Slip",  Неопределено);
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "SETTLEMENT", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Вставить("СлипЧек", ПараметрыКомандыВыходные["Slip"]);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВысокогоУровня

// Функция возвращает доступность устройства.
//
Функция ПолучитьДоступность(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	Возврат ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "GET_AVAILABLE", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры);
	
КонецФункции

// Осуществляет печать текста
//
Функция ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	   
	Результат  = Истина;  
	СтрокиТекста = ВходныеПараметры.СтрокиТекста + Символы.ПС + Символы.ПС;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Если ПараметрыПодключения.ПакетнаяПечать Тогда
			
			// Пакетная печать документа. Подготовка пакета.
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокиТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокиТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
					ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
					ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 					ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("NonFiscalString");
					ЗаписьXML.ЗаписатьАтрибут("TextString", XMLСтрока(ВыделеннаяСтрока));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ТекстXML = ЗаписьXML.Закрыть();
			// Команда печати чека в пакетном режиме.
			Результат = ПечатьДокументаПакетно(ПараметрыПодключения, ТекстXML, ВыходныеПараметры);
			
		Иначе
				
			// Открываем документ
			Результат = ОткрытьДокумент(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
				// Печатаем строки чека
				Если Результат Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокиТекста) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокиТекста, НомерСтроки);
					Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
						ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
						ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 						ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
						Если НЕ ПечатьШтрихкода(ПараметрыПодключения, ВремТипШтрихкода, ВремШтрихКод, ВыходныеПараметры) Тогда
							ТекстОшибки = НСтр("ru='<Штрихкод %Тип% не распечатан>'");
							ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Тип%", ВремТипШтрихкода);
							НапечататьСтроку(ПараметрыПодключения, ТекстОшибки, ВыходныеПараметры);
							НапечататьСтроку(ПараметрыПодключения, "<" + ВремШтрихКод + ">", ВыходныеПараметры);
						КонецЕсли;
					ИначеЕсли НЕ НапечататьСтроку(ПараметрыПодключения, ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Закрываем документ
			Если Результат Тогда
				Результат = ЗакрытьДокумент(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		ТипЧека = 0; // Нефискальный текстовый документ.
		
		Если ПараметрыПодключения.ПакетнаяПечать Тогда 
			
			// Пакетная печать чека. Подготовка пакета.
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Check");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
			ЗаписьXML.ЗаписатьАтрибут("CheckType", XMLСтрока(ТипЧека));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокиТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокиТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
					ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
					ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 					ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("NonFiscalString");
					ЗаписьXML.ЗаписатьАтрибут("TextString", XMLСтрока(ВыделеннаяСтрока));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ТекстXML = ЗаписьXML.Закрыть();
			// Команда печати чека в пакетном режиме.
			Результат = ПечатьЧекаПакетно(ПараметрыПодключения, ТекстXML, ВыходныеПараметры);
			
		Иначе
			// Открываем чек
			Результат = ОткрытьЧек(ПараметрыПодключения, ТипЧека, ВыходныеПараметры);
			// Печатаем строки чека
			Если Результат Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокиТекста) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокиТекста, НомерСтроки);		
					Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
						ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
						ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 						ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
						Если НЕ ПечатьШтрихкода(ПараметрыПодключения, ВремТипШтрихкода, ВремШтрихКод, ВыходныеПараметры) Тогда
							ТекстОшибки = НСтр("ru='<Штрихкод %Тип% не распечатан>'");
							ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Тип%", ВремТипШтрихкода);
							НапечататьНефискальнуюСтроку(ПараметрыПодключения, ТекстОшибки, ВыходныеПараметры);
							НапечататьНефискальнуюСтроку(ПараметрыПодключения, "<" + ВремШтрихКод + ">", ВыходныеПараметры);
						КонецЕсли;
					ИначеЕсли НЕ НапечататьНефискальнуюСтроку(ПараметрыПодключения, ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Закрываем чек
			Если Результат Тогда
				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ПараметрыПодключения, Неопределено, ВыходныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	   
КонецФункции

// Осуществляет формирование шаблона инфо квитанции.
//
Функция СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, Параметры, ПечатьШтрихкода = Истина) Экспорт
	
	АдресЧека = ?(Параметры.Свойство("АдресЧека"), Параметры.АдресЧека, Неопределено);
	ПодписьЧека = ?(Параметры.Свойство("ПодписьЧека"), Параметры.ПодписьЧека, Неопределено);
	
	Если ПустаяСтрока(АдресЧека) Или ПустаяСтрока(ПодписьЧека) Тогда  
		Возврат Неопределено;
	КонецЕсли;
	
	ВыходныеПараметрыВрем = Новый Структура(); 
	Если ПолучитьШиринуСтроки(ПараметрыПодключения, Неопределено, ВыходныеПараметрыВрем) Тогда
		ШиринаСтроки = ВыходныеПараметрыВрем.ШиринаСтроки;
	Иначе
		ШиринаСтроки = 32;
	КонецЕсли;

	Текст = МенеджерОборудованияКлиент.ВыстроитьПоля(ВРег(Параметры.ОрганизацияНазвание), , ШиринаСтроки) + Символы.ПС;
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(Параметры.ОрганизацияИНН), НСтр("ru='ИНН:'") + Параметры.ОрганизацияИНН, "");
	ОрганизацияКПП = ?(НЕ ПустаяСтрока(Параметры.ОрганизацияКПП), НСтр("ru='КПП:'") + Параметры.ОрганизацияКПП, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Или НЕ ПустаяСтрока(ОрганизацияКПП) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ОрганизацияИНН, ОрганизацияКПП, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;  
	
	НомерКассы = ?(НЕ ПустаяСтрока(Параметры.НомерКассы), НСтр("ru='КАССА:'") + Параметры.НомерКассы, "");
	НомерСмены = ?(НЕ ПустаяСтрока(Параметры.НомерСмены), НСтр("ru='СМЕНА:'") + Параметры.НомерСмены, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(Параметры.НомерЧека), НСтр("ru='ЧЕК:'") + Параметры.НомерЧека, "");
	ДатаВремя = НСтр("ru='ДАТА:'") + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	Если Не ПустаяСтрока(АдресЧека) Тогда
		Если ПечатьШтрихкода Тогда
			Текст = Текст + "|ШтрихКод|QR|" + АдресЧека + Символы.ПС;
		КонецЕсли;
		Текст = Текст + " " + Символы.ПС;
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПолеПереносом(АдресЧека, ШиринаСтроки) +  " " + Символы.ПС;
		Текст = Текст + " " + Символы.ПС;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПодписьЧека) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПолеПереносом(ПодписьЧека, ШиринаСтроки) +  " " + Символы.ПС;
		Текст = Текст + " " + Символы.ПС;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Осуществляет печать чека
//
Функция ПечатьЧека(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат  = Истина;
	
	ТипЧека      = ВходныеПараметры.ТипЧека;
	ПозицииЧека  = ВходныеПараметры.ПозицииЧека;
	СуммыОплат   = ПолучитьСуммыОплат(ВходныеПараметры.ТаблицаОплат);
	
	ПодписьЕГАИС = ВходныеПараметры.Свойство("ПодписьЕГАИС") И ВходныеПараметры.ПодписьЕГАИС;
	
	ВходныеПараметры.Вставить("ПродолжитьПечать", Истина);
	ВходныеПараметры.Вставить("ТекстОшибки"     , Неопределено); 
	ВходныеПараметры.Вставить("АдресЧека"       , Неопределено);    
	ВходныеПараметры.Вставить("ПодписьЧека"     , Неопределено);    
	Если Не ВходныеПараметры.Свойство("НомерЧека") Тогда
		ВходныеПараметры.Вставить("НомерЧека" , 0); 
	КонецЕсли;
	Если Не ВходныеПараметры.Свойство("НомерСмены") Тогда
		ВходныеПараметры.Вставить("НомерСмены", 0); 
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Если ПодписьЕГАИС Тогда
			МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПослеОткрытияЧека(ВходныеПараметры);
			
			Если НЕ ВходныеПараметры.ПродолжитьПечать Тогда
				СтрокиТекста = НСтр("ru='<ЧЕК ККМ АННУЛИРОВАН>'");
				ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
				ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
				
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Вставить("ТекстОшибки", ВходныеПараметры.ТекстОшибки);
				Результат = Ложь;
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокиТекста = СформироватьШаблонЧека(ПараметрыПодключения, ТипЧека, ВходныеПараметры);
		ТекстТаблицы = СформироватьТабличнуюЧастьЧека(ПараметрыПодключения, ВходныеПараметры, ПозицииЧека, СуммыОплат);
		СтрокиТекста = СтрЗаменить(СтрокиТекста, "%СОДЕРЖИМОЕ%", ТекстТаблицы);
		ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
		
		Результат = ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		Если Результат Тогда
			НомерЧека  = ?(ВходныеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ВходныеПараметры.НомерЧека), ВходныеПараметры.НомерЧека, 0);
			НомерСмены = ?(ВходныеПараметры.Свойство("НомерСмены") И НЕ ПустаяСтрока(ВходныеПараметры.НомерСмены), ВходныеПараметры.НомерСмены, 0);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Вставить("НомерЧека" , НомерЧека);
			ВыходныеПараметры.Вставить("НомерСмены", НомерСмены);
			Если Результат И ПодписьЕГАИС Тогда
				ВремВыходныеПараметры = Новый Структура();
				ВремВходныеПараметры  = Новый Структура("СтрокиТекста", СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, ВходныеПараметры));
				ПечатьТекста(ПараметрыПодключения, ВремВходныеПараметры, ВремВыходныеПараметры);
			КонецЕсли;
		ИначеЕсли ПодписьЕГАИС Тогда
			МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПриОшибкеПечати(ВходныеПараметры);
		КонецЕсли;
		
		Возврат Результат;
	
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		Если ПараметрыПодключения.ПакетнаяПечать И НЕ ПодписьЕГАИС Тогда 
			
			// Пакетная печать чека. Подготовка пакета.
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку("UTF-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Check");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
			ЗаписьXML.ЗаписатьАтрибут("CheckType", XMLСтрока(ТипЧека));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				
				ТекущаяПозиция = ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
					ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("NonFiscalString");
					ЗаписьXML.ЗаписатьАтрибут("TextString", XMLСтрока(ТекущаяПозиция.Текст));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				Иначе
					ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
					Результат = Ложь;  
					Возврат Результат;
				КонецЕсли;
				
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммыОплат.НаличнаяОплата));
			ЗаписьXML.ЗаписатьАтрибут("NonCashType1", XMLСтрока(СуммыОплат.БезналичнаяОплата1));
			ЗаписьXML.ЗаписатьАтрибут("NonCashType2", XMLСтрока(СуммыОплат.БезналичнаяОплата2));
			ЗаписьXML.ЗаписатьАтрибут("NonCashType3", XMLСтрока(СуммыОплат.БезналичнаяОплата3));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ТекстXML = ЗаписьXML.Закрыть();
			// Команда печати чека в пакетном режиме.
			Результат = ПечатьЧекаПакетно(ПараметрыПодключения, ТекстXML, ВыходныеПараметры);
			
		Иначе
			// Открываем чек.
			Результат = ОткрытьЧек(ПараметрыПодключения, ТипЧека, ВыходныеПараметры);
			//  Печатаем построчно строки чека.
			Если Результат Тогда
				
				Если ПодписьЕГАИС Тогда
					ВходныеПараметры.НомерЧека = ВыходныеПараметры.НомерЧека;
					ВходныеПараметры.НомерСмены = ВыходныеПараметры.НомерСмены;
					МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПослеОткрытияЧека(ВходныеПараметры);
					
					Если Не ВходныеПараметры.ПродолжитьПечать Тогда
						ОтменитьЧек(ПараметрыПодключения, ВыходныеПараметры);
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ВходныеПараметры.ТекстОшибки);
						Результат = Ложь;
						Возврат Результат;
					КонецЕсли;
				КонецЕсли;
				
				ОшибкаПриПечатиСтроки = Ложь;
				// Печатаем строки чека
				Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
					
					ТекущаяПозиция = ПозицииЧека[ИндексМассива];
					Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Если НЕ НапечататьФискальнуюСтроку(ПараметрыПодключения, ТекущаяПозиция.Наименование, ТекущаяПозиция.Количество, 
								ТекущаяПозиция.Цена, ТекущаяПозиция.Сумма, ТекущаяПозиция.НомерСекции, ТекущаяПозиция.СтавкаНДС, ВыходныеПараметры) Тогда
							ОшибкаПриПечатиСтроки = Истина;   
							Прервать;
						КонецЕсли
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если НЕ НапечататьНефискальнуюСтроку(ПараметрыПодключения, ТекущаяПозиция.Текст, ВыходныеПараметры) Тогда
							ОшибкаПриПечатиСтроки = Истина;   
							Прервать;
						КонецЕсли;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						Если НЕ ПечатьШтрихкода(ПараметрыПодключения, ТекущаяПозиция.ТипШтрихкода, ТекущаяПозиция.ШтрихКод, ВыходныеПараметры) Тогда
							ТекстОшибки = НСтр("ru='<Штрихкод %Тип% не распечатан>'");
							ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Тип%", ТекущаяПозиция.ТипШтрихкода);
							НапечататьНефискальнуюСтроку(ПараметрыПодключения, ТекстОшибки, ВыходныеПараметры);
							НапечататьНефискальнуюСтроку(ПараметрыПодключения, "<" + ТекущаяПозиция.ШтрихКод + ">", ВыходныеПараметры);
						КонецЕсли;
					Иначе
						ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
					КонецЕсли;
					
				КонецЦикла;
			
				Если НЕ ОшибкаПриПечатиСтроки Тогда
					// Закрываем чек
					Результат = ЗакрытьЧек(ПараметрыПодключения, СуммыОплат, ВыходныеПараметры);
					Если Результат И ПодписьЕГАИС Тогда
						ВремВыходныеПараметры = Новый Структура();
						ВремВходныеПараметры  = Новый Структура("СтрокиТекста", СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, ВходныеПараметры));
						ПечатьТекста(ПараметрыПодключения, ВремВходныеПараметры, ВремВыходныеПараметры);
					КонецЕсли;
				Иначе
					Результат = Ложь;
					ВремВыходныеПараметры = Новый Структура();
					ОтменитьЧек(ПараметрыПодключения, ВремВыходныеПараметры);
				КонецЕсли;
				
				Если НЕ Результат И  ПодписьЕГАИС Тогда
					МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПриОшибкеПечати(ВходныеПараметры);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы 
//
Функция Инкассация(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	// Принтер чеков
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		ФорматЧисла = "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
		СтрокиТекста = СформироватьШаблонЧека(ПараметрыПодключения, ?(ВходныеПараметры.Внесение, 5, 6), ВходныеПараметры);
		СтрокиТекста = СтрЗаменить(СтрокиТекста, "%СОДЕРЖИМОЕ%", НСтр("ru='СУММА = '") + Формат(ВходныеПараметры.Сумма, ФорматЧисла));
		ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
		Результат = ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискальные регистратор
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		ПараметрыКоманды = Новый Соответствие;
		ПараметрыКоманды.Вставить("Amount",  ?(ВходныеПараметры.Внесение, ВходныеПараметры.Сумма, -ВходныеПараметры.Сумма));
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "CASH_IN_OUT", ПараметрыКоманды, Неопределено, ВыходныеПараметры); 
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Функция осуществляет формирование фискального отчета (Z или X)
//
Функция СформироватьФискальныйОтчет(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		СтрокиТекста = СформироватьШаблонЧека(ПараметрыПодключения, ?(ВходныеПараметры.ОтчетСГашением, 7, 8), ВходныеПараметры);
		
		ТекстОтчета = "";
		Если ВходныеПараметры.Свойство("ТекстОтчета") И НЕ ПустаяСтрока(ВходныеПараметры.ТекстОтчета) Тогда
			Для НомерСтроки = 1 По СтрЧислоСтрок(ВходныеПараметры.ТекстОтчета) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(ВходныеПараметры.ТекстОтчета, НомерСтроки);
				ПозицияРазделителя = Найти(ВыделеннаяСтрока, Символы.Таб);
				Если ПозицияРазделителя > 0 Тогда
					Строка1 = Лев(ВыделеннаяСтрока, ПозицияРазделителя - 1);
					Строка2 = Сред(ВыделеннаяСтрока, ПозицияРазделителя + 1);
					ТекстОтчета = ТекстОтчета +  МенеджерОборудованияКлиент.ВыстроитьПоля(Строка1, Строка2,  ВходныеПараметры.ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстОтчета = ТекстОтчета + ВыделеннаяСтрока + Символы.ПС; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекстОтчета = ТекстОтчета + МенеджерОборудованияКлиент.ВыстроитьПоля(НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'"), , ВходныеПараметры.ШиринаСтроки);
		
		СтрокиТекста = СтрЗаменить(СтрокиТекста, "%СОДЕРЖИМОЕ%", ТекстОтчета);
		ВходныеПараметры.Вставить("СтрокиТекста", СтрокиТекста);
		Результат = ПечатьТекста(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		Команда = ?(ВходныеПараметры.ОтчетСГашением, "PRINT_Z_REPORT", "PRINT_X_REPORT");
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, Команда, Неопределено, Неопределено, ВыходныеПараметры); 
		
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие денежного ящика на устройстве.
//
Функция ОткрытьДенежныйЯщик(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") 
		И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Или ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		Результат = ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "OPEN_CASH_DRAWER", Неопределено, Неопределено, ВыходныеПараметры); 
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции                            

// Функция осуществляет печать этикеток на устройстве.
//
Функция ПечатьЭтикеток(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ВыходныеПараметрыВрем = Новый Структура(); 
	Если ПолучитьШиринуСтроки(ПараметрыПодключения, Неопределено, ВыходныеПараметрыВрем) Тогда
		ШиринаСтроки = ВыходныеПараметрыВрем.ШиринаСтроки;
	Иначе
		ШиринаСтроки = 32;
	КонецЕсли;
	РазделительВнут = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "-");
	СтрокиТекста = РазделительВнут  + Символы.ПС;
	
	Если ВходныеПараметры.Свойство("Этикетки") Тогда
		Для Каждого Этикетка Из ВходныеПараметры.Этикетки Цикл
			
			Если Этикетка.Свойство("ШапкаЭтикетки") Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(Этикетка.ШапкаЭтикетки) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(Этикетка.ШапкаЭтикетки, НомерСтроки);
					СтрокиТекста = СтрокиТекста + МенеджерОборудованияКлиент.ПостроитьПолеПереносом(ВыделеннаяСтрока, ШиринаСтроки, ,Истина) + Символы.ПС; 
				КонецЦикла;
			КонецЕсли;
			
			Если Этикетка.Свойство("Штрихкод") И Этикетка.Свойство("Штрихкод") Тогда
				СтрокиТекста = СтрокиТекста + "|ШтрихКод|" + Этикетка.ТипШтрихкода + "|" + Этикетка.Штрихкод + Символы.ПС; 
			КонецЕсли;
			
			Если Этикетка.Свойство("ПодвалЭтикетки") Тогда
				Для НомерСтроки = 1 По СтрЧислоСтрок(Этикетка.ПодвалЭтикетки) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(Этикетка.ПодвалЭтикетки, НомерСтроки);
					СтрокиТекста = СтрокиТекста + МенеджерОборудованияКлиент.ПостроитьПолеПереносом(ВыделеннаяСтрока, ШиринаСтроки, ,Истина) + Символы.ПС; 
				КонецЦикла;
			КонецЕсли;
			СтрокиТекста = СтрокиТекста + РазделительВнут + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	ВходныеПараметрыВрем = Новый Структура("СтрокиТекста", СтрокиТекста);
	Возврат ПечатьТекста(ПараметрыПодключения, ВходныеПараметрыВрем, ВыходныеПараметры);
	
КонецФункции  

// Функция получает ширину строки в символах на устройстве.
//  
Функция ПолучитьШиринуСтроки(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ШиринаСтроки") Тогда
		ВыходныеПараметры.Вставить("ШиринаСтроки", ПараметрыПодключения.ШиринаСтроки);
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") 
		И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Или ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		ПараметрыКомандыВыходные = Новый Соответствие;
		ПараметрыКомандыВыходные.Вставить("LineLength",  Неопределено);
		Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "GET_LINE_LENGTH", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
			ВремШиринаСтроки = ПараметрыКомандыВыходные["LineLength"];
			ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32); 
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
			ВыходныеПараметры.Вставить("ШиринаСтроки", ШиринаСтроки);
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Данный тип оборудования не поддерживает данную команду.'"); 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Результат = Ложь;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры настройки драйвера
//
Функция ПолучитьОписаниеДрайвера(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	ПараметрыКомандыВыходные.Вставить("TableParameters",  Неопределено);
	Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "GET_PARAMETERS", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
		ВыходныеПараметры.Вставить("ТаблицаПараметров", ПараметрыКомандыВыходные["TableParameters"]);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию драйвера
//
Функция ПолучитьВерсиюДрайвера(ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	ПараметрыКомандыВыходные = Новый Соответствие;
	ПараметрыКомандыВыходные.Вставить("Version"          ,  Неопределено);
	ПараметрыКомандыВыходные.Вставить("InterfaceRevision",  Неопределено);
	Если ВыполнитьКомандуМобильногоОборудования(ПараметрыПодключения, "GET_VERSION", Неопределено, ПараметрыКомандыВыходные, ВыходныеПараметры) Тогда
		ВыходныеПараметры.Вставить("ВерсияДрайвера"   , ПараметрыКомандыВыходные["Version"]);
		ВыходныеПараметры.Вставить("РевизияИнтерфейса", ПараметрыКомандыВыходные["InterfaceRevision"]);
		Если ПустаяСтрока(ВыходныеПараметры.РевизияИнтерфейса) Тогда
			ВыходныеПараметры.РевизияИнтерфейса = "1000";
		КонецЕсли;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти