
//ВНИМАНИЕ: подробная инструкция расположена в ДО по ссылке: e1cib/data/Справочник.ВнутренниеДокументы?ref=9a0900215e26b50211e6085fcbba860d

Функция ВернутьПараметрыПодключенияКВИБ(УзелПодключения = Неопределено) Экспорт 
	//Найдем в регистре
	СтруктураВозврата = Новый Структура("АдресWSDL,URIПространстваИмен,ИмяСервиса,ИмяТочкиПодключения,ИмяПользователя,Пароль,Таймаут");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УГМК_УзлыПодключенияWEBСервисов.УзелПодключения,
		|	УГМК_УзлыПодключенияWEBСервисов.АдресWSDL,
		|	УГМК_УзлыПодключенияWEBСервисов.URIПространстваИмен,
		|	УГМК_УзлыПодключенияWEBСервисов.ИмяСервиса,
		|	УГМК_УзлыПодключенияWEBСервисов.ИмяТочкиПодключения,
		|	УГМК_УзлыПодключенияWEBСервисов.ИмяПользователя,
		|	УГМК_УзлыПодключенияWEBСервисов.Пароль,
		|	УГМК_УзлыПодключенияWEBСервисов.Таймаут
		|ИЗ
		|	РегистрСведений.УГМК_УзлыПодключенияWEBСервисов КАК УГМК_УзлыПодключенияWEBСервисов
		|ГДЕ
		|	УГМК_УзлыПодключенияWEBСервисов.УзелПодключения = &УзелПодключения";

	Запрос.УстановитьПараметр("УзелПодключения", УзелПодключения);
	Запрос.УстановитьПараметр("УзелПодключенияСтр", Строка( УзелПодключения));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,ВыборкаДетальныеЗаписи);
		Возврат СтруктураВозврата;
	КонецЕсли;

	Если УзелПодключения = "ОАО ""КЗОЦМ""" Тогда
		СтруктураВозврата.АдресWSDL = "http://10.35.3.52/OCM_UPP/ws/ws_Cons.1cws?wsdl";
		//СтруктураВозврата.АдресWSDL = "http://10.35.3.52/copyOCM_UPP/ws/ws_Cons.1cws?wsdl";
		СтруктураВозврата.URIПространстваИмен = "http://v8.1c.ru";
		СтруктураВозврата.ИмяСервиса = "WebСервис_Консолидации";
		СтруктураВозврата.ИмяТочкиПодключения = "WebСервис_КонсолидацииSoap12";
		СтруктураВозврата.ИмяПользователя = "update1c";
		СтруктураВозврата.Пароль = "st7658";
		СтруктураВозврата.Таймаут = 0;
	ИначеЕсли УзелПодключения = "ЗАО ""Кольчугцветмет""" Тогда 
		СтруктураВозврата.АдресWSDL = "http://10.66.3.9:8484/OCM_UPP_webservis/ws/ws_Cons.1cws?wsdl";
		//СтруктураВозврата.АдресWSDL = "http://10.66.3.9:8484/OCM_UPP_webserviscopy/ws/ws_Cons.1cws?wsdl";
		СтруктураВозврата.URIПространстваИмен = "http://v8.1c.ru";
		СтруктураВозврата.ИмяСервиса = "WebСервис_Консолидации";
		СтруктураВозврата.ИмяТочкиПодключения = "WebСервис_КонсолидацииSoap12";
		СтруктураВозврата.ИмяПользователя = "update1c";
		СтруктураВозврата.Пароль = "st7658";
		СтруктураВозврата.Таймаут = 0;
	ИначеЕсли УзелПодключения = "ОАО ""РЗ ОЦМ""" Тогда 
		СтруктураВозврата.АдресWSDL = "http://10.72.3.115:44500/OCM_UPP/ws/ws_Cons.1cws?wsdl";
		//СтруктураВозврата.АдресWSDL = "http://10.72.3.115:44500/copyOCM_UPP/ws/ws_Cons.1cws?wsdl";
		СтруктураВозврата.URIПространстваИмен = "http://v8.1c.ru";
		СтруктураВозврата.ИмяСервиса = "WebСервис_Консолидации";
		СтруктураВозврата.ИмяТочкиПодключения = "WebСервис_КонсолидацииSoap12";
		СтруктураВозврата.ИмяПользователя = "update1c";
		СтруктураВозврата.Пароль = "st7658";
		СтруктураВозврата.Таймаут = 0;
		
	ИначеЕсли УзелПодключения = "ООО ""УГМК-ОЦМ"" "  или УзелПодключения = Неопределено Тогда 
		СтруктураВозврата.АдресWSDL = "http://10.13.3.148:4444/OCM_UPP/ws/ws_Cons.1cws?wsdl";
		//СтруктураВозврата.АдресWSDL = "http://10.13.3.148:4444/copyOCM_UPP/ws/ws_Cons.1cws?wsdl";
		СтруктураВозврата.URIПространстваИмен = "http://v8.1c.ru";
		СтруктураВозврата.ИмяСервиса = "WebСервис_Консолидации";
		СтруктураВозврата.ИмяТочкиПодключения = "WebСервис_КонсолидацииSoap12";
		СтруктураВозврата.ИмяПользователя = "update1c";
		СтруктураВозврата.Пароль = "st7658";
		СтруктураВозврата.Таймаут = 0;
	КонецЕсли; 

	Возврат СтруктураВозврата;
	
КонецФункции // ВернутьПараметрыПодключенияКВИБ()
 
Функция ВернутьWSПроксиПоПараметрам(Знач АдресWSDL, Знач URIПространстваИмен, Знач ИмяСервиса,
	Знач ИмяТочкиПодключения = "", Знач ИмяПользователя, Знач Пароль, Знач Таймаут = Неопределено) Экспорт

	Попытка
		Возврат ОбщегоНазначенияПовтИсп.WSПрокси(
			АдресWSDL,
				URIПространстваИмен,
				ИмяСервиса,
				ИмяТочкиПодключения,
				ИмяПользователя,
				Пароль,
				Таймаут);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	//ОбщегоНазначения.ВнутренняяWSПрокси(
	//Параметры = Новый Массив;
	//Параметры.Добавить(АдресWSDL);
	//Параметры.Добавить(ИмяПользователя);
	//Параметры.Добавить(Пароль);
	//Параметры.Добавить(Таймаут);
	//	
	//WSОпределения = Новый(Тип("WSОпределения"), Параметры);
	//
	//Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
	//	ИмяТочкиПодключения = ИмяСервиса + "Soap";
	//КонецЕсли;
	//
	//Параметры = Новый Массив;
	//Параметры.Добавить(WSОпределения);
	//Параметры.Добавить(URIПространстваИмен);
	//Параметры.Добавить(ИмяСервиса);
	//Параметры.Добавить(ИмяТочкиПодключения);
	//Параметры.Добавить(Таймаут);
	//
	//Прокси = Новый(Тип("WSПрокси"), Параметры);
	//Прокси.Пользователь = ИмяПользователя;
	//Прокси.Пароль = Пароль;
	//
	//Возврат Прокси;	


КонецФункции // ВернутьWSПроксиПоПараметрам()

// Выполняет запрос в web сервисе
//
// Параметры
//  СтруктураЗапроса  - Структура - Структура подготовленного запроса по правилам построителя запроса
//                 
//  УзелПодключения  - Строка - Имя узла подключения 
//                 	Параметры задаются в процедуре  ВернутьПараметрыПодключенияКВИБ(УзелПодключения)
//  СтруктураЗаменяемыхПараметров  - Структура - Ключ - Имя параметра для замены, Значение - ПолноеИмя метаданного На что заменяем 
//                 
//  ИспользоватьТолькоGUID  - Булево - Флаг чтонужен поиск по строгому соответствию GUID 
//                                     без поиска по ключевым полям
//
// Возвращаемое значение:
//   Структура   - Ответ web сервиса
//
Функция ВыполнитьЗапросWEBСервисаНаСервере(СтруктураЗапроса,УзелПодключения = Неопределено,СтруктураЗаменяемыхПараметров = Неопределено,ИспользоватьТолькоGUID = Ложь) Экспорт 
	//ОЦМ Мобильная
	Возврат Неопределено;	
	//Если СтруктураЗапроса = Неопределено тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ПараметрыПрокси = ВернутьПараметрыПодключенияКВИБ(УзелПодключения);
	//
	////Сообщить("Начинаем создавать подключение к сервису " + ТекущаяДата());
	//Прокси = ВернутьWSПроксиПоПараметрам(ПараметрыПрокси.АдресWSDL,
	//		ПараметрыПрокси.URIПространстваИмен,
	//		ПараметрыПрокси.ИмяСервиса,
	//		ПараметрыПрокси.ИмяТочкиПодключения,
	//		ПараметрыПрокси.ИмяПользователя,
	//		ПараметрыПрокси.Пароль,
	//		ПараметрыПрокси.Таймаут);
	//Если Прокси = Неопределено Тогда
	//	ЗаписьЖурналаРегистрации("WEB сервис консолидации. Не удалось соединиться с WEB сервисом",УровеньЖурналаРегистрации.Ошибка,,,,);//Сообщить("Не удалось соединиться с WEB сервисом");
	//	Возврат Неопределено;
	//КонецЕсли; 
	////Сообщить("Установили соединение, начали преобразовывать типы данных параметров " + ТекущаяДата());
	//ПараметрыДляЗапроса = Новый Структура("ТекстЗапроса",СтруктураЗапроса.ТекстЗапроса);
	//
	//Если ТипЗнч( СтруктураЗапроса) = Тип("Структура") тогда
	//	 ПеренестиСвойствоСтруктуры( ПараметрыДляЗапроса, СтруктураЗапроса, "АвтоВыбранныеПоля");
	//КонецЕсли;
	//
	//Если СтруктураЗапроса.Свойство("ИспользуемыеОтборы") Тогда
	//	Если СтруктураЗапроса.ИспользуемыеОтборы.Количество()>0 Тогда
	//		ТаблицаОтборов = ПреобразоватьТаблицуОтборов(СтруктураЗапроса.ИспользуемыеОтборы,СтруктураЗаменяемыхПараметров);
	//		ПараметрыДляЗапроса.Вставить("ИспользуемыеОтборы",ТаблицаОтборов);
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//Если СтруктураЗапроса.Свойство("ИспользуемыеПоля") Тогда
	//	Если СтруктураЗапроса.ИспользуемыеПоля.Количество()>0 Тогда
	//		ПараметрыДляЗапроса.Вставить("ИспользуемыеПоля",СтруктураЗапроса.ИспользуемыеПоля.Скопировать());
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//Если СтруктураЗапроса.Свойство("ИспользуемыеПараметры") Тогда
	//	Если СтруктураЗапроса.ИспользуемыеПараметры.Количество()>0 Тогда
	//		ТаблицаПараметров =  ПреобразоватьТаблицуПараметров(СтруктураЗапроса.ИспользуемыеПараметры,СтруктураЗаменяемыхПараметров);
	//		ПараметрыДляЗапроса.Вставить("ИспользуемыеПараметры",ТаблицаПараметров);
	//	КонецЕсли; 
	//КонецЕсли; 
	////Сообщить("Подготовили параметры передаем в сервис на выполнение " + ТекущаяДата());
	//РезультатЗапроса = Прокси.ОбработкаЗапроса(Новый ХранилищеЗначения(ПараметрыДляЗапроса)).Получить();
	////Сообщить("Результат сервиса получен " + ТекущаяДата());
	//Возврат РезультатЗапроса ;
	//
КонецФункции // ВыполнитьЗапросWEBСервисаНаСервере()

// Преобразует таблицу прараметров из массива ссылок в массив структур
//
// Параметры
//  ИспользуемыеПараметры  - ТаблицаЗначений - Параметры запроса
//
//	СтруктураЗаменяемыхПараметров  - Структура - Ключ - Имя параметра для замены, Значение - На что заменяем
//
//                 
// Возвращаемое значение:
//   ТаблицаЗначений   - Доработанная Таблица со значениями параметров в виде структуры для web сервиса
//
Функция ПреобразоватьТаблицуПараметров(ИспользуемыеПараметры,СтруктураЗаменяемыхПараметров = Неопределено,ИспользоватьТолькоGUID = Ложь)Экспорт 
	
	Если СтруктураЗаменяемыхПараметров = Неопределено Тогда
		СтруктураЗаменяемыхПараметров = Новый Структура;
	КонецЕсли; 
	
	КЭШТиповМетаданных = Неопределено;
	
	ТаблицаПараметров = ИспользуемыеПараметры.Скопировать() ;
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметраВрем");
	Для каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		//УГМК_СлужебныеФункции.ПолноеИмяМетаданныхПоТипу(Объект.ИспользуемыеПараметры.Выгрузить()[2].ЗначениеПараметра);
		Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("СписокЗначений")Тогда 
			//ИмяМетаданныхЗначения = ПолноеИмяМетаданныхПоТипу(СтрокаПараметров.ЗначениеПараметра[0].Значение);
			ИмяМетаданныхЗначения = СоздатьИмяСоставногоТипаИзСпискаЗначений(СтрокаПараметров.ЗначениеПараметра,КЭШТиповМетаданных);
		ИначеЕсли	ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("Массив") Тогда
			//ИмяМетаданныхЗначения = ПолноеИмяМетаданныхПоТипу(СтрокаПараметров.ЗначениеПараметра[0]);
			ИмяМетаданныхЗначения = СоздатьИмяСоставногоТипаИзМассива(СтрокаПараметров.ЗначениеПараметра,КЭШТиповМетаданных);
		Иначе 
			ИмяМетаданныхЗначения = ПолноеИмяМетаданныхПоТипу(СтрокаПараметров.ЗначениеПараметра,КЭШТиповМетаданных);
			Если ИмяМетаданныхЗначения = "ПростойТип" Тогда
				СтрокаПараметров.ЗначениеПараметраВрем = СтрокаПараметров.ЗначениеПараметра;
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		ЗначениеПараметра = СтрокаПараметров.ЗначениеПараметра;
		//создадим структуру параметра
		СтруктураПараметра = Новый Структура;
		Если СтруктураЗаменяемыхПараметров.Свойство(СтрокаПараметров.ИмяПараметра) Тогда
			СтруктураПараметра.Вставить("_Справочник",СтруктураЗаменяемыхПараметров[СтрокаПараметров.ИмяПараметра]);
		Иначе
			СтруктураПараметра.Вставить("_Справочник",ИмяМетаданныхЗначения);
		КонецЕсли; 
		МассивОтбораЗначения = Новый Массив;
		
		ДополнитьМассивЗначенийПараметра(СтрокаПараметров.ЗначениеПараметра,МассивОтбораЗначения,ИспользоватьТолькоGUID);
		
		СтруктураПараметра.Вставить("МассивОтбора",МассивОтбораЗначения);
		СтрокаПараметров.ЗначениеПараметраВрем = СтруктураПараметра ;
	КонецЦикла; 
	ТаблицаПараметров.Колонки.Удалить("ЗначениеПараметра");
	ТаблицаПараметров.Колонки.ЗначениеПараметраВрем.Имя = "ЗначениеПараметра";
	Возврат ТаблицаПараметров;
	
КонецФункции // ПреобразоватьСсылкиПараметровЗапроса()

// Преобразует таблицу отбора из массива ссылок в массив структур
//
// Параметры
//  ИспользуемыеОтборы  - ТаблицаЗначений - Отборы запроса
//
//	СтруктураЗаменяемыхПараметров  - Структура - Ключ - Имя параметра для замены, Значение - На что заменяем
//
//                 
// Возвращаемое значение:
//   ТаблицаЗначений   - Доработанная Таблица со значениями отборов в виде структуры для web сервиса
//
Функция ПреобразоватьТаблицуОтборов(ИспользуемыеОтборы,СтруктураЗаменяемыхПараметров = Неопределено,ИспользоватьТолькоGUID = Ложь)Экспорт 
	
	КЭШТиповМетаданных = Неопределено;
	
	Если СтруктураЗаменяемыхПараметров = Неопределено Тогда
		СтруктураЗаменяемыхПараметров = Новый Структура;
	КонецЕсли; 
	
	ТаблицаОтборов = ИспользуемыеОтборы.Скопировать();
	ТаблицаОтборов.Колонки.Добавить("ВидСравненияВрем",Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаОтборов.Колонки.Добавить("ЗначениеВрем");
	Для каждого СтрокаОтбора Из ТаблицаОтборов Цикл
		Если ТипЗнч(СтрокаОтбора.ТипОтбора) = Тип("ВидСравнения") Тогда
			СтрокаОтбора.ВидСравненияВрем = СтрокаОтбора.ТипОтбора ;
		Иначе 
			СтрокаОтбора.ВидСравненияВрем = ВидСравнения[СтрокаОтбора.ТипОтбора];
		КонецЕсли; 
		Если ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений")Тогда 
			//ИмяМетаданныхЗначения = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПолноеИмяМетаданныхПоТипу(СтрокаОтбора.Значение[0].Значение);
			ИмяМетаданныхЗначения = СоздатьИмяСоставногоТипаИзСпискаЗначений(СтрокаОтбора.Значение,КЭШТиповМетаданных);
		ИначеЕсли	ТипЗнч(СтрокаОтбора.Значение) = Тип("Массив") Тогда
			//ИмяМетаданныхЗначения = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПолноеИмяМетаданныхПоТипу(СтрокаОтбора.Значение[0]);
			ИмяМетаданныхЗначения = СоздатьИмяСоставногоТипаИзМассива(СтрокаОтбора.Значение,КЭШТиповМетаданных);
		Иначе 
			ИмяМетаданныхЗначения = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПолноеИмяМетаданныхПоТипу(СтрокаОтбора.Значение,КЭШТиповМетаданных);
			Если ИмяМетаданныхЗначения = "ПростойТип" Тогда
				СтрокаОтбора.ЗначениеВрем = СтрокаОтбора.Значение;
				СтрокаОтбора.Рассчитывается = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		ЗначениеПараметра = СтрокаОтбора.Значение;
		//создадим структуру параметра
		СтруктураПараметра = Новый Структура;
		Если СтруктураЗаменяемыхПараметров.Свойство(СтрокаОтбора.ИмяОтбора) Тогда
			СтруктураПараметра.Вставить("_Справочник",СтруктураЗаменяемыхПараметров[СтрокаОтбора.ИмяОтбора]);
		Иначе
			СтруктураПараметра.Вставить("_Справочник",ИмяМетаданныхЗначения);
		КонецЕсли; 
		МассивОтбораЗначения = Новый Массив;
		
		ДополнитьМассивЗначенийПараметра(ЗначениеПараметра,МассивОтбораЗначения,ИспользоватьТолькоGUID);
		
		СтруктураПараметра.Вставить("МассивОтбора",МассивОтбораЗначения);
		СтрокаОтбора.ЗначениеВрем = СтруктураПараметра ;
		СтрокаОтбора.Рассчитывается = Истина;
		
	КонецЦикла; 
	ТаблицаОтборов.Колонки.Удалить("Значение");
	ТаблицаОтборов.Колонки.ЗначениеВрем.Имя = "Значение";
	ТаблицаОтборов.Колонки.Удалить("ТипОтбора");
	ТаблицаОтборов.Колонки.ВидСравненияВрем.Имя = "ТипОтбора";
	
	Возврат ТаблицаОтборов;
	
КонецФункции // ПреобразоватьТаблицуОтборов()
 

Функция ДополнитьМассивЗначенийПараметра(ЗначениеПараметра,МассивЗначенийПараметра,ИспользоватьТолькоGUID = ложь) Экспорт 
	Если ТипЗнч(ЗначениеПараметра) = тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из ЗначениеПараметра Цикл
			МассивЗначенийПараметра.Добавить(ВернутьСтруктуруЗначенияОтбораСсылки(ЭлементСписка.Значение,ИспользоватьТолькоGUID));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = тип("Массив") Тогда
		Для каждого ЭлементМассива Из ЗначениеПараметра Цикл
			МассивЗначенийПараметра.Добавить(ВернутьСтруктуруЗначенияОтбораСсылки(ЭлементМассива,ИспользоватьТолькоGUID));
		КонецЦикла;
	Иначе 
		МассивЗначенийПараметра.Добавить(ВернутьСтруктуруЗначенияОтбораСсылки(ЗначениеПараметра,ИспользоватьТолькоGUID));
	КонецЕсли; 
	
	Возврат МассивЗначенийПараметра;
	
КонецФункции // ВернутьСтруктуруСсылочногоПараметра()

Функция ВернутьСтруктуруЗначенияОтбораСсылки(ЗначениеПараметра,ИспользоватьТолькоGUID = Ложь)Экспорт 
	//если нужен только GUID (Для перечислений не действует)
    Если ИспользоватьТолькоGUID и не Метаданные.Перечисления.Содержит(ЗначениеПараметра.Метаданные()) Тогда
		Возврат Новый Структура("УИд_Ссылки" ,ЗначениеПараметра.УникальныйИдентификатор());
	КонецЕсли;
	
	//Создадим структуру поиска по типам объектов
	//БазовыйТип = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЗначениеПараметра.Метаданные());
	ВозвращаемоеЗначение = Неопределено;
	БазовыйТип = ИмяБазовогоТипаПоОбъектуМетаданных(ЗначениеПараметра.Метаданные());
	Если БазовыйТип = "Справочники" 
		или БазовыйТип = "ПланыВидовХарактеристик" 
		или БазовыйТип = "ПланыСчетов" 
		или БазовыйТип = "ПланыВидовРасчета" 
		или БазовыйТип = "ПланыОбмена" Тогда
		Если ЗначениеПараметра.Метаданные().ДлинаКода = 0 Тогда
			Если БазовыйТип = "Справочники" и ЗначениеПараметра.Метаданные().Владельцы.Количество() >0 Тогда
				//подчинен владельцу
				ВозвращаемоеЗначение =  (Новый Структура("Наименование,Владелец",ЗначениеПараметра.Наименование,ЗначениеПараметра.Владелец));
			Иначе
				ВозвращаемоеЗначение =  (Новый Структура("Наименование",ЗначениеПараметра.Наименование));
			КонецЕсли; 
		Иначе 	
			ВозвращаемоеЗначение =  (Новый Структура("Наименование,Код",ЗначениеПараметра.Наименование,ЗначениеПараметра.Код));
		КонецЕсли; 
		ВозвращаемоеЗначение.Вставить("УИд_Ссылки" ,ЗначениеПараметра.УникальныйИдентификатор());
	ИначеЕсли БазовыйТип = "Документы" или БазовыйТип = "БизнесПроцессы" или БазовыйТип = "Задачи" Тогда 
		ВозвращаемоеЗначение =  (Новый Структура("Дата,Номер",ЗначениеПараметра.Дата,ЗначениеПараметра.Номер));
		ВозвращаемоеЗначение.Вставить("УИд_Ссылки" ,ЗначениеПараметра.УникальныйИдентификатор());
	ИначеЕсли БазовыйТип = "Перечисления" Тогда 
		Для каждого ЗначениеПеречисления Из ЗначениеПараметра.Метаданные().ЗначенияПеречисления Цикл
			ИмяЗначенияПеречисления = "";
			Если ЗначениеПеречисления.Синоним = Строка(ЗначениеПараметра) Тогда
				ИмяЗначенияПеречисления = ЗначениеПеречисления.Имя;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если ИмяЗначенияПеречисления = "" Тогда
			ВозвращаемоеЗначение =  Новый Структура("Ссылка","ЗНАЧЕНИЕ(Перечисление."+ЗначениеПараметра.Метаданные().Имя + ".ПустаяСсылка)");
		Иначе 
			ВозвращаемоеЗначение =  Новый Структура("Ссылка","ЗНАЧЕНИЕ(Перечисление."+ЗначениеПараметра.Метаданные().Имя + "." + ИмяЗначенияПеречисления + ")");
		КонецЕсли; 
	КонецЕсли; 
	Возврат ВозвращаемоеЗначение;

КонецФункции // ВернутьСтруктуруЗначенияОтбораСсылки()
 
// Преобразует таблицу результата WEB сервиса к ссылкам текущей базы
//
// Параметры
//  ОтветСервиса  - ТаблицаЗначений - результат WEB сервиса
//
//	СоответствиеПодменыМетаданных  - Соответствие - необязательный - соответствие замен имен метаданных
//						Ключ - ПолноеИмя метаданного в сторонней ИБ, 
//						Значение - ПолноеИмя Метаданного в текущей ИБ
//                 
// Возвращаемое значение:
//   ТаблицаЗначений   - Доработанная Таблица со значениями ссылок текущей ИБ или "Значение не найдено ([GUIDссылки])"
//
Функция ПреобразоватьРезультатКСсылочнымТипам(ОтветСервиса, СоответствиеПодменыМетаданных = Неопределено) Экспорт 
	Если ОтветСервиса = Неопределено тогда
		Возврат( Новый ТаблицаЗначений);
	КонецЕсли;
	
	Если СоответствиеПодменыМетаданных = Неопределено Тогда
		СоответствиеПодменыМетаданных = Новый Соответствие;
	КонецЕсли; 
	//Сообщить("начинаем преобразовывать результат сервиса к ссылкам текущей базы " + ТекущаяДата());
	СписокПолейСсылочногоТипа = ОтветСервиса.МассивИменПолей;
	Если СписокПолейСсылочногоТипа.Количество() = 0 Тогда
		Возврат ОтветСервиса.РезультатЗапроса.Скопировать();
	КонецЕсли; 
	//ПреобразованнаяТаблица = ОтветСервиса.РезультатЗапроса.СкопироватьКолонки();
	ПреобразованнаяТаблица = СоздатьКопиюСтруктурыТаблицы(ОтветСервиса.РезультатЗапроса);
	
	//УГМК++ Пресников Ю.В. Ускорение заполнения
	//Для каждого СтрокаРезультата Из ОтветСервиса.РезультатЗапроса Цикл
	//	НоваяСтрока = ПреобразованнаяТаблица.Добавить(); 
	//	Для каждого КолонкаРезультата Из ОтветСервиса.РезультатЗапроса.Колонки Цикл
	//		Если СписокПолейСсылочногоТипа.Найти(КолонкаРезультата.Имя) = Неопределено Тогда
	//			//это простой тип - копируем значение;
	//			НоваяСтрока[КолонкаРезультата.Имя] = СтрокаРезультата[КолонкаРезультата.Имя];
	//		Иначе
	//			ЗначениеСервиса = СтрокаРезультата[КолонкаРезультата.Имя];
	//			ПреобразованноеЗначение = КэшСоответствий.Получить( ЗначениеСервиса);
	//			Если ПреобразованноеЗначение = Неопределено тогда
	//				ПреобразованноеЗначение = ВернутьСсылукПоИдентификатору( ЗначениеСервиса);
	//				КэшСоответствий.Вставить( ЗначениеСервиса, ПреобразованноеЗначение);
	//			КонецЕсли;
	//			НоваяСтрока[КолонкаРезультата.Имя] = ПреобразованноеЗначение;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла;
	КэшСоответствий = Новый Соответствие;
	Для каждого СтрокаРезультата Из ОтветСервиса.РезультатЗапроса Цикл
		НоваяСтрока = ПреобразованнаяТаблица.Добавить(); 
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаРезультата);
		Для каждого КолонкаРезультата Из СписокПолейСсылочногоТипа Цикл
			ЗначениеСервиса = СтрокаРезультата[КолонкаРезультата];
			ПреобразованноеЗначение = КэшСоответствий.Получить( ЗначениеСервиса);
			Если (ЗначениеСервиса = Неопределено) или (ЗначениеСервиса = Null) тогда
				ПреобразованноеЗначение = ЗначениеСервиса;
			иначеЕсли ПреобразованноеЗначение = Неопределено тогда
				ПреобразованноеЗначение = ВернутьСсылукПоИдентификатору( ЗначениеСервиса, СоответствиеПодменыМетаданных);
				КэшСоответствий.Вставить( ЗначениеСервиса, ПреобразованноеЗначение);
			КонецЕсли;
			НоваяСтрока[КолонкаРезультата] = ПреобразованноеЗначение;
		КонецЦикла; 
	КонецЦикла;
	//Сообщить("Закончили преобразование " + ТекущаяДата());
	Возврат ПреобразованнаяТаблица;

КонецФункции // ПреобразоватьРезультатКСсылочнымТипам()
 
Функция ВернутьСсылукПоИдентификатору(СтроковоеПредставление, СоответствиеПодменыМетаданных)

	СтруктураИмен = Новый Структура("Справочник, Документ, ПланСчетов, ПланВидовХарактеристик, ПланВидовРасчетов,БизнесПроцесс,Задача,ПланОбмена"
									, "Справочники"
									, "Документы"
									, "ПланыСчетов"
									, "ПланыВидовХарактеристик"
									, "ПланыВидовРасчетов"
									, "БизнесПроцессы"
									, "Задачи"
									, "ПланыОбмена");
	
	Позиция = Найти(СтроковоеПредставление, "&&");
	НаименованиеМетаданных = Лев(СтроковоеПредставление, Позиция - 1);
	
	ПолноеИмяЗамены = СоответствиеПодменыМетаданных.Получить(НаименованиеМетаданных);
	Если ПолноеИмяЗамены <> Неопределено Тогда
		НаименованиеМетаданных = ПолноеИмяЗамены;
	КонецЕсли; 
	
	ТекСсылка = Неопределено;
	Для Каждого Запись Из СтруктураИмен Цикл
		КлючПоиска = Запись.Ключ + ".";
		Если СтрЧислоВхождений(НаименованиеМетаданных, КлючПоиска) > 0 Тогда
			ИмяОбъекта    = СтрЗаменить(НаименованиеМетаданных, КлючПоиска, "");
			Попытка
				ТекСсылка    = Вычислить(Запись.Значение + "." + ИмяОбъекта + ".ПолучитьСсылку(Новый УникальныйИдентификатор(""" + Сред(СтроковоеПредставление, Позиция + 2)+ """))");
			Исключение
				Возврат СтроковоеПредставление;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТекСсылка;

КонецФункции // ВернутьСсылукПоИдентификатору()

Функция СоздатьКопиюСтруктурыТаблицы(ИсходнаяТаблица)Экспорт 

	ТаблицаРезультат = Новый ТаблицаЗначений;
	Для каждого КолонкаИсходной Из ИсходнаяТаблица.Колонки Цикл
		ТаблицаРезультат.Колонки.Добавить(КолонкаИсходной.имя);
	КонецЦикла;
	
    Возврат ТаблицаРезультат;
	
КонецФункции // СоздатьКопиюСтруктурыТаблицы()

Процедура ПеренестиСвойствоСтруктуры( Приемник, Источник, Ключ) Экспорт
	Значение = Неопределено;
	Если Источник.Свойство( Ключ, Значение) тогда
		Приемник.Вставить( Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

Функция СоздатьСтруктуруПараметровНаОсновеПостроителяЗапроса(Построитель) Экспорт
	
	СтруктураЗапроса = Новый Структура("ТекстЗапроса",Построитель.Текст);
	
	Если ТипЗнч( Построитель) = Тип("Структура") тогда
		 ПеренестиСвойствоСтруктуры( СтруктураЗапроса, Построитель, "АвтоВыбранныеПоля");
	КонецЕсли;

	Если Построитель.Параметры.Количество() Тогда
		ИспользуемыеПараметры = Новый ТаблицаЗначений;
		ИспользуемыеПараметры.Колонки.Добавить("ИмяПараметра");
		ИспользуемыеПараметры.Колонки.Добавить("ЗначениеПараметра");
		Для каждого ПараметрПостроителя Из Построитель.Параметры Цикл
			НоваяСтрока = ИспользуемыеПараметры.Добавить(); 
			НоваяСтрока.ИмяПараметра = ПараметрПостроителя.Ключ;
			НоваяСтрока.ЗначениеПараметра = ПараметрПостроителя.Значение;
		КонецЦикла;                           
		СтруктураЗапроса.Вставить("ИспользуемыеПараметры",ИспользуемыеПараметры);
	КонецЕсли;
	
	ИспользуемыеОтборы = Новый ТаблицаЗначений;
	ИспользуемыеОтборы.Колонки.Добавить("Значение");
	ИспользуемыеОтборы.Колонки.Добавить("ИмяОтбора");
	ИспользуемыеОтборы.Колонки.Добавить("Рассчитывается");
	ИспользуемыеОтборы.Колонки.Добавить("ТипОтбора");
	ИспользуемыеОтборы.Колонки.Добавить("ПутьКДанным");
	
	Для каждого СтрокаОтбора Из Построитель.Отбор Цикл
		Если не СтрокаОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
        НоваяСтрока = ИспользуемыеОтборы.Добавить();
		НоваяСтрока.ИмяОтбора = СтрокаОтбора.Имя;
		НоваяСтрока.Значение = СтрокаОтбора.Значение;
		НоваяСтрока.ТипОтбора = СтрокаОтбора.ВидСравнения;
		НоваяСтрока.ПутьКДанным = СтрокаОтбора.ПутьКДанным;
		//будет обработана при подготовке параметров
		//ИмяМетаданныхЗначения = УГМК_СлужебныеФункции.ПолноеИмяМетаданныхПоТипу(СтрокаОтбора.Значение);
		//НоваяСтрока.Рассчитывается =  (ИмяМетаданныхЗначения <> "ПростойТип");
	КонецЦикла; 
	Если ИспользуемыеОтборы.Количество() Тогда
		СтруктураЗапроса.Вставить("ИспользуемыеОтборы",ИспользуемыеОтборы);
	КонецЕсли;
	
	Если Построитель.ВыбранныеПоля.Количество() Тогда  
		ИспользуемыеПоля = Новый ТаблицаЗначений;
		ИспользуемыеПоля.Колонки.Добавить("ИмяПоля");
		ИспользуемыеПоля.Колонки.Добавить("ПутьКДанным");
		
		Для каждого ПолеПостроителя Из Построитель.ВыбранныеПоля Цикл
			НоваяСтрока = ИспользуемыеПоля.Добавить();
			НоваяСтрока.ИмяПоля = ПолеПостроителя.Имя;
			НоваяСтрока.ПутьКДанным = ПолеПостроителя.ПутьКДанным;
		КонецЦикла; 
		
		СтруктураЗапроса.Вставить("ИспользуемыеПоля",ИспользуемыеПоля);
	КонецЕсли; 

	Возврат(СтруктураЗапроса);

КонецФункции // СоздатьСтруктуруПараметровНаОсновеПостроителяЗапроса()

Функция СоздатьИмяСоставногоТипаИзМассива(МассивЗначений,КЭШТиповМетаданных)
	МассивИмен = Новый Массив;	
	Для каждого Значение Из МассивЗначений Цикл
		ТекущееИмя = ПолноеИмяМетаданныхПоТипу(Значение,КЭШТиповМетаданных);
		Если МассивИмен.Найти(ТекущееИмя) = Неопределено Тогда
			МассивИмен.Добавить(ТекущееИмя);
		КонецЕсли; 
	КонецЦикла;
	Возврат ПолучитьСтрокуИзМассиваПодстрокДляWEB(МассивИмен,";");
КонецФункции // СоздатьИмяСоставногоТипа()

Функция СоздатьИмяСоставногоТипаИзСпискаЗначений(СписокЗначений,КЭШТиповМетаданных)
	МассивИмен = Новый Массив;	
	Для каждого Значение Из СписокЗначений Цикл
		ТекущееИмя = ПолноеИмяМетаданныхПоТипу(Значение.Значение,КЭШТиповМетаданных);
		Если МассивИмен.Найти(ТекущееИмя) = Неопределено Тогда
			МассивИмен.Добавить(ТекущееИмя);
		КонецЕсли; 
	КонецЦикла;
	Возврат ПолучитьСтрокуИзМассиваПодстрокДляWEB(МассивИмен,";");
КонецФункции // СоздатьИмяСоставногоТипа()

Функция ПолноеИмяМетаданныхПоТипу(Значение,КЭШТиповМетаданных = Неопределено) Экспорт

	Если КЭШТиповМетаданных = Неопределено Тогда
	
		КЭШТиповМетаданных = Новый Соответствие;
	
	КонецЕсли; 
	
	Тип = ТипЗнч(Значение);
	
	Если Тип = Тип("Булево") или Тип = Тип("Число") или Тип = Тип("Строка") или Тип = Тип("Дата") или Значение = Null Или Тип = ТипЗнч(Неопределено) Тогда
		возврат "ПростойТип";
	КонецЕсли; 
	ТипИзКЭШ = КЭШТиповМетаданных.Получить(Тип);
	Если ТипИзКЭШ = Неопределено  Тогда
		Попытка
			Если Тип = Тип("ХранилищеЗначения") Тогда
				МетаданныеЗначенияПолноеИмя = "ХранилищеЗначения";
				КЭШТиповМетаданных.Вставить(Тип,МетаданныеЗначенияПолноеИмя);
				Возврат МетаданныеЗначенияПолноеИмя;
			КонецЕсли; 
			МетаданныеЗначения = Метаданные.НайтиПоТипу(Тип);
		Исключение
			возврат "ПростойТип";
		КонецПопытки;
		МетаданныеЗначенияПолноеИмя = МетаданныеЗначения.ПолноеИмя();
		Если МетаданныеЗначенияПолноеИмя <> Неопределено Тогда
		    КЭШТиповМетаданных.Вставить(Тип,МетаданныеЗначенияПолноеИмя);
		КонецЕсли; 
	Иначе
		МетаданныеЗначенияПолноеИмя = ТипИзКЭШ;
	КонецЕсли; 
	Возврат МетаданныеЗначенияПолноеИмя;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Имена типов.

// Возвращает значение для идентификации общего типа "Регистры сведений"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления"
//
// Тип: Строка
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисления";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Отчеты"
//
// Тип: Строка
//
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат "Отчеты";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Обработки"
//
// Тип: Строка
//
Функция ИмяТипаОбработки() Экспорт
	
	Возврат "Обработки";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы"
//
// Тип: Строка
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы"
//
// Тип: Строка
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов"
//
// Тип: Строка
//
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Последовательности"
//
// Тип: Строка
//
Функция ИмяТипаПоследовательности() Экспорт
	
	Возврат "Последовательности";
	
КонецФункции

// Возвращает значение для идентификации общего типа "РегламентныеЗадания"
//
// Тип: Строка
//
Функция ИмяТипаРегламентныеЗадания() Экспорт
	
	Возврат "РегламентныеЗадания";
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

//Создает начальную структуру данных для запроса в web сервис.
//состав повторяет свойства ПостроительЗапроса
Функция ПодготовитьСтруктуруПостроителя() Экспорт 

	//Создадим подобие построителя отчета
	мПостроитель = Новый Структура("Текст");
	мПостроитель.Вставить("Параметры",Новый Структура);
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("Имя");	
	ТаблицаПолей.Колонки.Добавить("ПутьКДанным");	
	мПостроитель.Вставить("ВыбранныеПоля",ТаблицаПолей);
	ОтборПостроитель =  Новый ТаблицаЗначений;
	ОтборПостроитель.Колонки.Добавить("Имя");
	ОтборПостроитель.Колонки.Добавить("Значение");
	ОтборПостроитель.Колонки.Добавить("ВидСравнения");
	ОтборПостроитель.Колонки.Добавить("ПутьКДанным");
	ОтборПостроитель.Колонки.Добавить("Использование");
 	мПостроитель.Вставить("Отбор",ОтборПостроитель);

	Возврат мПостроитель;

КонецФункции // ПодготовитьСтруктуруПостроителя()

//Создает начальную структуру данных для запроса в web сервис в формате web сервиса.
Функция СоздатьСтруктуруЗапросаДляWEBСервиса() Экспорт
	
	СтруктураЗапроса = Новый Структура("ТекстЗапроса");
	
	ИспользуемыеПараметры = Новый ТаблицаЗначений;
	ИспользуемыеПараметры.Колонки.Добавить("ИмяПараметра");
	ИспользуемыеПараметры.Колонки.Добавить("ЗначениеПараметра");
	СтруктураЗапроса.Вставить("ИспользуемыеПараметры",ИспользуемыеПараметры);
	
	ИспользуемыеОтборы = Новый ТаблицаЗначений;
	ИспользуемыеОтборы.Колонки.Добавить("Значение");
	ИспользуемыеОтборы.Колонки.Добавить("ИмяОтбора");
	ИспользуемыеОтборы.Колонки.Добавить("Рассчитывается");
	ИспользуемыеОтборы.Колонки.Добавить("ТипОтбора");
	ИспользуемыеОтборы.Колонки.Добавить("ПутьКДанным");
	
	СтруктураЗапроса.Вставить("ИспользуемыеОтборы",ИспользуемыеОтборы);
	
	ИспользуемыеПоля = Новый ТаблицаЗначений;
	ИспользуемыеПоля.Колонки.Добавить("ИмяПоля");
	ИспользуемыеПоля.Колонки.Добавить("ПутьКДанным");
	
	
	СтруктураЗапроса.Вставить("ИспользуемыеПоля",ИспользуемыеПоля);

	Возврат(СтруктураЗапроса);

КонецФункции // СоздатьСтруктуруПараметровНаОсновеПостроителяЗапроса()

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрокДляWEB(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрокДляWEB(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет Запрос и заполняет параметр ТаблицаРезультатЗапроса 
//
// Параметры:
//  Организация	- Организация по которой будут получены параметры;
//  Запрос		- Запрос, который надо выполнить;
//  ТаблицаРезультатЗапроса - возвращает таблицу с результатом Запроса
//
// Возвращаемое значение:
//  тип Булево выполнено или нет.
Функция ПолучитьТаблицуWEBСервисомКонсолидации( Организация, Запрос, ТаблицаРезультатЗапроса, ИспользоватьТолькоGUID = Ложь) Экспорт
	ПостроительСтруктурыЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПодготовитьСтруктуруПостроителя();
	ПостроительСтруктурыЗапроса.Текст = Запрос.Текст;
	
	ПостроительСтруктурыЗапроса.Параметры.Очистить();
	Для каждого СтрокаП из Запрос.Параметры цикл
		 ПостроительСтруктурыЗапроса.Параметры.Вставить( СтрокаП.Ключ, СтрокаП.Значение);
	КонецЦикла;
	
	СтруктураЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.СоздатьСтруктуруПараметровНаОсновеПостроителяЗапроса( ПостроительСтруктурыЗапроса);
	СтруктураОтвета = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ВыполнитьЗапросWEBСервисаНаСервере( СтруктураЗапроса, Строка( Организация),,ИспользоватьТолькоGUID);
	ТаблицаРезультатЗапроса = УГМК_ФункцииРаботыСWEBСервисомКонсолидации.ПреобразоватьРезультатКСсылочнымТипам( СтруктураОтвета);
	
	ДанныеПолучены = (ТаблицаРезультатЗапроса.Количество() > 0) или (ТаблицаРезультатЗапроса.Колонки.Количество() > 0);
	
	Возврат ДанныеПолучены;
КонецФункции
