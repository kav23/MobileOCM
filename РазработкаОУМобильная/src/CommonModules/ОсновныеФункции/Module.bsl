Функция ПодключениеКВебСервисуЦентральнойБД(ПараметрДляОтправкиНаСервер, СтруктураПодключения = Неопределено) Экспорт   //Сервер БД
	Если СтруктураПодключения = Неопределено Тогда
		СтруктураПодключения = Константы.НастройкиПодключения.Получить().Получить();
	КонецЕсли;
	
	ВСОпределение = Новый WSОпределения(СтруктураПодключения.Адрес,СтруктураПодключения.Пользователь,СтруктураПодключения.Пароль);
	ВСервис       = ВСОпределение.Сервисы.Получить(СтруктураПодключения.URIПространстваИменСервиса,СтруктураПодключения.ИмяСервиса);
    ВТочкаВхода   = ВСервис.ТочкиПодключения.Получить(СтруктураПодключения.ИмяСервиса + "Soap");
    ВОперация     = ВТочкаВхода.Интерфейс.Операции.Получить(СтруктураПодключения.ИмяФункции);    
    
    ВСПрокси = Новый WSПрокси(ВСОпределение, СтруктураПодключения.URIПространстваИменСервиса,СтруктураПодключения.ИмяСервиса,СтруктураПодключения.ИмяСервиса + "Soap"); 
    ВСПрокси.Пользователь = СтруктураПодключения.Пользователь;
	ВСПрокси.Пароль = СтруктураПодключения.Пароль;
	Ответ = "";
	ПараметрДляОтправкиНаСерверСериализованный = Сериализовать(ПараметрДляОтправкиНаСервер);
	Если СтруктураПодключения.ИмяФункции = "Registration" Тогда
		Ответ = ВСПрокси.Registration(Новый ХранилищеЗначения(ПараметрДляОтправкиНаСерверСериализованный,Новый СжатиеДанных(9)));
	ИначеЕсли СтруктураПодключения.ИмяФункции = "Sync" Тогда
		Ответ = ВСПрокси.Sync(Новый ХранилищеЗначения(ПараметрДляОтправкиНаСерверСериализованный,Новый СжатиеДанных(9)));
	КонецЕсли;

	Возврат Десериализовать(Ответ.Получить());
КонецФункции

Функция ОбработкаОшибок(СтрОшибки) Экспорт
	Если НЕ СтрОшибки.ЕстьОшибка Тогда Возврат Ложь КонецЕсли;
	//тут можно прописать вывод сообщения куда угодно.
	Сообщить(СтрОшибки.ТекстОшибки,СтатусСообщения.ОченьВажное);
	Возврат Истина;
КонецФункции

Функция ПолучитьИнфуОКонфигурации() Экспорт
	СтрКонфы = Новый Структура;
	СтрКонфы.Вставить("Конфигурация", Метаданные.Имя);
	СтрКонфы.Вставить("ВерсияПриложения", Метаданные.Версия);
	СтрКонфы.Вставить("ТекущаяВерсияПриложения", Метаданные.Версия);
	//Проверяем - если константа установленна, т.е. ID уже присвоен, то берем его, иначе - создадим новый
	СтрКонфы.Вставить("ID", ?(ЗначениеЗаполнено(Константы.ID.Получить()),Константы.ID.Получить(),Новый УникальныйИдентификатор));
	Возврат СтрКонфы;
КонецФункции

#Область Сериализация
Функция Сериализовать(ОбъектСериализации) Экспорт
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	Возврат МойXML.Закрыть();
КонецФункции
Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();  
	Возврат ТЗ;
КонецФункции
#КонецОбласти


Функция ЗначениеПоУмолчанию(Пользователь, ВидОперации = "", Настройка = "") Экспорт
	Значение = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УГМК_ЗначенияПоУмолчанию.ID,
	               |	УГМК_ЗначенияПоУмолчанию.Пользователь,
	               |	УГМК_ЗначенияПоУмолчанию.ВидОперации,
	               |	УГМК_ЗначенияПоУмолчанию.Настройка,
	               |	УГМК_ЗначенияПоУмолчанию.Значение
	               |ИЗ
	               |	РегистрСведений.УГМК_ЗначенияПоУмолчанию КАК УГМК_ЗначенияПоУмолчанию
	               |ГДЕ
	               |	УГМК_ЗначенияПоУмолчанию.ID = &ID
	               |	И УГМК_ЗначенияПоУмолчанию.Пользователь = &Пользователь
	               |	И УГМК_ЗначенияПоУмолчанию.Настройка = &Настройка
	               |	И УГМК_ЗначенияПоУмолчанию.ВидОперации = &ВидОперации";
	Запрос.Параметры.Вставить("ID", Константы.ID.Получить());
	Запрос.Параметры.Вставить("Настройка", Настройка); 
	Запрос.Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Параметры.Вставить("ВидОперации", ?(ЗначениеЗаполнено(ВидОперации),ВидОперации,Справочники.УГМК_СостоянияЗаказа.ПустаяСсылка()));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Значение = Выборка.Значение.Получить();
	КонецЕсли;
	Возврат Значение;
КонецФункции

Процедура ЗаписатьЗначениеПоУмолчанию(Пользователь, ВидОперации = "", Настройка = "", Значение) Экспорт
	ID = Константы.ID.Получить();
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	НаборЗаписей = РегистрыСведений.УГМК_ЗначенияПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ID.Установить(ID);
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	НаборЗаписей.Отбор.ВидОперации.Установить(?(ЗначениеЗаполнено(ВидОперации), ВидОперации, Справочники.УГМК_СостоянияЗаказа.ПустаяСсылка()));
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ID = ID;
	НоваяЗапись.Пользователь = ТекущийПользователь;
	НоваяЗапись.Настройка = Настройка;
	НоваяЗапись.ВидОперации = ?(ЗначениеЗаполнено(ВидОперации),ВидОперации,Справочники.УГМК_СостоянияЗаказа.ПустаяСсылка());
	НоваяЗапись.Значение = Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	НаборЗаписей.Записать();
КонецПроцедуры
// ОЦМ Мобильная
//Функция ПолучитьПредставлениеПартии( Знач Партия, ДобавитьТип = Истина) Экспорт
//	Результат = "";
//	Если ЗначениеЗаполнено( Партия) тогда
//		Если ЗначениеЗаполнено( Партия.ДляПредставления) тогда
//			Результат = Партия.ДляПредставления;
//		иначе
//			Результат = Строка( Партия);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДобавитьТип тогда
//		ТипПартии = ТипЗнч( Партия);
//		Если ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПартияСырья") тогда
//			Результат = Результат + " (Сырья)";
//		иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартии") тогда
//			Результат = Результат + " (Партия)";
//		иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_ПаспортПартииСТК") тогда
//			Результат = Результат + " (СТК)";
//		иначеЕсли ТипПартии = Тип("БизнесПроцессСсылка.УГМК_Плавка") тогда
//			Результат = Результат + " (Плавка)";
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат( Результат);
//КонецФункции
