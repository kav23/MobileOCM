
#Область ПрограммныйИнтерфейс

// Устанавливает параметры сеанса
//
Процедура ИнициализироватьПараметрыСеанса() Экспорт
	
	ПараметрыСеанса.АдминистративныйРежим = Ложь;
	ПараметрыСеанса.УведомлениеСканераВключено = Ложь;
	
	//@ УстановитьОриентациюЭкрана();
	
КонецПроцедуры

Процедура ОформитьСуммовыеПоля(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ФорматПоля = ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ФорматРедактирования = ФорматПоля;
		Исключение
		КонецПопытки;
		
		Попытка
			Форма.Элементы[Поле].Формат = ФорматПоля;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьКоличественныеПоля(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ФорматПоля = ЗначениеНастроекПовтИсп.ФорматКоличественныхПолей();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ФорматРедактирования = ФорматПоля;
		Исключение
		КонецПопытки;
		
		Попытка
			Форма.Элементы[Поле].Формат = ФорматПоля;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьШрифт(Форма) Экспорт
	
	Шрифт = ЗначениеНастроекПовтИсп.ШрифтПриложения();
	
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Попытка
			Элемент.Шрифт = Шрифт;
		Исключение
			// у поля нет свойства Шрифт
		КонецПопытки;
		
		Попытка
			Элемент.ШрифтЗаголовка = Шрифт;
		Исключение
			// у поля нет свойства ШрифтЗаголовка
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЦветИнформационныхНадписей(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ЦветИнфоНадписи = ЗначениеНастроекКлиентСерверПовтИсп.ЦветИнформационнойНадписи();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ЦветТекста = ЦветИнфоНадписи;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЦветИтоговыхПолей(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ЦветИтоговойНадписи = ЗначениеНастроекКлиентСерверПовтИсп.ЦветИтоговойНадписи();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ЦветТекста = ЦветИтоговойНадписи;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЦветПолейОшибок(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ЦветИтоговойНадписи = ЗначениеНастроекКлиентСерверПовтИсп.ЦветПоляОшибка();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ЦветТекста = ЦветИтоговойНадписи;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЦветПредупреждающихПолей(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	ЦветИтоговойНадписи = ЗначениеНастроекКлиентСерверПовтИсп.ЦветПредупреждающегоПоля();
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ЦветТекста = ЦветИтоговойНадписи;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПометкуКнопки(Форма, ИмяКнопки, Пометка) Экспорт
	
	Если Пометка Тогда
		ЦветПометкиКнопки = ЗначениеНастроекКлиентСерверПовтИсп.ЦветПометкиКнопки();
	Иначе
		ЦветПометкиКнопки = Новый Цвет;
	КонецЕсли;
	Форма.Элементы[ИмяКнопки].ЦветФона = ЦветПометкиКнопки;
	
КонецПроцедуры

Процедура УстановитьВысотуПоляНаименованиеТовара(Форма, СписокПолейСписка = Неопределено, СписокПолейШапки = Неопределено) Экспорт
	
	ВысотаПоля = ЗначениеНастроекПовтИсп.ВысотаПоляНаименованиеТовара();
	
	Если НЕ СписокПолейСписка = Неопределено Тогда
		
		МассивПолейСписка = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолейСписка,,,Истина);
		
		Для Каждого Поле Из МассивПолейСписка Цикл
			
			Попытка
				Форма.Элементы[Поле].Высота = ВысотаПоля;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СписокПолейШапки = Неопределено Тогда
		
		МассивПолейШапки = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолейШапки,,,Истина);
		
		Для Каждого Поле Из МассивПолейШапки Цикл
			
			Если ВысотаПоля > 1 Тогда
				
				Попытка
					Форма.Элементы[Поле].Высота = ВысотаПоля;
					Форма.Элементы[Поле].МногострочныйРежим = Истина;
				Исключение
				КонецПопытки;
				
			Иначе
				
				Попытка
					Форма.Элементы[Поле].Высота = ВысотаПоля;
					Форма.Элементы[Поле].МногострочныйРежим = Ложь;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьЦветПолей(Форма, СписокПолей) Экспорт
	
	МассивПолей = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей,,,Истина);
	Цвет = Новый Цвет;
	
	Для Каждого Поле Из МассивПолей Цикл
		
		Попытка
			Форма.Элементы[Поле].ЦветТекста = Цвет;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьАдминистративныйРежим(Флаг) Экспорт
	
	ПараметрыСеанса.АдминистративныйРежим = Флаг;
	
КонецПроцедуры

Процедура УстановитьОриентациюЭкрана() Экспорт
	
	#Если МобильноеПриложениеСервер Тогда
		
		МассивИнформации = ПолучитьИнформациюЭкрановКлиента();
		
		Если МассивИнформации[0].Ширина > МассивИнформации[0].Высота Тогда
			ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана = Истина;
		Иначе
			ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана = Ложь;
		КонецЕсли;
		
	#Иначе
		
		ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана = Истина;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ВосстановитьНастройкуПользователя(Настройка, Приемник) Экспорт
	
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		Настройка = Перечисления.НастройкиПользователя[Настройка];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначениеНастроекПользователя.Значение КАК Значение,
		|	ЗначениеНастроекПользователя.ЗначениеХранилище КАК ЗначениеХранилище
		|ИЗ
		|	РегистрСведений.ЗначениеНастроекПользователя КАК ЗначениеНастроекПользователя
		|ГДЕ
		|	ЗначениеНастроекПользователя.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", Настройка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Приемник = Выборка.Значение;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЗначениеХранилище) Тогда
			Приемник = Выборка.ЗначениеХранилище.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Удаляет данные мобильного приложения
//
Процедура ОчиститьБД(ВосстановлениеДанных = Ложь) Экспорт
	
	МассивУдаляемыхСправочников = Новый Массив;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		Если Найти(Справочник.Имя, "Удалить") = 0 Тогда 
			МассивУдаляемыхСправочников.Добавить(Справочник.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВосстановлениеДанных Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементИзМассива(МассивУдаляемыхСправочников, "ВидыАлкогольнойПродукции");
	КонецЕсли;
	
	ПометитьНаУдалениеСправочники(МассивУдаляемыхСправочников, Истина);
	
	МассивУдаляемыхРегистров = Новый Массив;
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		Если Найти(Регистр.Имя, "Удалить") = 0 Тогда
			МассивУдаляемыхРегистров.Добавить(Регистр.Имя);
		КонецЕсли;
	КонецЦикла;
	ОчиститьРегистрыСведений(МассивУдаляемыхРегистров);
	
	МассивУдаляемыхДокументов = Новый Массив;
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Найти(Документ.Имя, "Удалить") = 0 Тогда
			МассивУдаляемыхДокументов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	ПометитьНаУдалениеДокументы(МассивУдаляемыхДокументов,,, Истина);
	
	Константы.ТекущаяВерсияПриложения.Установить(Метаданные.Версия);
	Константы.ОборудованиеПечати.Установить(Неопределено);
	Константы.ОборудованиеСканирования.Установить(Неопределено);
	Константы.ТипУстройстваСканирования.Установить(Неопределено);
	
	Если НЕ ВосстановлениеДанных Тогда
		
		// ПодключаемоеОборудование
		МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
		// Конец ПодключаемоеОборудование
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьКонстантыФормы(Форма, СписокКонстант, Отказ = Ложь) Экспорт
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстант);
	НаборКонстант.Прочитать();
	
	МассивИменКонстант = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКонстант,,,Истина);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		
		Если НЕ НаборКонстант[ИмяКонстанты] = Форма[ИмяКонстанты] Тогда
			НаборКонстант[ИмяКонстанты] = Форма[ИмяКонстанты];
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		Попытка
			НаборКонстант.Записать();
			
			ОбновитьПовторноИспользуемыеЗначения();
			Форма.ОповеститьОбИзмененииЗначенийНастроек = Истина;
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Форма.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеБД(УдалитьДанныеОПродажах, УдалитьПрайсЛист, УдалитьНастройки) Экспорт
	
	МассивУдаляемыхРегистров = Новый Массив;
	МассивУдаляемыхДокументов = Новый Массив;
	МассивУдаляемыхСправочников = Новый Массив;
	МассивУдаляемыхКонстант = Новый Массив;
	
	// Данные о продажах
	Если УдалитьДанныеОПродажах Тогда
		
		Для Каждого Документ Из Метаданные.Документы Цикл
			МассивУдаляемыхДокументов.Добавить(Документ.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	// Прайс-лист
	Если УдалитьПрайсЛист Тогда
		
		МассивУдаляемыхСправочников.Добавить("Номенклатура");
		
		МассивУдаляемыхРегистров.Добавить("Штрихкоды");
		МассивУдаляемыхРегистров.Добавить("УдалитьЦеныНоменклатуры");
		
	КонецЕсли;
	
	// Настройки
	Если УдалитьНастройки Тогда
		
		МассивУдаляемыхСправочников.Добавить("ВидыОплаты");
		МассивУдаляемыхСправочников.Добавить("ДрайверыОборудования");
		МассивУдаляемыхСправочников.Добавить("ПодключаемоеОборудование");
		МассивУдаляемыхСправочников.Добавить("УдалитьОрганизации");
		
		МассивУдаляемыхРегистров.Добавить("ЗначениеНастроекПользователя");
		МассивУдаляемыхРегистров.Добавить("ПолучателиОтчетовПоПочте");
		
		Для Каждого Константа Из Константы Цикл
			
			Если Найти(Строка(Константа), "ТекущаяВерсияПриложения") = 0 Тогда
				Константа.Установить(Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		ПометитьНаУдалениеДокументы(МассивУдаляемыхДокументов,,, Истина);
		ПометитьНаУдалениеСправочники(МассивУдаляемыхСправочников, Истина);
		ОчиститьРегистрыСведений(МассивУдаляемыхРегистров);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьДанныеОПродажахЗаПериод(Период) Экспорт
	
	СпискиДокументов = СпискиДокументовПродажИКассовыхОпераций(Период);
	
	Для Каждого Чек Из СпискиДокументов.Чеки Цикл
		
		УдалитьДокумент(Чек);
		
	КонецЦикла;
	
	Для Каждого ВыемкаВнесение Из СпискиДокументов.ВыемкиИВнесения Цикл
		
		УдалитьДокумент(ВыемкаВнесение);
		
	КонецЦикла;
	
	Для Каждого КассоваяСмена Из СпискиДокументов.КассовыеСмены Цикл
		
		УдалитьДокумент(КассоваяСмена);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СпискиДокументовПродажИКассовыхОпераций(Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК СсылкаКассоваяСмена
	|ПОМЕСТИТЬ КассовыеСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	%УсловиеПоПериоду%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Чек.Ссылка КАК Ссылка
	|ИЗ
	|	КассовыеСмены КАК КассовыеСмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек КАК Чек
	|		ПО КассовыеСмены.СсылкаКассоваяСмена = Чек.КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнесениеИзъятиеНаличных.Ссылка КАК Ссылка
	|ИЗ
	|	КассовыеСмены КАК КассовыеСмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнесениеИзъятиеНаличных КАК ВнесениеИзъятиеНаличных
	|		ПО КассовыеСмены.СсылкаКассоваяСмена = ВнесениеИзъятиеНаличных.КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассовыеСмены.СсылкаКассоваяСмена КАК Ссылка
	|ИЗ
	|	КассовыеСмены КАК КассовыеСмены";
	
	Если Период = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоПериоду%", "ИСТИНА");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоПериоду%", "КассоваяСмена.Дата МЕЖДУ &ДатаС И &ДатаПо");
		Запрос.УстановитьПараметр("ДатаС",  НачалоДня(Период.ДатаНачала));
		Запрос.УстановитьПараметр("ДатаПо", КонецДня(Период.ДатаОкончания));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СпискиДокументов = Новый Структура;
	СпискиДокументов.Вставить("Чеки",            РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СпискиДокументов.Вставить("ВыемкиИВнесения", РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СпискиДокументов.Вставить("КассовыеСмены",   РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СпискиДокументов;

КонецФункции

#КонецОбласти

#Область АдминистративныйРежим

Процедура НастроитьФормуПоАдминистративномуРежиму(Форма, УстановитьРежим = Ложь) Экспорт
	
	Если УстановитьРежим Тогда
		ОбщегоНазначения.ИзменитьАдминистративныйРежим(Форма.АдминистративныйРежим);
	КонецЕсли;
	
	НастроитьДоступностьФлагаАдминистративногоРежима(Форма);
	
	Форма.Элементы.ГруппаАдминистративныйРежим.Видимость = НЕ Форма.АдминистративныйРежим;
	
КонецПроцедуры

Процедура НастроитьДоступностьФлагаАдминистративногоРежима(Форма) Экспорт
	
	Форма.АдминистративныйРежим = ПараметрыСеанса.АдминистративныйРежим;
	ПарольАдминистративногоРежима = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПарольАдминистративногоРежима");
	Форма.Элементы.ФлагАдминистративныйРежим.Доступность = НЕ ЗначениеЗаполнено(ПарольАдминистративногоРежима) ИЛИ Форма.АдминистративныйРежим;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьДокумент(Ссылка)
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.Удалить();
	
КонецПроцедуры

// Помечает на удаление или удаляет объекты справочников информационной базы.
//
// Параметры:
// МассивПомечаемыхСправочников - Массив - массив имен справочников;
// Удалить - Булево - флаг непосредственного удаления объектов.
//
Процедура ПометитьНаУдалениеСправочники(Знач МассивПомечаемыхСправочников, Знач Удалить = Ложь) Экспорт
	
	Для каждого ИмяСправочника Из МассивПомечаемыхСправочников Цикл
		ВыборкаСправочника = Справочники[ИмяСправочника].Выбрать();
		Пока ВыборкаСправочника.Следующий() Цикл
			Объект = ВыборкаСправочника.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Если Не Удалить Тогда
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			Иначе
				Объект.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Помечает на удаление или удаляет документы информационной базы.
//
// Параметры:
// МассивПомечаемыхДокументов - Массив - массив имен документов;
// ДатаНач - Дата - дата начала выборки;
// ДатаКон - Дата - дата окончания выборки ;
// Удалить - Булево - флаг непосредственного удаления объектов.
//
Процедура ПометитьНаУдалениеДокументы(Знач МассивПомечаемыхДокументов, 
	ДатаНач = Неопределено,  ДатаКон = Неопределено, Знач Удалить = Ложь) Экспорт
	
	Для каждого ИмяДокумента Из МассивПомечаемыхДокументов Цикл
		ВыборкаДокумента = Документы[ИмяДокумента].Выбрать(ДатаНач, ДатаКон);
		Пока ВыборкаДокумента.Следующий() Цикл
			Объект = ВыборкаДокумента.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Если Не Удалить Тогда
				Объект.ПометкаУдаления = Истина;
				РежимЗаписи = ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
				Объект.Записать(РежимЗаписи);
			Иначе
				Объект.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Очищает все записи регистра сведений.
// Параметры:
// МассивОчищаемыхРегистров - Массив - массив имен регистров.
Процедура ОчиститьРегистрыСведений(Знач МассивОчищаемыхРегистров) Экспорт
	
	Для каждого ИмяРегистра Из МассивОчищаемыхРегистров Цикл
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПолнотекстовыйПоиск

Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	Если НЕ ПолнотекстовыйПоиск.ИндексАктуален() Тогда
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	[ИмяТаблицы]
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции // ПолучитьОписаниеТиповДаты()

//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;	
	
КонецФункции
